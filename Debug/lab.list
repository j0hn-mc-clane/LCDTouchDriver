
lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d58  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  08005e68  08005e68  00015e68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006008  08006008  000200e0  2**0
                  CONTENTS
  4 .ARM          00000000  08006008  08006008  000200e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006008  08006008  000200e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006008  08006008  00016008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800600c  0800600c  0001600c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  08006010  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  200000e0  080060f0  000200e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  080060f0  00020238  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b1fe  00000000  00000000  00020109  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001df7  00000000  00000000  0002b307  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008f0  00000000  00000000  0002d100  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007f8  00000000  00000000  0002d9f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000050bd  00000000  00000000  0002e1e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00002c45  00000000  00000000  000332a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  00035eea  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002e38  00000000  00000000  00035f68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000e0 	.word	0x200000e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08005e50 	.word	0x08005e50

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000e4 	.word	0x200000e4
 800014c:	08005e50 	.word	0x08005e50

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <LCD_SendCommand>:


//***** Functions prototypes *****//

//1. Write Command to LCD
void LCD_SendCommand(uint8_t com) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60000000) = com;
	uint8_t tmpCmd = com;
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	73fb      	strb	r3, [r7, #15]
	//Set DC HIGH for COMMAND mode
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_RESET);
 8000a86:	4b11      	ldr	r3, [pc, #68]	; (8000acc <LCD_SendCommand+0x54>)
 8000a88:	6818      	ldr	r0, [r3, #0]
 8000a8a:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <LCD_SendCommand+0x58>)
 8000a8c:	881b      	ldrh	r3, [r3, #0]
 8000a8e:	2200      	movs	r2, #0
 8000a90:	4619      	mov	r1, r3
 8000a92:	f002 fa1f 	bl	8002ed4 <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 8000a96:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <LCD_SendCommand+0x5c>)
 8000a98:	6818      	ldr	r0, [r3, #0]
 8000a9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <LCD_SendCommand+0x60>)
 8000a9c:	881b      	ldrh	r3, [r3, #0]
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	f002 fa17 	bl	8002ed4 <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpCmd, 1, 5);
 8000aa6:	f107 010f 	add.w	r1, r7, #15
 8000aaa:	2305      	movs	r3, #5
 8000aac:	2201      	movs	r2, #1
 8000aae:	480b      	ldr	r0, [pc, #44]	; (8000adc <LCD_SendCommand+0x64>)
 8000ab0:	f003 f803 	bl	8003aba <HAL_SPI_Transmit>
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 8000ab4:	4b07      	ldr	r3, [pc, #28]	; (8000ad4 <LCD_SendCommand+0x5c>)
 8000ab6:	6818      	ldr	r0, [r3, #0]
 8000ab8:	4b07      	ldr	r3, [pc, #28]	; (8000ad8 <LCD_SendCommand+0x60>)
 8000aba:	881b      	ldrh	r3, [r3, #0]
 8000abc:	2201      	movs	r2, #1
 8000abe:	4619      	mov	r1, r3
 8000ac0:	f002 fa08 	bl	8002ed4 <HAL_GPIO_WritePin>
}
 8000ac4:	bf00      	nop
 8000ac6:	3710      	adds	r7, #16
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	2000015c 	.word	0x2000015c
 8000ad0:	20000160 	.word	0x20000160
 8000ad4:	20000154 	.word	0x20000154
 8000ad8:	20000158 	.word	0x20000158
 8000adc:	200000fc 	.word	0x200000fc

08000ae0 <LCD_SendData>:

//2. Write data to LCD
void LCD_SendData(uint8_t data) {
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60040000) = data;
	uint8_t tmpCmd = data;
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	73fb      	strb	r3, [r7, #15]
	//Set DC LOW for DATA mode
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
 8000aee:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <LCD_SendData+0x54>)
 8000af0:	6818      	ldr	r0, [r3, #0]
 8000af2:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <LCD_SendData+0x58>)
 8000af4:	881b      	ldrh	r3, [r3, #0]
 8000af6:	2201      	movs	r2, #1
 8000af8:	4619      	mov	r1, r3
 8000afa:	f002 f9eb 	bl	8002ed4 <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 8000afe:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <LCD_SendData+0x5c>)
 8000b00:	6818      	ldr	r0, [r3, #0]
 8000b02:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <LCD_SendData+0x60>)
 8000b04:	881b      	ldrh	r3, [r3, #0]
 8000b06:	2200      	movs	r2, #0
 8000b08:	4619      	mov	r1, r3
 8000b0a:	f002 f9e3 	bl	8002ed4 <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpCmd, 1, 5);
 8000b0e:	f107 010f 	add.w	r1, r7, #15
 8000b12:	2305      	movs	r3, #5
 8000b14:	2201      	movs	r2, #1
 8000b16:	480b      	ldr	r0, [pc, #44]	; (8000b44 <LCD_SendData+0x64>)
 8000b18:	f002 ffcf 	bl	8003aba <HAL_SPI_Transmit>
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 8000b1c:	4b07      	ldr	r3, [pc, #28]	; (8000b3c <LCD_SendData+0x5c>)
 8000b1e:	6818      	ldr	r0, [r3, #0]
 8000b20:	4b07      	ldr	r3, [pc, #28]	; (8000b40 <LCD_SendData+0x60>)
 8000b22:	881b      	ldrh	r3, [r3, #0]
 8000b24:	2201      	movs	r2, #1
 8000b26:	4619      	mov	r1, r3
 8000b28:	f002 f9d4 	bl	8002ed4 <HAL_GPIO_WritePin>
}
 8000b2c:	bf00      	nop
 8000b2e:	3710      	adds	r7, #16
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	2000015c 	.word	0x2000015c
 8000b38:	20000160 	.word	0x20000160
 8000b3c:	20000154 	.word	0x20000154
 8000b40:	20000158 	.word	0x20000158
 8000b44:	200000fc 	.word	0x200000fc

08000b48 <LCD_SendDataMulti>:
//2.2 Write multiple/DMA
void LCD_SendDataMulti(uint16_t Colordata, uint32_t size) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	6039      	str	r1, [r7, #0]
 8000b52:	80fb      	strh	r3, [r7, #6]
	uint8_t colorL, colorH;

	//Set DC LOW for DATA mode
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
 8000b54:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <LCD_SendDataMulti+0x54>)
 8000b56:	6818      	ldr	r0, [r3, #0]
 8000b58:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <LCD_SendDataMulti+0x58>)
 8000b5a:	881b      	ldrh	r3, [r3, #0]
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	4619      	mov	r1, r3
 8000b60:	f002 f9b8 	bl	8002ed4 <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 8000b64:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <LCD_SendDataMulti+0x5c>)
 8000b66:	6818      	ldr	r0, [r3, #0]
 8000b68:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <LCD_SendDataMulti+0x60>)
 8000b6a:	881b      	ldrh	r3, [r3, #0]
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	4619      	mov	r1, r3
 8000b70:	f002 f9b0 	bl	8002ed4 <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&lcdSPIhandle, (uint8_t*) &Colordata, size, 1000);
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	b29a      	uxth	r2, r3
 8000b78:	1db9      	adds	r1, r7, #6
 8000b7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b7e:	480b      	ldr	r0, [pc, #44]	; (8000bac <LCD_SendDataMulti+0x64>)
 8000b80:	f002 ff9b 	bl	8003aba <HAL_SPI_Transmit>
	//Wait for end of DMA transfer
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 8000b84:	4b07      	ldr	r3, [pc, #28]	; (8000ba4 <LCD_SendDataMulti+0x5c>)
 8000b86:	6818      	ldr	r0, [r3, #0]
 8000b88:	4b07      	ldr	r3, [pc, #28]	; (8000ba8 <LCD_SendDataMulti+0x60>)
 8000b8a:	881b      	ldrh	r3, [r3, #0]
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	4619      	mov	r1, r3
 8000b90:	f002 f9a0 	bl	8002ed4 <HAL_GPIO_WritePin>
}
 8000b94:	bf00      	nop
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	2000015c 	.word	0x2000015c
 8000ba0:	20000160 	.word	0x20000160
 8000ba4:	20000154 	.word	0x20000154
 8000ba8:	20000158 	.word	0x20000158
 8000bac:	200000fc 	.word	0x200000fc

08000bb0 <LCD_SetCursorPosition>:

//3. Set cursor position
void LCD_SetCursorPosition(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8000bb0:	b590      	push	{r4, r7, lr}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4604      	mov	r4, r0
 8000bb8:	4608      	mov	r0, r1
 8000bba:	4611      	mov	r1, r2
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	4623      	mov	r3, r4
 8000bc0:	80fb      	strh	r3, [r7, #6]
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	80bb      	strh	r3, [r7, #4]
 8000bc6:	460b      	mov	r3, r1
 8000bc8:	807b      	strh	r3, [r7, #2]
 8000bca:	4613      	mov	r3, r2
 8000bcc:	803b      	strh	r3, [r7, #0]

	LCD_SendCommand(HX8357_CASET);
 8000bce:	202a      	movs	r0, #42	; 0x2a
 8000bd0:	f7ff ff52 	bl	8000a78 <LCD_SendCommand>
	LCD_SendData(x1 >> 8);
 8000bd4:	88fb      	ldrh	r3, [r7, #6]
 8000bd6:	0a1b      	lsrs	r3, r3, #8
 8000bd8:	b29b      	uxth	r3, r3
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff ff7f 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(x1 & 0xFF);
 8000be2:	88fb      	ldrh	r3, [r7, #6]
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff ff7a 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(x2 >> 8);
 8000bec:	887b      	ldrh	r3, [r7, #2]
 8000bee:	0a1b      	lsrs	r3, r3, #8
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff ff73 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(x2 & 0xFF);
 8000bfa:	887b      	ldrh	r3, [r7, #2]
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff ff6e 	bl	8000ae0 <LCD_SendData>

	LCD_SendCommand(HX8357_PASET);
 8000c04:	202b      	movs	r0, #43	; 0x2b
 8000c06:	f7ff ff37 	bl	8000a78 <LCD_SendCommand>
	LCD_SendData(y1 >> 8);
 8000c0a:	88bb      	ldrh	r3, [r7, #4]
 8000c0c:	0a1b      	lsrs	r3, r3, #8
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff ff64 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(y1 & 0xFF);
 8000c18:	88bb      	ldrh	r3, [r7, #4]
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff ff5f 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(y2 >> 8);
 8000c22:	883b      	ldrh	r3, [r7, #0]
 8000c24:	0a1b      	lsrs	r3, r3, #8
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff ff58 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(y2 & 0xFF);
 8000c30:	883b      	ldrh	r3, [r7, #0]
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff ff53 	bl	8000ae0 <LCD_SendData>
	LCD_SendCommand(HX8357_RAMWR);
 8000c3a:	202c      	movs	r0, #44	; 0x2c
 8000c3c:	f7ff ff1c 	bl	8000a78 <LCD_SendCommand>
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd90      	pop	{r4, r7, pc}

08000c48 <LCD_Init>:
//4. Initialise function
void LCD_Init(SPI_HandleTypeDef *spiLcdHandle, GPIO_TypeDef *csPORT,
		uint16_t csPIN, GPIO_TypeDef *dcPORT, uint16_t dcPIN,
		GPIO_TypeDef *resetPORT, uint16_t resetPIN) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	603b      	str	r3, [r7, #0]
 8000c54:	4613      	mov	r3, r2
 8000c56:	80fb      	strh	r3, [r7, #6]
	//Copy SPI settings
	memcpy(&lcdSPIhandle, spiLcdHandle, sizeof(*spiLcdHandle));
 8000c58:	2258      	movs	r2, #88	; 0x58
 8000c5a:	68f9      	ldr	r1, [r7, #12]
 8000c5c:	489e      	ldr	r0, [pc, #632]	; (8000ed8 <LCD_Init+0x290>)
 8000c5e:	f003 f913 	bl	8003e88 <memcpy>
	//CS pin
	tftCS_GPIO = csPORT;
 8000c62:	4a9e      	ldr	r2, [pc, #632]	; (8000edc <LCD_Init+0x294>)
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	6013      	str	r3, [r2, #0]
	tftCS_PIN = csPIN;
 8000c68:	4a9d      	ldr	r2, [pc, #628]	; (8000ee0 <LCD_Init+0x298>)
 8000c6a:	88fb      	ldrh	r3, [r7, #6]
 8000c6c:	8013      	strh	r3, [r2, #0]
	//DC pin
	tftDC_GPIO = dcPORT;
 8000c6e:	4a9d      	ldr	r2, [pc, #628]	; (8000ee4 <LCD_Init+0x29c>)
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	6013      	str	r3, [r2, #0]
	tftDC_PIN = dcPIN;
 8000c74:	4a9c      	ldr	r2, [pc, #624]	; (8000ee8 <LCD_Init+0x2a0>)
 8000c76:	8b3b      	ldrh	r3, [r7, #24]
 8000c78:	8013      	strh	r3, [r2, #0]
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 8000c7a:	4b98      	ldr	r3, [pc, #608]	; (8000edc <LCD_Init+0x294>)
 8000c7c:	6818      	ldr	r0, [r3, #0]
 8000c7e:	4b98      	ldr	r3, [pc, #608]	; (8000ee0 <LCD_Init+0x298>)
 8000c80:	881b      	ldrh	r3, [r3, #0]
 8000c82:	2201      	movs	r2, #1
 8000c84:	4619      	mov	r1, r3
 8000c86:	f002 f925 	bl	8002ed4 <HAL_GPIO_WritePin>
	//RESET pin
	tftRESET_GPIO = resetPORT;
 8000c8a:	4a98      	ldr	r2, [pc, #608]	; (8000eec <LCD_Init+0x2a4>)
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	6013      	str	r3, [r2, #0]
	tftRESET_PIN = resetPIN;
 8000c90:	4a97      	ldr	r2, [pc, #604]	; (8000ef0 <LCD_Init+0x2a8>)
 8000c92:	8c3b      	ldrh	r3, [r7, #32]
 8000c94:	8013      	strh	r3, [r2, #0]
	HAL_GPIO_WritePin(resetPORT, resetPIN, GPIO_PIN_SET);  //Turn LCD ON
 8000c96:	8c3b      	ldrh	r3, [r7, #32]
 8000c98:	2201      	movs	r2, #1
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	69f8      	ldr	r0, [r7, #28]
 8000c9e:	f002 f919 	bl	8002ed4 <HAL_GPIO_WritePin>

	LCD_SendCommand(HX8357_SWRESET);
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	f7ff fee8 	bl	8000a78 <LCD_SendCommand>
	LCD_SendCommand(0x80);
 8000ca8:	2080      	movs	r0, #128	; 0x80
 8000caa:	f7ff fee5 	bl	8000a78 <LCD_SendCommand>
	HAL_Delay(10);
 8000cae:	200a      	movs	r0, #10
 8000cb0:	f001 fa74 	bl	800219c <HAL_Delay>
	LCD_SendCommand(HX8357D_SETC);
 8000cb4:	20b9      	movs	r0, #185	; 0xb9
 8000cb6:	f7ff fedf 	bl	8000a78 <LCD_SendCommand>
	LCD_SendData(0xFF);
 8000cba:	20ff      	movs	r0, #255	; 0xff
 8000cbc:	f7ff ff10 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x83);
 8000cc0:	2083      	movs	r0, #131	; 0x83
 8000cc2:	f7ff ff0d 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x57);
 8000cc6:	2057      	movs	r0, #87	; 0x57
 8000cc8:	f7ff ff0a 	bl	8000ae0 <LCD_SendData>
	LCD_SendCommand(0xFF);
 8000ccc:	20ff      	movs	r0, #255	; 0xff
 8000cce:	f7ff fed3 	bl	8000a78 <LCD_SendCommand>
	LCD_SendCommand(0x80);
 8000cd2:	2080      	movs	r0, #128	; 0x80
 8000cd4:	f7ff fed0 	bl	8000a78 <LCD_SendCommand>
	HAL_Delay(300);
 8000cd8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000cdc:	f001 fa5e 	bl	800219c <HAL_Delay>
	LCD_SendCommand(HX8357_SETRGB);
 8000ce0:	20b3      	movs	r0, #179	; 0xb3
 8000ce2:	f7ff fec9 	bl	8000a78 <LCD_SendCommand>
	LCD_SendData(0x80);
 8000ce6:	2080      	movs	r0, #128	; 0x80
 8000ce8:	f7ff fefa 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x00);
 8000cec:	2000      	movs	r0, #0
 8000cee:	f7ff fef7 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x06);
 8000cf2:	2006      	movs	r0, #6
 8000cf4:	f7ff fef4 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x06);
 8000cf8:	2006      	movs	r0, #6
 8000cfa:	f7ff fef1 	bl	8000ae0 <LCD_SendData>
	LCD_SendCommand(HX8357D_SETCOM);
 8000cfe:	20b6      	movs	r0, #182	; 0xb6
 8000d00:	f7ff feba 	bl	8000a78 <LCD_SendCommand>
	LCD_SendData(0x25);
 8000d04:	2025      	movs	r0, #37	; 0x25
 8000d06:	f7ff feeb 	bl	8000ae0 <LCD_SendData>
	LCD_SendCommand(HX8357_SETOSC);
 8000d0a:	20b0      	movs	r0, #176	; 0xb0
 8000d0c:	f7ff feb4 	bl	8000a78 <LCD_SendCommand>
	LCD_SendData(0x68);
 8000d10:	2068      	movs	r0, #104	; 0x68
 8000d12:	f7ff fee5 	bl	8000ae0 <LCD_SendData>
	LCD_SendCommand(HX8357_SETPANEL);
 8000d16:	20cc      	movs	r0, #204	; 0xcc
 8000d18:	f7ff feae 	bl	8000a78 <LCD_SendCommand>
	LCD_SendData(0x05);
 8000d1c:	2005      	movs	r0, #5
 8000d1e:	f7ff fedf 	bl	8000ae0 <LCD_SendData>
	LCD_SendCommand(HX8357_SETPWR1);
 8000d22:	20b1      	movs	r0, #177	; 0xb1
 8000d24:	f7ff fea8 	bl	8000a78 <LCD_SendCommand>
	LCD_SendData(0x00);
 8000d28:	2000      	movs	r0, #0
 8000d2a:	f7ff fed9 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x15);
 8000d2e:	2015      	movs	r0, #21
 8000d30:	f7ff fed6 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x1C);
 8000d34:	201c      	movs	r0, #28
 8000d36:	f7ff fed3 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x1C);
 8000d3a:	201c      	movs	r0, #28
 8000d3c:	f7ff fed0 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x83);
 8000d40:	2083      	movs	r0, #131	; 0x83
 8000d42:	f7ff fecd 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0xAA);
 8000d46:	20aa      	movs	r0, #170	; 0xaa
 8000d48:	f7ff feca 	bl	8000ae0 <LCD_SendData>
	LCD_SendCommand(HX8357D_SETSTBA);
 8000d4c:	20c0      	movs	r0, #192	; 0xc0
 8000d4e:	f7ff fe93 	bl	8000a78 <LCD_SendCommand>
	LCD_SendData(0x50);
 8000d52:	2050      	movs	r0, #80	; 0x50
 8000d54:	f7ff fec4 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x50);
 8000d58:	2050      	movs	r0, #80	; 0x50
 8000d5a:	f7ff fec1 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x01);
 8000d5e:	2001      	movs	r0, #1
 8000d60:	f7ff febe 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x3C);
 8000d64:	203c      	movs	r0, #60	; 0x3c
 8000d66:	f7ff febb 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x1E);
 8000d6a:	201e      	movs	r0, #30
 8000d6c:	f7ff feb8 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x08);
 8000d70:	2008      	movs	r0, #8
 8000d72:	f7ff feb5 	bl	8000ae0 <LCD_SendData>
	LCD_SendCommand(HX8357D_SETCYC);
 8000d76:	20b4      	movs	r0, #180	; 0xb4
 8000d78:	f7ff fe7e 	bl	8000a78 <LCD_SendCommand>
	LCD_SendData(0x02);
 8000d7c:	2002      	movs	r0, #2
 8000d7e:	f7ff feaf 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x40);
 8000d82:	2040      	movs	r0, #64	; 0x40
 8000d84:	f7ff feac 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x00);
 8000d88:	2000      	movs	r0, #0
 8000d8a:	f7ff fea9 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x2A);
 8000d8e:	202a      	movs	r0, #42	; 0x2a
 8000d90:	f7ff fea6 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x2A);
 8000d94:	202a      	movs	r0, #42	; 0x2a
 8000d96:	f7ff fea3 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x0D);
 8000d9a:	200d      	movs	r0, #13
 8000d9c:	f7ff fea0 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x78);
 8000da0:	2078      	movs	r0, #120	; 0x78
 8000da2:	f7ff fe9d 	bl	8000ae0 <LCD_SendData>
	LCD_SendCommand(HX8357D_SETGAMMA);
 8000da6:	20e0      	movs	r0, #224	; 0xe0
 8000da8:	f7ff fe66 	bl	8000a78 <LCD_SendCommand>

	LCD_SendData(0x02);
 8000dac:	2002      	movs	r0, #2
 8000dae:	f7ff fe97 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x0A);
 8000db2:	200a      	movs	r0, #10
 8000db4:	f7ff fe94 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x11);
 8000db8:	2011      	movs	r0, #17
 8000dba:	f7ff fe91 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x1D);
 8000dbe:	201d      	movs	r0, #29
 8000dc0:	f7ff fe8e 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x23);
 8000dc4:	2023      	movs	r0, #35	; 0x23
 8000dc6:	f7ff fe8b 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x35);
 8000dca:	2035      	movs	r0, #53	; 0x35
 8000dcc:	f7ff fe88 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x41);
 8000dd0:	2041      	movs	r0, #65	; 0x41
 8000dd2:	f7ff fe85 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x4b);
 8000dd6:	204b      	movs	r0, #75	; 0x4b
 8000dd8:	f7ff fe82 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x4b);
 8000ddc:	204b      	movs	r0, #75	; 0x4b
 8000dde:	f7ff fe7f 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x42);
 8000de2:	2042      	movs	r0, #66	; 0x42
 8000de4:	f7ff fe7c 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x3A);
 8000de8:	203a      	movs	r0, #58	; 0x3a
 8000dea:	f7ff fe79 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x27);
 8000dee:	2027      	movs	r0, #39	; 0x27
 8000df0:	f7ff fe76 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x1B);
 8000df4:	201b      	movs	r0, #27
 8000df6:	f7ff fe73 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x08);
 8000dfa:	2008      	movs	r0, #8
 8000dfc:	f7ff fe70 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x09);
 8000e00:	2009      	movs	r0, #9
 8000e02:	f7ff fe6d 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x03);
 8000e06:	2003      	movs	r0, #3
 8000e08:	f7ff fe6a 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x02);
 8000e0c:	2002      	movs	r0, #2
 8000e0e:	f7ff fe67 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x0A);
 8000e12:	200a      	movs	r0, #10
 8000e14:	f7ff fe64 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x11);
 8000e18:	2011      	movs	r0, #17
 8000e1a:	f7ff fe61 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x1d);
 8000e1e:	201d      	movs	r0, #29
 8000e20:	f7ff fe5e 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x23);
 8000e24:	2023      	movs	r0, #35	; 0x23
 8000e26:	f7ff fe5b 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x35);
 8000e2a:	2035      	movs	r0, #53	; 0x35
 8000e2c:	f7ff fe58 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x41);
 8000e30:	2041      	movs	r0, #65	; 0x41
 8000e32:	f7ff fe55 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x4b);
 8000e36:	204b      	movs	r0, #75	; 0x4b
 8000e38:	f7ff fe52 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x4b);
 8000e3c:	204b      	movs	r0, #75	; 0x4b
 8000e3e:	f7ff fe4f 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x42);
 8000e42:	2042      	movs	r0, #66	; 0x42
 8000e44:	f7ff fe4c 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x3A);
 8000e48:	203a      	movs	r0, #58	; 0x3a
 8000e4a:	f7ff fe49 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x27);
 8000e4e:	2027      	movs	r0, #39	; 0x27
 8000e50:	f7ff fe46 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x1B);
 8000e54:	201b      	movs	r0, #27
 8000e56:	f7ff fe43 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x08);
 8000e5a:	2008      	movs	r0, #8
 8000e5c:	f7ff fe40 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x09);
 8000e60:	2009      	movs	r0, #9
 8000e62:	f7ff fe3d 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x03);
 8000e66:	2003      	movs	r0, #3
 8000e68:	f7ff fe3a 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x00);
 8000e6c:	2000      	movs	r0, #0
 8000e6e:	f7ff fe37 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x01);
 8000e72:	2001      	movs	r0, #1
 8000e74:	f7ff fe34 	bl	8000ae0 <LCD_SendData>

	LCD_SendCommand(HX8357_COLMOD);
 8000e78:	203a      	movs	r0, #58	; 0x3a
 8000e7a:	f7ff fdfd 	bl	8000a78 <LCD_SendCommand>
	LCD_SendData(0x55);
 8000e7e:	2055      	movs	r0, #85	; 0x55
 8000e80:	f7ff fe2e 	bl	8000ae0 <LCD_SendData>
	LCD_SendCommand(HX8357_MADCTL);
 8000e84:	2036      	movs	r0, #54	; 0x36
 8000e86:	f7ff fdf7 	bl	8000a78 <LCD_SendCommand>
	LCD_SendData(0xC0);
 8000e8a:	20c0      	movs	r0, #192	; 0xc0
 8000e8c:	f7ff fe28 	bl	8000ae0 <LCD_SendData>
	LCD_SendCommand(HX8357_TEON);
 8000e90:	2035      	movs	r0, #53	; 0x35
 8000e92:	f7ff fdf1 	bl	8000a78 <LCD_SendCommand>
	LCD_SendData(0x00);
 8000e96:	2000      	movs	r0, #0
 8000e98:	f7ff fe22 	bl	8000ae0 <LCD_SendData>
	LCD_SendCommand(HX8357_TEARLINE);
 8000e9c:	2044      	movs	r0, #68	; 0x44
 8000e9e:	f7ff fdeb 	bl	8000a78 <LCD_SendCommand>
	LCD_SendDataMulti(0x00, 0x02);
 8000ea2:	2102      	movs	r1, #2
 8000ea4:	2000      	movs	r0, #0
 8000ea6:	f7ff fe4f 	bl	8000b48 <LCD_SendDataMulti>
	LCD_SendCommand(HX8357_SLPOUT);
 8000eaa:	2011      	movs	r0, #17
 8000eac:	f7ff fde4 	bl	8000a78 <LCD_SendCommand>
	LCD_SendCommand(0x80);
 8000eb0:	2080      	movs	r0, #128	; 0x80
 8000eb2:	f7ff fde1 	bl	8000a78 <LCD_SendCommand>
	HAL_Delay(150);
 8000eb6:	2096      	movs	r0, #150	; 0x96
 8000eb8:	f001 f970 	bl	800219c <HAL_Delay>
	LCD_SendCommand(HX8357_DISPON);
 8000ebc:	2029      	movs	r0, #41	; 0x29
 8000ebe:	f7ff fddb 	bl	8000a78 <LCD_SendCommand>
	LCD_SendCommand(0x80);
 8000ec2:	2080      	movs	r0, #128	; 0x80
 8000ec4:	f7ff fdd8 	bl	8000a78 <LCD_SendCommand>
	HAL_Delay(50);
 8000ec8:	2032      	movs	r0, #50	; 0x32
 8000eca:	f001 f967 	bl	800219c <HAL_Delay>
}
 8000ece:	bf00      	nop
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	200000fc 	.word	0x200000fc
 8000edc:	20000154 	.word	0x20000154
 8000ee0:	20000158 	.word	0x20000158
 8000ee4:	2000015c 	.word	0x2000015c
 8000ee8:	20000160 	.word	0x20000160
 8000eec:	20000164 	.word	0x20000164
 8000ef0:	20000168 	.word	0x20000168

08000ef4 <LCD_DrawPixel>:

//5. Write data to a single pixel
void LCD_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	80fb      	strh	r3, [r7, #6]
 8000efe:	460b      	mov	r3, r1
 8000f00:	80bb      	strh	r3, [r7, #4]
 8000f02:	4613      	mov	r3, r2
 8000f04:	807b      	strh	r3, [r7, #2]
	LCD_SetCursorPosition(x, y, x, y);
 8000f06:	88bb      	ldrh	r3, [r7, #4]
 8000f08:	88fa      	ldrh	r2, [r7, #6]
 8000f0a:	88b9      	ldrh	r1, [r7, #4]
 8000f0c:	88f8      	ldrh	r0, [r7, #6]
 8000f0e:	f7ff fe4f 	bl	8000bb0 <LCD_SetCursorPosition>
	LCD_SendData(color >> 8);
 8000f12:	887b      	ldrh	r3, [r7, #2]
 8000f14:	0a1b      	lsrs	r3, r3, #8
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff fde0 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(color & 0xFF);
 8000f20:	887b      	ldrh	r3, [r7, #2]
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff fddb 	bl	8000ae0 <LCD_SendData>
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <LCD_Fill>:
//6. Fill the entire screen with a background color
void LCD_Fill(uint16_t color) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	80fb      	strh	r3, [r7, #6]
	uint32_t n = LCD_PIXEL_COUNT;
 8000f3e:	f44f 3316 	mov.w	r3, #153600	; 0x25800
 8000f42:	60fb      	str	r3, [r7, #12]
	uint16_t myColor = 0xFF;
 8000f44:	23ff      	movs	r3, #255	; 0xff
 8000f46:	817b      	strh	r3, [r7, #10]

	if (rotationNum == 1 || rotationNum == 3) {
 8000f48:	4b1b      	ldr	r3, [pc, #108]	; (8000fb8 <LCD_Fill+0x84>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d003      	beq.n	8000f58 <LCD_Fill+0x24>
 8000f50:	4b19      	ldr	r3, [pc, #100]	; (8000fb8 <LCD_Fill+0x84>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	2b03      	cmp	r3, #3
 8000f56:	d108      	bne.n	8000f6a <LCD_Fill+0x36>
		LCD_SetCursorPosition(0, 0, HX8357_TFTWIDTH - 1, HX8357_TFTHEIGHT - 1);
 8000f58:	f240 13df 	movw	r3, #479	; 0x1df
 8000f5c:	f240 123f 	movw	r2, #319	; 0x13f
 8000f60:	2100      	movs	r1, #0
 8000f62:	2000      	movs	r0, #0
 8000f64:	f7ff fe24 	bl	8000bb0 <LCD_SetCursorPosition>
 8000f68:	e00f      	b.n	8000f8a <LCD_Fill+0x56>
	} else if (rotationNum == 2 || rotationNum == 4) {
 8000f6a:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <LCD_Fill+0x84>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	d003      	beq.n	8000f7a <LCD_Fill+0x46>
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <LCD_Fill+0x84>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	2b04      	cmp	r3, #4
 8000f78:	d117      	bne.n	8000faa <LCD_Fill+0x76>
		LCD_SetCursorPosition(0, 0, HX8357_TFTHEIGHT - 1, HX8357_TFTWIDTH - 1);
 8000f7a:	f240 133f 	movw	r3, #319	; 0x13f
 8000f7e:	f240 12df 	movw	r2, #479	; 0x1df
 8000f82:	2100      	movs	r1, #0
 8000f84:	2000      	movs	r0, #0
 8000f86:	f7ff fe13 	bl	8000bb0 <LCD_SetCursorPosition>
	}

	while (n) {
 8000f8a:	e00e      	b.n	8000faa <LCD_Fill+0x76>
		n--;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	60fb      	str	r3, [r7, #12]
		LCD_SendData(color >> 8);
 8000f92:	88fb      	ldrh	r3, [r7, #6]
 8000f94:	0a1b      	lsrs	r3, r3, #8
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff fda0 	bl	8000ae0 <LCD_SendData>
		LCD_SendData(color & 0xff);
 8000fa0:	88fb      	ldrh	r3, [r7, #6]
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fd9b 	bl	8000ae0 <LCD_SendData>
	while (n) {
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d1ed      	bne.n	8000f8c <LCD_Fill+0x58>
	}
}
 8000fb0:	bf00      	nop
 8000fb2:	3710      	adds	r7, #16
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000000 	.word	0x20000000

08000fbc <LCD_Fill_Rect>:
//7. Rectangle drawing functions
void LCD_Fill_Rect(unsigned int x0, unsigned int y0, unsigned int x1,
		unsigned int y1, uint16_t color) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
 8000fc8:	603b      	str	r3, [r7, #0]
	uint32_t n = ((x1 + 1) - x0) * ((y1 + 1) - y0);
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	6839      	ldr	r1, [r7, #0]
 8000fd4:	68ba      	ldr	r2, [r7, #8]
 8000fd6:	1a8a      	subs	r2, r1, r2
 8000fd8:	3201      	adds	r2, #1
 8000fda:	fb02 f303 	mul.w	r3, r2, r3
 8000fde:	617b      	str	r3, [r7, #20]
	if (n > LCD_PIXEL_COUNT)
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	f5b3 3f16 	cmp.w	r3, #153600	; 0x25800
 8000fe6:	d902      	bls.n	8000fee <LCD_Fill_Rect+0x32>
		n = LCD_PIXEL_COUNT;
 8000fe8:	f44f 3316 	mov.w	r3, #153600	; 0x25800
 8000fec:	617b      	str	r3, [r7, #20]
	LCD_SetCursorPosition(x0, y0, x1, y1);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	b298      	uxth	r0, r3
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	b299      	uxth	r1, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	b29a      	uxth	r2, r3
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	f7ff fdd7 	bl	8000bb0 <LCD_SetCursorPosition>
	while (n) {
 8001002:	e00e      	b.n	8001022 <LCD_Fill_Rect+0x66>
		n--;
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	3b01      	subs	r3, #1
 8001008:	617b      	str	r3, [r7, #20]
		LCD_SendData(color >> 8);
 800100a:	8c3b      	ldrh	r3, [r7, #32]
 800100c:	0a1b      	lsrs	r3, r3, #8
 800100e:	b29b      	uxth	r3, r3
 8001010:	b2db      	uxtb	r3, r3
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff fd64 	bl	8000ae0 <LCD_SendData>
		LCD_SendData(color & 0xff);
 8001018:	8c3b      	ldrh	r3, [r7, #32]
 800101a:	b2db      	uxtb	r3, r3
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff fd5f 	bl	8000ae0 <LCD_SendData>
	while (n) {
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d1ed      	bne.n	8001004 <LCD_Fill_Rect+0x48>
	}
}
 8001028:	bf00      	nop
 800102a:	3718      	adds	r7, #24
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <LCD_drawCircle>:

//8. Circle drawing functions
void LCD_drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 8001030:	b590      	push	{r4, r7, lr}
 8001032:	b087      	sub	sp, #28
 8001034:	af00      	add	r7, sp, #0
 8001036:	4604      	mov	r4, r0
 8001038:	4608      	mov	r0, r1
 800103a:	4611      	mov	r1, r2
 800103c:	461a      	mov	r2, r3
 800103e:	4623      	mov	r3, r4
 8001040:	80fb      	strh	r3, [r7, #6]
 8001042:	4603      	mov	r3, r0
 8001044:	80bb      	strh	r3, [r7, #4]
 8001046:	460b      	mov	r3, r1
 8001048:	807b      	strh	r3, [r7, #2]
 800104a:	4613      	mov	r3, r2
 800104c:	803b      	strh	r3, [r7, #0]
	int16_t f = 1 - r;
 800104e:	887b      	ldrh	r3, [r7, #2]
 8001050:	f1c3 0301 	rsb	r3, r3, #1
 8001054:	b29b      	uxth	r3, r3
 8001056:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8001058:	2301      	movs	r3, #1
 800105a:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 800105c:	887b      	ldrh	r3, [r7, #2]
 800105e:	461a      	mov	r2, r3
 8001060:	03d2      	lsls	r2, r2, #15
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	b29b      	uxth	r3, r3
 8001068:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 800106e:	887b      	ldrh	r3, [r7, #2]
 8001070:	81fb      	strh	r3, [r7, #14]

	LCD_DrawPixel(x0, y0 + r, color);
 8001072:	88f8      	ldrh	r0, [r7, #6]
 8001074:	88ba      	ldrh	r2, [r7, #4]
 8001076:	887b      	ldrh	r3, [r7, #2]
 8001078:	4413      	add	r3, r2
 800107a:	b29b      	uxth	r3, r3
 800107c:	883a      	ldrh	r2, [r7, #0]
 800107e:	4619      	mov	r1, r3
 8001080:	f7ff ff38 	bl	8000ef4 <LCD_DrawPixel>
	LCD_DrawPixel(x0, y0 - r, color);
 8001084:	88f8      	ldrh	r0, [r7, #6]
 8001086:	88ba      	ldrh	r2, [r7, #4]
 8001088:	887b      	ldrh	r3, [r7, #2]
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	b29b      	uxth	r3, r3
 800108e:	883a      	ldrh	r2, [r7, #0]
 8001090:	4619      	mov	r1, r3
 8001092:	f7ff ff2f 	bl	8000ef4 <LCD_DrawPixel>
	LCD_DrawPixel(x0 + r, y0, color);
 8001096:	88fa      	ldrh	r2, [r7, #6]
 8001098:	887b      	ldrh	r3, [r7, #2]
 800109a:	4413      	add	r3, r2
 800109c:	b29b      	uxth	r3, r3
 800109e:	88b9      	ldrh	r1, [r7, #4]
 80010a0:	883a      	ldrh	r2, [r7, #0]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff ff26 	bl	8000ef4 <LCD_DrawPixel>
	LCD_DrawPixel(x0 - r, y0, color);
 80010a8:	88fa      	ldrh	r2, [r7, #6]
 80010aa:	887b      	ldrh	r3, [r7, #2]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	88b9      	ldrh	r1, [r7, #4]
 80010b2:	883a      	ldrh	r2, [r7, #0]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff1d 	bl	8000ef4 <LCD_DrawPixel>

	while (x < y) {
 80010ba:	e081      	b.n	80011c0 <LCD_drawCircle+0x190>
		if (f >= 0) {
 80010bc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	db0e      	blt.n	80010e2 <LCD_drawCircle+0xb2>
			y--;
 80010c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	3b01      	subs	r3, #1
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 80010d0:	8a7b      	ldrh	r3, [r7, #18]
 80010d2:	3302      	adds	r3, #2
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 80010d8:	8afa      	ldrh	r2, [r7, #22]
 80010da:	8a7b      	ldrh	r3, [r7, #18]
 80010dc:	4413      	add	r3, r2
 80010de:	b29b      	uxth	r3, r3
 80010e0:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 80010e2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80010e6:	b29b      	uxth	r3, r3
 80010e8:	3301      	adds	r3, #1
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 80010ee:	8abb      	ldrh	r3, [r7, #20]
 80010f0:	3302      	adds	r3, #2
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 80010f6:	8afa      	ldrh	r2, [r7, #22]
 80010f8:	8abb      	ldrh	r3, [r7, #20]
 80010fa:	4413      	add	r3, r2
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	82fb      	strh	r3, [r7, #22]

		LCD_DrawPixel(x0 + x, y0 + y, color);
 8001100:	88fa      	ldrh	r2, [r7, #6]
 8001102:	8a3b      	ldrh	r3, [r7, #16]
 8001104:	4413      	add	r3, r2
 8001106:	b298      	uxth	r0, r3
 8001108:	88ba      	ldrh	r2, [r7, #4]
 800110a:	89fb      	ldrh	r3, [r7, #14]
 800110c:	4413      	add	r3, r2
 800110e:	b29b      	uxth	r3, r3
 8001110:	883a      	ldrh	r2, [r7, #0]
 8001112:	4619      	mov	r1, r3
 8001114:	f7ff feee 	bl	8000ef4 <LCD_DrawPixel>
		LCD_DrawPixel(x0 - x, y0 + y, color);
 8001118:	88fa      	ldrh	r2, [r7, #6]
 800111a:	8a3b      	ldrh	r3, [r7, #16]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	b298      	uxth	r0, r3
 8001120:	88ba      	ldrh	r2, [r7, #4]
 8001122:	89fb      	ldrh	r3, [r7, #14]
 8001124:	4413      	add	r3, r2
 8001126:	b29b      	uxth	r3, r3
 8001128:	883a      	ldrh	r2, [r7, #0]
 800112a:	4619      	mov	r1, r3
 800112c:	f7ff fee2 	bl	8000ef4 <LCD_DrawPixel>
		LCD_DrawPixel(x0 + x, y0 - y, color);
 8001130:	88fa      	ldrh	r2, [r7, #6]
 8001132:	8a3b      	ldrh	r3, [r7, #16]
 8001134:	4413      	add	r3, r2
 8001136:	b298      	uxth	r0, r3
 8001138:	88ba      	ldrh	r2, [r7, #4]
 800113a:	89fb      	ldrh	r3, [r7, #14]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	b29b      	uxth	r3, r3
 8001140:	883a      	ldrh	r2, [r7, #0]
 8001142:	4619      	mov	r1, r3
 8001144:	f7ff fed6 	bl	8000ef4 <LCD_DrawPixel>
		LCD_DrawPixel(x0 - x, y0 - y, color);
 8001148:	88fa      	ldrh	r2, [r7, #6]
 800114a:	8a3b      	ldrh	r3, [r7, #16]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	b298      	uxth	r0, r3
 8001150:	88ba      	ldrh	r2, [r7, #4]
 8001152:	89fb      	ldrh	r3, [r7, #14]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	b29b      	uxth	r3, r3
 8001158:	883a      	ldrh	r2, [r7, #0]
 800115a:	4619      	mov	r1, r3
 800115c:	f7ff feca 	bl	8000ef4 <LCD_DrawPixel>
		LCD_DrawPixel(x0 + y, y0 + x, color);
 8001160:	88fa      	ldrh	r2, [r7, #6]
 8001162:	89fb      	ldrh	r3, [r7, #14]
 8001164:	4413      	add	r3, r2
 8001166:	b298      	uxth	r0, r3
 8001168:	88ba      	ldrh	r2, [r7, #4]
 800116a:	8a3b      	ldrh	r3, [r7, #16]
 800116c:	4413      	add	r3, r2
 800116e:	b29b      	uxth	r3, r3
 8001170:	883a      	ldrh	r2, [r7, #0]
 8001172:	4619      	mov	r1, r3
 8001174:	f7ff febe 	bl	8000ef4 <LCD_DrawPixel>
		LCD_DrawPixel(x0 - y, y0 + x, color);
 8001178:	88fa      	ldrh	r2, [r7, #6]
 800117a:	89fb      	ldrh	r3, [r7, #14]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	b298      	uxth	r0, r3
 8001180:	88ba      	ldrh	r2, [r7, #4]
 8001182:	8a3b      	ldrh	r3, [r7, #16]
 8001184:	4413      	add	r3, r2
 8001186:	b29b      	uxth	r3, r3
 8001188:	883a      	ldrh	r2, [r7, #0]
 800118a:	4619      	mov	r1, r3
 800118c:	f7ff feb2 	bl	8000ef4 <LCD_DrawPixel>
		LCD_DrawPixel(x0 + y, y0 - x, color);
 8001190:	88fa      	ldrh	r2, [r7, #6]
 8001192:	89fb      	ldrh	r3, [r7, #14]
 8001194:	4413      	add	r3, r2
 8001196:	b298      	uxth	r0, r3
 8001198:	88ba      	ldrh	r2, [r7, #4]
 800119a:	8a3b      	ldrh	r3, [r7, #16]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	b29b      	uxth	r3, r3
 80011a0:	883a      	ldrh	r2, [r7, #0]
 80011a2:	4619      	mov	r1, r3
 80011a4:	f7ff fea6 	bl	8000ef4 <LCD_DrawPixel>
		LCD_DrawPixel(x0 - y, y0 - x, color);
 80011a8:	88fa      	ldrh	r2, [r7, #6]
 80011aa:	89fb      	ldrh	r3, [r7, #14]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	b298      	uxth	r0, r3
 80011b0:	88ba      	ldrh	r2, [r7, #4]
 80011b2:	8a3b      	ldrh	r3, [r7, #16]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	883a      	ldrh	r2, [r7, #0]
 80011ba:	4619      	mov	r1, r3
 80011bc:	f7ff fe9a 	bl	8000ef4 <LCD_DrawPixel>
	while (x < y) {
 80011c0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80011c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	f6ff af77 	blt.w	80010bc <LCD_drawCircle+0x8c>
	}
}
 80011ce:	bf00      	nop
 80011d0:	371c      	adds	r7, #28
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd90      	pop	{r4, r7, pc}

080011d6 <LCD_drawLine>:
	fillCircleHelper(x0, y0, r, 3, 0, color);
}

//9. Line drawing functions
void LCD_drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
		uint16_t color) {
 80011d6:	b590      	push	{r4, r7, lr}
 80011d8:	b089      	sub	sp, #36	; 0x24
 80011da:	af00      	add	r7, sp, #0
 80011dc:	4604      	mov	r4, r0
 80011de:	4608      	mov	r0, r1
 80011e0:	4611      	mov	r1, r2
 80011e2:	461a      	mov	r2, r3
 80011e4:	4623      	mov	r3, r4
 80011e6:	80fb      	strh	r3, [r7, #6]
 80011e8:	4603      	mov	r3, r0
 80011ea:	80bb      	strh	r3, [r7, #4]
 80011ec:	460b      	mov	r3, r1
 80011ee:	807b      	strh	r3, [r7, #2]
 80011f0:	4613      	mov	r3, r2
 80011f2:	803b      	strh	r3, [r7, #0]
	int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80011f4:	f9b7 2000 	ldrsh.w	r2, [r7]
 80011f8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001202:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001206:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800120a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800120e:	1acb      	subs	r3, r1, r3
 8001210:	2b00      	cmp	r3, #0
 8001212:	bfb8      	it	lt
 8001214:	425b      	neglt	r3, r3
 8001216:	429a      	cmp	r2, r3
 8001218:	bfcc      	ite	gt
 800121a:	2301      	movgt	r3, #1
 800121c:	2300      	movle	r3, #0
 800121e:	b2db      	uxtb	r3, r3
 8001220:	837b      	strh	r3, [r7, #26]
	if (steep) {
 8001222:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d00b      	beq.n	8001242 <LCD_drawLine+0x6c>
		swap(x0, y0);
 800122a:	88fb      	ldrh	r3, [r7, #6]
 800122c:	833b      	strh	r3, [r7, #24]
 800122e:	88bb      	ldrh	r3, [r7, #4]
 8001230:	80fb      	strh	r3, [r7, #6]
 8001232:	8b3b      	ldrh	r3, [r7, #24]
 8001234:	80bb      	strh	r3, [r7, #4]
		swap(x1, y1);
 8001236:	887b      	ldrh	r3, [r7, #2]
 8001238:	82fb      	strh	r3, [r7, #22]
 800123a:	883b      	ldrh	r3, [r7, #0]
 800123c:	807b      	strh	r3, [r7, #2]
 800123e:	8afb      	ldrh	r3, [r7, #22]
 8001240:	803b      	strh	r3, [r7, #0]
	}

	if (x0 > x1) {
 8001242:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001246:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800124a:	429a      	cmp	r2, r3
 800124c:	dd0b      	ble.n	8001266 <LCD_drawLine+0x90>
		swap(x0, x1);
 800124e:	88fb      	ldrh	r3, [r7, #6]
 8001250:	82bb      	strh	r3, [r7, #20]
 8001252:	887b      	ldrh	r3, [r7, #2]
 8001254:	80fb      	strh	r3, [r7, #6]
 8001256:	8abb      	ldrh	r3, [r7, #20]
 8001258:	807b      	strh	r3, [r7, #2]
		swap(y0, y1);
 800125a:	88bb      	ldrh	r3, [r7, #4]
 800125c:	827b      	strh	r3, [r7, #18]
 800125e:	883b      	ldrh	r3, [r7, #0]
 8001260:	80bb      	strh	r3, [r7, #4]
 8001262:	8a7b      	ldrh	r3, [r7, #18]
 8001264:	803b      	strh	r3, [r7, #0]
	}

	int16_t dx, dy;
	dx = x1 - x0;
 8001266:	887a      	ldrh	r2, [r7, #2]
 8001268:	88fb      	ldrh	r3, [r7, #6]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	b29b      	uxth	r3, r3
 800126e:	823b      	strh	r3, [r7, #16]
	dy = abs(y1 - y0);
 8001270:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001274:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b00      	cmp	r3, #0
 800127c:	bfb8      	it	lt
 800127e:	425b      	neglt	r3, r3
 8001280:	81fb      	strh	r3, [r7, #14]

	int16_t err = dx / 2;
 8001282:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001286:	0fda      	lsrs	r2, r3, #31
 8001288:	4413      	add	r3, r2
 800128a:	105b      	asrs	r3, r3, #1
 800128c:	83fb      	strh	r3, [r7, #30]
	int16_t ystep;

	if (y0 < y1) {
 800128e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001292:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001296:	429a      	cmp	r2, r3
 8001298:	da02      	bge.n	80012a0 <LCD_drawLine+0xca>
		ystep = 1;
 800129a:	2301      	movs	r3, #1
 800129c:	83bb      	strh	r3, [r7, #28]
 800129e:	e02d      	b.n	80012fc <LCD_drawLine+0x126>
	} else {
		ystep = -1;
 80012a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012a4:	83bb      	strh	r3, [r7, #28]
	}

	for (; x0 <= x1; x0++) {
 80012a6:	e029      	b.n	80012fc <LCD_drawLine+0x126>
		if (steep) {
 80012a8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d006      	beq.n	80012be <LCD_drawLine+0xe8>
			LCD_DrawPixel(y0, x0, color);
 80012b0:	88bb      	ldrh	r3, [r7, #4]
 80012b2:	88f9      	ldrh	r1, [r7, #6]
 80012b4:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff fe1c 	bl	8000ef4 <LCD_DrawPixel>
 80012bc:	e005      	b.n	80012ca <LCD_drawLine+0xf4>
		} else {
			LCD_DrawPixel(x0, y0, color);
 80012be:	88fb      	ldrh	r3, [r7, #6]
 80012c0:	88b9      	ldrh	r1, [r7, #4]
 80012c2:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fe15 	bl	8000ef4 <LCD_DrawPixel>
		}
		err -= dy;
 80012ca:	8bfa      	ldrh	r2, [r7, #30]
 80012cc:	89fb      	ldrh	r3, [r7, #14]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	83fb      	strh	r3, [r7, #30]
		if (err < 0) {
 80012d4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	da09      	bge.n	80012f0 <LCD_drawLine+0x11a>
			y0 += ystep;
 80012dc:	88ba      	ldrh	r2, [r7, #4]
 80012de:	8bbb      	ldrh	r3, [r7, #28]
 80012e0:	4413      	add	r3, r2
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	80bb      	strh	r3, [r7, #4]
			err += dx;
 80012e6:	8bfa      	ldrh	r2, [r7, #30]
 80012e8:	8a3b      	ldrh	r3, [r7, #16]
 80012ea:	4413      	add	r3, r2
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	83fb      	strh	r3, [r7, #30]
	for (; x0 <= x1; x0++) {
 80012f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	3301      	adds	r3, #1
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	80fb      	strh	r3, [r7, #6]
 80012fc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001300:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001304:	429a      	cmp	r2, r3
 8001306:	ddcf      	ble.n	80012a8 <LCD_drawLine+0xd2>
		}
	}
}
 8001308:	bf00      	nop
 800130a:	3724      	adds	r7, #36	; 0x24
 800130c:	46bd      	mov	sp, r7
 800130e:	bd90      	pop	{r4, r7, pc}

08001310 <LCD_setRotation>:

	LCD_SendData(data[size-1] & 0xFF);
}

//13. Set screen rotation
void LCD_setRotation(uint8_t rotate) {
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	71fb      	strb	r3, [r7, #7]
	switch (rotate) {
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	3b01      	subs	r3, #1
 800131e:	2b03      	cmp	r3, #3
 8001320:	d832      	bhi.n	8001388 <LCD_setRotation+0x78>
 8001322:	a201      	add	r2, pc, #4	; (adr r2, 8001328 <LCD_setRotation+0x18>)
 8001324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001328:	08001339 	.word	0x08001339
 800132c:	0800134d 	.word	0x0800134d
 8001330:	08001361 	.word	0x08001361
 8001334:	08001375 	.word	0x08001375
	case 1:
		rotationNum = 1;
 8001338:	4b1a      	ldr	r3, [pc, #104]	; (80013a4 <LCD_setRotation+0x94>)
 800133a:	2201      	movs	r2, #1
 800133c:	701a      	strb	r2, [r3, #0]
		LCD_SendCommand(HX8357_MADCTL);
 800133e:	2036      	movs	r0, #54	; 0x36
 8001340:	f7ff fb9a 	bl	8000a78 <LCD_SendCommand>
		LCD_SendData(MADCTL_MX | MADCTL_MY | MADCTL_RGB);
 8001344:	20c0      	movs	r0, #192	; 0xc0
 8001346:	f7ff fbcb 	bl	8000ae0 <LCD_SendData>
		break;
 800134a:	e027      	b.n	800139c <LCD_setRotation+0x8c>
	case 2:
		rotationNum = 2;
 800134c:	4b15      	ldr	r3, [pc, #84]	; (80013a4 <LCD_setRotation+0x94>)
 800134e:	2202      	movs	r2, #2
 8001350:	701a      	strb	r2, [r3, #0]
		LCD_SendCommand(HX8357_MADCTL);
 8001352:	2036      	movs	r0, #54	; 0x36
 8001354:	f7ff fb90 	bl	8000a78 <LCD_SendCommand>
		LCD_SendData(MADCTL_MV | MADCTL_MY | MADCTL_RGB);
 8001358:	20a0      	movs	r0, #160	; 0xa0
 800135a:	f7ff fbc1 	bl	8000ae0 <LCD_SendData>
		break;
 800135e:	e01d      	b.n	800139c <LCD_setRotation+0x8c>
	case 3:
		rotationNum = 3;
 8001360:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <LCD_setRotation+0x94>)
 8001362:	2203      	movs	r2, #3
 8001364:	701a      	strb	r2, [r3, #0]
		LCD_SendCommand(HX8357_MADCTL);
 8001366:	2036      	movs	r0, #54	; 0x36
 8001368:	f7ff fb86 	bl	8000a78 <LCD_SendCommand>
		LCD_SendData(MADCTL_RGB);
 800136c:	2000      	movs	r0, #0
 800136e:	f7ff fbb7 	bl	8000ae0 <LCD_SendData>
		break;
 8001372:	e013      	b.n	800139c <LCD_setRotation+0x8c>
	case 4:
		rotationNum = 4;
 8001374:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <LCD_setRotation+0x94>)
 8001376:	2204      	movs	r2, #4
 8001378:	701a      	strb	r2, [r3, #0]
		LCD_SendCommand(HX8357_MADCTL);
 800137a:	2036      	movs	r0, #54	; 0x36
 800137c:	f7ff fb7c 	bl	8000a78 <LCD_SendCommand>
		LCD_SendData(MADCTL_MX | MADCTL_MV | MADCTL_RGB);
 8001380:	2060      	movs	r0, #96	; 0x60
 8001382:	f7ff fbad 	bl	8000ae0 <LCD_SendData>
		break;
 8001386:	e009      	b.n	800139c <LCD_setRotation+0x8c>
	default:
		rotationNum = 1;
 8001388:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <LCD_setRotation+0x94>)
 800138a:	2201      	movs	r2, #1
 800138c:	701a      	strb	r2, [r3, #0]
		LCD_SendCommand(HX8357_MADCTL);
 800138e:	2036      	movs	r0, #54	; 0x36
 8001390:	f7ff fb72 	bl	8000a78 <LCD_SendCommand>
		LCD_SendData(MADCTL_MY | MADCTL_BGR);
 8001394:	2088      	movs	r0, #136	; 0x88
 8001396:	f7ff fba3 	bl	8000ae0 <LCD_SendData>
		break;
 800139a:	bf00      	nop
	}
}
 800139c:	bf00      	nop
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000000 	.word	0x20000000

080013a8 <map>:
static uint16_t ym_PIN = YMIN_Pin;
static uint16_t xm_PIN = XMIN_Pin;
static uint16_t yp_PIN = YPLUS_Pin;
static uint16_t xp_PIN = XPLUS_Pin;

int map(int x, int in_min, int in_max, int out_min, int out_max) {
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
 80013b4:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80013b6:	68fa      	ldr	r2, [r7, #12]
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	69b9      	ldr	r1, [r7, #24]
 80013be:	683a      	ldr	r2, [r7, #0]
 80013c0:	1a8a      	subs	r2, r1, r2
 80013c2:	fb02 f203 	mul.w	r2, r2, r3
 80013c6:	6879      	ldr	r1, [r7, #4]
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	1acb      	subs	r3, r1, r3
 80013cc:	fb92 f2f3 	sdiv	r2, r2, r3
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	4413      	add	r3, r2
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3714      	adds	r7, #20
 80013d8:	46bd      	mov	sp, r7
 80013da:	bc80      	pop	{r7}
 80013dc:	4770      	bx	lr
	...

080013e0 <Touch_Init>:

void Touch_Init(ADC_HandleTypeDef *adc) {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
	memcpy(&adcHandle, adc, sizeof(*adc));
 80013e8:	2230      	movs	r2, #48	; 0x30
 80013ea:	6879      	ldr	r1, [r7, #4]
 80013ec:	4803      	ldr	r0, [pc, #12]	; (80013fc <Touch_Init+0x1c>)
 80013ee:	f002 fd4b 	bl	8003e88 <memcpy>
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	2000016c 	.word	0x2000016c

08001400 <setupForReadY>:

bool isTouch();
uint16_t getPressure();

void setupForReadY() {
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.Pin = yp_PIN;
 8001406:	4b2c      	ldr	r3, [pc, #176]	; (80014b8 <setupForReadY+0xb8>)
 8001408:	881b      	ldrh	r3, [r3, #0]
 800140a:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800140c:	2301      	movs	r3, #1
 800140e:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 8001410:	2301      	movs	r3, #1
 8001412:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001414:	2303      	movs	r3, #3
 8001416:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init( yp , &GPIO_InitStructure );
 8001418:	4b28      	ldr	r3, [pc, #160]	; (80014bc <setupForReadY+0xbc>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	463a      	mov	r2, r7
 800141e:	4611      	mov	r1, r2
 8001420:	4618      	mov	r0, r3
 8001422:	f001 fbfd 	bl	8002c20 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(yp, yp_PIN, GPIO_PIN_SET);
 8001426:	4b25      	ldr	r3, [pc, #148]	; (80014bc <setupForReadY+0xbc>)
 8001428:	6818      	ldr	r0, [r3, #0]
 800142a:	4b23      	ldr	r3, [pc, #140]	; (80014b8 <setupForReadY+0xb8>)
 800142c:	881b      	ldrh	r3, [r3, #0]
 800142e:	2201      	movs	r2, #1
 8001430:	4619      	mov	r1, r3
 8001432:	f001 fd4f 	bl	8002ed4 <HAL_GPIO_WritePin>

	GPIO_InitStructure.Pin = ym_PIN;
 8001436:	4b22      	ldr	r3, [pc, #136]	; (80014c0 <setupForReadY+0xc0>)
 8001438:	881b      	ldrh	r3, [r3, #0]
 800143a:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800143c:	2301      	movs	r3, #1
 800143e:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 8001440:	2302      	movs	r3, #2
 8001442:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001444:	2303      	movs	r3, #3
 8001446:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init( ym , &GPIO_InitStructure );
 8001448:	4b1e      	ldr	r3, [pc, #120]	; (80014c4 <setupForReadY+0xc4>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	463a      	mov	r2, r7
 800144e:	4611      	mov	r1, r2
 8001450:	4618      	mov	r0, r3
 8001452:	f001 fbe5 	bl	8002c20 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(ym, ym_PIN, GPIO_PIN_RESET);
 8001456:	4b1b      	ldr	r3, [pc, #108]	; (80014c4 <setupForReadY+0xc4>)
 8001458:	6818      	ldr	r0, [r3, #0]
 800145a:	4b19      	ldr	r3, [pc, #100]	; (80014c0 <setupForReadY+0xc0>)
 800145c:	881b      	ldrh	r3, [r3, #0]
 800145e:	2200      	movs	r2, #0
 8001460:	4619      	mov	r1, r3
 8001462:	f001 fd37 	bl	8002ed4 <HAL_GPIO_WritePin>

	GPIO_InitStructure.Pin = xp_PIN;
 8001466:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <setupForReadY+0xc8>)
 8001468:	881b      	ldrh	r3, [r3, #0]
 800146a:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800146c:	2300      	movs	r3, #0
 800146e:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 8001470:	2302      	movs	r3, #2
 8001472:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init( xp , &GPIO_InitStructure );
 8001474:	4b15      	ldr	r3, [pc, #84]	; (80014cc <setupForReadY+0xcc>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	463a      	mov	r2, r7
 800147a:	4611      	mov	r1, r2
 800147c:	4618      	mov	r0, r3
 800147e:	f001 fbcf 	bl	8002c20 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(xp, xp_PIN, GPIO_PIN_RESET);
 8001482:	4b12      	ldr	r3, [pc, #72]	; (80014cc <setupForReadY+0xcc>)
 8001484:	6818      	ldr	r0, [r3, #0]
 8001486:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <setupForReadY+0xc8>)
 8001488:	881b      	ldrh	r3, [r3, #0]
 800148a:	2200      	movs	r2, #0
 800148c:	4619      	mov	r1, r3
 800148e:	f001 fd21 	bl	8002ed4 <HAL_GPIO_WritePin>

	GPIO_InitStructure.Pin = xm_PIN;
 8001492:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <setupForReadY+0xd0>)
 8001494:	881b      	ldrh	r3, [r3, #0]
 8001496:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 8001498:	2303      	movs	r3, #3
 800149a:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init( xm , &GPIO_InitStructure );
 80014a0:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <setupForReadY+0xd4>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	463a      	mov	r2, r7
 80014a6:	4611      	mov	r1, r2
 80014a8:	4618      	mov	r0, r3
 80014aa:	f001 fbb9 	bl	8002c20 <HAL_GPIO_Init>
}
 80014ae:	bf00      	nop
 80014b0:	3710      	adds	r7, #16
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20000018 	.word	0x20000018
 80014bc:	2000000c 	.word	0x2000000c
 80014c0:	20000014 	.word	0x20000014
 80014c4:	20000004 	.word	0x20000004
 80014c8:	2000001a 	.word	0x2000001a
 80014cc:	20000010 	.word	0x20000010
 80014d0:	20000016 	.word	0x20000016
 80014d4:	20000008 	.word	0x20000008

080014d8 <setupForReadX>:

void setupForReadX() {
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.Pin = xp_PIN;
 80014de:	4b2c      	ldr	r3, [pc, #176]	; (8001590 <setupForReadX+0xb8>)
 80014e0:	881b      	ldrh	r3, [r3, #0]
 80014e2:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80014e4:	2301      	movs	r3, #1
 80014e6:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 80014e8:	2301      	movs	r3, #1
 80014ea:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80014ec:	2303      	movs	r3, #3
 80014ee:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init( xp , &GPIO_InitStructure );
 80014f0:	4b28      	ldr	r3, [pc, #160]	; (8001594 <setupForReadX+0xbc>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	463a      	mov	r2, r7
 80014f6:	4611      	mov	r1, r2
 80014f8:	4618      	mov	r0, r3
 80014fa:	f001 fb91 	bl	8002c20 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(xp, xp_PIN, GPIO_PIN_SET);
 80014fe:	4b25      	ldr	r3, [pc, #148]	; (8001594 <setupForReadX+0xbc>)
 8001500:	6818      	ldr	r0, [r3, #0]
 8001502:	4b23      	ldr	r3, [pc, #140]	; (8001590 <setupForReadX+0xb8>)
 8001504:	881b      	ldrh	r3, [r3, #0]
 8001506:	2201      	movs	r2, #1
 8001508:	4619      	mov	r1, r3
 800150a:	f001 fce3 	bl	8002ed4 <HAL_GPIO_WritePin>

	GPIO_InitStructure.Pin = xm_PIN;
 800150e:	4b22      	ldr	r3, [pc, #136]	; (8001598 <setupForReadX+0xc0>)
 8001510:	881b      	ldrh	r3, [r3, #0]
 8001512:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001514:	2301      	movs	r3, #1
 8001516:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 8001518:	2302      	movs	r3, #2
 800151a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800151c:	2303      	movs	r3, #3
 800151e:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init( xm , &GPIO_InitStructure );
 8001520:	4b1e      	ldr	r3, [pc, #120]	; (800159c <setupForReadX+0xc4>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	463a      	mov	r2, r7
 8001526:	4611      	mov	r1, r2
 8001528:	4618      	mov	r0, r3
 800152a:	f001 fb79 	bl	8002c20 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(xm, xm_PIN, GPIO_PIN_RESET);
 800152e:	4b1b      	ldr	r3, [pc, #108]	; (800159c <setupForReadX+0xc4>)
 8001530:	6818      	ldr	r0, [r3, #0]
 8001532:	4b19      	ldr	r3, [pc, #100]	; (8001598 <setupForReadX+0xc0>)
 8001534:	881b      	ldrh	r3, [r3, #0]
 8001536:	2200      	movs	r2, #0
 8001538:	4619      	mov	r1, r3
 800153a:	f001 fccb 	bl	8002ed4 <HAL_GPIO_WritePin>

	GPIO_InitStructure.Pin = ym_PIN;
 800153e:	4b18      	ldr	r3, [pc, #96]	; (80015a0 <setupForReadX+0xc8>)
 8001540:	881b      	ldrh	r3, [r3, #0]
 8001542:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8001544:	2300      	movs	r3, #0
 8001546:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 8001548:	2302      	movs	r3, #2
 800154a:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init( ym , &GPIO_InitStructure );
 800154c:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <setupForReadX+0xcc>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	463a      	mov	r2, r7
 8001552:	4611      	mov	r1, r2
 8001554:	4618      	mov	r0, r3
 8001556:	f001 fb63 	bl	8002c20 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(ym, ym_PIN, GPIO_PIN_RESET);
 800155a:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <setupForReadX+0xcc>)
 800155c:	6818      	ldr	r0, [r3, #0]
 800155e:	4b10      	ldr	r3, [pc, #64]	; (80015a0 <setupForReadX+0xc8>)
 8001560:	881b      	ldrh	r3, [r3, #0]
 8001562:	2200      	movs	r2, #0
 8001564:	4619      	mov	r1, r3
 8001566:	f001 fcb5 	bl	8002ed4 <HAL_GPIO_WritePin>

	GPIO_InitStructure.Pin = yp_PIN;
 800156a:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <setupForReadX+0xd0>)
 800156c:	881b      	ldrh	r3, [r3, #0]
 800156e:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 8001570:	2303      	movs	r3, #3
 8001572:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init( yp , &GPIO_InitStructure );
 8001578:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <setupForReadX+0xd4>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	463a      	mov	r2, r7
 800157e:	4611      	mov	r1, r2
 8001580:	4618      	mov	r0, r3
 8001582:	f001 fb4d 	bl	8002c20 <HAL_GPIO_Init>
}
 8001586:	bf00      	nop
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	2000001a 	.word	0x2000001a
 8001594:	20000010 	.word	0x20000010
 8001598:	20000016 	.word	0x20000016
 800159c:	20000008 	.word	0x20000008
 80015a0:	20000014 	.word	0x20000014
 80015a4:	20000004 	.word	0x20000004
 80015a8:	20000018 	.word	0x20000018
 80015ac:	2000000c 	.word	0x2000000c

080015b0 <readChannelXMin>:

int readChannelXMin() {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig;
	sConfig.Channel = ADC_CHANNEL_13;
 80015b6:	230d      	movs	r3, #13
 80015b8:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80015ba:	2301      	movs	r3, #1
 80015bc:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80015be:	2300      	movs	r3, #0
 80015c0:	60fb      	str	r3, [r7, #12]
	int config = HAL_ADC_ConfigChannel(&adcHandle, &sConfig);
 80015c2:	1d3b      	adds	r3, r7, #4
 80015c4:	4619      	mov	r1, r3
 80015c6:	480f      	ldr	r0, [pc, #60]	; (8001604 <readChannelXMin+0x54>)
 80015c8:	f001 f8c2 	bl	8002750 <HAL_ADC_ConfigChannel>
 80015cc:	4603      	mov	r3, r0
 80015ce:	613b      	str	r3, [r7, #16]
	if (config != HAL_OK)
	{
		//
	}
	HAL_Delay(10);
 80015d0:	200a      	movs	r0, #10
 80015d2:	f000 fde3 	bl	800219c <HAL_Delay>
	HAL_ADC_Start(&adcHandle);
 80015d6:	480b      	ldr	r0, [pc, #44]	; (8001604 <readChannelXMin+0x54>)
 80015d8:	f000 feda 	bl	8002390 <HAL_ADC_Start>
	uint32_t ADCValue;
	if(HAL_ADC_PollForConversion(&adcHandle, 5) == HAL_OK) {
 80015dc:	2105      	movs	r1, #5
 80015de:	4809      	ldr	r0, [pc, #36]	; (8001604 <readChannelXMin+0x54>)
 80015e0:	f000 ffb0 	bl	8002544 <HAL_ADC_PollForConversion>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d103      	bne.n	80015f2 <readChannelXMin+0x42>
		ADCValue = HAL_ADC_GetValue(&adcHandle);
 80015ea:	4806      	ldr	r0, [pc, #24]	; (8001604 <readChannelXMin+0x54>)
 80015ec:	f001 f8a4 	bl	8002738 <HAL_ADC_GetValue>
 80015f0:	6178      	str	r0, [r7, #20]
	}
	HAL_ADC_Stop(&adcHandle);
 80015f2:	4804      	ldr	r0, [pc, #16]	; (8001604 <readChannelXMin+0x54>)
 80015f4:	f000 ff7a 	bl	80024ec <HAL_ADC_Stop>
	return ADCValue;
 80015f8:	697b      	ldr	r3, [r7, #20]
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3718      	adds	r7, #24
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	2000016c 	.word	0x2000016c

08001608 <readTouchY>:

int readTouchY() {
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af02      	add	r7, sp, #8
	setupForReadY();
 800160e:	f7ff fef7 	bl	8001400 <setupForReadY>
	//return readChannelXMin();
	return map(readChannelXMin(), TS_MINY, TS_MAXY, 0, 480);
 8001612:	f7ff ffcd 	bl	80015b0 <readChannelXMin>
 8001616:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800161a:	9300      	str	r3, [sp, #0]
 800161c:	2300      	movs	r3, #0
 800161e:	f640 629c 	movw	r2, #3740	; 0xe9c
 8001622:	f240 1127 	movw	r1, #295	; 0x127
 8001626:	f7ff febf 	bl	80013a8 <map>
 800162a:	4603      	mov	r3, r0
}
 800162c:	4618      	mov	r0, r3
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
	...

08001634 <readChannelYPlus>:

int readChannelYPlus() {
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig;
	sConfig.Channel = ADC_CHANNEL_12;
 800163a:	230c      	movs	r3, #12
 800163c:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800163e:	2301      	movs	r3, #1
 8001640:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
	int config = HAL_ADC_ConfigChannel(&adcHandle, &sConfig);
 8001646:	1d3b      	adds	r3, r7, #4
 8001648:	4619      	mov	r1, r3
 800164a:	480f      	ldr	r0, [pc, #60]	; (8001688 <readChannelYPlus+0x54>)
 800164c:	f001 f880 	bl	8002750 <HAL_ADC_ConfigChannel>
 8001650:	4603      	mov	r3, r0
 8001652:	613b      	str	r3, [r7, #16]
	if (config != HAL_OK)
	{
		//
	}
	HAL_Delay(10);
 8001654:	200a      	movs	r0, #10
 8001656:	f000 fda1 	bl	800219c <HAL_Delay>
	HAL_ADC_Start(&adcHandle);
 800165a:	480b      	ldr	r0, [pc, #44]	; (8001688 <readChannelYPlus+0x54>)
 800165c:	f000 fe98 	bl	8002390 <HAL_ADC_Start>
	uint32_t ADCValue;
	if(HAL_ADC_PollForConversion(&adcHandle, 5) == HAL_OK) {
 8001660:	2105      	movs	r1, #5
 8001662:	4809      	ldr	r0, [pc, #36]	; (8001688 <readChannelYPlus+0x54>)
 8001664:	f000 ff6e 	bl	8002544 <HAL_ADC_PollForConversion>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d103      	bne.n	8001676 <readChannelYPlus+0x42>
		ADCValue = HAL_ADC_GetValue(&adcHandle);
 800166e:	4806      	ldr	r0, [pc, #24]	; (8001688 <readChannelYPlus+0x54>)
 8001670:	f001 f862 	bl	8002738 <HAL_ADC_GetValue>
 8001674:	6178      	str	r0, [r7, #20]
	}
	HAL_ADC_Stop(&adcHandle);
 8001676:	4804      	ldr	r0, [pc, #16]	; (8001688 <readChannelYPlus+0x54>)
 8001678:	f000 ff38 	bl	80024ec <HAL_ADC_Stop>
	return ADCValue;
 800167c:	697b      	ldr	r3, [r7, #20]
}
 800167e:	4618      	mov	r0, r3
 8001680:	3718      	adds	r7, #24
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	2000016c 	.word	0x2000016c

0800168c <readTouchX>:

int readTouchX() {
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af02      	add	r7, sp, #8
	setupForReadX();
 8001692:	f7ff ff21 	bl	80014d8 <setupForReadX>
	//return readChannelYPlus();
	return map(readChannelYPlus(), TS_MINX, TS_MAXX, 0, 320);
 8001696:	f7ff ffcd 	bl	8001634 <readChannelYPlus>
 800169a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	2300      	movs	r3, #0
 80016a2:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80016a6:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 80016aa:	f7ff fe7d 	bl	80013a8 <map>
 80016ae:	4603      	mov	r3, r0
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80016b6:	b480      	push	{r7}
 80016b8:	b083      	sub	sp, #12
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80016be:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80016c2:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d013      	beq.n	80016f6 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80016ce:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80016d2:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80016d6:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d00b      	beq.n	80016f6 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80016de:	e000      	b.n	80016e2 <ITM_SendChar+0x2c>
    {
      __NOP();
 80016e0:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80016e2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d0f9      	beq.n	80016e0 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80016ec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80016f6:	687b      	ldr	r3, [r7, #4]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr

08001702 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8001702:	b580      	push	{r7, lr}
 8001704:	b086      	sub	sp, #24
 8001706:	af00      	add	r7, sp, #0
 8001708:	60f8      	str	r0, [r7, #12]
 800170a:	60b9      	str	r1, [r7, #8]
 800170c:	607a      	str	r2, [r7, #4]
	int i = 0;
 800170e:	2300      	movs	r3, #0
 8001710:	617b      	str	r3, [r7, #20]
	for (i = 0; i < len; i++)
 8001712:	2300      	movs	r3, #0
 8001714:	617b      	str	r3, [r7, #20]
 8001716:	e009      	b.n	800172c <_write+0x2a>
		ITM_SendChar((*ptr++));
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	1c5a      	adds	r2, r3, #1
 800171c:	60ba      	str	r2, [r7, #8]
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff ffc8 	bl	80016b6 <ITM_SendChar>
	for (i = 0; i < len; i++)
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	3301      	adds	r3, #1
 800172a:	617b      	str	r3, [r7, #20]
 800172c:	697a      	ldr	r2, [r7, #20]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	429a      	cmp	r2, r3
 8001732:	dbf1      	blt.n	8001718 <_write+0x16>
	return len;
 8001734:	687b      	ldr	r3, [r7, #4]
}
 8001736:	4618      	mov	r0, r3
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <drawStruct>:
	int start_x, start_y, end_x, end_y;
	uint8_t action;
	uint16_t icon[];
};

void drawStruct(struct Button * p) {
 800173e:	b590      	push	{r4, r7, lr}
 8001740:	b087      	sub	sp, #28
 8001742:	af02      	add	r7, sp, #8
 8001744:	6078      	str	r0, [r7, #4]
	uint16_t color;
	switch(p->action) {
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	7c1b      	ldrb	r3, [r3, #16]
 800174a:	2b02      	cmp	r3, #2
 800174c:	d006      	beq.n	800175c <drawStruct+0x1e>
 800174e:	2b03      	cmp	r3, #3
 8001750:	d008      	beq.n	8001764 <drawStruct+0x26>
 8001752:	2b01      	cmp	r3, #1
 8001754:	d10a      	bne.n	800176c <drawStruct+0x2e>
	case 1: color = HX8357_BLUE; break;
 8001756:	231f      	movs	r3, #31
 8001758:	81fb      	strh	r3, [r7, #14]
 800175a:	e00b      	b.n	8001774 <drawStruct+0x36>
	case 2: color= HX8357_RED; break;
 800175c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001760:	81fb      	strh	r3, [r7, #14]
 8001762:	e007      	b.n	8001774 <drawStruct+0x36>
	case 3: color = HX8357_GREEN; break;
 8001764:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001768:	81fb      	strh	r3, [r7, #14]
 800176a:	e003      	b.n	8001774 <drawStruct+0x36>
	default: color = HX8357_YELLOW; break;
 800176c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001770:	81fb      	strh	r3, [r7, #14]
 8001772:	bf00      	nop
	}
	LCD_Fill_Rect(p->start_x, p->start_y, p->end_x, p->end_y, color);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4618      	mov	r0, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	4619      	mov	r1, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	461a      	mov	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	461c      	mov	r4, r3
 800178c:	89fb      	ldrh	r3, [r7, #14]
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	4623      	mov	r3, r4
 8001792:	f7ff fc13 	bl	8000fbc <LCD_Fill_Rect>
}
 8001796:	bf00      	nop
 8001798:	3714      	adds	r7, #20
 800179a:	46bd      	mov	sp, r7
 800179c:	bd90      	pop	{r4, r7, pc}

0800179e <checkIfInBoundary>:

uint8_t checkIfInBoundary(struct Button * p, int x_coor) {
 800179e:	b480      	push	{r7}
 80017a0:	b083      	sub	sp, #12
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
 80017a6:	6039      	str	r1, [r7, #0]
	if(x_coor >= p->start_x && x_coor <= p->end_x) {
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	db06      	blt.n	80017c0 <checkIfInBoundary+0x22>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	683a      	ldr	r2, [r7, #0]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	dc01      	bgt.n	80017c0 <checkIfInBoundary+0x22>
		return 1;
 80017bc:	2301      	movs	r3, #1
 80017be:	e000      	b.n	80017c2 <checkIfInBoundary+0x24>
	}

	return 0;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc80      	pop	{r7}
 80017ca:	4770      	bx	lr

080017cc <default_screen>:
struct Button line_button = {20, 400, 60, 480, 1 };
struct Button circle_button  = {80, 400, 120, 480, 2 };
struct Button polygon_button  = {140, 400, 180, 480, 3 };
struct Button clear_button  = {200, 400, 240, 480, 4 };

void default_screen() {
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
	LCD_Fill(HX8357_BLACK);
 80017d0:	2000      	movs	r0, #0
 80017d2:	f7ff fbaf 	bl	8000f34 <LCD_Fill>
	drawStruct(&line_button);
 80017d6:	4807      	ldr	r0, [pc, #28]	; (80017f4 <default_screen+0x28>)
 80017d8:	f7ff ffb1 	bl	800173e <drawStruct>
	drawStruct(&circle_button);
 80017dc:	4806      	ldr	r0, [pc, #24]	; (80017f8 <default_screen+0x2c>)
 80017de:	f7ff ffae 	bl	800173e <drawStruct>
	drawStruct(&polygon_button);
 80017e2:	4806      	ldr	r0, [pc, #24]	; (80017fc <default_screen+0x30>)
 80017e4:	f7ff ffab 	bl	800173e <drawStruct>
	drawStruct(&clear_button);
 80017e8:	4805      	ldr	r0, [pc, #20]	; (8001800 <default_screen+0x34>)
 80017ea:	f7ff ffa8 	bl	800173e <drawStruct>
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	2000001c 	.word	0x2000001c
 80017f8:	20000030 	.word	0x20000030
 80017fc:	20000044 	.word	0x20000044
 8001800:	20000058 	.word	0x20000058

08001804 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001804:	b590      	push	{r4, r7, lr}
 8001806:	b08d      	sub	sp, #52	; 0x34
 8001808:	af04      	add	r7, sp, #16


	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800180a:	f000 fc65 	bl	80020d8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800180e:	f000 f92f 	bl	8001a70 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001812:	f000 f9fd 	bl	8001c10 <MX_GPIO_Init>
	MX_ADC1_Init();
 8001816:	f000 f987 	bl	8001b28 <MX_ADC1_Init>
	MX_SPI1_Init();
 800181a:	f000 f9c3 	bl	8001ba4 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	Touch_Init(&hadc1);
 800181e:	4886      	ldr	r0, [pc, #536]	; (8001a38 <main+0x234>)
 8001820:	f7ff fdde 	bl	80013e0 <Touch_Init>
	LCD_Init(&hspi1, LCD_CS_GPIO_Port, LCD_CS_Pin, LCD_DC_GPIO_Port, LCD_DC_Pin, LCD_RST_GPIO_Port, LCD_RST_Pin);
 8001824:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001828:	9302      	str	r3, [sp, #8]
 800182a:	4b84      	ldr	r3, [pc, #528]	; (8001a3c <main+0x238>)
 800182c:	9301      	str	r3, [sp, #4]
 800182e:	2380      	movs	r3, #128	; 0x80
 8001830:	9300      	str	r3, [sp, #0]
 8001832:	4b83      	ldr	r3, [pc, #524]	; (8001a40 <main+0x23c>)
 8001834:	2240      	movs	r2, #64	; 0x40
 8001836:	4983      	ldr	r1, [pc, #524]	; (8001a44 <main+0x240>)
 8001838:	4883      	ldr	r0, [pc, #524]	; (8001a48 <main+0x244>)
 800183a:	f7ff fa05 	bl	8000c48 <LCD_Init>
	LCD_setRotation(3);
 800183e:	2003      	movs	r0, #3
 8001840:	f7ff fd66 	bl	8001310 <LCD_setRotation>
	default_screen();
 8001844:	f7ff ffc2 	bl	80017cc <default_screen>
	int current_x, current_y, radius, x_diff, y_diff;
	int previous_x, previous_y = 0;
 8001848:	2300      	movs	r3, #0
 800184a:	61bb      	str	r3, [r7, #24]
	uint8_t enabled_action = 0;
 800184c:	2300      	movs	r3, #0
 800184e:	75fb      	strb	r3, [r7, #23]
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		current_x = readTouchX();
 8001850:	f7ff ff1c 	bl	800168c <readTouchX>
 8001854:	6138      	str	r0, [r7, #16]
		current_y = readTouchY();
 8001856:	f7ff fed7 	bl	8001608 <readTouchY>
 800185a:	60f8      	str	r0, [r7, #12]
		printf("TAPPED: (%d, %d)\n", current_x, current_y);
 800185c:	68fa      	ldr	r2, [r7, #12]
 800185e:	6939      	ldr	r1, [r7, #16]
 8001860:	487a      	ldr	r0, [pc, #488]	; (8001a4c <main+0x248>)
 8001862:	f002 fb25 	bl	8003eb0 <iprintf>
		if(current_x > 0 && current_y > 0) {
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	2b00      	cmp	r3, #0
 800186a:	f340 80e0 	ble.w	8001a2e <main+0x22a>
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2b00      	cmp	r3, #0
 8001872:	f340 80dc 	ble.w	8001a2e <main+0x22a>
			// 1. Check if in boundary of button
			// 2. Also determine action
			if(current_y >= 400 && current_y <= 480) {
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800187c:	db42      	blt.n	8001904 <main+0x100>
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001884:	dc3e      	bgt.n	8001904 <main+0x100>
				in_button = 0;
 8001886:	2300      	movs	r3, #0
 8001888:	75bb      	strb	r3, [r7, #22]
				if(checkIfInBoundary(&line_button, current_x)) {
 800188a:	6939      	ldr	r1, [r7, #16]
 800188c:	4870      	ldr	r0, [pc, #448]	; (8001a50 <main+0x24c>)
 800188e:	f7ff ff86 	bl	800179e <checkIfInBoundary>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d007      	beq.n	80018a8 <main+0xa4>
					in_button = 1;
 8001898:	2301      	movs	r3, #1
 800189a:	75bb      	strb	r3, [r7, #22]
					enabled_action = line_button.action;
 800189c:	4b6c      	ldr	r3, [pc, #432]	; (8001a50 <main+0x24c>)
 800189e:	7c1b      	ldrb	r3, [r3, #16]
 80018a0:	75fb      	strb	r3, [r7, #23]
					printf("User tapped line button\n");
 80018a2:	486c      	ldr	r0, [pc, #432]	; (8001a54 <main+0x250>)
 80018a4:	f002 fb78 	bl	8003f98 <puts>
				}

				if(checkIfInBoundary(&circle_button, current_x)) {
 80018a8:	6939      	ldr	r1, [r7, #16]
 80018aa:	486b      	ldr	r0, [pc, #428]	; (8001a58 <main+0x254>)
 80018ac:	f7ff ff77 	bl	800179e <checkIfInBoundary>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d007      	beq.n	80018c6 <main+0xc2>
					in_button = 1;
 80018b6:	2301      	movs	r3, #1
 80018b8:	75bb      	strb	r3, [r7, #22]
					enabled_action = circle_button.action;
 80018ba:	4b67      	ldr	r3, [pc, #412]	; (8001a58 <main+0x254>)
 80018bc:	7c1b      	ldrb	r3, [r3, #16]
 80018be:	75fb      	strb	r3, [r7, #23]
					printf("User tapped circle button\n");
 80018c0:	4866      	ldr	r0, [pc, #408]	; (8001a5c <main+0x258>)
 80018c2:	f002 fb69 	bl	8003f98 <puts>
				}

				if(checkIfInBoundary(&polygon_button, current_x)) {
 80018c6:	6939      	ldr	r1, [r7, #16]
 80018c8:	4865      	ldr	r0, [pc, #404]	; (8001a60 <main+0x25c>)
 80018ca:	f7ff ff68 	bl	800179e <checkIfInBoundary>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d007      	beq.n	80018e4 <main+0xe0>
					in_button = 1;
 80018d4:	2301      	movs	r3, #1
 80018d6:	75bb      	strb	r3, [r7, #22]
					enabled_action = polygon_button.action;
 80018d8:	4b61      	ldr	r3, [pc, #388]	; (8001a60 <main+0x25c>)
 80018da:	7c1b      	ldrb	r3, [r3, #16]
 80018dc:	75fb      	strb	r3, [r7, #23]
					printf("User tapped polygon button\n");
 80018de:	4861      	ldr	r0, [pc, #388]	; (8001a64 <main+0x260>)
 80018e0:	f002 fb5a 	bl	8003f98 <puts>
				}
				if(checkIfInBoundary(&clear_button, current_x)) {
 80018e4:	6939      	ldr	r1, [r7, #16]
 80018e6:	4860      	ldr	r0, [pc, #384]	; (8001a68 <main+0x264>)
 80018e8:	f7ff ff59 	bl	800179e <checkIfInBoundary>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d00a      	beq.n	8001908 <main+0x104>
					in_button = 1;
 80018f2:	2301      	movs	r3, #1
 80018f4:	75bb      	strb	r3, [r7, #22]
					enabled_action = clear_button.action;
 80018f6:	4b5c      	ldr	r3, [pc, #368]	; (8001a68 <main+0x264>)
 80018f8:	7c1b      	ldrb	r3, [r3, #16]
 80018fa:	75fb      	strb	r3, [r7, #23]
					printf("User tapped clear button\n");
 80018fc:	485b      	ldr	r0, [pc, #364]	; (8001a6c <main+0x268>)
 80018fe:	f002 fb4b 	bl	8003f98 <puts>
				if(checkIfInBoundary(&clear_button, current_x)) {
 8001902:	e001      	b.n	8001908 <main+0x104>
				}

			} else {
				in_button = 0;
 8001904:	2300      	movs	r3, #0
 8001906:	75bb      	strb	r3, [r7, #22]
			}

			if(in_button) {
 8001908:	7dbb      	ldrb	r3, [r7, #22]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d004      	beq.n	8001918 <main+0x114>
				previous_x = 0;
 800190e:	2300      	movs	r3, #0
 8001910:	61fb      	str	r3, [r7, #28]
				previous_y = 0;
 8001912:	2300      	movs	r3, #0
 8001914:	61bb      	str	r3, [r7, #24]
 8001916:	e08a      	b.n	8001a2e <main+0x22a>
			} else {
				if(previous_x > 0 && previous_y > 0) {
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	2b00      	cmp	r3, #0
 800191c:	f340 8083 	ble.w	8001a26 <main+0x222>
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	2b00      	cmp	r3, #0
 8001924:	dd7f      	ble.n	8001a26 <main+0x222>
					switch(enabled_action) {
 8001926:	7dfb      	ldrb	r3, [r7, #23]
 8001928:	3b01      	subs	r3, #1
 800192a:	2b03      	cmp	r3, #3
 800192c:	d86b      	bhi.n	8001a06 <main+0x202>
 800192e:	a201      	add	r2, pc, #4	; (adr r2, 8001934 <main+0x130>)
 8001930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001934:	08001945 	.word	0x08001945
 8001938:	08001963 	.word	0x08001963
 800193c:	08001a1b 	.word	0x08001a1b
 8001940:	08001a01 	.word	0x08001a01
					// 1 = line, 2 = circle, 3 = polygon
					case 1:
						LCD_drawLine(previous_x, previous_y, current_x, current_y, HX8357_WHITE);
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	b218      	sxth	r0, r3
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	b219      	sxth	r1, r3
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	b21a      	sxth	r2, r3
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	b21c      	sxth	r4, r3
 8001954:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	4623      	mov	r3, r4
 800195c:	f7ff fc3b 	bl	80011d6 <LCD_drawLine>
						break;
 8001960:	e05c      	b.n	8001a1c <main+0x218>
					case 2:
						// Get distance
						x_diff = abs(current_x - previous_x);
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b00      	cmp	r3, #0
 800196a:	bfb8      	it	lt
 800196c:	425b      	neglt	r3, r3
 800196e:	60bb      	str	r3, [r7, #8]
						y_diff = abs(current_y - previous_y);
 8001970:	68fa      	ldr	r2, [r7, #12]
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b00      	cmp	r3, #0
 8001978:	bfb8      	it	lt
 800197a:	425b      	neglt	r3, r3
 800197c:	607b      	str	r3, [r7, #4]
						x_diff = pow(x_diff, 2);
 800197e:	68b8      	ldr	r0, [r7, #8]
 8001980:	f7fe fd38 	bl	80003f4 <__aeabi_i2d>
 8001984:	f04f 0200 	mov.w	r2, #0
 8001988:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800198c:	f003 f9e2 	bl	8004d54 <pow>
 8001990:	4603      	mov	r3, r0
 8001992:	460c      	mov	r4, r1
 8001994:	4618      	mov	r0, r3
 8001996:	4621      	mov	r1, r4
 8001998:	f7ff f846 	bl	8000a28 <__aeabi_d2iz>
 800199c:	4603      	mov	r3, r0
 800199e:	60bb      	str	r3, [r7, #8]
						y_diff = pow(y_diff, 2);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f7fe fd27 	bl	80003f4 <__aeabi_i2d>
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019ae:	f003 f9d1 	bl	8004d54 <pow>
 80019b2:	4603      	mov	r3, r0
 80019b4:	460c      	mov	r4, r1
 80019b6:	4618      	mov	r0, r3
 80019b8:	4621      	mov	r1, r4
 80019ba:	f7ff f835 	bl	8000a28 <__aeabi_d2iz>
 80019be:	4603      	mov	r3, r0
 80019c0:	607b      	str	r3, [r7, #4]
						radius = sqrt((x_diff + y_diff));
 80019c2:	68ba      	ldr	r2, [r7, #8]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4413      	add	r3, r2
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7fe fd13 	bl	80003f4 <__aeabi_i2d>
 80019ce:	4603      	mov	r3, r0
 80019d0:	460c      	mov	r4, r1
 80019d2:	4618      	mov	r0, r3
 80019d4:	4621      	mov	r1, r4
 80019d6:	f003 fb19 	bl	800500c <sqrt>
 80019da:	4603      	mov	r3, r0
 80019dc:	460c      	mov	r4, r1
 80019de:	4618      	mov	r0, r3
 80019e0:	4621      	mov	r1, r4
 80019e2:	f7ff f821 	bl	8000a28 <__aeabi_d2iz>
 80019e6:	4603      	mov	r3, r0
 80019e8:	603b      	str	r3, [r7, #0]
						LCD_drawCircle(previous_x, previous_y, radius, HX8357_WHITE);
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	b218      	sxth	r0, r3
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	b219      	sxth	r1, r3
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	b21a      	sxth	r2, r3
 80019f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019fa:	f7ff fb19 	bl	8001030 <LCD_drawCircle>
						break;
 80019fe:	e00d      	b.n	8001a1c <main+0x218>
					case 3:
						break;
					case 4:
						default_screen();
 8001a00:	f7ff fee4 	bl	80017cc <default_screen>
						break;
 8001a04:	e00a      	b.n	8001a1c <main+0x218>
					default: LCD_DrawPixel(current_x, current_y, HX8357_WHITE); break;
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	68fa      	ldr	r2, [r7, #12]
 8001a0c:	b291      	uxth	r1, r2
 8001a0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff fa6e 	bl	8000ef4 <LCD_DrawPixel>
 8001a18:	e000      	b.n	8001a1c <main+0x218>
						break;
 8001a1a:	bf00      	nop
					}

					// Action finished
					previous_x = 0;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	61fb      	str	r3, [r7, #28]
					previous_y = 0;
 8001a20:	2300      	movs	r3, #0
 8001a22:	61bb      	str	r3, [r7, #24]
 8001a24:	e003      	b.n	8001a2e <main+0x22a>
				} else {
					previous_x = current_x;
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	61fb      	str	r3, [r7, #28]
					previous_y = current_y;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	61bb      	str	r3, [r7, #24]
				}
			}
		}

		// Kind of like dender relay for button
		HAL_Delay(50);
 8001a2e:	2032      	movs	r0, #50	; 0x32
 8001a30:	f000 fbb4 	bl	800219c <HAL_Delay>
		current_x = readTouchX();
 8001a34:	e70c      	b.n	8001850 <main+0x4c>
 8001a36:	bf00      	nop
 8001a38:	200001a8 	.word	0x200001a8
 8001a3c:	40010800 	.word	0x40010800
 8001a40:	40011000 	.word	0x40011000
 8001a44:	40010c00 	.word	0x40010c00
 8001a48:	200001d8 	.word	0x200001d8
 8001a4c:	08005e68 	.word	0x08005e68
 8001a50:	2000001c 	.word	0x2000001c
 8001a54:	08005e7c 	.word	0x08005e7c
 8001a58:	20000030 	.word	0x20000030
 8001a5c:	08005e94 	.word	0x08005e94
 8001a60:	20000044 	.word	0x20000044
 8001a64:	08005eb0 	.word	0x08005eb0
 8001a68:	20000058 	.word	0x20000058
 8001a6c:	08005ecc 	.word	0x08005ecc

08001a70 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b094      	sub	sp, #80	; 0x50
 8001a74:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a7a:	2228      	movs	r2, #40	; 0x28
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f002 fa0d 	bl	8003e9e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a84:	f107 0314 	add.w	r3, r7, #20
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	60da      	str	r2, [r3, #12]
 8001a92:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a94:	1d3b      	adds	r3, r7, #4
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	605a      	str	r2, [r3, #4]
 8001a9c:	609a      	str	r2, [r3, #8]
 8001a9e:	60da      	str	r2, [r3, #12]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001aa4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ab6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001aba:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001abc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001ac0:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ac2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f001 fa1c 	bl	8002f04 <HAL_RCC_OscConfig>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <SystemClock_Config+0x66>
	{
		Error_Handler();
 8001ad2:	f000 f945 	bl	8001d60 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ad6:	230f      	movs	r3, #15
 8001ad8:	617b      	str	r3, [r7, #20]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ada:	2302      	movs	r3, #2
 8001adc:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ae2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ae6:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001aec:	f107 0314 	add.w	r3, r7, #20
 8001af0:	2102      	movs	r1, #2
 8001af2:	4618      	mov	r0, r3
 8001af4:	f001 fc86 	bl	8003404 <HAL_RCC_ClockConfig>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <SystemClock_Config+0x92>
	{
		Error_Handler();
 8001afe:	f000 f92f 	bl	8001d60 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001b02:	2302      	movs	r3, #2
 8001b04:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001b06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b0a:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b0c:	1d3b      	adds	r3, r7, #4
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f001 fe00 	bl	8003714 <HAL_RCCEx_PeriphCLKConfig>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <SystemClock_Config+0xae>
	{
		Error_Handler();
 8001b1a:	f000 f921 	bl	8001d60 <Error_Handler>
	}
}
 8001b1e:	bf00      	nop
 8001b20:	3750      	adds	r7, #80	; 0x50
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
	...

08001b28 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8001b2e:	1d3b      	adds	r3, r7, #4
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 8001b38:	4b18      	ldr	r3, [pc, #96]	; (8001b9c <MX_ADC1_Init+0x74>)
 8001b3a:	4a19      	ldr	r2, [pc, #100]	; (8001ba0 <MX_ADC1_Init+0x78>)
 8001b3c:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b3e:	4b17      	ldr	r3, [pc, #92]	; (8001b9c <MX_ADC1_Init+0x74>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001b44:	4b15      	ldr	r3, [pc, #84]	; (8001b9c <MX_ADC1_Init+0x74>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b4a:	4b14      	ldr	r3, [pc, #80]	; (8001b9c <MX_ADC1_Init+0x74>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b50:	4b12      	ldr	r3, [pc, #72]	; (8001b9c <MX_ADC1_Init+0x74>)
 8001b52:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001b56:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b58:	4b10      	ldr	r3, [pc, #64]	; (8001b9c <MX_ADC1_Init+0x74>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 8001b5e:	4b0f      	ldr	r3, [pc, #60]	; (8001b9c <MX_ADC1_Init+0x74>)
 8001b60:	2201      	movs	r2, #1
 8001b62:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b64:	480d      	ldr	r0, [pc, #52]	; (8001b9c <MX_ADC1_Init+0x74>)
 8001b66:	f000 fb3b 	bl	80021e0 <HAL_ADC_Init>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_ADC1_Init+0x4c>
	{
		Error_Handler();
 8001b70:	f000 f8f6 	bl	8001d60 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_12;
 8001b74:	230c      	movs	r3, #12
 8001b76:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b80:	1d3b      	adds	r3, r7, #4
 8001b82:	4619      	mov	r1, r3
 8001b84:	4805      	ldr	r0, [pc, #20]	; (8001b9c <MX_ADC1_Init+0x74>)
 8001b86:	f000 fde3 	bl	8002750 <HAL_ADC_ConfigChannel>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_ADC1_Init+0x6c>
	{
		Error_Handler();
 8001b90:	f000 f8e6 	bl	8001d60 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001b94:	bf00      	nop
 8001b96:	3710      	adds	r7, #16
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	200001a8 	.word	0x200001a8
 8001ba0:	40012400 	.word	0x40012400

08001ba4 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001ba8:	4b17      	ldr	r3, [pc, #92]	; (8001c08 <MX_SPI1_Init+0x64>)
 8001baa:	4a18      	ldr	r2, [pc, #96]	; (8001c0c <MX_SPI1_Init+0x68>)
 8001bac:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001bae:	4b16      	ldr	r3, [pc, #88]	; (8001c08 <MX_SPI1_Init+0x64>)
 8001bb0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bb4:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001bb6:	4b14      	ldr	r3, [pc, #80]	; (8001c08 <MX_SPI1_Init+0x64>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bbc:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <MX_SPI1_Init+0x64>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bc2:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <MX_SPI1_Init+0x64>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bc8:	4b0f      	ldr	r3, [pc, #60]	; (8001c08 <MX_SPI1_Init+0x64>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001bce:	4b0e      	ldr	r3, [pc, #56]	; (8001c08 <MX_SPI1_Init+0x64>)
 8001bd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bd4:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001bd6:	4b0c      	ldr	r3, [pc, #48]	; (8001c08 <MX_SPI1_Init+0x64>)
 8001bd8:	2208      	movs	r2, #8
 8001bda:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bdc:	4b0a      	ldr	r3, [pc, #40]	; (8001c08 <MX_SPI1_Init+0x64>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001be2:	4b09      	ldr	r3, [pc, #36]	; (8001c08 <MX_SPI1_Init+0x64>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001be8:	4b07      	ldr	r3, [pc, #28]	; (8001c08 <MX_SPI1_Init+0x64>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8001bee:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <MX_SPI1_Init+0x64>)
 8001bf0:	220a      	movs	r2, #10
 8001bf2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001bf4:	4804      	ldr	r0, [pc, #16]	; (8001c08 <MX_SPI1_Init+0x64>)
 8001bf6:	f001 feff 	bl	80039f8 <HAL_SPI_Init>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 8001c00:	f000 f8ae 	bl	8001d60 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001c04:	bf00      	nop
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	200001d8 	.word	0x200001d8
 8001c0c:	40013000 	.word	0x40013000

08001c10 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b088      	sub	sp, #32
 8001c14:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c16:	f107 0310 	add.w	r3, r7, #16
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	605a      	str	r2, [r3, #4]
 8001c20:	609a      	str	r2, [r3, #8]
 8001c22:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001c24:	4b4a      	ldr	r3, [pc, #296]	; (8001d50 <MX_GPIO_Init+0x140>)
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	4a49      	ldr	r2, [pc, #292]	; (8001d50 <MX_GPIO_Init+0x140>)
 8001c2a:	f043 0320 	orr.w	r3, r3, #32
 8001c2e:	6193      	str	r3, [r2, #24]
 8001c30:	4b47      	ldr	r3, [pc, #284]	; (8001d50 <MX_GPIO_Init+0x140>)
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	f003 0320 	and.w	r3, r3, #32
 8001c38:	60fb      	str	r3, [r7, #12]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001c3c:	4b44      	ldr	r3, [pc, #272]	; (8001d50 <MX_GPIO_Init+0x140>)
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	4a43      	ldr	r2, [pc, #268]	; (8001d50 <MX_GPIO_Init+0x140>)
 8001c42:	f043 0310 	orr.w	r3, r3, #16
 8001c46:	6193      	str	r3, [r2, #24]
 8001c48:	4b41      	ldr	r3, [pc, #260]	; (8001d50 <MX_GPIO_Init+0x140>)
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	f003 0310 	and.w	r3, r3, #16
 8001c50:	60bb      	str	r3, [r7, #8]
 8001c52:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001c54:	4b3e      	ldr	r3, [pc, #248]	; (8001d50 <MX_GPIO_Init+0x140>)
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	4a3d      	ldr	r2, [pc, #244]	; (8001d50 <MX_GPIO_Init+0x140>)
 8001c5a:	f043 0304 	orr.w	r3, r3, #4
 8001c5e:	6193      	str	r3, [r2, #24]
 8001c60:	4b3b      	ldr	r3, [pc, #236]	; (8001d50 <MX_GPIO_Init+0x140>)
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	f003 0304 	and.w	r3, r3, #4
 8001c68:	607b      	str	r3, [r7, #4]
 8001c6a:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001c6c:	4b38      	ldr	r3, [pc, #224]	; (8001d50 <MX_GPIO_Init+0x140>)
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	4a37      	ldr	r2, [pc, #220]	; (8001d50 <MX_GPIO_Init+0x140>)
 8001c72:	f043 0308 	orr.w	r3, r3, #8
 8001c76:	6193      	str	r3, [r2, #24]
 8001c78:	4b35      	ldr	r3, [pc, #212]	; (8001d50 <MX_GPIO_Init+0x140>)
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	f003 0308 	and.w	r3, r3, #8
 8001c80:	603b      	str	r3, [r7, #0]
 8001c82:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8001c84:	2200      	movs	r2, #0
 8001c86:	2180      	movs	r1, #128	; 0x80
 8001c88:	4832      	ldr	r0, [pc, #200]	; (8001d54 <MX_GPIO_Init+0x144>)
 8001c8a:	f001 f923 	bl	8002ed4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LCD_RST_Pin|YMIN_Pin, GPIO_PIN_RESET);
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001c94:	4830      	ldr	r0, [pc, #192]	; (8001d58 <MX_GPIO_Init+0x148>)
 8001c96:	f001 f91d 	bl	8002ed4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2140      	movs	r1, #64	; 0x40
 8001c9e:	482f      	ldr	r0, [pc, #188]	; (8001d5c <MX_GPIO_Init+0x14c>)
 8001ca0:	f001 f918 	bl	8002ed4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : XMIN_Pin */
	GPIO_InitStruct.Pin = XMIN_Pin;
 8001ca4:	2308      	movs	r3, #8
 8001ca6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(XMIN_GPIO_Port, &GPIO_InitStruct);
 8001cb0:	f107 0310 	add.w	r3, r7, #16
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4827      	ldr	r0, [pc, #156]	; (8001d54 <MX_GPIO_Init+0x144>)
 8001cb8:	f000 ffb2 	bl	8002c20 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_DC_Pin */
	GPIO_InitStruct.Pin = LCD_DC_Pin;
 8001cbc:	2380      	movs	r3, #128	; 0x80
 8001cbe:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc8:	2302      	movs	r3, #2
 8001cca:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 8001ccc:	f107 0310 	add.w	r3, r7, #16
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4820      	ldr	r0, [pc, #128]	; (8001d54 <MX_GPIO_Init+0x144>)
 8001cd4:	f000 ffa4 	bl	8002c20 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_RST_Pin */
	GPIO_InitStruct.Pin = LCD_RST_Pin;
 8001cd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cdc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8001cea:	f107 0310 	add.w	r3, r7, #16
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4819      	ldr	r0, [pc, #100]	; (8001d58 <MX_GPIO_Init+0x148>)
 8001cf2:	f000 ff95 	bl	8002c20 <HAL_GPIO_Init>

	/*Configure GPIO pin : YMIN_Pin */
	GPIO_InitStruct.Pin = YMIN_Pin;
 8001cf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cfa:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d00:	2302      	movs	r3, #2
 8001d02:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d04:	2303      	movs	r3, #3
 8001d06:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(YMIN_GPIO_Port, &GPIO_InitStruct);
 8001d08:	f107 0310 	add.w	r3, r7, #16
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4812      	ldr	r0, [pc, #72]	; (8001d58 <MX_GPIO_Init+0x148>)
 8001d10:	f000 ff86 	bl	8002c20 <HAL_GPIO_Init>

	/*Configure GPIO pin : XPLUS_Pin */
	GPIO_InitStruct.Pin = XPLUS_Pin;
 8001d14:	2320      	movs	r3, #32
 8001d16:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(XPLUS_GPIO_Port, &GPIO_InitStruct);
 8001d20:	f107 0310 	add.w	r3, r7, #16
 8001d24:	4619      	mov	r1, r3
 8001d26:	480d      	ldr	r0, [pc, #52]	; (8001d5c <MX_GPIO_Init+0x14c>)
 8001d28:	f000 ff7a 	bl	8002c20 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_CS_Pin */
	GPIO_InitStruct.Pin = LCD_CS_Pin;
 8001d2c:	2340      	movs	r3, #64	; 0x40
 8001d2e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d30:	2301      	movs	r3, #1
 8001d32:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8001d3c:	f107 0310 	add.w	r3, r7, #16
 8001d40:	4619      	mov	r1, r3
 8001d42:	4806      	ldr	r0, [pc, #24]	; (8001d5c <MX_GPIO_Init+0x14c>)
 8001d44:	f000 ff6c 	bl	8002c20 <HAL_GPIO_Init>

}
 8001d48:	bf00      	nop
 8001d4a:	3720      	adds	r7, #32
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40021000 	.word	0x40021000
 8001d54:	40011000 	.word	0x40011000
 8001d58:	40010800 	.word	0x40010800
 8001d5c:	40010c00 	.word	0x40010c00

08001d60 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001d64:	bf00      	nop
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr

08001d6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d72:	4b15      	ldr	r3, [pc, #84]	; (8001dc8 <HAL_MspInit+0x5c>)
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	4a14      	ldr	r2, [pc, #80]	; (8001dc8 <HAL_MspInit+0x5c>)
 8001d78:	f043 0301 	orr.w	r3, r3, #1
 8001d7c:	6193      	str	r3, [r2, #24]
 8001d7e:	4b12      	ldr	r3, [pc, #72]	; (8001dc8 <HAL_MspInit+0x5c>)
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	60bb      	str	r3, [r7, #8]
 8001d88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d8a:	4b0f      	ldr	r3, [pc, #60]	; (8001dc8 <HAL_MspInit+0x5c>)
 8001d8c:	69db      	ldr	r3, [r3, #28]
 8001d8e:	4a0e      	ldr	r2, [pc, #56]	; (8001dc8 <HAL_MspInit+0x5c>)
 8001d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d94:	61d3      	str	r3, [r2, #28]
 8001d96:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <HAL_MspInit+0x5c>)
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d9e:	607b      	str	r3, [r7, #4]
 8001da0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001da2:	4b0a      	ldr	r3, [pc, #40]	; (8001dcc <HAL_MspInit+0x60>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	4a04      	ldr	r2, [pc, #16]	; (8001dcc <HAL_MspInit+0x60>)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dbe:	bf00      	nop
 8001dc0:	3714      	adds	r7, #20
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bc80      	pop	{r7}
 8001dc6:	4770      	bx	lr
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	40010000 	.word	0x40010000

08001dd0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b088      	sub	sp, #32
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd8:	f107 0310 	add.w	r3, r7, #16
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a14      	ldr	r2, [pc, #80]	; (8001e3c <HAL_ADC_MspInit+0x6c>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d121      	bne.n	8001e34 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001df0:	4b13      	ldr	r3, [pc, #76]	; (8001e40 <HAL_ADC_MspInit+0x70>)
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	4a12      	ldr	r2, [pc, #72]	; (8001e40 <HAL_ADC_MspInit+0x70>)
 8001df6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dfa:	6193      	str	r3, [r2, #24]
 8001dfc:	4b10      	ldr	r3, [pc, #64]	; (8001e40 <HAL_ADC_MspInit+0x70>)
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e08:	4b0d      	ldr	r3, [pc, #52]	; (8001e40 <HAL_ADC_MspInit+0x70>)
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	4a0c      	ldr	r2, [pc, #48]	; (8001e40 <HAL_ADC_MspInit+0x70>)
 8001e0e:	f043 0310 	orr.w	r3, r3, #16
 8001e12:	6193      	str	r3, [r2, #24]
 8001e14:	4b0a      	ldr	r3, [pc, #40]	; (8001e40 <HAL_ADC_MspInit+0x70>)
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	f003 0310 	and.w	r3, r3, #16
 8001e1c:	60bb      	str	r3, [r7, #8]
 8001e1e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PC2     ------> ADC1_IN12 
    */
    GPIO_InitStruct.Pin = YPLUS_Pin;
 8001e20:	2304      	movs	r3, #4
 8001e22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e24:	2303      	movs	r3, #3
 8001e26:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(YPLUS_GPIO_Port, &GPIO_InitStruct);
 8001e28:	f107 0310 	add.w	r3, r7, #16
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4805      	ldr	r0, [pc, #20]	; (8001e44 <HAL_ADC_MspInit+0x74>)
 8001e30:	f000 fef6 	bl	8002c20 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e34:	bf00      	nop
 8001e36:	3720      	adds	r7, #32
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40012400 	.word	0x40012400
 8001e40:	40021000 	.word	0x40021000
 8001e44:	40011000 	.word	0x40011000

08001e48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b088      	sub	sp, #32
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e50:	f107 0310 	add.w	r3, r7, #16
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	605a      	str	r2, [r3, #4]
 8001e5a:	609a      	str	r2, [r3, #8]
 8001e5c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a1b      	ldr	r2, [pc, #108]	; (8001ed0 <HAL_SPI_MspInit+0x88>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d12f      	bne.n	8001ec8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e68:	4b1a      	ldr	r3, [pc, #104]	; (8001ed4 <HAL_SPI_MspInit+0x8c>)
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	4a19      	ldr	r2, [pc, #100]	; (8001ed4 <HAL_SPI_MspInit+0x8c>)
 8001e6e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e72:	6193      	str	r3, [r2, #24]
 8001e74:	4b17      	ldr	r3, [pc, #92]	; (8001ed4 <HAL_SPI_MspInit+0x8c>)
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e7c:	60fb      	str	r3, [r7, #12]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e80:	4b14      	ldr	r3, [pc, #80]	; (8001ed4 <HAL_SPI_MspInit+0x8c>)
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	4a13      	ldr	r2, [pc, #76]	; (8001ed4 <HAL_SPI_MspInit+0x8c>)
 8001e86:	f043 0304 	orr.w	r3, r3, #4
 8001e8a:	6193      	str	r3, [r2, #24]
 8001e8c:	4b11      	ldr	r3, [pc, #68]	; (8001ed4 <HAL_SPI_MspInit+0x8c>)
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	60bb      	str	r3, [r7, #8]
 8001e96:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001e98:	23a0      	movs	r3, #160	; 0xa0
 8001e9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea4:	f107 0310 	add.w	r3, r7, #16
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	480b      	ldr	r0, [pc, #44]	; (8001ed8 <HAL_SPI_MspInit+0x90>)
 8001eac:	f000 feb8 	bl	8002c20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001eb0:	2340      	movs	r3, #64	; 0x40
 8001eb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ebc:	f107 0310 	add.w	r3, r7, #16
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4805      	ldr	r0, [pc, #20]	; (8001ed8 <HAL_SPI_MspInit+0x90>)
 8001ec4:	f000 feac 	bl	8002c20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ec8:	bf00      	nop
 8001eca:	3720      	adds	r7, #32
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40013000 	.word	0x40013000
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	40010800 	.word	0x40010800

08001edc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ee0:	bf00      	nop
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bc80      	pop	{r7}
 8001ee6:	4770      	bx	lr

08001ee8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eec:	e7fe      	b.n	8001eec <HardFault_Handler+0x4>

08001eee <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ef2:	e7fe      	b.n	8001ef2 <MemManage_Handler+0x4>

08001ef4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ef8:	e7fe      	b.n	8001ef8 <BusFault_Handler+0x4>

08001efa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001efa:	b480      	push	{r7}
 8001efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001efe:	e7fe      	b.n	8001efe <UsageFault_Handler+0x4>

08001f00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bc80      	pop	{r7}
 8001f0a:	4770      	bx	lr

08001f0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f10:	bf00      	nop
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bc80      	pop	{r7}
 8001f16:	4770      	bx	lr

08001f18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f1c:	bf00      	nop
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bc80      	pop	{r7}
 8001f22:	4770      	bx	lr

08001f24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f28:	f000 f91c 	bl	8002164 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f2c:	bf00      	nop
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	617b      	str	r3, [r7, #20]
 8001f40:	e00a      	b.n	8001f58 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f42:	f3af 8000 	nop.w
 8001f46:	4601      	mov	r1, r0
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	1c5a      	adds	r2, r3, #1
 8001f4c:	60ba      	str	r2, [r7, #8]
 8001f4e:	b2ca      	uxtb	r2, r1
 8001f50:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	3301      	adds	r3, #1
 8001f56:	617b      	str	r3, [r7, #20]
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	dbf0      	blt.n	8001f42 <_read+0x12>
	}

return len;
 8001f60:	687b      	ldr	r3, [r7, #4]
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3718      	adds	r7, #24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <_close>:
	}
	return len;
}

int _close(int file)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b083      	sub	sp, #12
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
	return -1;
 8001f72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr

08001f80 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f90:	605a      	str	r2, [r3, #4]
	return 0;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bc80      	pop	{r7}
 8001f9c:	4770      	bx	lr

08001f9e <_isatty>:

int _isatty(int file)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
	return 1;
 8001fa6:	2301      	movs	r3, #1
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bc80      	pop	{r7}
 8001fb0:	4770      	bx	lr

08001fb2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b085      	sub	sp, #20
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	60f8      	str	r0, [r7, #12]
 8001fba:	60b9      	str	r1, [r7, #8]
 8001fbc:	607a      	str	r2, [r7, #4]
	return 0;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3714      	adds	r7, #20
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bc80      	pop	{r7}
 8001fc8:	4770      	bx	lr
	...

08001fcc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001fd4:	4b11      	ldr	r3, [pc, #68]	; (800201c <_sbrk+0x50>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d102      	bne.n	8001fe2 <_sbrk+0x16>
		heap_end = &end;
 8001fdc:	4b0f      	ldr	r3, [pc, #60]	; (800201c <_sbrk+0x50>)
 8001fde:	4a10      	ldr	r2, [pc, #64]	; (8002020 <_sbrk+0x54>)
 8001fe0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001fe2:	4b0e      	ldr	r3, [pc, #56]	; (800201c <_sbrk+0x50>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001fe8:	4b0c      	ldr	r3, [pc, #48]	; (800201c <_sbrk+0x50>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4413      	add	r3, r2
 8001ff0:	466a      	mov	r2, sp
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d907      	bls.n	8002006 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001ff6:	f001 ff1d 	bl	8003e34 <__errno>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	230c      	movs	r3, #12
 8001ffe:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002000:	f04f 33ff 	mov.w	r3, #4294967295
 8002004:	e006      	b.n	8002014 <_sbrk+0x48>
	}

	heap_end += incr;
 8002006:	4b05      	ldr	r3, [pc, #20]	; (800201c <_sbrk+0x50>)
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4413      	add	r3, r2
 800200e:	4a03      	ldr	r2, [pc, #12]	; (800201c <_sbrk+0x50>)
 8002010:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002012:	68fb      	ldr	r3, [r7, #12]
}
 8002014:	4618      	mov	r0, r3
 8002016:	3710      	adds	r7, #16
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	2000019c 	.word	0x2000019c
 8002020:	20000238 	.word	0x20000238

08002024 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002028:	4b15      	ldr	r3, [pc, #84]	; (8002080 <SystemInit+0x5c>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a14      	ldr	r2, [pc, #80]	; (8002080 <SystemInit+0x5c>)
 800202e:	f043 0301 	orr.w	r3, r3, #1
 8002032:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002034:	4b12      	ldr	r3, [pc, #72]	; (8002080 <SystemInit+0x5c>)
 8002036:	685a      	ldr	r2, [r3, #4]
 8002038:	4911      	ldr	r1, [pc, #68]	; (8002080 <SystemInit+0x5c>)
 800203a:	4b12      	ldr	r3, [pc, #72]	; (8002084 <SystemInit+0x60>)
 800203c:	4013      	ands	r3, r2
 800203e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002040:	4b0f      	ldr	r3, [pc, #60]	; (8002080 <SystemInit+0x5c>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a0e      	ldr	r2, [pc, #56]	; (8002080 <SystemInit+0x5c>)
 8002046:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800204a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800204e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002050:	4b0b      	ldr	r3, [pc, #44]	; (8002080 <SystemInit+0x5c>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a0a      	ldr	r2, [pc, #40]	; (8002080 <SystemInit+0x5c>)
 8002056:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800205a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800205c:	4b08      	ldr	r3, [pc, #32]	; (8002080 <SystemInit+0x5c>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	4a07      	ldr	r2, [pc, #28]	; (8002080 <SystemInit+0x5c>)
 8002062:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002066:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002068:	4b05      	ldr	r3, [pc, #20]	; (8002080 <SystemInit+0x5c>)
 800206a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800206e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002070:	4b05      	ldr	r3, [pc, #20]	; (8002088 <SystemInit+0x64>)
 8002072:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002076:	609a      	str	r2, [r3, #8]
#endif 
}
 8002078:	bf00      	nop
 800207a:	46bd      	mov	sp, r7
 800207c:	bc80      	pop	{r7}
 800207e:	4770      	bx	lr
 8002080:	40021000 	.word	0x40021000
 8002084:	f8ff0000 	.word	0xf8ff0000
 8002088:	e000ed00 	.word	0xe000ed00

0800208c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800208c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800208e:	e003      	b.n	8002098 <LoopCopyDataInit>

08002090 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002090:	4b0b      	ldr	r3, [pc, #44]	; (80020c0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002092:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002094:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002096:	3104      	adds	r1, #4

08002098 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002098:	480a      	ldr	r0, [pc, #40]	; (80020c4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800209a:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800209c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800209e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80020a0:	d3f6      	bcc.n	8002090 <CopyDataInit>
  ldr r2, =_sbss
 80020a2:	4a0a      	ldr	r2, [pc, #40]	; (80020cc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80020a4:	e002      	b.n	80020ac <LoopFillZerobss>

080020a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80020a6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80020a8:	f842 3b04 	str.w	r3, [r2], #4

080020ac <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80020ac:	4b08      	ldr	r3, [pc, #32]	; (80020d0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80020ae:	429a      	cmp	r2, r3
  bcc FillZerobss
 80020b0:	d3f9      	bcc.n	80020a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80020b2:	f7ff ffb7 	bl	8002024 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020b6:	f001 fec3 	bl	8003e40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020ba:	f7ff fba3 	bl	8001804 <main>
  bx lr
 80020be:	4770      	bx	lr
  ldr r3, =_sidata
 80020c0:	08006010 	.word	0x08006010
  ldr r0, =_sdata
 80020c4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80020c8:	200000e0 	.word	0x200000e0
  ldr r2, =_sbss
 80020cc:	200000e0 	.word	0x200000e0
  ldr r3, = _ebss
 80020d0:	20000238 	.word	0x20000238

080020d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020d4:	e7fe      	b.n	80020d4 <ADC1_2_IRQHandler>
	...

080020d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020dc:	4b08      	ldr	r3, [pc, #32]	; (8002100 <HAL_Init+0x28>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a07      	ldr	r2, [pc, #28]	; (8002100 <HAL_Init+0x28>)
 80020e2:	f043 0310 	orr.w	r3, r3, #16
 80020e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020e8:	2003      	movs	r0, #3
 80020ea:	f000 fd65 	bl	8002bb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020ee:	2000      	movs	r0, #0
 80020f0:	f000 f808 	bl	8002104 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020f4:	f7ff fe3a 	bl	8001d6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	40022000 	.word	0x40022000

08002104 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800210c:	4b12      	ldr	r3, [pc, #72]	; (8002158 <HAL_InitTick+0x54>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	4b12      	ldr	r3, [pc, #72]	; (800215c <HAL_InitTick+0x58>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	4619      	mov	r1, r3
 8002116:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800211a:	fbb3 f3f1 	udiv	r3, r3, r1
 800211e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002122:	4618      	mov	r0, r3
 8002124:	f000 fd6f 	bl	8002c06 <HAL_SYSTICK_Config>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e00e      	b.n	8002150 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2b0f      	cmp	r3, #15
 8002136:	d80a      	bhi.n	800214e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002138:	2200      	movs	r2, #0
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	f04f 30ff 	mov.w	r0, #4294967295
 8002140:	f000 fd45 	bl	8002bce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002144:	4a06      	ldr	r2, [pc, #24]	; (8002160 <HAL_InitTick+0x5c>)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800214a:	2300      	movs	r3, #0
 800214c:	e000      	b.n	8002150 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
}
 8002150:	4618      	mov	r0, r3
 8002152:	3708      	adds	r7, #8
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	2000006c 	.word	0x2000006c
 800215c:	20000074 	.word	0x20000074
 8002160:	20000070 	.word	0x20000070

08002164 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002168:	4b05      	ldr	r3, [pc, #20]	; (8002180 <HAL_IncTick+0x1c>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	461a      	mov	r2, r3
 800216e:	4b05      	ldr	r3, [pc, #20]	; (8002184 <HAL_IncTick+0x20>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4413      	add	r3, r2
 8002174:	4a03      	ldr	r2, [pc, #12]	; (8002184 <HAL_IncTick+0x20>)
 8002176:	6013      	str	r3, [r2, #0]
}
 8002178:	bf00      	nop
 800217a:	46bd      	mov	sp, r7
 800217c:	bc80      	pop	{r7}
 800217e:	4770      	bx	lr
 8002180:	20000074 	.word	0x20000074
 8002184:	20000230 	.word	0x20000230

08002188 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  return uwTick;
 800218c:	4b02      	ldr	r3, [pc, #8]	; (8002198 <HAL_GetTick+0x10>)
 800218e:	681b      	ldr	r3, [r3, #0]
}
 8002190:	4618      	mov	r0, r3
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr
 8002198:	20000230 	.word	0x20000230

0800219c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021a4:	f7ff fff0 	bl	8002188 <HAL_GetTick>
 80021a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b4:	d005      	beq.n	80021c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021b6:	4b09      	ldr	r3, [pc, #36]	; (80021dc <HAL_Delay+0x40>)
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	461a      	mov	r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	4413      	add	r3, r2
 80021c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021c2:	bf00      	nop
 80021c4:	f7ff ffe0 	bl	8002188 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d8f7      	bhi.n	80021c4 <HAL_Delay+0x28>
  {
  }
}
 80021d4:	bf00      	nop
 80021d6:	3710      	adds	r7, #16
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	20000074 	.word	0x20000074

080021e0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021e8:	2300      	movs	r3, #0
 80021ea:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80021ec:	2300      	movs	r3, #0
 80021ee:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80021f0:	2300      	movs	r3, #0
 80021f2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80021f4:	2300      	movs	r3, #0
 80021f6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e0be      	b.n	8002380 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220c:	2b00      	cmp	r3, #0
 800220e:	d109      	bne.n	8002224 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f7ff fdd6 	bl	8001dd0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f000 fbdd 	bl	80029e4 <ADC_ConversionStop_Disable>
 800222a:	4603      	mov	r3, r0
 800222c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002232:	f003 0310 	and.w	r3, r3, #16
 8002236:	2b00      	cmp	r3, #0
 8002238:	f040 8099 	bne.w	800236e <HAL_ADC_Init+0x18e>
 800223c:	7dfb      	ldrb	r3, [r7, #23]
 800223e:	2b00      	cmp	r3, #0
 8002240:	f040 8095 	bne.w	800236e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002248:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800224c:	f023 0302 	bic.w	r3, r3, #2
 8002250:	f043 0202 	orr.w	r2, r3, #2
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002260:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	7b1b      	ldrb	r3, [r3, #12]
 8002266:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002268:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	4313      	orrs	r3, r2
 800226e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002278:	d003      	beq.n	8002282 <HAL_ADC_Init+0xa2>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d102      	bne.n	8002288 <HAL_ADC_Init+0xa8>
 8002282:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002286:	e000      	b.n	800228a <HAL_ADC_Init+0xaa>
 8002288:	2300      	movs	r3, #0
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	4313      	orrs	r3, r2
 800228e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	7d1b      	ldrb	r3, [r3, #20]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d119      	bne.n	80022cc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	7b1b      	ldrb	r3, [r3, #12]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d109      	bne.n	80022b4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	3b01      	subs	r3, #1
 80022a6:	035a      	lsls	r2, r3, #13
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022b0:	613b      	str	r3, [r7, #16]
 80022b2:	e00b      	b.n	80022cc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b8:	f043 0220 	orr.w	r2, r3, #32
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c4:	f043 0201 	orr.w	r2, r3, #1
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	430a      	orrs	r2, r1
 80022de:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	689a      	ldr	r2, [r3, #8]
 80022e6:	4b28      	ldr	r3, [pc, #160]	; (8002388 <HAL_ADC_Init+0x1a8>)
 80022e8:	4013      	ands	r3, r2
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	6812      	ldr	r2, [r2, #0]
 80022ee:	68b9      	ldr	r1, [r7, #8]
 80022f0:	430b      	orrs	r3, r1
 80022f2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022fc:	d003      	beq.n	8002306 <HAL_ADC_Init+0x126>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d104      	bne.n	8002310 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	3b01      	subs	r3, #1
 800230c:	051b      	lsls	r3, r3, #20
 800230e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002316:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	430a      	orrs	r2, r1
 8002322:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	689a      	ldr	r2, [r3, #8]
 800232a:	4b18      	ldr	r3, [pc, #96]	; (800238c <HAL_ADC_Init+0x1ac>)
 800232c:	4013      	ands	r3, r2
 800232e:	68ba      	ldr	r2, [r7, #8]
 8002330:	429a      	cmp	r2, r3
 8002332:	d10b      	bne.n	800234c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800233e:	f023 0303 	bic.w	r3, r3, #3
 8002342:	f043 0201 	orr.w	r2, r3, #1
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800234a:	e018      	b.n	800237e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002350:	f023 0312 	bic.w	r3, r3, #18
 8002354:	f043 0210 	orr.w	r2, r3, #16
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002360:	f043 0201 	orr.w	r2, r3, #1
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800236c:	e007      	b.n	800237e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002372:	f043 0210 	orr.w	r2, r3, #16
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800237e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002380:	4618      	mov	r0, r3
 8002382:	3718      	adds	r7, #24
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	ffe1f7fd 	.word	0xffe1f7fd
 800238c:	ff1f0efe 	.word	0xff1f0efe

08002390 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002398:	2300      	movs	r3, #0
 800239a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d101      	bne.n	80023aa <HAL_ADC_Start+0x1a>
 80023a6:	2302      	movs	r3, #2
 80023a8:	e098      	b.n	80024dc <HAL_ADC_Start+0x14c>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2201      	movs	r2, #1
 80023ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 fac4 	bl	8002940 <ADC_Enable>
 80023b8:	4603      	mov	r3, r0
 80023ba:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80023bc:	7bfb      	ldrb	r3, [r7, #15]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f040 8087 	bne.w	80024d2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023cc:	f023 0301 	bic.w	r3, r3, #1
 80023d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a41      	ldr	r2, [pc, #260]	; (80024e4 <HAL_ADC_Start+0x154>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d105      	bne.n	80023ee <HAL_ADC_Start+0x5e>
 80023e2:	4b41      	ldr	r3, [pc, #260]	; (80024e8 <HAL_ADC_Start+0x158>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d115      	bne.n	800241a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002404:	2b00      	cmp	r3, #0
 8002406:	d026      	beq.n	8002456 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002410:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002418:	e01d      	b.n	8002456 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a2f      	ldr	r2, [pc, #188]	; (80024e8 <HAL_ADC_Start+0x158>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d004      	beq.n	800243a <HAL_ADC_Start+0xaa>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a2b      	ldr	r2, [pc, #172]	; (80024e4 <HAL_ADC_Start+0x154>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d10d      	bne.n	8002456 <HAL_ADC_Start+0xc6>
 800243a:	4b2b      	ldr	r3, [pc, #172]	; (80024e8 <HAL_ADC_Start+0x158>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002442:	2b00      	cmp	r3, #0
 8002444:	d007      	beq.n	8002456 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800244e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800245a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d006      	beq.n	8002470 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002466:	f023 0206 	bic.w	r2, r3, #6
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	62da      	str	r2, [r3, #44]	; 0x2c
 800246e:	e002      	b.n	8002476 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f06f 0202 	mvn.w	r2, #2
 8002486:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002492:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002496:	d113      	bne.n	80024c0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800249c:	4a11      	ldr	r2, [pc, #68]	; (80024e4 <HAL_ADC_Start+0x154>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d105      	bne.n	80024ae <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80024a2:	4b11      	ldr	r3, [pc, #68]	; (80024e8 <HAL_ADC_Start+0x158>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d108      	bne.n	80024c0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80024bc:	609a      	str	r2, [r3, #8]
 80024be:	e00c      	b.n	80024da <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689a      	ldr	r2, [r3, #8]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80024ce:	609a      	str	r2, [r3, #8]
 80024d0:	e003      	b.n	80024da <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80024da:	7bfb      	ldrb	r3, [r7, #15]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40012800 	.word	0x40012800
 80024e8:	40012400 	.word	0x40012400

080024ec <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024f4:	2300      	movs	r3, #0
 80024f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d101      	bne.n	8002506 <HAL_ADC_Stop+0x1a>
 8002502:	2302      	movs	r3, #2
 8002504:	e01a      	b.n	800253c <HAL_ADC_Stop+0x50>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2201      	movs	r2, #1
 800250a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 fa68 	bl	80029e4 <ADC_ConversionStop_Disable>
 8002514:	4603      	mov	r3, r0
 8002516:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002518:	7bfb      	ldrb	r3, [r7, #15]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d109      	bne.n	8002532 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002522:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002526:	f023 0301 	bic.w	r3, r3, #1
 800252a:	f043 0201 	orr.w	r2, r3, #1
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800253a:	7bfb      	ldrb	r3, [r7, #15]
}
 800253c:	4618      	mov	r0, r3
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002544:	b590      	push	{r4, r7, lr}
 8002546:	b087      	sub	sp, #28
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800254e:	2300      	movs	r3, #0
 8002550:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002552:	2300      	movs	r3, #0
 8002554:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002556:	2300      	movs	r3, #0
 8002558:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800255a:	f7ff fe15 	bl	8002188 <HAL_GetTick>
 800255e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00b      	beq.n	8002586 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002572:	f043 0220 	orr.w	r2, r3, #32
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e0c8      	b.n	8002718 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002590:	2b00      	cmp	r3, #0
 8002592:	d12a      	bne.n	80025ea <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d123      	bne.n	80025ea <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80025a2:	e01a      	b.n	80025da <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025aa:	d016      	beq.n	80025da <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d007      	beq.n	80025c2 <HAL_ADC_PollForConversion+0x7e>
 80025b2:	f7ff fde9 	bl	8002188 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d20b      	bcs.n	80025da <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c6:	f043 0204 	orr.w	r2, r3, #4
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e09e      	b.n	8002718 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d0dd      	beq.n	80025a4 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80025e8:	e06c      	b.n	80026c4 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80025ea:	4b4d      	ldr	r3, [pc, #308]	; (8002720 <HAL_ADC_PollForConversion+0x1dc>)
 80025ec:	681c      	ldr	r4, [r3, #0]
 80025ee:	2002      	movs	r0, #2
 80025f0:	f001 f946 	bl	8003880 <HAL_RCCEx_GetPeriphCLKFreq>
 80025f4:	4603      	mov	r3, r0
 80025f6:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6919      	ldr	r1, [r3, #16]
 8002600:	4b48      	ldr	r3, [pc, #288]	; (8002724 <HAL_ADC_PollForConversion+0x1e0>)
 8002602:	400b      	ands	r3, r1
 8002604:	2b00      	cmp	r3, #0
 8002606:	d118      	bne.n	800263a <HAL_ADC_PollForConversion+0xf6>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68d9      	ldr	r1, [r3, #12]
 800260e:	4b46      	ldr	r3, [pc, #280]	; (8002728 <HAL_ADC_PollForConversion+0x1e4>)
 8002610:	400b      	ands	r3, r1
 8002612:	2b00      	cmp	r3, #0
 8002614:	d111      	bne.n	800263a <HAL_ADC_PollForConversion+0xf6>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	6919      	ldr	r1, [r3, #16]
 800261c:	4b43      	ldr	r3, [pc, #268]	; (800272c <HAL_ADC_PollForConversion+0x1e8>)
 800261e:	400b      	ands	r3, r1
 8002620:	2b00      	cmp	r3, #0
 8002622:	d108      	bne.n	8002636 <HAL_ADC_PollForConversion+0xf2>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68d9      	ldr	r1, [r3, #12]
 800262a:	4b41      	ldr	r3, [pc, #260]	; (8002730 <HAL_ADC_PollForConversion+0x1ec>)
 800262c:	400b      	ands	r3, r1
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_ADC_PollForConversion+0xf2>
 8002632:	2314      	movs	r3, #20
 8002634:	e020      	b.n	8002678 <HAL_ADC_PollForConversion+0x134>
 8002636:	2329      	movs	r3, #41	; 0x29
 8002638:	e01e      	b.n	8002678 <HAL_ADC_PollForConversion+0x134>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	6919      	ldr	r1, [r3, #16]
 8002640:	4b3a      	ldr	r3, [pc, #232]	; (800272c <HAL_ADC_PollForConversion+0x1e8>)
 8002642:	400b      	ands	r3, r1
 8002644:	2b00      	cmp	r3, #0
 8002646:	d106      	bne.n	8002656 <HAL_ADC_PollForConversion+0x112>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68d9      	ldr	r1, [r3, #12]
 800264e:	4b38      	ldr	r3, [pc, #224]	; (8002730 <HAL_ADC_PollForConversion+0x1ec>)
 8002650:	400b      	ands	r3, r1
 8002652:	2b00      	cmp	r3, #0
 8002654:	d00d      	beq.n	8002672 <HAL_ADC_PollForConversion+0x12e>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6919      	ldr	r1, [r3, #16]
 800265c:	4b35      	ldr	r3, [pc, #212]	; (8002734 <HAL_ADC_PollForConversion+0x1f0>)
 800265e:	400b      	ands	r3, r1
 8002660:	2b00      	cmp	r3, #0
 8002662:	d108      	bne.n	8002676 <HAL_ADC_PollForConversion+0x132>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68d9      	ldr	r1, [r3, #12]
 800266a:	4b32      	ldr	r3, [pc, #200]	; (8002734 <HAL_ADC_PollForConversion+0x1f0>)
 800266c:	400b      	ands	r3, r1
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <HAL_ADC_PollForConversion+0x132>
 8002672:	2354      	movs	r3, #84	; 0x54
 8002674:	e000      	b.n	8002678 <HAL_ADC_PollForConversion+0x134>
 8002676:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002678:	fb02 f303 	mul.w	r3, r2, r3
 800267c:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800267e:	e01d      	b.n	80026bc <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002686:	d016      	beq.n	80026b6 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d007      	beq.n	800269e <HAL_ADC_PollForConversion+0x15a>
 800268e:	f7ff fd7b 	bl	8002188 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	429a      	cmp	r2, r3
 800269c:	d20b      	bcs.n	80026b6 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a2:	f043 0204 	orr.w	r2, r3, #4
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e030      	b.n	8002718 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	3301      	adds	r3, #1
 80026ba:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d8dd      	bhi.n	8002680 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f06f 0212 	mvn.w	r2, #18
 80026cc:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80026e4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80026e8:	d115      	bne.n	8002716 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d111      	bne.n	8002716 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002702:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d105      	bne.n	8002716 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270e:	f043 0201 	orr.w	r2, r3, #1
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	371c      	adds	r7, #28
 800271c:	46bd      	mov	sp, r7
 800271e:	bd90      	pop	{r4, r7, pc}
 8002720:	2000006c 	.word	0x2000006c
 8002724:	24924924 	.word	0x24924924
 8002728:	00924924 	.word	0x00924924
 800272c:	12492492 	.word	0x12492492
 8002730:	00492492 	.word	0x00492492
 8002734:	00249249 	.word	0x00249249

08002738 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002746:	4618      	mov	r0, r3
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	bc80      	pop	{r7}
 800274e:	4770      	bx	lr

08002750 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800275a:	2300      	movs	r3, #0
 800275c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800275e:	2300      	movs	r3, #0
 8002760:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002768:	2b01      	cmp	r3, #1
 800276a:	d101      	bne.n	8002770 <HAL_ADC_ConfigChannel+0x20>
 800276c:	2302      	movs	r3, #2
 800276e:	e0dc      	b.n	800292a <HAL_ADC_ConfigChannel+0x1da>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	2b06      	cmp	r3, #6
 800277e:	d81c      	bhi.n	80027ba <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685a      	ldr	r2, [r3, #4]
 800278a:	4613      	mov	r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	4413      	add	r3, r2
 8002790:	3b05      	subs	r3, #5
 8002792:	221f      	movs	r2, #31
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	43db      	mvns	r3, r3
 800279a:	4019      	ands	r1, r3
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	6818      	ldr	r0, [r3, #0]
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685a      	ldr	r2, [r3, #4]
 80027a4:	4613      	mov	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4413      	add	r3, r2
 80027aa:	3b05      	subs	r3, #5
 80027ac:	fa00 f203 	lsl.w	r2, r0, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	430a      	orrs	r2, r1
 80027b6:	635a      	str	r2, [r3, #52]	; 0x34
 80027b8:	e03c      	b.n	8002834 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	2b0c      	cmp	r3, #12
 80027c0:	d81c      	bhi.n	80027fc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685a      	ldr	r2, [r3, #4]
 80027cc:	4613      	mov	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	4413      	add	r3, r2
 80027d2:	3b23      	subs	r3, #35	; 0x23
 80027d4:	221f      	movs	r2, #31
 80027d6:	fa02 f303 	lsl.w	r3, r2, r3
 80027da:	43db      	mvns	r3, r3
 80027dc:	4019      	ands	r1, r3
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	6818      	ldr	r0, [r3, #0]
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685a      	ldr	r2, [r3, #4]
 80027e6:	4613      	mov	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4413      	add	r3, r2
 80027ec:	3b23      	subs	r3, #35	; 0x23
 80027ee:	fa00 f203 	lsl.w	r2, r0, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	430a      	orrs	r2, r1
 80027f8:	631a      	str	r2, [r3, #48]	; 0x30
 80027fa:	e01b      	b.n	8002834 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685a      	ldr	r2, [r3, #4]
 8002806:	4613      	mov	r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	4413      	add	r3, r2
 800280c:	3b41      	subs	r3, #65	; 0x41
 800280e:	221f      	movs	r2, #31
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	43db      	mvns	r3, r3
 8002816:	4019      	ands	r1, r3
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	6818      	ldr	r0, [r3, #0]
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685a      	ldr	r2, [r3, #4]
 8002820:	4613      	mov	r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	4413      	add	r3, r2
 8002826:	3b41      	subs	r3, #65	; 0x41
 8002828:	fa00 f203 	lsl.w	r2, r0, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	430a      	orrs	r2, r1
 8002832:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2b09      	cmp	r3, #9
 800283a:	d91c      	bls.n	8002876 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68d9      	ldr	r1, [r3, #12]
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	4613      	mov	r3, r2
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	4413      	add	r3, r2
 800284c:	3b1e      	subs	r3, #30
 800284e:	2207      	movs	r2, #7
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	43db      	mvns	r3, r3
 8002856:	4019      	ands	r1, r3
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	6898      	ldr	r0, [r3, #8]
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	4613      	mov	r3, r2
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	4413      	add	r3, r2
 8002866:	3b1e      	subs	r3, #30
 8002868:	fa00 f203 	lsl.w	r2, r0, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	430a      	orrs	r2, r1
 8002872:	60da      	str	r2, [r3, #12]
 8002874:	e019      	b.n	80028aa <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	6919      	ldr	r1, [r3, #16]
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	4613      	mov	r3, r2
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	4413      	add	r3, r2
 8002886:	2207      	movs	r2, #7
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	43db      	mvns	r3, r3
 800288e:	4019      	ands	r1, r3
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	6898      	ldr	r0, [r3, #8]
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	4613      	mov	r3, r2
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	4413      	add	r3, r2
 800289e:	fa00 f203 	lsl.w	r2, r0, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	430a      	orrs	r2, r1
 80028a8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2b10      	cmp	r3, #16
 80028b0:	d003      	beq.n	80028ba <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80028b6:	2b11      	cmp	r3, #17
 80028b8:	d132      	bne.n	8002920 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a1d      	ldr	r2, [pc, #116]	; (8002934 <HAL_ADC_ConfigChannel+0x1e4>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d125      	bne.n	8002910 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d126      	bne.n	8002920 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80028e0:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2b10      	cmp	r3, #16
 80028e8:	d11a      	bne.n	8002920 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80028ea:	4b13      	ldr	r3, [pc, #76]	; (8002938 <HAL_ADC_ConfigChannel+0x1e8>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a13      	ldr	r2, [pc, #76]	; (800293c <HAL_ADC_ConfigChannel+0x1ec>)
 80028f0:	fba2 2303 	umull	r2, r3, r2, r3
 80028f4:	0c9a      	lsrs	r2, r3, #18
 80028f6:	4613      	mov	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4413      	add	r3, r2
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002900:	e002      	b.n	8002908 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	3b01      	subs	r3, #1
 8002906:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1f9      	bne.n	8002902 <HAL_ADC_ConfigChannel+0x1b2>
 800290e:	e007      	b.n	8002920 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002914:	f043 0220 	orr.w	r2, r3, #32
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002928:	7bfb      	ldrb	r3, [r7, #15]
}
 800292a:	4618      	mov	r0, r3
 800292c:	3714      	adds	r7, #20
 800292e:	46bd      	mov	sp, r7
 8002930:	bc80      	pop	{r7}
 8002932:	4770      	bx	lr
 8002934:	40012400 	.word	0x40012400
 8002938:	2000006c 	.word	0x2000006c
 800293c:	431bde83 	.word	0x431bde83

08002940 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002948:	2300      	movs	r3, #0
 800294a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800294c:	2300      	movs	r3, #0
 800294e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b01      	cmp	r3, #1
 800295c:	d039      	beq.n	80029d2 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689a      	ldr	r2, [r3, #8]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f042 0201 	orr.w	r2, r2, #1
 800296c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800296e:	4b1b      	ldr	r3, [pc, #108]	; (80029dc <ADC_Enable+0x9c>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a1b      	ldr	r2, [pc, #108]	; (80029e0 <ADC_Enable+0xa0>)
 8002974:	fba2 2303 	umull	r2, r3, r2, r3
 8002978:	0c9b      	lsrs	r3, r3, #18
 800297a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800297c:	e002      	b.n	8002984 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	3b01      	subs	r3, #1
 8002982:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1f9      	bne.n	800297e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800298a:	f7ff fbfd 	bl	8002188 <HAL_GetTick>
 800298e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002990:	e018      	b.n	80029c4 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002992:	f7ff fbf9 	bl	8002188 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d911      	bls.n	80029c4 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a4:	f043 0210 	orr.w	r2, r3, #16
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b0:	f043 0201 	orr.w	r2, r3, #1
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e007      	b.n	80029d4 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d1df      	bne.n	8002992 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3710      	adds	r7, #16
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	2000006c 	.word	0x2000006c
 80029e0:	431bde83 	.word	0x431bde83

080029e4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029ec:	2300      	movs	r3, #0
 80029ee:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d127      	bne.n	8002a4e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	689a      	ldr	r2, [r3, #8]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f022 0201 	bic.w	r2, r2, #1
 8002a0c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a0e:	f7ff fbbb 	bl	8002188 <HAL_GetTick>
 8002a12:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002a14:	e014      	b.n	8002a40 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a16:	f7ff fbb7 	bl	8002188 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d90d      	bls.n	8002a40 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a28:	f043 0210 	orr.w	r2, r3, #16
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a34:	f043 0201 	orr.w	r2, r3, #1
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e007      	b.n	8002a50 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d0e3      	beq.n	8002a16 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <__NVIC_SetPriorityGrouping>:
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b085      	sub	sp, #20
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f003 0307 	and.w	r3, r3, #7
 8002a66:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a68:	4b0c      	ldr	r3, [pc, #48]	; (8002a9c <__NVIC_SetPriorityGrouping+0x44>)
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a6e:	68ba      	ldr	r2, [r7, #8]
 8002a70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a74:	4013      	ands	r3, r2
 8002a76:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a8a:	4a04      	ldr	r2, [pc, #16]	; (8002a9c <__NVIC_SetPriorityGrouping+0x44>)
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	60d3      	str	r3, [r2, #12]
}
 8002a90:	bf00      	nop
 8002a92:	3714      	adds	r7, #20
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bc80      	pop	{r7}
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	e000ed00 	.word	0xe000ed00

08002aa0 <__NVIC_GetPriorityGrouping>:
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002aa4:	4b04      	ldr	r3, [pc, #16]	; (8002ab8 <__NVIC_GetPriorityGrouping+0x18>)
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	0a1b      	lsrs	r3, r3, #8
 8002aaa:	f003 0307 	and.w	r3, r3, #7
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bc80      	pop	{r7}
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	e000ed00 	.word	0xe000ed00

08002abc <__NVIC_SetPriority>:
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	6039      	str	r1, [r7, #0]
 8002ac6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	db0a      	blt.n	8002ae6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	b2da      	uxtb	r2, r3
 8002ad4:	490c      	ldr	r1, [pc, #48]	; (8002b08 <__NVIC_SetPriority+0x4c>)
 8002ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ada:	0112      	lsls	r2, r2, #4
 8002adc:	b2d2      	uxtb	r2, r2
 8002ade:	440b      	add	r3, r1
 8002ae0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002ae4:	e00a      	b.n	8002afc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	b2da      	uxtb	r2, r3
 8002aea:	4908      	ldr	r1, [pc, #32]	; (8002b0c <__NVIC_SetPriority+0x50>)
 8002aec:	79fb      	ldrb	r3, [r7, #7]
 8002aee:	f003 030f 	and.w	r3, r3, #15
 8002af2:	3b04      	subs	r3, #4
 8002af4:	0112      	lsls	r2, r2, #4
 8002af6:	b2d2      	uxtb	r2, r2
 8002af8:	440b      	add	r3, r1
 8002afa:	761a      	strb	r2, [r3, #24]
}
 8002afc:	bf00      	nop
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bc80      	pop	{r7}
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	e000e100 	.word	0xe000e100
 8002b0c:	e000ed00 	.word	0xe000ed00

08002b10 <NVIC_EncodePriority>:
{
 8002b10:	b480      	push	{r7}
 8002b12:	b089      	sub	sp, #36	; 0x24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f003 0307 	and.w	r3, r3, #7
 8002b22:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	f1c3 0307 	rsb	r3, r3, #7
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	bf28      	it	cs
 8002b2e:	2304      	movcs	r3, #4
 8002b30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	3304      	adds	r3, #4
 8002b36:	2b06      	cmp	r3, #6
 8002b38:	d902      	bls.n	8002b40 <NVIC_EncodePriority+0x30>
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	3b03      	subs	r3, #3
 8002b3e:	e000      	b.n	8002b42 <NVIC_EncodePriority+0x32>
 8002b40:	2300      	movs	r3, #0
 8002b42:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b44:	f04f 32ff 	mov.w	r2, #4294967295
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4e:	43da      	mvns	r2, r3
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	401a      	ands	r2, r3
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b58:	f04f 31ff 	mov.w	r1, #4294967295
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b62:	43d9      	mvns	r1, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b68:	4313      	orrs	r3, r2
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3724      	adds	r7, #36	; 0x24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bc80      	pop	{r7}
 8002b72:	4770      	bx	lr

08002b74 <SysTick_Config>:
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b84:	d301      	bcc.n	8002b8a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002b86:	2301      	movs	r3, #1
 8002b88:	e00f      	b.n	8002baa <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b8a:	4a0a      	ldr	r2, [pc, #40]	; (8002bb4 <SysTick_Config+0x40>)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b92:	210f      	movs	r1, #15
 8002b94:	f04f 30ff 	mov.w	r0, #4294967295
 8002b98:	f7ff ff90 	bl	8002abc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b9c:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <SysTick_Config+0x40>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ba2:	4b04      	ldr	r3, [pc, #16]	; (8002bb4 <SysTick_Config+0x40>)
 8002ba4:	2207      	movs	r2, #7
 8002ba6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	e000e010 	.word	0xe000e010

08002bb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f7ff ff49 	bl	8002a58 <__NVIC_SetPriorityGrouping>
}
 8002bc6:	bf00      	nop
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b086      	sub	sp, #24
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	60b9      	str	r1, [r7, #8]
 8002bd8:	607a      	str	r2, [r7, #4]
 8002bda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002be0:	f7ff ff5e 	bl	8002aa0 <__NVIC_GetPriorityGrouping>
 8002be4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	68b9      	ldr	r1, [r7, #8]
 8002bea:	6978      	ldr	r0, [r7, #20]
 8002bec:	f7ff ff90 	bl	8002b10 <NVIC_EncodePriority>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bf6:	4611      	mov	r1, r2
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7ff ff5f 	bl	8002abc <__NVIC_SetPriority>
}
 8002bfe:	bf00      	nop
 8002c00:	3718      	adds	r7, #24
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b082      	sub	sp, #8
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7ff ffb0 	bl	8002b74 <SysTick_Config>
 8002c14:	4603      	mov	r3, r0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
	...

08002c20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b08b      	sub	sp, #44	; 0x2c
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c32:	e127      	b.n	8002e84 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c34:	2201      	movs	r2, #1
 8002c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	69fa      	ldr	r2, [r7, #28]
 8002c44:	4013      	ands	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	f040 8116 	bne.w	8002e7e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	2b12      	cmp	r3, #18
 8002c58:	d034      	beq.n	8002cc4 <HAL_GPIO_Init+0xa4>
 8002c5a:	2b12      	cmp	r3, #18
 8002c5c:	d80d      	bhi.n	8002c7a <HAL_GPIO_Init+0x5a>
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d02b      	beq.n	8002cba <HAL_GPIO_Init+0x9a>
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d804      	bhi.n	8002c70 <HAL_GPIO_Init+0x50>
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d031      	beq.n	8002cce <HAL_GPIO_Init+0xae>
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d01c      	beq.n	8002ca8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002c6e:	e048      	b.n	8002d02 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002c70:	2b03      	cmp	r3, #3
 8002c72:	d043      	beq.n	8002cfc <HAL_GPIO_Init+0xdc>
 8002c74:	2b11      	cmp	r3, #17
 8002c76:	d01b      	beq.n	8002cb0 <HAL_GPIO_Init+0x90>
          break;
 8002c78:	e043      	b.n	8002d02 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002c7a:	4a89      	ldr	r2, [pc, #548]	; (8002ea0 <HAL_GPIO_Init+0x280>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d026      	beq.n	8002cce <HAL_GPIO_Init+0xae>
 8002c80:	4a87      	ldr	r2, [pc, #540]	; (8002ea0 <HAL_GPIO_Init+0x280>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d806      	bhi.n	8002c94 <HAL_GPIO_Init+0x74>
 8002c86:	4a87      	ldr	r2, [pc, #540]	; (8002ea4 <HAL_GPIO_Init+0x284>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d020      	beq.n	8002cce <HAL_GPIO_Init+0xae>
 8002c8c:	4a86      	ldr	r2, [pc, #536]	; (8002ea8 <HAL_GPIO_Init+0x288>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d01d      	beq.n	8002cce <HAL_GPIO_Init+0xae>
          break;
 8002c92:	e036      	b.n	8002d02 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002c94:	4a85      	ldr	r2, [pc, #532]	; (8002eac <HAL_GPIO_Init+0x28c>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d019      	beq.n	8002cce <HAL_GPIO_Init+0xae>
 8002c9a:	4a85      	ldr	r2, [pc, #532]	; (8002eb0 <HAL_GPIO_Init+0x290>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d016      	beq.n	8002cce <HAL_GPIO_Init+0xae>
 8002ca0:	4a84      	ldr	r2, [pc, #528]	; (8002eb4 <HAL_GPIO_Init+0x294>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d013      	beq.n	8002cce <HAL_GPIO_Init+0xae>
          break;
 8002ca6:	e02c      	b.n	8002d02 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	623b      	str	r3, [r7, #32]
          break;
 8002cae:	e028      	b.n	8002d02 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	3304      	adds	r3, #4
 8002cb6:	623b      	str	r3, [r7, #32]
          break;
 8002cb8:	e023      	b.n	8002d02 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	3308      	adds	r3, #8
 8002cc0:	623b      	str	r3, [r7, #32]
          break;
 8002cc2:	e01e      	b.n	8002d02 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	330c      	adds	r3, #12
 8002cca:	623b      	str	r3, [r7, #32]
          break;
 8002ccc:	e019      	b.n	8002d02 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d102      	bne.n	8002cdc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002cd6:	2304      	movs	r3, #4
 8002cd8:	623b      	str	r3, [r7, #32]
          break;
 8002cda:	e012      	b.n	8002d02 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d105      	bne.n	8002cf0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ce4:	2308      	movs	r3, #8
 8002ce6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	69fa      	ldr	r2, [r7, #28]
 8002cec:	611a      	str	r2, [r3, #16]
          break;
 8002cee:	e008      	b.n	8002d02 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002cf0:	2308      	movs	r3, #8
 8002cf2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	69fa      	ldr	r2, [r7, #28]
 8002cf8:	615a      	str	r2, [r3, #20]
          break;
 8002cfa:	e002      	b.n	8002d02 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	623b      	str	r3, [r7, #32]
          break;
 8002d00:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	2bff      	cmp	r3, #255	; 0xff
 8002d06:	d801      	bhi.n	8002d0c <HAL_GPIO_Init+0xec>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	e001      	b.n	8002d10 <HAL_GPIO_Init+0xf0>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	3304      	adds	r3, #4
 8002d10:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	2bff      	cmp	r3, #255	; 0xff
 8002d16:	d802      	bhi.n	8002d1e <HAL_GPIO_Init+0xfe>
 8002d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	e002      	b.n	8002d24 <HAL_GPIO_Init+0x104>
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d20:	3b08      	subs	r3, #8
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	210f      	movs	r1, #15
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d32:	43db      	mvns	r3, r3
 8002d34:	401a      	ands	r2, r3
 8002d36:	6a39      	ldr	r1, [r7, #32]
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f000 8096 	beq.w	8002e7e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d52:	4b59      	ldr	r3, [pc, #356]	; (8002eb8 <HAL_GPIO_Init+0x298>)
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	4a58      	ldr	r2, [pc, #352]	; (8002eb8 <HAL_GPIO_Init+0x298>)
 8002d58:	f043 0301 	orr.w	r3, r3, #1
 8002d5c:	6193      	str	r3, [r2, #24]
 8002d5e:	4b56      	ldr	r3, [pc, #344]	; (8002eb8 <HAL_GPIO_Init+0x298>)
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	60bb      	str	r3, [r7, #8]
 8002d68:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d6a:	4a54      	ldr	r2, [pc, #336]	; (8002ebc <HAL_GPIO_Init+0x29c>)
 8002d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6e:	089b      	lsrs	r3, r3, #2
 8002d70:	3302      	adds	r3, #2
 8002d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d76:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7a:	f003 0303 	and.w	r3, r3, #3
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	220f      	movs	r2, #15
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	43db      	mvns	r3, r3
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a4b      	ldr	r2, [pc, #300]	; (8002ec0 <HAL_GPIO_Init+0x2a0>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d013      	beq.n	8002dbe <HAL_GPIO_Init+0x19e>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a4a      	ldr	r2, [pc, #296]	; (8002ec4 <HAL_GPIO_Init+0x2a4>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d00d      	beq.n	8002dba <HAL_GPIO_Init+0x19a>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a49      	ldr	r2, [pc, #292]	; (8002ec8 <HAL_GPIO_Init+0x2a8>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d007      	beq.n	8002db6 <HAL_GPIO_Init+0x196>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a48      	ldr	r2, [pc, #288]	; (8002ecc <HAL_GPIO_Init+0x2ac>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d101      	bne.n	8002db2 <HAL_GPIO_Init+0x192>
 8002dae:	2303      	movs	r3, #3
 8002db0:	e006      	b.n	8002dc0 <HAL_GPIO_Init+0x1a0>
 8002db2:	2304      	movs	r3, #4
 8002db4:	e004      	b.n	8002dc0 <HAL_GPIO_Init+0x1a0>
 8002db6:	2302      	movs	r3, #2
 8002db8:	e002      	b.n	8002dc0 <HAL_GPIO_Init+0x1a0>
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e000      	b.n	8002dc0 <HAL_GPIO_Init+0x1a0>
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dc2:	f002 0203 	and.w	r2, r2, #3
 8002dc6:	0092      	lsls	r2, r2, #2
 8002dc8:	4093      	lsls	r3, r2
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002dd0:	493a      	ldr	r1, [pc, #232]	; (8002ebc <HAL_GPIO_Init+0x29c>)
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd4:	089b      	lsrs	r3, r3, #2
 8002dd6:	3302      	adds	r3, #2
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d006      	beq.n	8002df8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002dea:	4b39      	ldr	r3, [pc, #228]	; (8002ed0 <HAL_GPIO_Init+0x2b0>)
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	4938      	ldr	r1, [pc, #224]	; (8002ed0 <HAL_GPIO_Init+0x2b0>)
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	600b      	str	r3, [r1, #0]
 8002df6:	e006      	b.n	8002e06 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002df8:	4b35      	ldr	r3, [pc, #212]	; (8002ed0 <HAL_GPIO_Init+0x2b0>)
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	43db      	mvns	r3, r3
 8002e00:	4933      	ldr	r1, [pc, #204]	; (8002ed0 <HAL_GPIO_Init+0x2b0>)
 8002e02:	4013      	ands	r3, r2
 8002e04:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d006      	beq.n	8002e20 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002e12:	4b2f      	ldr	r3, [pc, #188]	; (8002ed0 <HAL_GPIO_Init+0x2b0>)
 8002e14:	685a      	ldr	r2, [r3, #4]
 8002e16:	492e      	ldr	r1, [pc, #184]	; (8002ed0 <HAL_GPIO_Init+0x2b0>)
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	604b      	str	r3, [r1, #4]
 8002e1e:	e006      	b.n	8002e2e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002e20:	4b2b      	ldr	r3, [pc, #172]	; (8002ed0 <HAL_GPIO_Init+0x2b0>)
 8002e22:	685a      	ldr	r2, [r3, #4]
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	43db      	mvns	r3, r3
 8002e28:	4929      	ldr	r1, [pc, #164]	; (8002ed0 <HAL_GPIO_Init+0x2b0>)
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d006      	beq.n	8002e48 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e3a:	4b25      	ldr	r3, [pc, #148]	; (8002ed0 <HAL_GPIO_Init+0x2b0>)
 8002e3c:	689a      	ldr	r2, [r3, #8]
 8002e3e:	4924      	ldr	r1, [pc, #144]	; (8002ed0 <HAL_GPIO_Init+0x2b0>)
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	608b      	str	r3, [r1, #8]
 8002e46:	e006      	b.n	8002e56 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e48:	4b21      	ldr	r3, [pc, #132]	; (8002ed0 <HAL_GPIO_Init+0x2b0>)
 8002e4a:	689a      	ldr	r2, [r3, #8]
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	43db      	mvns	r3, r3
 8002e50:	491f      	ldr	r1, [pc, #124]	; (8002ed0 <HAL_GPIO_Init+0x2b0>)
 8002e52:	4013      	ands	r3, r2
 8002e54:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d006      	beq.n	8002e70 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e62:	4b1b      	ldr	r3, [pc, #108]	; (8002ed0 <HAL_GPIO_Init+0x2b0>)
 8002e64:	68da      	ldr	r2, [r3, #12]
 8002e66:	491a      	ldr	r1, [pc, #104]	; (8002ed0 <HAL_GPIO_Init+0x2b0>)
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	60cb      	str	r3, [r1, #12]
 8002e6e:	e006      	b.n	8002e7e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002e70:	4b17      	ldr	r3, [pc, #92]	; (8002ed0 <HAL_GPIO_Init+0x2b0>)
 8002e72:	68da      	ldr	r2, [r3, #12]
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	43db      	mvns	r3, r3
 8002e78:	4915      	ldr	r1, [pc, #84]	; (8002ed0 <HAL_GPIO_Init+0x2b0>)
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e80:	3301      	adds	r3, #1
 8002e82:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f47f aed0 	bne.w	8002c34 <HAL_GPIO_Init+0x14>
  }
}
 8002e94:	bf00      	nop
 8002e96:	372c      	adds	r7, #44	; 0x2c
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bc80      	pop	{r7}
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	10210000 	.word	0x10210000
 8002ea4:	10110000 	.word	0x10110000
 8002ea8:	10120000 	.word	0x10120000
 8002eac:	10310000 	.word	0x10310000
 8002eb0:	10320000 	.word	0x10320000
 8002eb4:	10220000 	.word	0x10220000
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	40010000 	.word	0x40010000
 8002ec0:	40010800 	.word	0x40010800
 8002ec4:	40010c00 	.word	0x40010c00
 8002ec8:	40011000 	.word	0x40011000
 8002ecc:	40011400 	.word	0x40011400
 8002ed0:	40010400 	.word	0x40010400

08002ed4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	460b      	mov	r3, r1
 8002ede:	807b      	strh	r3, [r7, #2]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ee4:	787b      	ldrb	r3, [r7, #1]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002eea:	887a      	ldrh	r2, [r7, #2]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ef0:	e003      	b.n	8002efa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ef2:	887b      	ldrh	r3, [r7, #2]
 8002ef4:	041a      	lsls	r2, r3, #16
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	611a      	str	r2, [r3, #16]
}
 8002efa:	bf00      	nop
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bc80      	pop	{r7}
 8002f02:	4770      	bx	lr

08002f04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e26c      	b.n	80033f0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f000 8087 	beq.w	8003032 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f24:	4b92      	ldr	r3, [pc, #584]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f003 030c 	and.w	r3, r3, #12
 8002f2c:	2b04      	cmp	r3, #4
 8002f2e:	d00c      	beq.n	8002f4a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f30:	4b8f      	ldr	r3, [pc, #572]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f003 030c 	and.w	r3, r3, #12
 8002f38:	2b08      	cmp	r3, #8
 8002f3a:	d112      	bne.n	8002f62 <HAL_RCC_OscConfig+0x5e>
 8002f3c:	4b8c      	ldr	r3, [pc, #560]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f48:	d10b      	bne.n	8002f62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f4a:	4b89      	ldr	r3, [pc, #548]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d06c      	beq.n	8003030 <HAL_RCC_OscConfig+0x12c>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d168      	bne.n	8003030 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e246      	b.n	80033f0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f6a:	d106      	bne.n	8002f7a <HAL_RCC_OscConfig+0x76>
 8002f6c:	4b80      	ldr	r3, [pc, #512]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a7f      	ldr	r2, [pc, #508]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002f72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f76:	6013      	str	r3, [r2, #0]
 8002f78:	e02e      	b.n	8002fd8 <HAL_RCC_OscConfig+0xd4>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d10c      	bne.n	8002f9c <HAL_RCC_OscConfig+0x98>
 8002f82:	4b7b      	ldr	r3, [pc, #492]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a7a      	ldr	r2, [pc, #488]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002f88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f8c:	6013      	str	r3, [r2, #0]
 8002f8e:	4b78      	ldr	r3, [pc, #480]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a77      	ldr	r2, [pc, #476]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002f94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f98:	6013      	str	r3, [r2, #0]
 8002f9a:	e01d      	b.n	8002fd8 <HAL_RCC_OscConfig+0xd4>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fa4:	d10c      	bne.n	8002fc0 <HAL_RCC_OscConfig+0xbc>
 8002fa6:	4b72      	ldr	r3, [pc, #456]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a71      	ldr	r2, [pc, #452]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002fac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fb0:	6013      	str	r3, [r2, #0]
 8002fb2:	4b6f      	ldr	r3, [pc, #444]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a6e      	ldr	r2, [pc, #440]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fbc:	6013      	str	r3, [r2, #0]
 8002fbe:	e00b      	b.n	8002fd8 <HAL_RCC_OscConfig+0xd4>
 8002fc0:	4b6b      	ldr	r3, [pc, #428]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a6a      	ldr	r2, [pc, #424]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002fc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fca:	6013      	str	r3, [r2, #0]
 8002fcc:	4b68      	ldr	r3, [pc, #416]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a67      	ldr	r2, [pc, #412]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002fd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fd6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d013      	beq.n	8003008 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe0:	f7ff f8d2 	bl	8002188 <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fe8:	f7ff f8ce 	bl	8002188 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b64      	cmp	r3, #100	; 0x64
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e1fa      	b.n	80033f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ffa:	4b5d      	ldr	r3, [pc, #372]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d0f0      	beq.n	8002fe8 <HAL_RCC_OscConfig+0xe4>
 8003006:	e014      	b.n	8003032 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003008:	f7ff f8be 	bl	8002188 <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003010:	f7ff f8ba 	bl	8002188 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b64      	cmp	r3, #100	; 0x64
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e1e6      	b.n	80033f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003022:	4b53      	ldr	r3, [pc, #332]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1f0      	bne.n	8003010 <HAL_RCC_OscConfig+0x10c>
 800302e:	e000      	b.n	8003032 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003030:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d063      	beq.n	8003106 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800303e:	4b4c      	ldr	r3, [pc, #304]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f003 030c 	and.w	r3, r3, #12
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00b      	beq.n	8003062 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800304a:	4b49      	ldr	r3, [pc, #292]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f003 030c 	and.w	r3, r3, #12
 8003052:	2b08      	cmp	r3, #8
 8003054:	d11c      	bne.n	8003090 <HAL_RCC_OscConfig+0x18c>
 8003056:	4b46      	ldr	r3, [pc, #280]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d116      	bne.n	8003090 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003062:	4b43      	ldr	r3, [pc, #268]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d005      	beq.n	800307a <HAL_RCC_OscConfig+0x176>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d001      	beq.n	800307a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e1ba      	b.n	80033f0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800307a:	4b3d      	ldr	r3, [pc, #244]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	4939      	ldr	r1, [pc, #228]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 800308a:	4313      	orrs	r3, r2
 800308c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800308e:	e03a      	b.n	8003106 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d020      	beq.n	80030da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003098:	4b36      	ldr	r3, [pc, #216]	; (8003174 <HAL_RCC_OscConfig+0x270>)
 800309a:	2201      	movs	r2, #1
 800309c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800309e:	f7ff f873 	bl	8002188 <HAL_GetTick>
 80030a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a4:	e008      	b.n	80030b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030a6:	f7ff f86f 	bl	8002188 <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d901      	bls.n	80030b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e19b      	b.n	80033f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b8:	4b2d      	ldr	r3, [pc, #180]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d0f0      	beq.n	80030a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030c4:	4b2a      	ldr	r3, [pc, #168]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	695b      	ldr	r3, [r3, #20]
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	4927      	ldr	r1, [pc, #156]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	600b      	str	r3, [r1, #0]
 80030d8:	e015      	b.n	8003106 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030da:	4b26      	ldr	r3, [pc, #152]	; (8003174 <HAL_RCC_OscConfig+0x270>)
 80030dc:	2200      	movs	r2, #0
 80030de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e0:	f7ff f852 	bl	8002188 <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030e8:	f7ff f84e 	bl	8002188 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e17a      	b.n	80033f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030fa:	4b1d      	ldr	r3, [pc, #116]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1f0      	bne.n	80030e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0308 	and.w	r3, r3, #8
 800310e:	2b00      	cmp	r3, #0
 8003110:	d03a      	beq.n	8003188 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d019      	beq.n	800314e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800311a:	4b17      	ldr	r3, [pc, #92]	; (8003178 <HAL_RCC_OscConfig+0x274>)
 800311c:	2201      	movs	r2, #1
 800311e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003120:	f7ff f832 	bl	8002188 <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003128:	f7ff f82e 	bl	8002188 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e15a      	b.n	80033f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800313a:	4b0d      	ldr	r3, [pc, #52]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 800313c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d0f0      	beq.n	8003128 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003146:	2001      	movs	r0, #1
 8003148:	f000 fac6 	bl	80036d8 <RCC_Delay>
 800314c:	e01c      	b.n	8003188 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800314e:	4b0a      	ldr	r3, [pc, #40]	; (8003178 <HAL_RCC_OscConfig+0x274>)
 8003150:	2200      	movs	r2, #0
 8003152:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003154:	f7ff f818 	bl	8002188 <HAL_GetTick>
 8003158:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800315a:	e00f      	b.n	800317c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800315c:	f7ff f814 	bl	8002188 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b02      	cmp	r3, #2
 8003168:	d908      	bls.n	800317c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e140      	b.n	80033f0 <HAL_RCC_OscConfig+0x4ec>
 800316e:	bf00      	nop
 8003170:	40021000 	.word	0x40021000
 8003174:	42420000 	.word	0x42420000
 8003178:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800317c:	4b9e      	ldr	r3, [pc, #632]	; (80033f8 <HAL_RCC_OscConfig+0x4f4>)
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d1e9      	bne.n	800315c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0304 	and.w	r3, r3, #4
 8003190:	2b00      	cmp	r3, #0
 8003192:	f000 80a6 	beq.w	80032e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003196:	2300      	movs	r3, #0
 8003198:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800319a:	4b97      	ldr	r3, [pc, #604]	; (80033f8 <HAL_RCC_OscConfig+0x4f4>)
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10d      	bne.n	80031c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031a6:	4b94      	ldr	r3, [pc, #592]	; (80033f8 <HAL_RCC_OscConfig+0x4f4>)
 80031a8:	69db      	ldr	r3, [r3, #28]
 80031aa:	4a93      	ldr	r2, [pc, #588]	; (80033f8 <HAL_RCC_OscConfig+0x4f4>)
 80031ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031b0:	61d3      	str	r3, [r2, #28]
 80031b2:	4b91      	ldr	r3, [pc, #580]	; (80033f8 <HAL_RCC_OscConfig+0x4f4>)
 80031b4:	69db      	ldr	r3, [r3, #28]
 80031b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ba:	60bb      	str	r3, [r7, #8]
 80031bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031be:	2301      	movs	r3, #1
 80031c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c2:	4b8e      	ldr	r3, [pc, #568]	; (80033fc <HAL_RCC_OscConfig+0x4f8>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d118      	bne.n	8003200 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031ce:	4b8b      	ldr	r3, [pc, #556]	; (80033fc <HAL_RCC_OscConfig+0x4f8>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a8a      	ldr	r2, [pc, #552]	; (80033fc <HAL_RCC_OscConfig+0x4f8>)
 80031d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031da:	f7fe ffd5 	bl	8002188 <HAL_GetTick>
 80031de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e0:	e008      	b.n	80031f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031e2:	f7fe ffd1 	bl	8002188 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	2b64      	cmp	r3, #100	; 0x64
 80031ee:	d901      	bls.n	80031f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e0fd      	b.n	80033f0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f4:	4b81      	ldr	r3, [pc, #516]	; (80033fc <HAL_RCC_OscConfig+0x4f8>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d0f0      	beq.n	80031e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d106      	bne.n	8003216 <HAL_RCC_OscConfig+0x312>
 8003208:	4b7b      	ldr	r3, [pc, #492]	; (80033f8 <HAL_RCC_OscConfig+0x4f4>)
 800320a:	6a1b      	ldr	r3, [r3, #32]
 800320c:	4a7a      	ldr	r2, [pc, #488]	; (80033f8 <HAL_RCC_OscConfig+0x4f4>)
 800320e:	f043 0301 	orr.w	r3, r3, #1
 8003212:	6213      	str	r3, [r2, #32]
 8003214:	e02d      	b.n	8003272 <HAL_RCC_OscConfig+0x36e>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10c      	bne.n	8003238 <HAL_RCC_OscConfig+0x334>
 800321e:	4b76      	ldr	r3, [pc, #472]	; (80033f8 <HAL_RCC_OscConfig+0x4f4>)
 8003220:	6a1b      	ldr	r3, [r3, #32]
 8003222:	4a75      	ldr	r2, [pc, #468]	; (80033f8 <HAL_RCC_OscConfig+0x4f4>)
 8003224:	f023 0301 	bic.w	r3, r3, #1
 8003228:	6213      	str	r3, [r2, #32]
 800322a:	4b73      	ldr	r3, [pc, #460]	; (80033f8 <HAL_RCC_OscConfig+0x4f4>)
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	4a72      	ldr	r2, [pc, #456]	; (80033f8 <HAL_RCC_OscConfig+0x4f4>)
 8003230:	f023 0304 	bic.w	r3, r3, #4
 8003234:	6213      	str	r3, [r2, #32]
 8003236:	e01c      	b.n	8003272 <HAL_RCC_OscConfig+0x36e>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	2b05      	cmp	r3, #5
 800323e:	d10c      	bne.n	800325a <HAL_RCC_OscConfig+0x356>
 8003240:	4b6d      	ldr	r3, [pc, #436]	; (80033f8 <HAL_RCC_OscConfig+0x4f4>)
 8003242:	6a1b      	ldr	r3, [r3, #32]
 8003244:	4a6c      	ldr	r2, [pc, #432]	; (80033f8 <HAL_RCC_OscConfig+0x4f4>)
 8003246:	f043 0304 	orr.w	r3, r3, #4
 800324a:	6213      	str	r3, [r2, #32]
 800324c:	4b6a      	ldr	r3, [pc, #424]	; (80033f8 <HAL_RCC_OscConfig+0x4f4>)
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	4a69      	ldr	r2, [pc, #420]	; (80033f8 <HAL_RCC_OscConfig+0x4f4>)
 8003252:	f043 0301 	orr.w	r3, r3, #1
 8003256:	6213      	str	r3, [r2, #32]
 8003258:	e00b      	b.n	8003272 <HAL_RCC_OscConfig+0x36e>
 800325a:	4b67      	ldr	r3, [pc, #412]	; (80033f8 <HAL_RCC_OscConfig+0x4f4>)
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	4a66      	ldr	r2, [pc, #408]	; (80033f8 <HAL_RCC_OscConfig+0x4f4>)
 8003260:	f023 0301 	bic.w	r3, r3, #1
 8003264:	6213      	str	r3, [r2, #32]
 8003266:	4b64      	ldr	r3, [pc, #400]	; (80033f8 <HAL_RCC_OscConfig+0x4f4>)
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	4a63      	ldr	r2, [pc, #396]	; (80033f8 <HAL_RCC_OscConfig+0x4f4>)
 800326c:	f023 0304 	bic.w	r3, r3, #4
 8003270:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d015      	beq.n	80032a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800327a:	f7fe ff85 	bl	8002188 <HAL_GetTick>
 800327e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003280:	e00a      	b.n	8003298 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003282:	f7fe ff81 	bl	8002188 <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003290:	4293      	cmp	r3, r2
 8003292:	d901      	bls.n	8003298 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e0ab      	b.n	80033f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003298:	4b57      	ldr	r3, [pc, #348]	; (80033f8 <HAL_RCC_OscConfig+0x4f4>)
 800329a:	6a1b      	ldr	r3, [r3, #32]
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d0ee      	beq.n	8003282 <HAL_RCC_OscConfig+0x37e>
 80032a4:	e014      	b.n	80032d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032a6:	f7fe ff6f 	bl	8002188 <HAL_GetTick>
 80032aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032ac:	e00a      	b.n	80032c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ae:	f7fe ff6b 	bl	8002188 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032bc:	4293      	cmp	r3, r2
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e095      	b.n	80033f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032c4:	4b4c      	ldr	r3, [pc, #304]	; (80033f8 <HAL_RCC_OscConfig+0x4f4>)
 80032c6:	6a1b      	ldr	r3, [r3, #32]
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1ee      	bne.n	80032ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032d0:	7dfb      	ldrb	r3, [r7, #23]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d105      	bne.n	80032e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032d6:	4b48      	ldr	r3, [pc, #288]	; (80033f8 <HAL_RCC_OscConfig+0x4f4>)
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	4a47      	ldr	r2, [pc, #284]	; (80033f8 <HAL_RCC_OscConfig+0x4f4>)
 80032dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	69db      	ldr	r3, [r3, #28]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f000 8081 	beq.w	80033ee <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032ec:	4b42      	ldr	r3, [pc, #264]	; (80033f8 <HAL_RCC_OscConfig+0x4f4>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f003 030c 	and.w	r3, r3, #12
 80032f4:	2b08      	cmp	r3, #8
 80032f6:	d061      	beq.n	80033bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	69db      	ldr	r3, [r3, #28]
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d146      	bne.n	800338e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003300:	4b3f      	ldr	r3, [pc, #252]	; (8003400 <HAL_RCC_OscConfig+0x4fc>)
 8003302:	2200      	movs	r2, #0
 8003304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003306:	f7fe ff3f 	bl	8002188 <HAL_GetTick>
 800330a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800330c:	e008      	b.n	8003320 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800330e:	f7fe ff3b 	bl	8002188 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d901      	bls.n	8003320 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e067      	b.n	80033f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003320:	4b35      	ldr	r3, [pc, #212]	; (80033f8 <HAL_RCC_OscConfig+0x4f4>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1f0      	bne.n	800330e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a1b      	ldr	r3, [r3, #32]
 8003330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003334:	d108      	bne.n	8003348 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003336:	4b30      	ldr	r3, [pc, #192]	; (80033f8 <HAL_RCC_OscConfig+0x4f4>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	492d      	ldr	r1, [pc, #180]	; (80033f8 <HAL_RCC_OscConfig+0x4f4>)
 8003344:	4313      	orrs	r3, r2
 8003346:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003348:	4b2b      	ldr	r3, [pc, #172]	; (80033f8 <HAL_RCC_OscConfig+0x4f4>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a19      	ldr	r1, [r3, #32]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003358:	430b      	orrs	r3, r1
 800335a:	4927      	ldr	r1, [pc, #156]	; (80033f8 <HAL_RCC_OscConfig+0x4f4>)
 800335c:	4313      	orrs	r3, r2
 800335e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003360:	4b27      	ldr	r3, [pc, #156]	; (8003400 <HAL_RCC_OscConfig+0x4fc>)
 8003362:	2201      	movs	r2, #1
 8003364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003366:	f7fe ff0f 	bl	8002188 <HAL_GetTick>
 800336a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800336c:	e008      	b.n	8003380 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800336e:	f7fe ff0b 	bl	8002188 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d901      	bls.n	8003380 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e037      	b.n	80033f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003380:	4b1d      	ldr	r3, [pc, #116]	; (80033f8 <HAL_RCC_OscConfig+0x4f4>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d0f0      	beq.n	800336e <HAL_RCC_OscConfig+0x46a>
 800338c:	e02f      	b.n	80033ee <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800338e:	4b1c      	ldr	r3, [pc, #112]	; (8003400 <HAL_RCC_OscConfig+0x4fc>)
 8003390:	2200      	movs	r2, #0
 8003392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003394:	f7fe fef8 	bl	8002188 <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800339a:	e008      	b.n	80033ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800339c:	f7fe fef4 	bl	8002188 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e020      	b.n	80033f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033ae:	4b12      	ldr	r3, [pc, #72]	; (80033f8 <HAL_RCC_OscConfig+0x4f4>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1f0      	bne.n	800339c <HAL_RCC_OscConfig+0x498>
 80033ba:	e018      	b.n	80033ee <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	69db      	ldr	r3, [r3, #28]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d101      	bne.n	80033c8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e013      	b.n	80033f0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033c8:	4b0b      	ldr	r3, [pc, #44]	; (80033f8 <HAL_RCC_OscConfig+0x4f4>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d106      	bne.n	80033ea <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d001      	beq.n	80033ee <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e000      	b.n	80033f0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3718      	adds	r7, #24
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	40021000 	.word	0x40021000
 80033fc:	40007000 	.word	0x40007000
 8003400:	42420060 	.word	0x42420060

08003404 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d101      	bne.n	8003418 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e0d0      	b.n	80035ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003418:	4b6a      	ldr	r3, [pc, #424]	; (80035c4 <HAL_RCC_ClockConfig+0x1c0>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0307 	and.w	r3, r3, #7
 8003420:	683a      	ldr	r2, [r7, #0]
 8003422:	429a      	cmp	r2, r3
 8003424:	d910      	bls.n	8003448 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003426:	4b67      	ldr	r3, [pc, #412]	; (80035c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f023 0207 	bic.w	r2, r3, #7
 800342e:	4965      	ldr	r1, [pc, #404]	; (80035c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	4313      	orrs	r3, r2
 8003434:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003436:	4b63      	ldr	r3, [pc, #396]	; (80035c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0307 	and.w	r3, r3, #7
 800343e:	683a      	ldr	r2, [r7, #0]
 8003440:	429a      	cmp	r2, r3
 8003442:	d001      	beq.n	8003448 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e0b8      	b.n	80035ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0302 	and.w	r3, r3, #2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d020      	beq.n	8003496 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0304 	and.w	r3, r3, #4
 800345c:	2b00      	cmp	r3, #0
 800345e:	d005      	beq.n	800346c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003460:	4b59      	ldr	r3, [pc, #356]	; (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	4a58      	ldr	r2, [pc, #352]	; (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003466:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800346a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0308 	and.w	r3, r3, #8
 8003474:	2b00      	cmp	r3, #0
 8003476:	d005      	beq.n	8003484 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003478:	4b53      	ldr	r3, [pc, #332]	; (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	4a52      	ldr	r2, [pc, #328]	; (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 800347e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003482:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003484:	4b50      	ldr	r3, [pc, #320]	; (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	494d      	ldr	r1, [pc, #308]	; (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003492:	4313      	orrs	r3, r2
 8003494:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d040      	beq.n	8003524 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d107      	bne.n	80034ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034aa:	4b47      	ldr	r3, [pc, #284]	; (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d115      	bne.n	80034e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e07f      	b.n	80035ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d107      	bne.n	80034d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034c2:	4b41      	ldr	r3, [pc, #260]	; (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d109      	bne.n	80034e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e073      	b.n	80035ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d2:	4b3d      	ldr	r3, [pc, #244]	; (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e06b      	b.n	80035ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034e2:	4b39      	ldr	r3, [pc, #228]	; (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f023 0203 	bic.w	r2, r3, #3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	4936      	ldr	r1, [pc, #216]	; (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034f4:	f7fe fe48 	bl	8002188 <HAL_GetTick>
 80034f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034fa:	e00a      	b.n	8003512 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034fc:	f7fe fe44 	bl	8002188 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	f241 3288 	movw	r2, #5000	; 0x1388
 800350a:	4293      	cmp	r3, r2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e053      	b.n	80035ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003512:	4b2d      	ldr	r3, [pc, #180]	; (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f003 020c 	and.w	r2, r3, #12
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	429a      	cmp	r2, r3
 8003522:	d1eb      	bne.n	80034fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003524:	4b27      	ldr	r3, [pc, #156]	; (80035c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0307 	and.w	r3, r3, #7
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	429a      	cmp	r2, r3
 8003530:	d210      	bcs.n	8003554 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003532:	4b24      	ldr	r3, [pc, #144]	; (80035c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f023 0207 	bic.w	r2, r3, #7
 800353a:	4922      	ldr	r1, [pc, #136]	; (80035c4 <HAL_RCC_ClockConfig+0x1c0>)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	4313      	orrs	r3, r2
 8003540:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003542:	4b20      	ldr	r3, [pc, #128]	; (80035c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0307 	and.w	r3, r3, #7
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	429a      	cmp	r2, r3
 800354e:	d001      	beq.n	8003554 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e032      	b.n	80035ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0304 	and.w	r3, r3, #4
 800355c:	2b00      	cmp	r3, #0
 800355e:	d008      	beq.n	8003572 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003560:	4b19      	ldr	r3, [pc, #100]	; (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	4916      	ldr	r1, [pc, #88]	; (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 800356e:	4313      	orrs	r3, r2
 8003570:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0308 	and.w	r3, r3, #8
 800357a:	2b00      	cmp	r3, #0
 800357c:	d009      	beq.n	8003592 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800357e:	4b12      	ldr	r3, [pc, #72]	; (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	490e      	ldr	r1, [pc, #56]	; (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 800358e:	4313      	orrs	r3, r2
 8003590:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003592:	f000 f821 	bl	80035d8 <HAL_RCC_GetSysClockFreq>
 8003596:	4601      	mov	r1, r0
 8003598:	4b0b      	ldr	r3, [pc, #44]	; (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	091b      	lsrs	r3, r3, #4
 800359e:	f003 030f 	and.w	r3, r3, #15
 80035a2:	4a0a      	ldr	r2, [pc, #40]	; (80035cc <HAL_RCC_ClockConfig+0x1c8>)
 80035a4:	5cd3      	ldrb	r3, [r2, r3]
 80035a6:	fa21 f303 	lsr.w	r3, r1, r3
 80035aa:	4a09      	ldr	r2, [pc, #36]	; (80035d0 <HAL_RCC_ClockConfig+0x1cc>)
 80035ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80035ae:	4b09      	ldr	r3, [pc, #36]	; (80035d4 <HAL_RCC_ClockConfig+0x1d0>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7fe fda6 	bl	8002104 <HAL_InitTick>

  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	40022000 	.word	0x40022000
 80035c8:	40021000 	.word	0x40021000
 80035cc:	08005f10 	.word	0x08005f10
 80035d0:	2000006c 	.word	0x2000006c
 80035d4:	20000070 	.word	0x20000070

080035d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035d8:	b490      	push	{r4, r7}
 80035da:	b08a      	sub	sp, #40	; 0x28
 80035dc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80035de:	4b2a      	ldr	r3, [pc, #168]	; (8003688 <HAL_RCC_GetSysClockFreq+0xb0>)
 80035e0:	1d3c      	adds	r4, r7, #4
 80035e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80035e8:	4b28      	ldr	r3, [pc, #160]	; (800368c <HAL_RCC_GetSysClockFreq+0xb4>)
 80035ea:	881b      	ldrh	r3, [r3, #0]
 80035ec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035ee:	2300      	movs	r3, #0
 80035f0:	61fb      	str	r3, [r7, #28]
 80035f2:	2300      	movs	r3, #0
 80035f4:	61bb      	str	r3, [r7, #24]
 80035f6:	2300      	movs	r3, #0
 80035f8:	627b      	str	r3, [r7, #36]	; 0x24
 80035fa:	2300      	movs	r3, #0
 80035fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80035fe:	2300      	movs	r3, #0
 8003600:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003602:	4b23      	ldr	r3, [pc, #140]	; (8003690 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	f003 030c 	and.w	r3, r3, #12
 800360e:	2b04      	cmp	r3, #4
 8003610:	d002      	beq.n	8003618 <HAL_RCC_GetSysClockFreq+0x40>
 8003612:	2b08      	cmp	r3, #8
 8003614:	d003      	beq.n	800361e <HAL_RCC_GetSysClockFreq+0x46>
 8003616:	e02d      	b.n	8003674 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003618:	4b1e      	ldr	r3, [pc, #120]	; (8003694 <HAL_RCC_GetSysClockFreq+0xbc>)
 800361a:	623b      	str	r3, [r7, #32]
      break;
 800361c:	e02d      	b.n	800367a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	0c9b      	lsrs	r3, r3, #18
 8003622:	f003 030f 	and.w	r3, r3, #15
 8003626:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800362a:	4413      	add	r3, r2
 800362c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003630:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d013      	beq.n	8003664 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800363c:	4b14      	ldr	r3, [pc, #80]	; (8003690 <HAL_RCC_GetSysClockFreq+0xb8>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	0c5b      	lsrs	r3, r3, #17
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800364a:	4413      	add	r3, r2
 800364c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003650:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	4a0f      	ldr	r2, [pc, #60]	; (8003694 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003656:	fb02 f203 	mul.w	r2, r2, r3
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003660:	627b      	str	r3, [r7, #36]	; 0x24
 8003662:	e004      	b.n	800366e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	4a0c      	ldr	r2, [pc, #48]	; (8003698 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003668:	fb02 f303 	mul.w	r3, r2, r3
 800366c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800366e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003670:	623b      	str	r3, [r7, #32]
      break;
 8003672:	e002      	b.n	800367a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003674:	4b07      	ldr	r3, [pc, #28]	; (8003694 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003676:	623b      	str	r3, [r7, #32]
      break;
 8003678:	bf00      	nop
    }
  }
  return sysclockfreq;
 800367a:	6a3b      	ldr	r3, [r7, #32]
}
 800367c:	4618      	mov	r0, r3
 800367e:	3728      	adds	r7, #40	; 0x28
 8003680:	46bd      	mov	sp, r7
 8003682:	bc90      	pop	{r4, r7}
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	08005ee8 	.word	0x08005ee8
 800368c:	08005ef8 	.word	0x08005ef8
 8003690:	40021000 	.word	0x40021000
 8003694:	007a1200 	.word	0x007a1200
 8003698:	003d0900 	.word	0x003d0900

0800369c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036a0:	4b02      	ldr	r3, [pc, #8]	; (80036ac <HAL_RCC_GetHCLKFreq+0x10>)
 80036a2:	681b      	ldr	r3, [r3, #0]
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bc80      	pop	{r7}
 80036aa:	4770      	bx	lr
 80036ac:	2000006c 	.word	0x2000006c

080036b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80036b4:	f7ff fff2 	bl	800369c <HAL_RCC_GetHCLKFreq>
 80036b8:	4601      	mov	r1, r0
 80036ba:	4b05      	ldr	r3, [pc, #20]	; (80036d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	0adb      	lsrs	r3, r3, #11
 80036c0:	f003 0307 	and.w	r3, r3, #7
 80036c4:	4a03      	ldr	r2, [pc, #12]	; (80036d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036c6:	5cd3      	ldrb	r3, [r2, r3]
 80036c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	40021000 	.word	0x40021000
 80036d4:	08005f20 	.word	0x08005f20

080036d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80036d8:	b480      	push	{r7}
 80036da:	b085      	sub	sp, #20
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80036e0:	4b0a      	ldr	r3, [pc, #40]	; (800370c <RCC_Delay+0x34>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a0a      	ldr	r2, [pc, #40]	; (8003710 <RCC_Delay+0x38>)
 80036e6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ea:	0a5b      	lsrs	r3, r3, #9
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	fb02 f303 	mul.w	r3, r2, r3
 80036f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80036f4:	bf00      	nop
  }
  while (Delay --);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	1e5a      	subs	r2, r3, #1
 80036fa:	60fa      	str	r2, [r7, #12]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d1f9      	bne.n	80036f4 <RCC_Delay+0x1c>
}
 8003700:	bf00      	nop
 8003702:	3714      	adds	r7, #20
 8003704:	46bd      	mov	sp, r7
 8003706:	bc80      	pop	{r7}
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	2000006c 	.word	0x2000006c
 8003710:	10624dd3 	.word	0x10624dd3

08003714 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b086      	sub	sp, #24
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800371c:	2300      	movs	r3, #0
 800371e:	613b      	str	r3, [r7, #16]
 8003720:	2300      	movs	r3, #0
 8003722:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	2b00      	cmp	r3, #0
 800372e:	d07d      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003730:	2300      	movs	r3, #0
 8003732:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003734:	4b4f      	ldr	r3, [pc, #316]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003736:	69db      	ldr	r3, [r3, #28]
 8003738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d10d      	bne.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003740:	4b4c      	ldr	r3, [pc, #304]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003742:	69db      	ldr	r3, [r3, #28]
 8003744:	4a4b      	ldr	r2, [pc, #300]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003746:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800374a:	61d3      	str	r3, [r2, #28]
 800374c:	4b49      	ldr	r3, [pc, #292]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800374e:	69db      	ldr	r3, [r3, #28]
 8003750:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003754:	60bb      	str	r3, [r7, #8]
 8003756:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003758:	2301      	movs	r3, #1
 800375a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800375c:	4b46      	ldr	r3, [pc, #280]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003764:	2b00      	cmp	r3, #0
 8003766:	d118      	bne.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003768:	4b43      	ldr	r3, [pc, #268]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a42      	ldr	r2, [pc, #264]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800376e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003772:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003774:	f7fe fd08 	bl	8002188 <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800377a:	e008      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800377c:	f7fe fd04 	bl	8002188 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b64      	cmp	r3, #100	; 0x64
 8003788:	d901      	bls.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e06d      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800378e:	4b3a      	ldr	r3, [pc, #232]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003796:	2b00      	cmp	r3, #0
 8003798:	d0f0      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800379a:	4b36      	ldr	r3, [pc, #216]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037a2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d02e      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d027      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037b8:	4b2e      	ldr	r3, [pc, #184]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037c0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037c2:	4b2e      	ldr	r3, [pc, #184]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80037c4:	2201      	movs	r2, #1
 80037c6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037c8:	4b2c      	ldr	r3, [pc, #176]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80037ce:	4a29      	ldr	r2, [pc, #164]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d014      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037de:	f7fe fcd3 	bl	8002188 <HAL_GetTick>
 80037e2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037e4:	e00a      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037e6:	f7fe fccf 	bl	8002188 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d901      	bls.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e036      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037fc:	4b1d      	ldr	r3, [pc, #116]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037fe:	6a1b      	ldr	r3, [r3, #32]
 8003800:	f003 0302 	and.w	r3, r3, #2
 8003804:	2b00      	cmp	r3, #0
 8003806:	d0ee      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003808:	4b1a      	ldr	r3, [pc, #104]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800380a:	6a1b      	ldr	r3, [r3, #32]
 800380c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	4917      	ldr	r1, [pc, #92]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003816:	4313      	orrs	r3, r2
 8003818:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800381a:	7dfb      	ldrb	r3, [r7, #23]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d105      	bne.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003820:	4b14      	ldr	r3, [pc, #80]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003822:	69db      	ldr	r3, [r3, #28]
 8003824:	4a13      	ldr	r2, [pc, #76]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003826:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800382a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d008      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003838:	4b0e      	ldr	r3, [pc, #56]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	490b      	ldr	r1, [pc, #44]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003846:	4313      	orrs	r3, r2
 8003848:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0310 	and.w	r3, r3, #16
 8003852:	2b00      	cmp	r3, #0
 8003854:	d008      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003856:	4b07      	ldr	r3, [pc, #28]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	4904      	ldr	r1, [pc, #16]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003864:	4313      	orrs	r3, r2
 8003866:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3718      	adds	r7, #24
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	40021000 	.word	0x40021000
 8003878:	40007000 	.word	0x40007000
 800387c:	42420440 	.word	0x42420440

08003880 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003880:	b590      	push	{r4, r7, lr}
 8003882:	b08d      	sub	sp, #52	; 0x34
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003888:	4b55      	ldr	r3, [pc, #340]	; (80039e0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800388a:	f107 040c 	add.w	r4, r7, #12
 800388e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003890:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003894:	4b53      	ldr	r3, [pc, #332]	; (80039e4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003896:	881b      	ldrh	r3, [r3, #0]
 8003898:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800389a:	2300      	movs	r3, #0
 800389c:	627b      	str	r3, [r7, #36]	; 0x24
 800389e:	2300      	movs	r3, #0
 80038a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038a2:	2300      	movs	r3, #0
 80038a4:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80038a6:	2300      	movs	r3, #0
 80038a8:	61fb      	str	r3, [r7, #28]
 80038aa:	2300      	movs	r3, #0
 80038ac:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d07f      	beq.n	80039b4 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80038b4:	2b10      	cmp	r3, #16
 80038b6:	d002      	beq.n	80038be <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d048      	beq.n	800394e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80038bc:	e08b      	b.n	80039d6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 80038be:	4b4a      	ldr	r3, [pc, #296]	; (80039e8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80038c4:	4b48      	ldr	r3, [pc, #288]	; (80039e8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d07f      	beq.n	80039d0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	0c9b      	lsrs	r3, r3, #18
 80038d4:	f003 030f 	and.w	r3, r3, #15
 80038d8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80038dc:	4413      	add	r3, r2
 80038de:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80038e2:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d018      	beq.n	8003920 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038ee:	4b3e      	ldr	r3, [pc, #248]	; (80039e8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	0c5b      	lsrs	r3, r3, #17
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80038fc:	4413      	add	r3, r2
 80038fe:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003902:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00d      	beq.n	800392a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800390e:	4a37      	ldr	r2, [pc, #220]	; (80039ec <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8003910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003912:	fbb2 f2f3 	udiv	r2, r2, r3
 8003916:	6a3b      	ldr	r3, [r7, #32]
 8003918:	fb02 f303 	mul.w	r3, r2, r3
 800391c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800391e:	e004      	b.n	800392a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003920:	6a3b      	ldr	r3, [r7, #32]
 8003922:	4a33      	ldr	r2, [pc, #204]	; (80039f0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003924:	fb02 f303 	mul.w	r3, r2, r3
 8003928:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800392a:	4b2f      	ldr	r3, [pc, #188]	; (80039e8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003932:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003936:	d102      	bne.n	800393e <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8003938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800393a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800393c:	e048      	b.n	80039d0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 800393e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003940:	005b      	lsls	r3, r3, #1
 8003942:	4a2c      	ldr	r2, [pc, #176]	; (80039f4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003944:	fba2 2303 	umull	r2, r3, r2, r3
 8003948:	085b      	lsrs	r3, r3, #1
 800394a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800394c:	e040      	b.n	80039d0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 800394e:	4b26      	ldr	r3, [pc, #152]	; (80039e8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800395a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800395e:	d108      	bne.n	8003972 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d003      	beq.n	8003972 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 800396a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800396e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003970:	e01f      	b.n	80039b2 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003978:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800397c:	d109      	bne.n	8003992 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800397e:	4b1a      	ldr	r3, [pc, #104]	; (80039e8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d003      	beq.n	8003992 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 800398a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800398e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003990:	e00f      	b.n	80039b2 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003998:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800399c:	d11a      	bne.n	80039d4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800399e:	4b12      	ldr	r3, [pc, #72]	; (80039e8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d014      	beq.n	80039d4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 80039aa:	f24f 4324 	movw	r3, #62500	; 0xf424
 80039ae:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80039b0:	e010      	b.n	80039d4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80039b2:	e00f      	b.n	80039d4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80039b4:	f7ff fe7c 	bl	80036b0 <HAL_RCC_GetPCLK2Freq>
 80039b8:	4602      	mov	r2, r0
 80039ba:	4b0b      	ldr	r3, [pc, #44]	; (80039e8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	0b9b      	lsrs	r3, r3, #14
 80039c0:	f003 0303 	and.w	r3, r3, #3
 80039c4:	3301      	adds	r3, #1
 80039c6:	005b      	lsls	r3, r3, #1
 80039c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039cc:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80039ce:	e002      	b.n	80039d6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80039d0:	bf00      	nop
 80039d2:	e000      	b.n	80039d6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80039d4:	bf00      	nop
    }
  }
  return (frequency);
 80039d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3734      	adds	r7, #52	; 0x34
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd90      	pop	{r4, r7, pc}
 80039e0:	08005efc 	.word	0x08005efc
 80039e4:	08005f0c 	.word	0x08005f0c
 80039e8:	40021000 	.word	0x40021000
 80039ec:	007a1200 	.word	0x007a1200
 80039f0:	003d0900 	.word	0x003d0900
 80039f4:	aaaaaaab 	.word	0xaaaaaaab

080039f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e053      	b.n	8003ab2 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d106      	bne.n	8003a2a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f7fe fa0f 	bl	8001e48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2202      	movs	r2, #2
 8003a2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a40:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685a      	ldr	r2, [r3, #4]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	431a      	orrs	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	431a      	orrs	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	431a      	orrs	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	431a      	orrs	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a66:	431a      	orrs	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	69db      	ldr	r3, [r3, #28]
 8003a6c:	431a      	orrs	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a1b      	ldr	r3, [r3, #32]
 8003a72:	ea42 0103 	orr.w	r1, r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	0c1a      	lsrs	r2, r3, #16
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f002 0204 	and.w	r2, r2, #4
 8003a90:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	69da      	ldr	r2, [r3, #28]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003aa0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b088      	sub	sp, #32
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	60f8      	str	r0, [r7, #12]
 8003ac2:	60b9      	str	r1, [r7, #8]
 8003ac4:	603b      	str	r3, [r7, #0]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003aca:	2300      	movs	r3, #0
 8003acc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d101      	bne.n	8003adc <HAL_SPI_Transmit+0x22>
 8003ad8:	2302      	movs	r3, #2
 8003ada:	e11e      	b.n	8003d1a <HAL_SPI_Transmit+0x260>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ae4:	f7fe fb50 	bl	8002188 <HAL_GetTick>
 8003ae8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003aea:	88fb      	ldrh	r3, [r7, #6]
 8003aec:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d002      	beq.n	8003b00 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003afa:	2302      	movs	r3, #2
 8003afc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003afe:	e103      	b.n	8003d08 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d002      	beq.n	8003b0c <HAL_SPI_Transmit+0x52>
 8003b06:	88fb      	ldrh	r3, [r7, #6]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d102      	bne.n	8003b12 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b10:	e0fa      	b.n	8003d08 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2203      	movs	r2, #3
 8003b16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	68ba      	ldr	r2, [r7, #8]
 8003b24:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	88fa      	ldrh	r2, [r7, #6]
 8003b2a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	88fa      	ldrh	r2, [r7, #6]
 8003b30:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b58:	d107      	bne.n	8003b6a <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b68:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b74:	2b40      	cmp	r3, #64	; 0x40
 8003b76:	d007      	beq.n	8003b88 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b90:	d14b      	bne.n	8003c2a <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d002      	beq.n	8003ba0 <HAL_SPI_Transmit+0xe6>
 8003b9a:	8afb      	ldrh	r3, [r7, #22]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d13e      	bne.n	8003c1e <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba4:	881a      	ldrh	r2, [r3, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb0:	1c9a      	adds	r2, r3, #2
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	b29a      	uxth	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003bc4:	e02b      	b.n	8003c1e <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d112      	bne.n	8003bfa <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd8:	881a      	ldrh	r2, [r3, #0]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be4:	1c9a      	adds	r2, r3, #2
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	86da      	strh	r2, [r3, #54]	; 0x36
 8003bf8:	e011      	b.n	8003c1e <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bfa:	f7fe fac5 	bl	8002188 <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	683a      	ldr	r2, [r7, #0]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d803      	bhi.n	8003c12 <HAL_SPI_Transmit+0x158>
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c10:	d102      	bne.n	8003c18 <HAL_SPI_Transmit+0x15e>
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d102      	bne.n	8003c1e <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003c1c:	e074      	b.n	8003d08 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d1ce      	bne.n	8003bc6 <HAL_SPI_Transmit+0x10c>
 8003c28:	e04c      	b.n	8003cc4 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d002      	beq.n	8003c38 <HAL_SPI_Transmit+0x17e>
 8003c32:	8afb      	ldrh	r3, [r7, #22]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d140      	bne.n	8003cba <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	330c      	adds	r3, #12
 8003c42:	7812      	ldrb	r2, [r2, #0]
 8003c44:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4a:	1c5a      	adds	r2, r3, #1
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	3b01      	subs	r3, #1
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003c5e:	e02c      	b.n	8003cba <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d113      	bne.n	8003c96 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	330c      	adds	r3, #12
 8003c78:	7812      	ldrb	r2, [r2, #0]
 8003c7a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c80:	1c5a      	adds	r2, r3, #1
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	86da      	strh	r2, [r3, #54]	; 0x36
 8003c94:	e011      	b.n	8003cba <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c96:	f7fe fa77 	bl	8002188 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	683a      	ldr	r2, [r7, #0]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d803      	bhi.n	8003cae <HAL_SPI_Transmit+0x1f4>
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cac:	d102      	bne.n	8003cb4 <HAL_SPI_Transmit+0x1fa>
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d102      	bne.n	8003cba <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003cb8:	e026      	b.n	8003d08 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1cd      	bne.n	8003c60 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	6839      	ldr	r1, [r7, #0]
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f000 f894 	bl	8003df6 <SPI_EndRxTxTransaction>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d002      	beq.n	8003cda <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2220      	movs	r2, #32
 8003cd8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d10a      	bne.n	8003cf8 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	613b      	str	r3, [r7, #16]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	613b      	str	r3, [r7, #16]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	613b      	str	r3, [r7, #16]
 8003cf6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d002      	beq.n	8003d06 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	77fb      	strb	r3, [r7, #31]
 8003d04:	e000      	b.n	8003d08 <HAL_SPI_Transmit+0x24e>
  }

error:
 8003d06:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d18:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3720      	adds	r7, #32
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b084      	sub	sp, #16
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	60f8      	str	r0, [r7, #12]
 8003d2a:	60b9      	str	r1, [r7, #8]
 8003d2c:	603b      	str	r3, [r7, #0]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d32:	e04c      	b.n	8003dce <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d3a:	d048      	beq.n	8003dce <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003d3c:	f7fe fa24 	bl	8002188 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d902      	bls.n	8003d52 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d13d      	bne.n	8003dce <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	685a      	ldr	r2, [r3, #4]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d6a:	d111      	bne.n	8003d90 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d74:	d004      	beq.n	8003d80 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d7e:	d107      	bne.n	8003d90 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d98:	d10f      	bne.n	8003dba <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003da8:	601a      	str	r2, [r3, #0]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003db8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e00f      	b.n	8003dee <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	689a      	ldr	r2, [r3, #8]
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	68ba      	ldr	r2, [r7, #8]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	bf0c      	ite	eq
 8003dde:	2301      	moveq	r3, #1
 8003de0:	2300      	movne	r3, #0
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	461a      	mov	r2, r3
 8003de6:	79fb      	ldrb	r3, [r7, #7]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d1a3      	bne.n	8003d34 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3710      	adds	r7, #16
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b086      	sub	sp, #24
 8003dfa:	af02      	add	r7, sp, #8
 8003dfc:	60f8      	str	r0, [r7, #12]
 8003dfe:	60b9      	str	r1, [r7, #8]
 8003e00:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	9300      	str	r3, [sp, #0]
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	2180      	movs	r1, #128	; 0x80
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f7ff ff88 	bl	8003d22 <SPI_WaitFlagStateUntilTimeout>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d007      	beq.n	8003e28 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e1c:	f043 0220 	orr.w	r2, r3, #32
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e000      	b.n	8003e2a <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
	...

08003e34 <__errno>:
 8003e34:	4b01      	ldr	r3, [pc, #4]	; (8003e3c <__errno+0x8>)
 8003e36:	6818      	ldr	r0, [r3, #0]
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	20000078 	.word	0x20000078

08003e40 <__libc_init_array>:
 8003e40:	b570      	push	{r4, r5, r6, lr}
 8003e42:	2500      	movs	r5, #0
 8003e44:	4e0c      	ldr	r6, [pc, #48]	; (8003e78 <__libc_init_array+0x38>)
 8003e46:	4c0d      	ldr	r4, [pc, #52]	; (8003e7c <__libc_init_array+0x3c>)
 8003e48:	1ba4      	subs	r4, r4, r6
 8003e4a:	10a4      	asrs	r4, r4, #2
 8003e4c:	42a5      	cmp	r5, r4
 8003e4e:	d109      	bne.n	8003e64 <__libc_init_array+0x24>
 8003e50:	f001 fffe 	bl	8005e50 <_init>
 8003e54:	2500      	movs	r5, #0
 8003e56:	4e0a      	ldr	r6, [pc, #40]	; (8003e80 <__libc_init_array+0x40>)
 8003e58:	4c0a      	ldr	r4, [pc, #40]	; (8003e84 <__libc_init_array+0x44>)
 8003e5a:	1ba4      	subs	r4, r4, r6
 8003e5c:	10a4      	asrs	r4, r4, #2
 8003e5e:	42a5      	cmp	r5, r4
 8003e60:	d105      	bne.n	8003e6e <__libc_init_array+0x2e>
 8003e62:	bd70      	pop	{r4, r5, r6, pc}
 8003e64:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e68:	4798      	blx	r3
 8003e6a:	3501      	adds	r5, #1
 8003e6c:	e7ee      	b.n	8003e4c <__libc_init_array+0xc>
 8003e6e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e72:	4798      	blx	r3
 8003e74:	3501      	adds	r5, #1
 8003e76:	e7f2      	b.n	8003e5e <__libc_init_array+0x1e>
 8003e78:	08006008 	.word	0x08006008
 8003e7c:	08006008 	.word	0x08006008
 8003e80:	08006008 	.word	0x08006008
 8003e84:	0800600c 	.word	0x0800600c

08003e88 <memcpy>:
 8003e88:	b510      	push	{r4, lr}
 8003e8a:	1e43      	subs	r3, r0, #1
 8003e8c:	440a      	add	r2, r1
 8003e8e:	4291      	cmp	r1, r2
 8003e90:	d100      	bne.n	8003e94 <memcpy+0xc>
 8003e92:	bd10      	pop	{r4, pc}
 8003e94:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e9c:	e7f7      	b.n	8003e8e <memcpy+0x6>

08003e9e <memset>:
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	4402      	add	r2, r0
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d100      	bne.n	8003ea8 <memset+0xa>
 8003ea6:	4770      	bx	lr
 8003ea8:	f803 1b01 	strb.w	r1, [r3], #1
 8003eac:	e7f9      	b.n	8003ea2 <memset+0x4>
	...

08003eb0 <iprintf>:
 8003eb0:	b40f      	push	{r0, r1, r2, r3}
 8003eb2:	4b0a      	ldr	r3, [pc, #40]	; (8003edc <iprintf+0x2c>)
 8003eb4:	b513      	push	{r0, r1, r4, lr}
 8003eb6:	681c      	ldr	r4, [r3, #0]
 8003eb8:	b124      	cbz	r4, 8003ec4 <iprintf+0x14>
 8003eba:	69a3      	ldr	r3, [r4, #24]
 8003ebc:	b913      	cbnz	r3, 8003ec4 <iprintf+0x14>
 8003ebe:	4620      	mov	r0, r4
 8003ec0:	f000 fa22 	bl	8004308 <__sinit>
 8003ec4:	ab05      	add	r3, sp, #20
 8003ec6:	9a04      	ldr	r2, [sp, #16]
 8003ec8:	68a1      	ldr	r1, [r4, #8]
 8003eca:	4620      	mov	r0, r4
 8003ecc:	9301      	str	r3, [sp, #4]
 8003ece:	f000 fbd7 	bl	8004680 <_vfiprintf_r>
 8003ed2:	b002      	add	sp, #8
 8003ed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ed8:	b004      	add	sp, #16
 8003eda:	4770      	bx	lr
 8003edc:	20000078 	.word	0x20000078

08003ee0 <_puts_r>:
 8003ee0:	b570      	push	{r4, r5, r6, lr}
 8003ee2:	460e      	mov	r6, r1
 8003ee4:	4605      	mov	r5, r0
 8003ee6:	b118      	cbz	r0, 8003ef0 <_puts_r+0x10>
 8003ee8:	6983      	ldr	r3, [r0, #24]
 8003eea:	b90b      	cbnz	r3, 8003ef0 <_puts_r+0x10>
 8003eec:	f000 fa0c 	bl	8004308 <__sinit>
 8003ef0:	69ab      	ldr	r3, [r5, #24]
 8003ef2:	68ac      	ldr	r4, [r5, #8]
 8003ef4:	b913      	cbnz	r3, 8003efc <_puts_r+0x1c>
 8003ef6:	4628      	mov	r0, r5
 8003ef8:	f000 fa06 	bl	8004308 <__sinit>
 8003efc:	4b23      	ldr	r3, [pc, #140]	; (8003f8c <_puts_r+0xac>)
 8003efe:	429c      	cmp	r4, r3
 8003f00:	d117      	bne.n	8003f32 <_puts_r+0x52>
 8003f02:	686c      	ldr	r4, [r5, #4]
 8003f04:	89a3      	ldrh	r3, [r4, #12]
 8003f06:	071b      	lsls	r3, r3, #28
 8003f08:	d51d      	bpl.n	8003f46 <_puts_r+0x66>
 8003f0a:	6923      	ldr	r3, [r4, #16]
 8003f0c:	b1db      	cbz	r3, 8003f46 <_puts_r+0x66>
 8003f0e:	3e01      	subs	r6, #1
 8003f10:	68a3      	ldr	r3, [r4, #8]
 8003f12:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003f16:	3b01      	subs	r3, #1
 8003f18:	60a3      	str	r3, [r4, #8]
 8003f1a:	b9e9      	cbnz	r1, 8003f58 <_puts_r+0x78>
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	da2e      	bge.n	8003f7e <_puts_r+0x9e>
 8003f20:	4622      	mov	r2, r4
 8003f22:	210a      	movs	r1, #10
 8003f24:	4628      	mov	r0, r5
 8003f26:	f000 f83f 	bl	8003fa8 <__swbuf_r>
 8003f2a:	3001      	adds	r0, #1
 8003f2c:	d011      	beq.n	8003f52 <_puts_r+0x72>
 8003f2e:	200a      	movs	r0, #10
 8003f30:	e011      	b.n	8003f56 <_puts_r+0x76>
 8003f32:	4b17      	ldr	r3, [pc, #92]	; (8003f90 <_puts_r+0xb0>)
 8003f34:	429c      	cmp	r4, r3
 8003f36:	d101      	bne.n	8003f3c <_puts_r+0x5c>
 8003f38:	68ac      	ldr	r4, [r5, #8]
 8003f3a:	e7e3      	b.n	8003f04 <_puts_r+0x24>
 8003f3c:	4b15      	ldr	r3, [pc, #84]	; (8003f94 <_puts_r+0xb4>)
 8003f3e:	429c      	cmp	r4, r3
 8003f40:	bf08      	it	eq
 8003f42:	68ec      	ldreq	r4, [r5, #12]
 8003f44:	e7de      	b.n	8003f04 <_puts_r+0x24>
 8003f46:	4621      	mov	r1, r4
 8003f48:	4628      	mov	r0, r5
 8003f4a:	f000 f87f 	bl	800404c <__swsetup_r>
 8003f4e:	2800      	cmp	r0, #0
 8003f50:	d0dd      	beq.n	8003f0e <_puts_r+0x2e>
 8003f52:	f04f 30ff 	mov.w	r0, #4294967295
 8003f56:	bd70      	pop	{r4, r5, r6, pc}
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	da04      	bge.n	8003f66 <_puts_r+0x86>
 8003f5c:	69a2      	ldr	r2, [r4, #24]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	dc06      	bgt.n	8003f70 <_puts_r+0x90>
 8003f62:	290a      	cmp	r1, #10
 8003f64:	d004      	beq.n	8003f70 <_puts_r+0x90>
 8003f66:	6823      	ldr	r3, [r4, #0]
 8003f68:	1c5a      	adds	r2, r3, #1
 8003f6a:	6022      	str	r2, [r4, #0]
 8003f6c:	7019      	strb	r1, [r3, #0]
 8003f6e:	e7cf      	b.n	8003f10 <_puts_r+0x30>
 8003f70:	4622      	mov	r2, r4
 8003f72:	4628      	mov	r0, r5
 8003f74:	f000 f818 	bl	8003fa8 <__swbuf_r>
 8003f78:	3001      	adds	r0, #1
 8003f7a:	d1c9      	bne.n	8003f10 <_puts_r+0x30>
 8003f7c:	e7e9      	b.n	8003f52 <_puts_r+0x72>
 8003f7e:	200a      	movs	r0, #10
 8003f80:	6823      	ldr	r3, [r4, #0]
 8003f82:	1c5a      	adds	r2, r3, #1
 8003f84:	6022      	str	r2, [r4, #0]
 8003f86:	7018      	strb	r0, [r3, #0]
 8003f88:	e7e5      	b.n	8003f56 <_puts_r+0x76>
 8003f8a:	bf00      	nop
 8003f8c:	08005f4c 	.word	0x08005f4c
 8003f90:	08005f6c 	.word	0x08005f6c
 8003f94:	08005f2c 	.word	0x08005f2c

08003f98 <puts>:
 8003f98:	4b02      	ldr	r3, [pc, #8]	; (8003fa4 <puts+0xc>)
 8003f9a:	4601      	mov	r1, r0
 8003f9c:	6818      	ldr	r0, [r3, #0]
 8003f9e:	f7ff bf9f 	b.w	8003ee0 <_puts_r>
 8003fa2:	bf00      	nop
 8003fa4:	20000078 	.word	0x20000078

08003fa8 <__swbuf_r>:
 8003fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003faa:	460e      	mov	r6, r1
 8003fac:	4614      	mov	r4, r2
 8003fae:	4605      	mov	r5, r0
 8003fb0:	b118      	cbz	r0, 8003fba <__swbuf_r+0x12>
 8003fb2:	6983      	ldr	r3, [r0, #24]
 8003fb4:	b90b      	cbnz	r3, 8003fba <__swbuf_r+0x12>
 8003fb6:	f000 f9a7 	bl	8004308 <__sinit>
 8003fba:	4b21      	ldr	r3, [pc, #132]	; (8004040 <__swbuf_r+0x98>)
 8003fbc:	429c      	cmp	r4, r3
 8003fbe:	d12a      	bne.n	8004016 <__swbuf_r+0x6e>
 8003fc0:	686c      	ldr	r4, [r5, #4]
 8003fc2:	69a3      	ldr	r3, [r4, #24]
 8003fc4:	60a3      	str	r3, [r4, #8]
 8003fc6:	89a3      	ldrh	r3, [r4, #12]
 8003fc8:	071a      	lsls	r2, r3, #28
 8003fca:	d52e      	bpl.n	800402a <__swbuf_r+0x82>
 8003fcc:	6923      	ldr	r3, [r4, #16]
 8003fce:	b363      	cbz	r3, 800402a <__swbuf_r+0x82>
 8003fd0:	6923      	ldr	r3, [r4, #16]
 8003fd2:	6820      	ldr	r0, [r4, #0]
 8003fd4:	b2f6      	uxtb	r6, r6
 8003fd6:	1ac0      	subs	r0, r0, r3
 8003fd8:	6963      	ldr	r3, [r4, #20]
 8003fda:	4637      	mov	r7, r6
 8003fdc:	4283      	cmp	r3, r0
 8003fde:	dc04      	bgt.n	8003fea <__swbuf_r+0x42>
 8003fe0:	4621      	mov	r1, r4
 8003fe2:	4628      	mov	r0, r5
 8003fe4:	f000 f926 	bl	8004234 <_fflush_r>
 8003fe8:	bb28      	cbnz	r0, 8004036 <__swbuf_r+0x8e>
 8003fea:	68a3      	ldr	r3, [r4, #8]
 8003fec:	3001      	adds	r0, #1
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	60a3      	str	r3, [r4, #8]
 8003ff2:	6823      	ldr	r3, [r4, #0]
 8003ff4:	1c5a      	adds	r2, r3, #1
 8003ff6:	6022      	str	r2, [r4, #0]
 8003ff8:	701e      	strb	r6, [r3, #0]
 8003ffa:	6963      	ldr	r3, [r4, #20]
 8003ffc:	4283      	cmp	r3, r0
 8003ffe:	d004      	beq.n	800400a <__swbuf_r+0x62>
 8004000:	89a3      	ldrh	r3, [r4, #12]
 8004002:	07db      	lsls	r3, r3, #31
 8004004:	d519      	bpl.n	800403a <__swbuf_r+0x92>
 8004006:	2e0a      	cmp	r6, #10
 8004008:	d117      	bne.n	800403a <__swbuf_r+0x92>
 800400a:	4621      	mov	r1, r4
 800400c:	4628      	mov	r0, r5
 800400e:	f000 f911 	bl	8004234 <_fflush_r>
 8004012:	b190      	cbz	r0, 800403a <__swbuf_r+0x92>
 8004014:	e00f      	b.n	8004036 <__swbuf_r+0x8e>
 8004016:	4b0b      	ldr	r3, [pc, #44]	; (8004044 <__swbuf_r+0x9c>)
 8004018:	429c      	cmp	r4, r3
 800401a:	d101      	bne.n	8004020 <__swbuf_r+0x78>
 800401c:	68ac      	ldr	r4, [r5, #8]
 800401e:	e7d0      	b.n	8003fc2 <__swbuf_r+0x1a>
 8004020:	4b09      	ldr	r3, [pc, #36]	; (8004048 <__swbuf_r+0xa0>)
 8004022:	429c      	cmp	r4, r3
 8004024:	bf08      	it	eq
 8004026:	68ec      	ldreq	r4, [r5, #12]
 8004028:	e7cb      	b.n	8003fc2 <__swbuf_r+0x1a>
 800402a:	4621      	mov	r1, r4
 800402c:	4628      	mov	r0, r5
 800402e:	f000 f80d 	bl	800404c <__swsetup_r>
 8004032:	2800      	cmp	r0, #0
 8004034:	d0cc      	beq.n	8003fd0 <__swbuf_r+0x28>
 8004036:	f04f 37ff 	mov.w	r7, #4294967295
 800403a:	4638      	mov	r0, r7
 800403c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800403e:	bf00      	nop
 8004040:	08005f4c 	.word	0x08005f4c
 8004044:	08005f6c 	.word	0x08005f6c
 8004048:	08005f2c 	.word	0x08005f2c

0800404c <__swsetup_r>:
 800404c:	4b32      	ldr	r3, [pc, #200]	; (8004118 <__swsetup_r+0xcc>)
 800404e:	b570      	push	{r4, r5, r6, lr}
 8004050:	681d      	ldr	r5, [r3, #0]
 8004052:	4606      	mov	r6, r0
 8004054:	460c      	mov	r4, r1
 8004056:	b125      	cbz	r5, 8004062 <__swsetup_r+0x16>
 8004058:	69ab      	ldr	r3, [r5, #24]
 800405a:	b913      	cbnz	r3, 8004062 <__swsetup_r+0x16>
 800405c:	4628      	mov	r0, r5
 800405e:	f000 f953 	bl	8004308 <__sinit>
 8004062:	4b2e      	ldr	r3, [pc, #184]	; (800411c <__swsetup_r+0xd0>)
 8004064:	429c      	cmp	r4, r3
 8004066:	d10f      	bne.n	8004088 <__swsetup_r+0x3c>
 8004068:	686c      	ldr	r4, [r5, #4]
 800406a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800406e:	b29a      	uxth	r2, r3
 8004070:	0715      	lsls	r5, r2, #28
 8004072:	d42c      	bmi.n	80040ce <__swsetup_r+0x82>
 8004074:	06d0      	lsls	r0, r2, #27
 8004076:	d411      	bmi.n	800409c <__swsetup_r+0x50>
 8004078:	2209      	movs	r2, #9
 800407a:	6032      	str	r2, [r6, #0]
 800407c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004080:	81a3      	strh	r3, [r4, #12]
 8004082:	f04f 30ff 	mov.w	r0, #4294967295
 8004086:	e03e      	b.n	8004106 <__swsetup_r+0xba>
 8004088:	4b25      	ldr	r3, [pc, #148]	; (8004120 <__swsetup_r+0xd4>)
 800408a:	429c      	cmp	r4, r3
 800408c:	d101      	bne.n	8004092 <__swsetup_r+0x46>
 800408e:	68ac      	ldr	r4, [r5, #8]
 8004090:	e7eb      	b.n	800406a <__swsetup_r+0x1e>
 8004092:	4b24      	ldr	r3, [pc, #144]	; (8004124 <__swsetup_r+0xd8>)
 8004094:	429c      	cmp	r4, r3
 8004096:	bf08      	it	eq
 8004098:	68ec      	ldreq	r4, [r5, #12]
 800409a:	e7e6      	b.n	800406a <__swsetup_r+0x1e>
 800409c:	0751      	lsls	r1, r2, #29
 800409e:	d512      	bpl.n	80040c6 <__swsetup_r+0x7a>
 80040a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80040a2:	b141      	cbz	r1, 80040b6 <__swsetup_r+0x6a>
 80040a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80040a8:	4299      	cmp	r1, r3
 80040aa:	d002      	beq.n	80040b2 <__swsetup_r+0x66>
 80040ac:	4630      	mov	r0, r6
 80040ae:	f000 fa19 	bl	80044e4 <_free_r>
 80040b2:	2300      	movs	r3, #0
 80040b4:	6363      	str	r3, [r4, #52]	; 0x34
 80040b6:	89a3      	ldrh	r3, [r4, #12]
 80040b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80040bc:	81a3      	strh	r3, [r4, #12]
 80040be:	2300      	movs	r3, #0
 80040c0:	6063      	str	r3, [r4, #4]
 80040c2:	6923      	ldr	r3, [r4, #16]
 80040c4:	6023      	str	r3, [r4, #0]
 80040c6:	89a3      	ldrh	r3, [r4, #12]
 80040c8:	f043 0308 	orr.w	r3, r3, #8
 80040cc:	81a3      	strh	r3, [r4, #12]
 80040ce:	6923      	ldr	r3, [r4, #16]
 80040d0:	b94b      	cbnz	r3, 80040e6 <__swsetup_r+0x9a>
 80040d2:	89a3      	ldrh	r3, [r4, #12]
 80040d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80040d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040dc:	d003      	beq.n	80040e6 <__swsetup_r+0x9a>
 80040de:	4621      	mov	r1, r4
 80040e0:	4630      	mov	r0, r6
 80040e2:	f000 f9bf 	bl	8004464 <__smakebuf_r>
 80040e6:	89a2      	ldrh	r2, [r4, #12]
 80040e8:	f012 0301 	ands.w	r3, r2, #1
 80040ec:	d00c      	beq.n	8004108 <__swsetup_r+0xbc>
 80040ee:	2300      	movs	r3, #0
 80040f0:	60a3      	str	r3, [r4, #8]
 80040f2:	6963      	ldr	r3, [r4, #20]
 80040f4:	425b      	negs	r3, r3
 80040f6:	61a3      	str	r3, [r4, #24]
 80040f8:	6923      	ldr	r3, [r4, #16]
 80040fa:	b953      	cbnz	r3, 8004112 <__swsetup_r+0xc6>
 80040fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004100:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004104:	d1ba      	bne.n	800407c <__swsetup_r+0x30>
 8004106:	bd70      	pop	{r4, r5, r6, pc}
 8004108:	0792      	lsls	r2, r2, #30
 800410a:	bf58      	it	pl
 800410c:	6963      	ldrpl	r3, [r4, #20]
 800410e:	60a3      	str	r3, [r4, #8]
 8004110:	e7f2      	b.n	80040f8 <__swsetup_r+0xac>
 8004112:	2000      	movs	r0, #0
 8004114:	e7f7      	b.n	8004106 <__swsetup_r+0xba>
 8004116:	bf00      	nop
 8004118:	20000078 	.word	0x20000078
 800411c:	08005f4c 	.word	0x08005f4c
 8004120:	08005f6c 	.word	0x08005f6c
 8004124:	08005f2c 	.word	0x08005f2c

08004128 <__sflush_r>:
 8004128:	898a      	ldrh	r2, [r1, #12]
 800412a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800412e:	4605      	mov	r5, r0
 8004130:	0710      	lsls	r0, r2, #28
 8004132:	460c      	mov	r4, r1
 8004134:	d458      	bmi.n	80041e8 <__sflush_r+0xc0>
 8004136:	684b      	ldr	r3, [r1, #4]
 8004138:	2b00      	cmp	r3, #0
 800413a:	dc05      	bgt.n	8004148 <__sflush_r+0x20>
 800413c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800413e:	2b00      	cmp	r3, #0
 8004140:	dc02      	bgt.n	8004148 <__sflush_r+0x20>
 8004142:	2000      	movs	r0, #0
 8004144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004148:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800414a:	2e00      	cmp	r6, #0
 800414c:	d0f9      	beq.n	8004142 <__sflush_r+0x1a>
 800414e:	2300      	movs	r3, #0
 8004150:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004154:	682f      	ldr	r7, [r5, #0]
 8004156:	6a21      	ldr	r1, [r4, #32]
 8004158:	602b      	str	r3, [r5, #0]
 800415a:	d032      	beq.n	80041c2 <__sflush_r+0x9a>
 800415c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800415e:	89a3      	ldrh	r3, [r4, #12]
 8004160:	075a      	lsls	r2, r3, #29
 8004162:	d505      	bpl.n	8004170 <__sflush_r+0x48>
 8004164:	6863      	ldr	r3, [r4, #4]
 8004166:	1ac0      	subs	r0, r0, r3
 8004168:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800416a:	b10b      	cbz	r3, 8004170 <__sflush_r+0x48>
 800416c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800416e:	1ac0      	subs	r0, r0, r3
 8004170:	2300      	movs	r3, #0
 8004172:	4602      	mov	r2, r0
 8004174:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004176:	6a21      	ldr	r1, [r4, #32]
 8004178:	4628      	mov	r0, r5
 800417a:	47b0      	blx	r6
 800417c:	1c43      	adds	r3, r0, #1
 800417e:	89a3      	ldrh	r3, [r4, #12]
 8004180:	d106      	bne.n	8004190 <__sflush_r+0x68>
 8004182:	6829      	ldr	r1, [r5, #0]
 8004184:	291d      	cmp	r1, #29
 8004186:	d848      	bhi.n	800421a <__sflush_r+0xf2>
 8004188:	4a29      	ldr	r2, [pc, #164]	; (8004230 <__sflush_r+0x108>)
 800418a:	40ca      	lsrs	r2, r1
 800418c:	07d6      	lsls	r6, r2, #31
 800418e:	d544      	bpl.n	800421a <__sflush_r+0xf2>
 8004190:	2200      	movs	r2, #0
 8004192:	6062      	str	r2, [r4, #4]
 8004194:	6922      	ldr	r2, [r4, #16]
 8004196:	04d9      	lsls	r1, r3, #19
 8004198:	6022      	str	r2, [r4, #0]
 800419a:	d504      	bpl.n	80041a6 <__sflush_r+0x7e>
 800419c:	1c42      	adds	r2, r0, #1
 800419e:	d101      	bne.n	80041a4 <__sflush_r+0x7c>
 80041a0:	682b      	ldr	r3, [r5, #0]
 80041a2:	b903      	cbnz	r3, 80041a6 <__sflush_r+0x7e>
 80041a4:	6560      	str	r0, [r4, #84]	; 0x54
 80041a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80041a8:	602f      	str	r7, [r5, #0]
 80041aa:	2900      	cmp	r1, #0
 80041ac:	d0c9      	beq.n	8004142 <__sflush_r+0x1a>
 80041ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80041b2:	4299      	cmp	r1, r3
 80041b4:	d002      	beq.n	80041bc <__sflush_r+0x94>
 80041b6:	4628      	mov	r0, r5
 80041b8:	f000 f994 	bl	80044e4 <_free_r>
 80041bc:	2000      	movs	r0, #0
 80041be:	6360      	str	r0, [r4, #52]	; 0x34
 80041c0:	e7c0      	b.n	8004144 <__sflush_r+0x1c>
 80041c2:	2301      	movs	r3, #1
 80041c4:	4628      	mov	r0, r5
 80041c6:	47b0      	blx	r6
 80041c8:	1c41      	adds	r1, r0, #1
 80041ca:	d1c8      	bne.n	800415e <__sflush_r+0x36>
 80041cc:	682b      	ldr	r3, [r5, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d0c5      	beq.n	800415e <__sflush_r+0x36>
 80041d2:	2b1d      	cmp	r3, #29
 80041d4:	d001      	beq.n	80041da <__sflush_r+0xb2>
 80041d6:	2b16      	cmp	r3, #22
 80041d8:	d101      	bne.n	80041de <__sflush_r+0xb6>
 80041da:	602f      	str	r7, [r5, #0]
 80041dc:	e7b1      	b.n	8004142 <__sflush_r+0x1a>
 80041de:	89a3      	ldrh	r3, [r4, #12]
 80041e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041e4:	81a3      	strh	r3, [r4, #12]
 80041e6:	e7ad      	b.n	8004144 <__sflush_r+0x1c>
 80041e8:	690f      	ldr	r7, [r1, #16]
 80041ea:	2f00      	cmp	r7, #0
 80041ec:	d0a9      	beq.n	8004142 <__sflush_r+0x1a>
 80041ee:	0793      	lsls	r3, r2, #30
 80041f0:	bf18      	it	ne
 80041f2:	2300      	movne	r3, #0
 80041f4:	680e      	ldr	r6, [r1, #0]
 80041f6:	bf08      	it	eq
 80041f8:	694b      	ldreq	r3, [r1, #20]
 80041fa:	eba6 0807 	sub.w	r8, r6, r7
 80041fe:	600f      	str	r7, [r1, #0]
 8004200:	608b      	str	r3, [r1, #8]
 8004202:	f1b8 0f00 	cmp.w	r8, #0
 8004206:	dd9c      	ble.n	8004142 <__sflush_r+0x1a>
 8004208:	4643      	mov	r3, r8
 800420a:	463a      	mov	r2, r7
 800420c:	6a21      	ldr	r1, [r4, #32]
 800420e:	4628      	mov	r0, r5
 8004210:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004212:	47b0      	blx	r6
 8004214:	2800      	cmp	r0, #0
 8004216:	dc06      	bgt.n	8004226 <__sflush_r+0xfe>
 8004218:	89a3      	ldrh	r3, [r4, #12]
 800421a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800421e:	81a3      	strh	r3, [r4, #12]
 8004220:	f04f 30ff 	mov.w	r0, #4294967295
 8004224:	e78e      	b.n	8004144 <__sflush_r+0x1c>
 8004226:	4407      	add	r7, r0
 8004228:	eba8 0800 	sub.w	r8, r8, r0
 800422c:	e7e9      	b.n	8004202 <__sflush_r+0xda>
 800422e:	bf00      	nop
 8004230:	20400001 	.word	0x20400001

08004234 <_fflush_r>:
 8004234:	b538      	push	{r3, r4, r5, lr}
 8004236:	690b      	ldr	r3, [r1, #16]
 8004238:	4605      	mov	r5, r0
 800423a:	460c      	mov	r4, r1
 800423c:	b1db      	cbz	r3, 8004276 <_fflush_r+0x42>
 800423e:	b118      	cbz	r0, 8004248 <_fflush_r+0x14>
 8004240:	6983      	ldr	r3, [r0, #24]
 8004242:	b90b      	cbnz	r3, 8004248 <_fflush_r+0x14>
 8004244:	f000 f860 	bl	8004308 <__sinit>
 8004248:	4b0c      	ldr	r3, [pc, #48]	; (800427c <_fflush_r+0x48>)
 800424a:	429c      	cmp	r4, r3
 800424c:	d109      	bne.n	8004262 <_fflush_r+0x2e>
 800424e:	686c      	ldr	r4, [r5, #4]
 8004250:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004254:	b17b      	cbz	r3, 8004276 <_fflush_r+0x42>
 8004256:	4621      	mov	r1, r4
 8004258:	4628      	mov	r0, r5
 800425a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800425e:	f7ff bf63 	b.w	8004128 <__sflush_r>
 8004262:	4b07      	ldr	r3, [pc, #28]	; (8004280 <_fflush_r+0x4c>)
 8004264:	429c      	cmp	r4, r3
 8004266:	d101      	bne.n	800426c <_fflush_r+0x38>
 8004268:	68ac      	ldr	r4, [r5, #8]
 800426a:	e7f1      	b.n	8004250 <_fflush_r+0x1c>
 800426c:	4b05      	ldr	r3, [pc, #20]	; (8004284 <_fflush_r+0x50>)
 800426e:	429c      	cmp	r4, r3
 8004270:	bf08      	it	eq
 8004272:	68ec      	ldreq	r4, [r5, #12]
 8004274:	e7ec      	b.n	8004250 <_fflush_r+0x1c>
 8004276:	2000      	movs	r0, #0
 8004278:	bd38      	pop	{r3, r4, r5, pc}
 800427a:	bf00      	nop
 800427c:	08005f4c 	.word	0x08005f4c
 8004280:	08005f6c 	.word	0x08005f6c
 8004284:	08005f2c 	.word	0x08005f2c

08004288 <std>:
 8004288:	2300      	movs	r3, #0
 800428a:	b510      	push	{r4, lr}
 800428c:	4604      	mov	r4, r0
 800428e:	e9c0 3300 	strd	r3, r3, [r0]
 8004292:	6083      	str	r3, [r0, #8]
 8004294:	8181      	strh	r1, [r0, #12]
 8004296:	6643      	str	r3, [r0, #100]	; 0x64
 8004298:	81c2      	strh	r2, [r0, #14]
 800429a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800429e:	6183      	str	r3, [r0, #24]
 80042a0:	4619      	mov	r1, r3
 80042a2:	2208      	movs	r2, #8
 80042a4:	305c      	adds	r0, #92	; 0x5c
 80042a6:	f7ff fdfa 	bl	8003e9e <memset>
 80042aa:	4b05      	ldr	r3, [pc, #20]	; (80042c0 <std+0x38>)
 80042ac:	6224      	str	r4, [r4, #32]
 80042ae:	6263      	str	r3, [r4, #36]	; 0x24
 80042b0:	4b04      	ldr	r3, [pc, #16]	; (80042c4 <std+0x3c>)
 80042b2:	62a3      	str	r3, [r4, #40]	; 0x28
 80042b4:	4b04      	ldr	r3, [pc, #16]	; (80042c8 <std+0x40>)
 80042b6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80042b8:	4b04      	ldr	r3, [pc, #16]	; (80042cc <std+0x44>)
 80042ba:	6323      	str	r3, [r4, #48]	; 0x30
 80042bc:	bd10      	pop	{r4, pc}
 80042be:	bf00      	nop
 80042c0:	08004bdd 	.word	0x08004bdd
 80042c4:	08004bff 	.word	0x08004bff
 80042c8:	08004c37 	.word	0x08004c37
 80042cc:	08004c5b 	.word	0x08004c5b

080042d0 <_cleanup_r>:
 80042d0:	4901      	ldr	r1, [pc, #4]	; (80042d8 <_cleanup_r+0x8>)
 80042d2:	f000 b885 	b.w	80043e0 <_fwalk_reent>
 80042d6:	bf00      	nop
 80042d8:	08004235 	.word	0x08004235

080042dc <__sfmoreglue>:
 80042dc:	b570      	push	{r4, r5, r6, lr}
 80042de:	2568      	movs	r5, #104	; 0x68
 80042e0:	1e4a      	subs	r2, r1, #1
 80042e2:	4355      	muls	r5, r2
 80042e4:	460e      	mov	r6, r1
 80042e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80042ea:	f000 f947 	bl	800457c <_malloc_r>
 80042ee:	4604      	mov	r4, r0
 80042f0:	b140      	cbz	r0, 8004304 <__sfmoreglue+0x28>
 80042f2:	2100      	movs	r1, #0
 80042f4:	e9c0 1600 	strd	r1, r6, [r0]
 80042f8:	300c      	adds	r0, #12
 80042fa:	60a0      	str	r0, [r4, #8]
 80042fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004300:	f7ff fdcd 	bl	8003e9e <memset>
 8004304:	4620      	mov	r0, r4
 8004306:	bd70      	pop	{r4, r5, r6, pc}

08004308 <__sinit>:
 8004308:	6983      	ldr	r3, [r0, #24]
 800430a:	b510      	push	{r4, lr}
 800430c:	4604      	mov	r4, r0
 800430e:	bb33      	cbnz	r3, 800435e <__sinit+0x56>
 8004310:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004314:	6503      	str	r3, [r0, #80]	; 0x50
 8004316:	4b12      	ldr	r3, [pc, #72]	; (8004360 <__sinit+0x58>)
 8004318:	4a12      	ldr	r2, [pc, #72]	; (8004364 <__sinit+0x5c>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6282      	str	r2, [r0, #40]	; 0x28
 800431e:	4298      	cmp	r0, r3
 8004320:	bf04      	itt	eq
 8004322:	2301      	moveq	r3, #1
 8004324:	6183      	streq	r3, [r0, #24]
 8004326:	f000 f81f 	bl	8004368 <__sfp>
 800432a:	6060      	str	r0, [r4, #4]
 800432c:	4620      	mov	r0, r4
 800432e:	f000 f81b 	bl	8004368 <__sfp>
 8004332:	60a0      	str	r0, [r4, #8]
 8004334:	4620      	mov	r0, r4
 8004336:	f000 f817 	bl	8004368 <__sfp>
 800433a:	2200      	movs	r2, #0
 800433c:	60e0      	str	r0, [r4, #12]
 800433e:	2104      	movs	r1, #4
 8004340:	6860      	ldr	r0, [r4, #4]
 8004342:	f7ff ffa1 	bl	8004288 <std>
 8004346:	2201      	movs	r2, #1
 8004348:	2109      	movs	r1, #9
 800434a:	68a0      	ldr	r0, [r4, #8]
 800434c:	f7ff ff9c 	bl	8004288 <std>
 8004350:	2202      	movs	r2, #2
 8004352:	2112      	movs	r1, #18
 8004354:	68e0      	ldr	r0, [r4, #12]
 8004356:	f7ff ff97 	bl	8004288 <std>
 800435a:	2301      	movs	r3, #1
 800435c:	61a3      	str	r3, [r4, #24]
 800435e:	bd10      	pop	{r4, pc}
 8004360:	08005f28 	.word	0x08005f28
 8004364:	080042d1 	.word	0x080042d1

08004368 <__sfp>:
 8004368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800436a:	4b1b      	ldr	r3, [pc, #108]	; (80043d8 <__sfp+0x70>)
 800436c:	4607      	mov	r7, r0
 800436e:	681e      	ldr	r6, [r3, #0]
 8004370:	69b3      	ldr	r3, [r6, #24]
 8004372:	b913      	cbnz	r3, 800437a <__sfp+0x12>
 8004374:	4630      	mov	r0, r6
 8004376:	f7ff ffc7 	bl	8004308 <__sinit>
 800437a:	3648      	adds	r6, #72	; 0x48
 800437c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004380:	3b01      	subs	r3, #1
 8004382:	d503      	bpl.n	800438c <__sfp+0x24>
 8004384:	6833      	ldr	r3, [r6, #0]
 8004386:	b133      	cbz	r3, 8004396 <__sfp+0x2e>
 8004388:	6836      	ldr	r6, [r6, #0]
 800438a:	e7f7      	b.n	800437c <__sfp+0x14>
 800438c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004390:	b16d      	cbz	r5, 80043ae <__sfp+0x46>
 8004392:	3468      	adds	r4, #104	; 0x68
 8004394:	e7f4      	b.n	8004380 <__sfp+0x18>
 8004396:	2104      	movs	r1, #4
 8004398:	4638      	mov	r0, r7
 800439a:	f7ff ff9f 	bl	80042dc <__sfmoreglue>
 800439e:	6030      	str	r0, [r6, #0]
 80043a0:	2800      	cmp	r0, #0
 80043a2:	d1f1      	bne.n	8004388 <__sfp+0x20>
 80043a4:	230c      	movs	r3, #12
 80043a6:	4604      	mov	r4, r0
 80043a8:	603b      	str	r3, [r7, #0]
 80043aa:	4620      	mov	r0, r4
 80043ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043ae:	4b0b      	ldr	r3, [pc, #44]	; (80043dc <__sfp+0x74>)
 80043b0:	6665      	str	r5, [r4, #100]	; 0x64
 80043b2:	e9c4 5500 	strd	r5, r5, [r4]
 80043b6:	60a5      	str	r5, [r4, #8]
 80043b8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80043bc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80043c0:	2208      	movs	r2, #8
 80043c2:	4629      	mov	r1, r5
 80043c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80043c8:	f7ff fd69 	bl	8003e9e <memset>
 80043cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80043d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80043d4:	e7e9      	b.n	80043aa <__sfp+0x42>
 80043d6:	bf00      	nop
 80043d8:	08005f28 	.word	0x08005f28
 80043dc:	ffff0001 	.word	0xffff0001

080043e0 <_fwalk_reent>:
 80043e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043e4:	4680      	mov	r8, r0
 80043e6:	4689      	mov	r9, r1
 80043e8:	2600      	movs	r6, #0
 80043ea:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80043ee:	b914      	cbnz	r4, 80043f6 <_fwalk_reent+0x16>
 80043f0:	4630      	mov	r0, r6
 80043f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043f6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80043fa:	3f01      	subs	r7, #1
 80043fc:	d501      	bpl.n	8004402 <_fwalk_reent+0x22>
 80043fe:	6824      	ldr	r4, [r4, #0]
 8004400:	e7f5      	b.n	80043ee <_fwalk_reent+0xe>
 8004402:	89ab      	ldrh	r3, [r5, #12]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d907      	bls.n	8004418 <_fwalk_reent+0x38>
 8004408:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800440c:	3301      	adds	r3, #1
 800440e:	d003      	beq.n	8004418 <_fwalk_reent+0x38>
 8004410:	4629      	mov	r1, r5
 8004412:	4640      	mov	r0, r8
 8004414:	47c8      	blx	r9
 8004416:	4306      	orrs	r6, r0
 8004418:	3568      	adds	r5, #104	; 0x68
 800441a:	e7ee      	b.n	80043fa <_fwalk_reent+0x1a>

0800441c <__swhatbuf_r>:
 800441c:	b570      	push	{r4, r5, r6, lr}
 800441e:	460e      	mov	r6, r1
 8004420:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004424:	b096      	sub	sp, #88	; 0x58
 8004426:	2900      	cmp	r1, #0
 8004428:	4614      	mov	r4, r2
 800442a:	461d      	mov	r5, r3
 800442c:	da07      	bge.n	800443e <__swhatbuf_r+0x22>
 800442e:	2300      	movs	r3, #0
 8004430:	602b      	str	r3, [r5, #0]
 8004432:	89b3      	ldrh	r3, [r6, #12]
 8004434:	061a      	lsls	r2, r3, #24
 8004436:	d410      	bmi.n	800445a <__swhatbuf_r+0x3e>
 8004438:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800443c:	e00e      	b.n	800445c <__swhatbuf_r+0x40>
 800443e:	466a      	mov	r2, sp
 8004440:	f000 fc32 	bl	8004ca8 <_fstat_r>
 8004444:	2800      	cmp	r0, #0
 8004446:	dbf2      	blt.n	800442e <__swhatbuf_r+0x12>
 8004448:	9a01      	ldr	r2, [sp, #4]
 800444a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800444e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004452:	425a      	negs	r2, r3
 8004454:	415a      	adcs	r2, r3
 8004456:	602a      	str	r2, [r5, #0]
 8004458:	e7ee      	b.n	8004438 <__swhatbuf_r+0x1c>
 800445a:	2340      	movs	r3, #64	; 0x40
 800445c:	2000      	movs	r0, #0
 800445e:	6023      	str	r3, [r4, #0]
 8004460:	b016      	add	sp, #88	; 0x58
 8004462:	bd70      	pop	{r4, r5, r6, pc}

08004464 <__smakebuf_r>:
 8004464:	898b      	ldrh	r3, [r1, #12]
 8004466:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004468:	079d      	lsls	r5, r3, #30
 800446a:	4606      	mov	r6, r0
 800446c:	460c      	mov	r4, r1
 800446e:	d507      	bpl.n	8004480 <__smakebuf_r+0x1c>
 8004470:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004474:	6023      	str	r3, [r4, #0]
 8004476:	6123      	str	r3, [r4, #16]
 8004478:	2301      	movs	r3, #1
 800447a:	6163      	str	r3, [r4, #20]
 800447c:	b002      	add	sp, #8
 800447e:	bd70      	pop	{r4, r5, r6, pc}
 8004480:	ab01      	add	r3, sp, #4
 8004482:	466a      	mov	r2, sp
 8004484:	f7ff ffca 	bl	800441c <__swhatbuf_r>
 8004488:	9900      	ldr	r1, [sp, #0]
 800448a:	4605      	mov	r5, r0
 800448c:	4630      	mov	r0, r6
 800448e:	f000 f875 	bl	800457c <_malloc_r>
 8004492:	b948      	cbnz	r0, 80044a8 <__smakebuf_r+0x44>
 8004494:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004498:	059a      	lsls	r2, r3, #22
 800449a:	d4ef      	bmi.n	800447c <__smakebuf_r+0x18>
 800449c:	f023 0303 	bic.w	r3, r3, #3
 80044a0:	f043 0302 	orr.w	r3, r3, #2
 80044a4:	81a3      	strh	r3, [r4, #12]
 80044a6:	e7e3      	b.n	8004470 <__smakebuf_r+0xc>
 80044a8:	4b0d      	ldr	r3, [pc, #52]	; (80044e0 <__smakebuf_r+0x7c>)
 80044aa:	62b3      	str	r3, [r6, #40]	; 0x28
 80044ac:	89a3      	ldrh	r3, [r4, #12]
 80044ae:	6020      	str	r0, [r4, #0]
 80044b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044b4:	81a3      	strh	r3, [r4, #12]
 80044b6:	9b00      	ldr	r3, [sp, #0]
 80044b8:	6120      	str	r0, [r4, #16]
 80044ba:	6163      	str	r3, [r4, #20]
 80044bc:	9b01      	ldr	r3, [sp, #4]
 80044be:	b15b      	cbz	r3, 80044d8 <__smakebuf_r+0x74>
 80044c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80044c4:	4630      	mov	r0, r6
 80044c6:	f000 fc01 	bl	8004ccc <_isatty_r>
 80044ca:	b128      	cbz	r0, 80044d8 <__smakebuf_r+0x74>
 80044cc:	89a3      	ldrh	r3, [r4, #12]
 80044ce:	f023 0303 	bic.w	r3, r3, #3
 80044d2:	f043 0301 	orr.w	r3, r3, #1
 80044d6:	81a3      	strh	r3, [r4, #12]
 80044d8:	89a3      	ldrh	r3, [r4, #12]
 80044da:	431d      	orrs	r5, r3
 80044dc:	81a5      	strh	r5, [r4, #12]
 80044de:	e7cd      	b.n	800447c <__smakebuf_r+0x18>
 80044e0:	080042d1 	.word	0x080042d1

080044e4 <_free_r>:
 80044e4:	b538      	push	{r3, r4, r5, lr}
 80044e6:	4605      	mov	r5, r0
 80044e8:	2900      	cmp	r1, #0
 80044ea:	d043      	beq.n	8004574 <_free_r+0x90>
 80044ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044f0:	1f0c      	subs	r4, r1, #4
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	bfb8      	it	lt
 80044f6:	18e4      	addlt	r4, r4, r3
 80044f8:	f000 fc18 	bl	8004d2c <__malloc_lock>
 80044fc:	4a1e      	ldr	r2, [pc, #120]	; (8004578 <_free_r+0x94>)
 80044fe:	6813      	ldr	r3, [r2, #0]
 8004500:	4610      	mov	r0, r2
 8004502:	b933      	cbnz	r3, 8004512 <_free_r+0x2e>
 8004504:	6063      	str	r3, [r4, #4]
 8004506:	6014      	str	r4, [r2, #0]
 8004508:	4628      	mov	r0, r5
 800450a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800450e:	f000 bc0e 	b.w	8004d2e <__malloc_unlock>
 8004512:	42a3      	cmp	r3, r4
 8004514:	d90b      	bls.n	800452e <_free_r+0x4a>
 8004516:	6821      	ldr	r1, [r4, #0]
 8004518:	1862      	adds	r2, r4, r1
 800451a:	4293      	cmp	r3, r2
 800451c:	bf01      	itttt	eq
 800451e:	681a      	ldreq	r2, [r3, #0]
 8004520:	685b      	ldreq	r3, [r3, #4]
 8004522:	1852      	addeq	r2, r2, r1
 8004524:	6022      	streq	r2, [r4, #0]
 8004526:	6063      	str	r3, [r4, #4]
 8004528:	6004      	str	r4, [r0, #0]
 800452a:	e7ed      	b.n	8004508 <_free_r+0x24>
 800452c:	4613      	mov	r3, r2
 800452e:	685a      	ldr	r2, [r3, #4]
 8004530:	b10a      	cbz	r2, 8004536 <_free_r+0x52>
 8004532:	42a2      	cmp	r2, r4
 8004534:	d9fa      	bls.n	800452c <_free_r+0x48>
 8004536:	6819      	ldr	r1, [r3, #0]
 8004538:	1858      	adds	r0, r3, r1
 800453a:	42a0      	cmp	r0, r4
 800453c:	d10b      	bne.n	8004556 <_free_r+0x72>
 800453e:	6820      	ldr	r0, [r4, #0]
 8004540:	4401      	add	r1, r0
 8004542:	1858      	adds	r0, r3, r1
 8004544:	4282      	cmp	r2, r0
 8004546:	6019      	str	r1, [r3, #0]
 8004548:	d1de      	bne.n	8004508 <_free_r+0x24>
 800454a:	6810      	ldr	r0, [r2, #0]
 800454c:	6852      	ldr	r2, [r2, #4]
 800454e:	4401      	add	r1, r0
 8004550:	6019      	str	r1, [r3, #0]
 8004552:	605a      	str	r2, [r3, #4]
 8004554:	e7d8      	b.n	8004508 <_free_r+0x24>
 8004556:	d902      	bls.n	800455e <_free_r+0x7a>
 8004558:	230c      	movs	r3, #12
 800455a:	602b      	str	r3, [r5, #0]
 800455c:	e7d4      	b.n	8004508 <_free_r+0x24>
 800455e:	6820      	ldr	r0, [r4, #0]
 8004560:	1821      	adds	r1, r4, r0
 8004562:	428a      	cmp	r2, r1
 8004564:	bf01      	itttt	eq
 8004566:	6811      	ldreq	r1, [r2, #0]
 8004568:	6852      	ldreq	r2, [r2, #4]
 800456a:	1809      	addeq	r1, r1, r0
 800456c:	6021      	streq	r1, [r4, #0]
 800456e:	6062      	str	r2, [r4, #4]
 8004570:	605c      	str	r4, [r3, #4]
 8004572:	e7c9      	b.n	8004508 <_free_r+0x24>
 8004574:	bd38      	pop	{r3, r4, r5, pc}
 8004576:	bf00      	nop
 8004578:	200001a0 	.word	0x200001a0

0800457c <_malloc_r>:
 800457c:	b570      	push	{r4, r5, r6, lr}
 800457e:	1ccd      	adds	r5, r1, #3
 8004580:	f025 0503 	bic.w	r5, r5, #3
 8004584:	3508      	adds	r5, #8
 8004586:	2d0c      	cmp	r5, #12
 8004588:	bf38      	it	cc
 800458a:	250c      	movcc	r5, #12
 800458c:	2d00      	cmp	r5, #0
 800458e:	4606      	mov	r6, r0
 8004590:	db01      	blt.n	8004596 <_malloc_r+0x1a>
 8004592:	42a9      	cmp	r1, r5
 8004594:	d903      	bls.n	800459e <_malloc_r+0x22>
 8004596:	230c      	movs	r3, #12
 8004598:	6033      	str	r3, [r6, #0]
 800459a:	2000      	movs	r0, #0
 800459c:	bd70      	pop	{r4, r5, r6, pc}
 800459e:	f000 fbc5 	bl	8004d2c <__malloc_lock>
 80045a2:	4a21      	ldr	r2, [pc, #132]	; (8004628 <_malloc_r+0xac>)
 80045a4:	6814      	ldr	r4, [r2, #0]
 80045a6:	4621      	mov	r1, r4
 80045a8:	b991      	cbnz	r1, 80045d0 <_malloc_r+0x54>
 80045aa:	4c20      	ldr	r4, [pc, #128]	; (800462c <_malloc_r+0xb0>)
 80045ac:	6823      	ldr	r3, [r4, #0]
 80045ae:	b91b      	cbnz	r3, 80045b8 <_malloc_r+0x3c>
 80045b0:	4630      	mov	r0, r6
 80045b2:	f000 fb03 	bl	8004bbc <_sbrk_r>
 80045b6:	6020      	str	r0, [r4, #0]
 80045b8:	4629      	mov	r1, r5
 80045ba:	4630      	mov	r0, r6
 80045bc:	f000 fafe 	bl	8004bbc <_sbrk_r>
 80045c0:	1c43      	adds	r3, r0, #1
 80045c2:	d124      	bne.n	800460e <_malloc_r+0x92>
 80045c4:	230c      	movs	r3, #12
 80045c6:	4630      	mov	r0, r6
 80045c8:	6033      	str	r3, [r6, #0]
 80045ca:	f000 fbb0 	bl	8004d2e <__malloc_unlock>
 80045ce:	e7e4      	b.n	800459a <_malloc_r+0x1e>
 80045d0:	680b      	ldr	r3, [r1, #0]
 80045d2:	1b5b      	subs	r3, r3, r5
 80045d4:	d418      	bmi.n	8004608 <_malloc_r+0x8c>
 80045d6:	2b0b      	cmp	r3, #11
 80045d8:	d90f      	bls.n	80045fa <_malloc_r+0x7e>
 80045da:	600b      	str	r3, [r1, #0]
 80045dc:	18cc      	adds	r4, r1, r3
 80045de:	50cd      	str	r5, [r1, r3]
 80045e0:	4630      	mov	r0, r6
 80045e2:	f000 fba4 	bl	8004d2e <__malloc_unlock>
 80045e6:	f104 000b 	add.w	r0, r4, #11
 80045ea:	1d23      	adds	r3, r4, #4
 80045ec:	f020 0007 	bic.w	r0, r0, #7
 80045f0:	1ac3      	subs	r3, r0, r3
 80045f2:	d0d3      	beq.n	800459c <_malloc_r+0x20>
 80045f4:	425a      	negs	r2, r3
 80045f6:	50e2      	str	r2, [r4, r3]
 80045f8:	e7d0      	b.n	800459c <_malloc_r+0x20>
 80045fa:	684b      	ldr	r3, [r1, #4]
 80045fc:	428c      	cmp	r4, r1
 80045fe:	bf16      	itet	ne
 8004600:	6063      	strne	r3, [r4, #4]
 8004602:	6013      	streq	r3, [r2, #0]
 8004604:	460c      	movne	r4, r1
 8004606:	e7eb      	b.n	80045e0 <_malloc_r+0x64>
 8004608:	460c      	mov	r4, r1
 800460a:	6849      	ldr	r1, [r1, #4]
 800460c:	e7cc      	b.n	80045a8 <_malloc_r+0x2c>
 800460e:	1cc4      	adds	r4, r0, #3
 8004610:	f024 0403 	bic.w	r4, r4, #3
 8004614:	42a0      	cmp	r0, r4
 8004616:	d005      	beq.n	8004624 <_malloc_r+0xa8>
 8004618:	1a21      	subs	r1, r4, r0
 800461a:	4630      	mov	r0, r6
 800461c:	f000 face 	bl	8004bbc <_sbrk_r>
 8004620:	3001      	adds	r0, #1
 8004622:	d0cf      	beq.n	80045c4 <_malloc_r+0x48>
 8004624:	6025      	str	r5, [r4, #0]
 8004626:	e7db      	b.n	80045e0 <_malloc_r+0x64>
 8004628:	200001a0 	.word	0x200001a0
 800462c:	200001a4 	.word	0x200001a4

08004630 <__sfputc_r>:
 8004630:	6893      	ldr	r3, [r2, #8]
 8004632:	b410      	push	{r4}
 8004634:	3b01      	subs	r3, #1
 8004636:	2b00      	cmp	r3, #0
 8004638:	6093      	str	r3, [r2, #8]
 800463a:	da07      	bge.n	800464c <__sfputc_r+0x1c>
 800463c:	6994      	ldr	r4, [r2, #24]
 800463e:	42a3      	cmp	r3, r4
 8004640:	db01      	blt.n	8004646 <__sfputc_r+0x16>
 8004642:	290a      	cmp	r1, #10
 8004644:	d102      	bne.n	800464c <__sfputc_r+0x1c>
 8004646:	bc10      	pop	{r4}
 8004648:	f7ff bcae 	b.w	8003fa8 <__swbuf_r>
 800464c:	6813      	ldr	r3, [r2, #0]
 800464e:	1c58      	adds	r0, r3, #1
 8004650:	6010      	str	r0, [r2, #0]
 8004652:	7019      	strb	r1, [r3, #0]
 8004654:	4608      	mov	r0, r1
 8004656:	bc10      	pop	{r4}
 8004658:	4770      	bx	lr

0800465a <__sfputs_r>:
 800465a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800465c:	4606      	mov	r6, r0
 800465e:	460f      	mov	r7, r1
 8004660:	4614      	mov	r4, r2
 8004662:	18d5      	adds	r5, r2, r3
 8004664:	42ac      	cmp	r4, r5
 8004666:	d101      	bne.n	800466c <__sfputs_r+0x12>
 8004668:	2000      	movs	r0, #0
 800466a:	e007      	b.n	800467c <__sfputs_r+0x22>
 800466c:	463a      	mov	r2, r7
 800466e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004672:	4630      	mov	r0, r6
 8004674:	f7ff ffdc 	bl	8004630 <__sfputc_r>
 8004678:	1c43      	adds	r3, r0, #1
 800467a:	d1f3      	bne.n	8004664 <__sfputs_r+0xa>
 800467c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004680 <_vfiprintf_r>:
 8004680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004684:	460c      	mov	r4, r1
 8004686:	b09d      	sub	sp, #116	; 0x74
 8004688:	4617      	mov	r7, r2
 800468a:	461d      	mov	r5, r3
 800468c:	4606      	mov	r6, r0
 800468e:	b118      	cbz	r0, 8004698 <_vfiprintf_r+0x18>
 8004690:	6983      	ldr	r3, [r0, #24]
 8004692:	b90b      	cbnz	r3, 8004698 <_vfiprintf_r+0x18>
 8004694:	f7ff fe38 	bl	8004308 <__sinit>
 8004698:	4b7c      	ldr	r3, [pc, #496]	; (800488c <_vfiprintf_r+0x20c>)
 800469a:	429c      	cmp	r4, r3
 800469c:	d158      	bne.n	8004750 <_vfiprintf_r+0xd0>
 800469e:	6874      	ldr	r4, [r6, #4]
 80046a0:	89a3      	ldrh	r3, [r4, #12]
 80046a2:	0718      	lsls	r0, r3, #28
 80046a4:	d55e      	bpl.n	8004764 <_vfiprintf_r+0xe4>
 80046a6:	6923      	ldr	r3, [r4, #16]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d05b      	beq.n	8004764 <_vfiprintf_r+0xe4>
 80046ac:	2300      	movs	r3, #0
 80046ae:	9309      	str	r3, [sp, #36]	; 0x24
 80046b0:	2320      	movs	r3, #32
 80046b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80046b6:	2330      	movs	r3, #48	; 0x30
 80046b8:	f04f 0b01 	mov.w	fp, #1
 80046bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80046c0:	9503      	str	r5, [sp, #12]
 80046c2:	46b8      	mov	r8, r7
 80046c4:	4645      	mov	r5, r8
 80046c6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80046ca:	b10b      	cbz	r3, 80046d0 <_vfiprintf_r+0x50>
 80046cc:	2b25      	cmp	r3, #37	; 0x25
 80046ce:	d154      	bne.n	800477a <_vfiprintf_r+0xfa>
 80046d0:	ebb8 0a07 	subs.w	sl, r8, r7
 80046d4:	d00b      	beq.n	80046ee <_vfiprintf_r+0x6e>
 80046d6:	4653      	mov	r3, sl
 80046d8:	463a      	mov	r2, r7
 80046da:	4621      	mov	r1, r4
 80046dc:	4630      	mov	r0, r6
 80046de:	f7ff ffbc 	bl	800465a <__sfputs_r>
 80046e2:	3001      	adds	r0, #1
 80046e4:	f000 80c2 	beq.w	800486c <_vfiprintf_r+0x1ec>
 80046e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046ea:	4453      	add	r3, sl
 80046ec:	9309      	str	r3, [sp, #36]	; 0x24
 80046ee:	f898 3000 	ldrb.w	r3, [r8]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	f000 80ba 	beq.w	800486c <_vfiprintf_r+0x1ec>
 80046f8:	2300      	movs	r3, #0
 80046fa:	f04f 32ff 	mov.w	r2, #4294967295
 80046fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004702:	9304      	str	r3, [sp, #16]
 8004704:	9307      	str	r3, [sp, #28]
 8004706:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800470a:	931a      	str	r3, [sp, #104]	; 0x68
 800470c:	46a8      	mov	r8, r5
 800470e:	2205      	movs	r2, #5
 8004710:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004714:	485e      	ldr	r0, [pc, #376]	; (8004890 <_vfiprintf_r+0x210>)
 8004716:	f000 fafb 	bl	8004d10 <memchr>
 800471a:	9b04      	ldr	r3, [sp, #16]
 800471c:	bb78      	cbnz	r0, 800477e <_vfiprintf_r+0xfe>
 800471e:	06d9      	lsls	r1, r3, #27
 8004720:	bf44      	itt	mi
 8004722:	2220      	movmi	r2, #32
 8004724:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004728:	071a      	lsls	r2, r3, #28
 800472a:	bf44      	itt	mi
 800472c:	222b      	movmi	r2, #43	; 0x2b
 800472e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004732:	782a      	ldrb	r2, [r5, #0]
 8004734:	2a2a      	cmp	r2, #42	; 0x2a
 8004736:	d02a      	beq.n	800478e <_vfiprintf_r+0x10e>
 8004738:	46a8      	mov	r8, r5
 800473a:	2000      	movs	r0, #0
 800473c:	250a      	movs	r5, #10
 800473e:	9a07      	ldr	r2, [sp, #28]
 8004740:	4641      	mov	r1, r8
 8004742:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004746:	3b30      	subs	r3, #48	; 0x30
 8004748:	2b09      	cmp	r3, #9
 800474a:	d969      	bls.n	8004820 <_vfiprintf_r+0x1a0>
 800474c:	b360      	cbz	r0, 80047a8 <_vfiprintf_r+0x128>
 800474e:	e024      	b.n	800479a <_vfiprintf_r+0x11a>
 8004750:	4b50      	ldr	r3, [pc, #320]	; (8004894 <_vfiprintf_r+0x214>)
 8004752:	429c      	cmp	r4, r3
 8004754:	d101      	bne.n	800475a <_vfiprintf_r+0xda>
 8004756:	68b4      	ldr	r4, [r6, #8]
 8004758:	e7a2      	b.n	80046a0 <_vfiprintf_r+0x20>
 800475a:	4b4f      	ldr	r3, [pc, #316]	; (8004898 <_vfiprintf_r+0x218>)
 800475c:	429c      	cmp	r4, r3
 800475e:	bf08      	it	eq
 8004760:	68f4      	ldreq	r4, [r6, #12]
 8004762:	e79d      	b.n	80046a0 <_vfiprintf_r+0x20>
 8004764:	4621      	mov	r1, r4
 8004766:	4630      	mov	r0, r6
 8004768:	f7ff fc70 	bl	800404c <__swsetup_r>
 800476c:	2800      	cmp	r0, #0
 800476e:	d09d      	beq.n	80046ac <_vfiprintf_r+0x2c>
 8004770:	f04f 30ff 	mov.w	r0, #4294967295
 8004774:	b01d      	add	sp, #116	; 0x74
 8004776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800477a:	46a8      	mov	r8, r5
 800477c:	e7a2      	b.n	80046c4 <_vfiprintf_r+0x44>
 800477e:	4a44      	ldr	r2, [pc, #272]	; (8004890 <_vfiprintf_r+0x210>)
 8004780:	4645      	mov	r5, r8
 8004782:	1a80      	subs	r0, r0, r2
 8004784:	fa0b f000 	lsl.w	r0, fp, r0
 8004788:	4318      	orrs	r0, r3
 800478a:	9004      	str	r0, [sp, #16]
 800478c:	e7be      	b.n	800470c <_vfiprintf_r+0x8c>
 800478e:	9a03      	ldr	r2, [sp, #12]
 8004790:	1d11      	adds	r1, r2, #4
 8004792:	6812      	ldr	r2, [r2, #0]
 8004794:	9103      	str	r1, [sp, #12]
 8004796:	2a00      	cmp	r2, #0
 8004798:	db01      	blt.n	800479e <_vfiprintf_r+0x11e>
 800479a:	9207      	str	r2, [sp, #28]
 800479c:	e004      	b.n	80047a8 <_vfiprintf_r+0x128>
 800479e:	4252      	negs	r2, r2
 80047a0:	f043 0302 	orr.w	r3, r3, #2
 80047a4:	9207      	str	r2, [sp, #28]
 80047a6:	9304      	str	r3, [sp, #16]
 80047a8:	f898 3000 	ldrb.w	r3, [r8]
 80047ac:	2b2e      	cmp	r3, #46	; 0x2e
 80047ae:	d10e      	bne.n	80047ce <_vfiprintf_r+0x14e>
 80047b0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80047b4:	2b2a      	cmp	r3, #42	; 0x2a
 80047b6:	d138      	bne.n	800482a <_vfiprintf_r+0x1aa>
 80047b8:	9b03      	ldr	r3, [sp, #12]
 80047ba:	f108 0802 	add.w	r8, r8, #2
 80047be:	1d1a      	adds	r2, r3, #4
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	9203      	str	r2, [sp, #12]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	bfb8      	it	lt
 80047c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80047cc:	9305      	str	r3, [sp, #20]
 80047ce:	4d33      	ldr	r5, [pc, #204]	; (800489c <_vfiprintf_r+0x21c>)
 80047d0:	2203      	movs	r2, #3
 80047d2:	f898 1000 	ldrb.w	r1, [r8]
 80047d6:	4628      	mov	r0, r5
 80047d8:	f000 fa9a 	bl	8004d10 <memchr>
 80047dc:	b140      	cbz	r0, 80047f0 <_vfiprintf_r+0x170>
 80047de:	2340      	movs	r3, #64	; 0x40
 80047e0:	1b40      	subs	r0, r0, r5
 80047e2:	fa03 f000 	lsl.w	r0, r3, r0
 80047e6:	9b04      	ldr	r3, [sp, #16]
 80047e8:	f108 0801 	add.w	r8, r8, #1
 80047ec:	4303      	orrs	r3, r0
 80047ee:	9304      	str	r3, [sp, #16]
 80047f0:	f898 1000 	ldrb.w	r1, [r8]
 80047f4:	2206      	movs	r2, #6
 80047f6:	482a      	ldr	r0, [pc, #168]	; (80048a0 <_vfiprintf_r+0x220>)
 80047f8:	f108 0701 	add.w	r7, r8, #1
 80047fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004800:	f000 fa86 	bl	8004d10 <memchr>
 8004804:	2800      	cmp	r0, #0
 8004806:	d037      	beq.n	8004878 <_vfiprintf_r+0x1f8>
 8004808:	4b26      	ldr	r3, [pc, #152]	; (80048a4 <_vfiprintf_r+0x224>)
 800480a:	bb1b      	cbnz	r3, 8004854 <_vfiprintf_r+0x1d4>
 800480c:	9b03      	ldr	r3, [sp, #12]
 800480e:	3307      	adds	r3, #7
 8004810:	f023 0307 	bic.w	r3, r3, #7
 8004814:	3308      	adds	r3, #8
 8004816:	9303      	str	r3, [sp, #12]
 8004818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800481a:	444b      	add	r3, r9
 800481c:	9309      	str	r3, [sp, #36]	; 0x24
 800481e:	e750      	b.n	80046c2 <_vfiprintf_r+0x42>
 8004820:	fb05 3202 	mla	r2, r5, r2, r3
 8004824:	2001      	movs	r0, #1
 8004826:	4688      	mov	r8, r1
 8004828:	e78a      	b.n	8004740 <_vfiprintf_r+0xc0>
 800482a:	2300      	movs	r3, #0
 800482c:	250a      	movs	r5, #10
 800482e:	4619      	mov	r1, r3
 8004830:	f108 0801 	add.w	r8, r8, #1
 8004834:	9305      	str	r3, [sp, #20]
 8004836:	4640      	mov	r0, r8
 8004838:	f810 2b01 	ldrb.w	r2, [r0], #1
 800483c:	3a30      	subs	r2, #48	; 0x30
 800483e:	2a09      	cmp	r2, #9
 8004840:	d903      	bls.n	800484a <_vfiprintf_r+0x1ca>
 8004842:	2b00      	cmp	r3, #0
 8004844:	d0c3      	beq.n	80047ce <_vfiprintf_r+0x14e>
 8004846:	9105      	str	r1, [sp, #20]
 8004848:	e7c1      	b.n	80047ce <_vfiprintf_r+0x14e>
 800484a:	fb05 2101 	mla	r1, r5, r1, r2
 800484e:	2301      	movs	r3, #1
 8004850:	4680      	mov	r8, r0
 8004852:	e7f0      	b.n	8004836 <_vfiprintf_r+0x1b6>
 8004854:	ab03      	add	r3, sp, #12
 8004856:	9300      	str	r3, [sp, #0]
 8004858:	4622      	mov	r2, r4
 800485a:	4b13      	ldr	r3, [pc, #76]	; (80048a8 <_vfiprintf_r+0x228>)
 800485c:	a904      	add	r1, sp, #16
 800485e:	4630      	mov	r0, r6
 8004860:	f3af 8000 	nop.w
 8004864:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004868:	4681      	mov	r9, r0
 800486a:	d1d5      	bne.n	8004818 <_vfiprintf_r+0x198>
 800486c:	89a3      	ldrh	r3, [r4, #12]
 800486e:	065b      	lsls	r3, r3, #25
 8004870:	f53f af7e 	bmi.w	8004770 <_vfiprintf_r+0xf0>
 8004874:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004876:	e77d      	b.n	8004774 <_vfiprintf_r+0xf4>
 8004878:	ab03      	add	r3, sp, #12
 800487a:	9300      	str	r3, [sp, #0]
 800487c:	4622      	mov	r2, r4
 800487e:	4b0a      	ldr	r3, [pc, #40]	; (80048a8 <_vfiprintf_r+0x228>)
 8004880:	a904      	add	r1, sp, #16
 8004882:	4630      	mov	r0, r6
 8004884:	f000 f888 	bl	8004998 <_printf_i>
 8004888:	e7ec      	b.n	8004864 <_vfiprintf_r+0x1e4>
 800488a:	bf00      	nop
 800488c:	08005f4c 	.word	0x08005f4c
 8004890:	08005f8c 	.word	0x08005f8c
 8004894:	08005f6c 	.word	0x08005f6c
 8004898:	08005f2c 	.word	0x08005f2c
 800489c:	08005f92 	.word	0x08005f92
 80048a0:	08005f96 	.word	0x08005f96
 80048a4:	00000000 	.word	0x00000000
 80048a8:	0800465b 	.word	0x0800465b

080048ac <_printf_common>:
 80048ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048b0:	4691      	mov	r9, r2
 80048b2:	461f      	mov	r7, r3
 80048b4:	688a      	ldr	r2, [r1, #8]
 80048b6:	690b      	ldr	r3, [r1, #16]
 80048b8:	4606      	mov	r6, r0
 80048ba:	4293      	cmp	r3, r2
 80048bc:	bfb8      	it	lt
 80048be:	4613      	movlt	r3, r2
 80048c0:	f8c9 3000 	str.w	r3, [r9]
 80048c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048c8:	460c      	mov	r4, r1
 80048ca:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048ce:	b112      	cbz	r2, 80048d6 <_printf_common+0x2a>
 80048d0:	3301      	adds	r3, #1
 80048d2:	f8c9 3000 	str.w	r3, [r9]
 80048d6:	6823      	ldr	r3, [r4, #0]
 80048d8:	0699      	lsls	r1, r3, #26
 80048da:	bf42      	ittt	mi
 80048dc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80048e0:	3302      	addmi	r3, #2
 80048e2:	f8c9 3000 	strmi.w	r3, [r9]
 80048e6:	6825      	ldr	r5, [r4, #0]
 80048e8:	f015 0506 	ands.w	r5, r5, #6
 80048ec:	d107      	bne.n	80048fe <_printf_common+0x52>
 80048ee:	f104 0a19 	add.w	sl, r4, #25
 80048f2:	68e3      	ldr	r3, [r4, #12]
 80048f4:	f8d9 2000 	ldr.w	r2, [r9]
 80048f8:	1a9b      	subs	r3, r3, r2
 80048fa:	42ab      	cmp	r3, r5
 80048fc:	dc29      	bgt.n	8004952 <_printf_common+0xa6>
 80048fe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004902:	6822      	ldr	r2, [r4, #0]
 8004904:	3300      	adds	r3, #0
 8004906:	bf18      	it	ne
 8004908:	2301      	movne	r3, #1
 800490a:	0692      	lsls	r2, r2, #26
 800490c:	d42e      	bmi.n	800496c <_printf_common+0xc0>
 800490e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004912:	4639      	mov	r1, r7
 8004914:	4630      	mov	r0, r6
 8004916:	47c0      	blx	r8
 8004918:	3001      	adds	r0, #1
 800491a:	d021      	beq.n	8004960 <_printf_common+0xb4>
 800491c:	6823      	ldr	r3, [r4, #0]
 800491e:	68e5      	ldr	r5, [r4, #12]
 8004920:	f003 0306 	and.w	r3, r3, #6
 8004924:	2b04      	cmp	r3, #4
 8004926:	bf18      	it	ne
 8004928:	2500      	movne	r5, #0
 800492a:	f8d9 2000 	ldr.w	r2, [r9]
 800492e:	f04f 0900 	mov.w	r9, #0
 8004932:	bf08      	it	eq
 8004934:	1aad      	subeq	r5, r5, r2
 8004936:	68a3      	ldr	r3, [r4, #8]
 8004938:	6922      	ldr	r2, [r4, #16]
 800493a:	bf08      	it	eq
 800493c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004940:	4293      	cmp	r3, r2
 8004942:	bfc4      	itt	gt
 8004944:	1a9b      	subgt	r3, r3, r2
 8004946:	18ed      	addgt	r5, r5, r3
 8004948:	341a      	adds	r4, #26
 800494a:	454d      	cmp	r5, r9
 800494c:	d11a      	bne.n	8004984 <_printf_common+0xd8>
 800494e:	2000      	movs	r0, #0
 8004950:	e008      	b.n	8004964 <_printf_common+0xb8>
 8004952:	2301      	movs	r3, #1
 8004954:	4652      	mov	r2, sl
 8004956:	4639      	mov	r1, r7
 8004958:	4630      	mov	r0, r6
 800495a:	47c0      	blx	r8
 800495c:	3001      	adds	r0, #1
 800495e:	d103      	bne.n	8004968 <_printf_common+0xbc>
 8004960:	f04f 30ff 	mov.w	r0, #4294967295
 8004964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004968:	3501      	adds	r5, #1
 800496a:	e7c2      	b.n	80048f2 <_printf_common+0x46>
 800496c:	2030      	movs	r0, #48	; 0x30
 800496e:	18e1      	adds	r1, r4, r3
 8004970:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004974:	1c5a      	adds	r2, r3, #1
 8004976:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800497a:	4422      	add	r2, r4
 800497c:	3302      	adds	r3, #2
 800497e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004982:	e7c4      	b.n	800490e <_printf_common+0x62>
 8004984:	2301      	movs	r3, #1
 8004986:	4622      	mov	r2, r4
 8004988:	4639      	mov	r1, r7
 800498a:	4630      	mov	r0, r6
 800498c:	47c0      	blx	r8
 800498e:	3001      	adds	r0, #1
 8004990:	d0e6      	beq.n	8004960 <_printf_common+0xb4>
 8004992:	f109 0901 	add.w	r9, r9, #1
 8004996:	e7d8      	b.n	800494a <_printf_common+0x9e>

08004998 <_printf_i>:
 8004998:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800499c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80049a0:	460c      	mov	r4, r1
 80049a2:	7e09      	ldrb	r1, [r1, #24]
 80049a4:	b085      	sub	sp, #20
 80049a6:	296e      	cmp	r1, #110	; 0x6e
 80049a8:	4617      	mov	r7, r2
 80049aa:	4606      	mov	r6, r0
 80049ac:	4698      	mov	r8, r3
 80049ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80049b0:	f000 80b3 	beq.w	8004b1a <_printf_i+0x182>
 80049b4:	d822      	bhi.n	80049fc <_printf_i+0x64>
 80049b6:	2963      	cmp	r1, #99	; 0x63
 80049b8:	d036      	beq.n	8004a28 <_printf_i+0x90>
 80049ba:	d80a      	bhi.n	80049d2 <_printf_i+0x3a>
 80049bc:	2900      	cmp	r1, #0
 80049be:	f000 80b9 	beq.w	8004b34 <_printf_i+0x19c>
 80049c2:	2958      	cmp	r1, #88	; 0x58
 80049c4:	f000 8083 	beq.w	8004ace <_printf_i+0x136>
 80049c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049cc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80049d0:	e032      	b.n	8004a38 <_printf_i+0xa0>
 80049d2:	2964      	cmp	r1, #100	; 0x64
 80049d4:	d001      	beq.n	80049da <_printf_i+0x42>
 80049d6:	2969      	cmp	r1, #105	; 0x69
 80049d8:	d1f6      	bne.n	80049c8 <_printf_i+0x30>
 80049da:	6820      	ldr	r0, [r4, #0]
 80049dc:	6813      	ldr	r3, [r2, #0]
 80049de:	0605      	lsls	r5, r0, #24
 80049e0:	f103 0104 	add.w	r1, r3, #4
 80049e4:	d52a      	bpl.n	8004a3c <_printf_i+0xa4>
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	6011      	str	r1, [r2, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	da03      	bge.n	80049f6 <_printf_i+0x5e>
 80049ee:	222d      	movs	r2, #45	; 0x2d
 80049f0:	425b      	negs	r3, r3
 80049f2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80049f6:	486f      	ldr	r0, [pc, #444]	; (8004bb4 <_printf_i+0x21c>)
 80049f8:	220a      	movs	r2, #10
 80049fa:	e039      	b.n	8004a70 <_printf_i+0xd8>
 80049fc:	2973      	cmp	r1, #115	; 0x73
 80049fe:	f000 809d 	beq.w	8004b3c <_printf_i+0x1a4>
 8004a02:	d808      	bhi.n	8004a16 <_printf_i+0x7e>
 8004a04:	296f      	cmp	r1, #111	; 0x6f
 8004a06:	d020      	beq.n	8004a4a <_printf_i+0xb2>
 8004a08:	2970      	cmp	r1, #112	; 0x70
 8004a0a:	d1dd      	bne.n	80049c8 <_printf_i+0x30>
 8004a0c:	6823      	ldr	r3, [r4, #0]
 8004a0e:	f043 0320 	orr.w	r3, r3, #32
 8004a12:	6023      	str	r3, [r4, #0]
 8004a14:	e003      	b.n	8004a1e <_printf_i+0x86>
 8004a16:	2975      	cmp	r1, #117	; 0x75
 8004a18:	d017      	beq.n	8004a4a <_printf_i+0xb2>
 8004a1a:	2978      	cmp	r1, #120	; 0x78
 8004a1c:	d1d4      	bne.n	80049c8 <_printf_i+0x30>
 8004a1e:	2378      	movs	r3, #120	; 0x78
 8004a20:	4865      	ldr	r0, [pc, #404]	; (8004bb8 <_printf_i+0x220>)
 8004a22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a26:	e055      	b.n	8004ad4 <_printf_i+0x13c>
 8004a28:	6813      	ldr	r3, [r2, #0]
 8004a2a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a2e:	1d19      	adds	r1, r3, #4
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	6011      	str	r1, [r2, #0]
 8004a34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e08c      	b.n	8004b56 <_printf_i+0x1be>
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004a42:	6011      	str	r1, [r2, #0]
 8004a44:	bf18      	it	ne
 8004a46:	b21b      	sxthne	r3, r3
 8004a48:	e7cf      	b.n	80049ea <_printf_i+0x52>
 8004a4a:	6813      	ldr	r3, [r2, #0]
 8004a4c:	6825      	ldr	r5, [r4, #0]
 8004a4e:	1d18      	adds	r0, r3, #4
 8004a50:	6010      	str	r0, [r2, #0]
 8004a52:	0628      	lsls	r0, r5, #24
 8004a54:	d501      	bpl.n	8004a5a <_printf_i+0xc2>
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	e002      	b.n	8004a60 <_printf_i+0xc8>
 8004a5a:	0668      	lsls	r0, r5, #25
 8004a5c:	d5fb      	bpl.n	8004a56 <_printf_i+0xbe>
 8004a5e:	881b      	ldrh	r3, [r3, #0]
 8004a60:	296f      	cmp	r1, #111	; 0x6f
 8004a62:	bf14      	ite	ne
 8004a64:	220a      	movne	r2, #10
 8004a66:	2208      	moveq	r2, #8
 8004a68:	4852      	ldr	r0, [pc, #328]	; (8004bb4 <_printf_i+0x21c>)
 8004a6a:	2100      	movs	r1, #0
 8004a6c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a70:	6865      	ldr	r5, [r4, #4]
 8004a72:	2d00      	cmp	r5, #0
 8004a74:	60a5      	str	r5, [r4, #8]
 8004a76:	f2c0 8095 	blt.w	8004ba4 <_printf_i+0x20c>
 8004a7a:	6821      	ldr	r1, [r4, #0]
 8004a7c:	f021 0104 	bic.w	r1, r1, #4
 8004a80:	6021      	str	r1, [r4, #0]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d13d      	bne.n	8004b02 <_printf_i+0x16a>
 8004a86:	2d00      	cmp	r5, #0
 8004a88:	f040 808e 	bne.w	8004ba8 <_printf_i+0x210>
 8004a8c:	4665      	mov	r5, ip
 8004a8e:	2a08      	cmp	r2, #8
 8004a90:	d10b      	bne.n	8004aaa <_printf_i+0x112>
 8004a92:	6823      	ldr	r3, [r4, #0]
 8004a94:	07db      	lsls	r3, r3, #31
 8004a96:	d508      	bpl.n	8004aaa <_printf_i+0x112>
 8004a98:	6923      	ldr	r3, [r4, #16]
 8004a9a:	6862      	ldr	r2, [r4, #4]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	bfde      	ittt	le
 8004aa0:	2330      	movle	r3, #48	; 0x30
 8004aa2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004aa6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004aaa:	ebac 0305 	sub.w	r3, ip, r5
 8004aae:	6123      	str	r3, [r4, #16]
 8004ab0:	f8cd 8000 	str.w	r8, [sp]
 8004ab4:	463b      	mov	r3, r7
 8004ab6:	aa03      	add	r2, sp, #12
 8004ab8:	4621      	mov	r1, r4
 8004aba:	4630      	mov	r0, r6
 8004abc:	f7ff fef6 	bl	80048ac <_printf_common>
 8004ac0:	3001      	adds	r0, #1
 8004ac2:	d14d      	bne.n	8004b60 <_printf_i+0x1c8>
 8004ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ac8:	b005      	add	sp, #20
 8004aca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004ace:	4839      	ldr	r0, [pc, #228]	; (8004bb4 <_printf_i+0x21c>)
 8004ad0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004ad4:	6813      	ldr	r3, [r2, #0]
 8004ad6:	6821      	ldr	r1, [r4, #0]
 8004ad8:	1d1d      	adds	r5, r3, #4
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	6015      	str	r5, [r2, #0]
 8004ade:	060a      	lsls	r2, r1, #24
 8004ae0:	d50b      	bpl.n	8004afa <_printf_i+0x162>
 8004ae2:	07ca      	lsls	r2, r1, #31
 8004ae4:	bf44      	itt	mi
 8004ae6:	f041 0120 	orrmi.w	r1, r1, #32
 8004aea:	6021      	strmi	r1, [r4, #0]
 8004aec:	b91b      	cbnz	r3, 8004af6 <_printf_i+0x15e>
 8004aee:	6822      	ldr	r2, [r4, #0]
 8004af0:	f022 0220 	bic.w	r2, r2, #32
 8004af4:	6022      	str	r2, [r4, #0]
 8004af6:	2210      	movs	r2, #16
 8004af8:	e7b7      	b.n	8004a6a <_printf_i+0xd2>
 8004afa:	064d      	lsls	r5, r1, #25
 8004afc:	bf48      	it	mi
 8004afe:	b29b      	uxthmi	r3, r3
 8004b00:	e7ef      	b.n	8004ae2 <_printf_i+0x14a>
 8004b02:	4665      	mov	r5, ip
 8004b04:	fbb3 f1f2 	udiv	r1, r3, r2
 8004b08:	fb02 3311 	mls	r3, r2, r1, r3
 8004b0c:	5cc3      	ldrb	r3, [r0, r3]
 8004b0e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004b12:	460b      	mov	r3, r1
 8004b14:	2900      	cmp	r1, #0
 8004b16:	d1f5      	bne.n	8004b04 <_printf_i+0x16c>
 8004b18:	e7b9      	b.n	8004a8e <_printf_i+0xf6>
 8004b1a:	6813      	ldr	r3, [r2, #0]
 8004b1c:	6825      	ldr	r5, [r4, #0]
 8004b1e:	1d18      	adds	r0, r3, #4
 8004b20:	6961      	ldr	r1, [r4, #20]
 8004b22:	6010      	str	r0, [r2, #0]
 8004b24:	0628      	lsls	r0, r5, #24
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	d501      	bpl.n	8004b2e <_printf_i+0x196>
 8004b2a:	6019      	str	r1, [r3, #0]
 8004b2c:	e002      	b.n	8004b34 <_printf_i+0x19c>
 8004b2e:	066a      	lsls	r2, r5, #25
 8004b30:	d5fb      	bpl.n	8004b2a <_printf_i+0x192>
 8004b32:	8019      	strh	r1, [r3, #0]
 8004b34:	2300      	movs	r3, #0
 8004b36:	4665      	mov	r5, ip
 8004b38:	6123      	str	r3, [r4, #16]
 8004b3a:	e7b9      	b.n	8004ab0 <_printf_i+0x118>
 8004b3c:	6813      	ldr	r3, [r2, #0]
 8004b3e:	1d19      	adds	r1, r3, #4
 8004b40:	6011      	str	r1, [r2, #0]
 8004b42:	681d      	ldr	r5, [r3, #0]
 8004b44:	6862      	ldr	r2, [r4, #4]
 8004b46:	2100      	movs	r1, #0
 8004b48:	4628      	mov	r0, r5
 8004b4a:	f000 f8e1 	bl	8004d10 <memchr>
 8004b4e:	b108      	cbz	r0, 8004b54 <_printf_i+0x1bc>
 8004b50:	1b40      	subs	r0, r0, r5
 8004b52:	6060      	str	r0, [r4, #4]
 8004b54:	6863      	ldr	r3, [r4, #4]
 8004b56:	6123      	str	r3, [r4, #16]
 8004b58:	2300      	movs	r3, #0
 8004b5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b5e:	e7a7      	b.n	8004ab0 <_printf_i+0x118>
 8004b60:	6923      	ldr	r3, [r4, #16]
 8004b62:	462a      	mov	r2, r5
 8004b64:	4639      	mov	r1, r7
 8004b66:	4630      	mov	r0, r6
 8004b68:	47c0      	blx	r8
 8004b6a:	3001      	adds	r0, #1
 8004b6c:	d0aa      	beq.n	8004ac4 <_printf_i+0x12c>
 8004b6e:	6823      	ldr	r3, [r4, #0]
 8004b70:	079b      	lsls	r3, r3, #30
 8004b72:	d413      	bmi.n	8004b9c <_printf_i+0x204>
 8004b74:	68e0      	ldr	r0, [r4, #12]
 8004b76:	9b03      	ldr	r3, [sp, #12]
 8004b78:	4298      	cmp	r0, r3
 8004b7a:	bfb8      	it	lt
 8004b7c:	4618      	movlt	r0, r3
 8004b7e:	e7a3      	b.n	8004ac8 <_printf_i+0x130>
 8004b80:	2301      	movs	r3, #1
 8004b82:	464a      	mov	r2, r9
 8004b84:	4639      	mov	r1, r7
 8004b86:	4630      	mov	r0, r6
 8004b88:	47c0      	blx	r8
 8004b8a:	3001      	adds	r0, #1
 8004b8c:	d09a      	beq.n	8004ac4 <_printf_i+0x12c>
 8004b8e:	3501      	adds	r5, #1
 8004b90:	68e3      	ldr	r3, [r4, #12]
 8004b92:	9a03      	ldr	r2, [sp, #12]
 8004b94:	1a9b      	subs	r3, r3, r2
 8004b96:	42ab      	cmp	r3, r5
 8004b98:	dcf2      	bgt.n	8004b80 <_printf_i+0x1e8>
 8004b9a:	e7eb      	b.n	8004b74 <_printf_i+0x1dc>
 8004b9c:	2500      	movs	r5, #0
 8004b9e:	f104 0919 	add.w	r9, r4, #25
 8004ba2:	e7f5      	b.n	8004b90 <_printf_i+0x1f8>
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d1ac      	bne.n	8004b02 <_printf_i+0x16a>
 8004ba8:	7803      	ldrb	r3, [r0, #0]
 8004baa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004bb2:	e76c      	b.n	8004a8e <_printf_i+0xf6>
 8004bb4:	08005f9d 	.word	0x08005f9d
 8004bb8:	08005fae 	.word	0x08005fae

08004bbc <_sbrk_r>:
 8004bbc:	b538      	push	{r3, r4, r5, lr}
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	4c05      	ldr	r4, [pc, #20]	; (8004bd8 <_sbrk_r+0x1c>)
 8004bc2:	4605      	mov	r5, r0
 8004bc4:	4608      	mov	r0, r1
 8004bc6:	6023      	str	r3, [r4, #0]
 8004bc8:	f7fd fa00 	bl	8001fcc <_sbrk>
 8004bcc:	1c43      	adds	r3, r0, #1
 8004bce:	d102      	bne.n	8004bd6 <_sbrk_r+0x1a>
 8004bd0:	6823      	ldr	r3, [r4, #0]
 8004bd2:	b103      	cbz	r3, 8004bd6 <_sbrk_r+0x1a>
 8004bd4:	602b      	str	r3, [r5, #0]
 8004bd6:	bd38      	pop	{r3, r4, r5, pc}
 8004bd8:	20000234 	.word	0x20000234

08004bdc <__sread>:
 8004bdc:	b510      	push	{r4, lr}
 8004bde:	460c      	mov	r4, r1
 8004be0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004be4:	f000 f8a4 	bl	8004d30 <_read_r>
 8004be8:	2800      	cmp	r0, #0
 8004bea:	bfab      	itete	ge
 8004bec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004bee:	89a3      	ldrhlt	r3, [r4, #12]
 8004bf0:	181b      	addge	r3, r3, r0
 8004bf2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004bf6:	bfac      	ite	ge
 8004bf8:	6563      	strge	r3, [r4, #84]	; 0x54
 8004bfa:	81a3      	strhlt	r3, [r4, #12]
 8004bfc:	bd10      	pop	{r4, pc}

08004bfe <__swrite>:
 8004bfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c02:	461f      	mov	r7, r3
 8004c04:	898b      	ldrh	r3, [r1, #12]
 8004c06:	4605      	mov	r5, r0
 8004c08:	05db      	lsls	r3, r3, #23
 8004c0a:	460c      	mov	r4, r1
 8004c0c:	4616      	mov	r6, r2
 8004c0e:	d505      	bpl.n	8004c1c <__swrite+0x1e>
 8004c10:	2302      	movs	r3, #2
 8004c12:	2200      	movs	r2, #0
 8004c14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c18:	f000 f868 	bl	8004cec <_lseek_r>
 8004c1c:	89a3      	ldrh	r3, [r4, #12]
 8004c1e:	4632      	mov	r2, r6
 8004c20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c24:	81a3      	strh	r3, [r4, #12]
 8004c26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c2a:	463b      	mov	r3, r7
 8004c2c:	4628      	mov	r0, r5
 8004c2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c32:	f000 b817 	b.w	8004c64 <_write_r>

08004c36 <__sseek>:
 8004c36:	b510      	push	{r4, lr}
 8004c38:	460c      	mov	r4, r1
 8004c3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c3e:	f000 f855 	bl	8004cec <_lseek_r>
 8004c42:	1c43      	adds	r3, r0, #1
 8004c44:	89a3      	ldrh	r3, [r4, #12]
 8004c46:	bf15      	itete	ne
 8004c48:	6560      	strne	r0, [r4, #84]	; 0x54
 8004c4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004c4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004c52:	81a3      	strheq	r3, [r4, #12]
 8004c54:	bf18      	it	ne
 8004c56:	81a3      	strhne	r3, [r4, #12]
 8004c58:	bd10      	pop	{r4, pc}

08004c5a <__sclose>:
 8004c5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c5e:	f000 b813 	b.w	8004c88 <_close_r>
	...

08004c64 <_write_r>:
 8004c64:	b538      	push	{r3, r4, r5, lr}
 8004c66:	4605      	mov	r5, r0
 8004c68:	4608      	mov	r0, r1
 8004c6a:	4611      	mov	r1, r2
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	4c05      	ldr	r4, [pc, #20]	; (8004c84 <_write_r+0x20>)
 8004c70:	6022      	str	r2, [r4, #0]
 8004c72:	461a      	mov	r2, r3
 8004c74:	f7fc fd45 	bl	8001702 <_write>
 8004c78:	1c43      	adds	r3, r0, #1
 8004c7a:	d102      	bne.n	8004c82 <_write_r+0x1e>
 8004c7c:	6823      	ldr	r3, [r4, #0]
 8004c7e:	b103      	cbz	r3, 8004c82 <_write_r+0x1e>
 8004c80:	602b      	str	r3, [r5, #0]
 8004c82:	bd38      	pop	{r3, r4, r5, pc}
 8004c84:	20000234 	.word	0x20000234

08004c88 <_close_r>:
 8004c88:	b538      	push	{r3, r4, r5, lr}
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	4c05      	ldr	r4, [pc, #20]	; (8004ca4 <_close_r+0x1c>)
 8004c8e:	4605      	mov	r5, r0
 8004c90:	4608      	mov	r0, r1
 8004c92:	6023      	str	r3, [r4, #0]
 8004c94:	f7fd f969 	bl	8001f6a <_close>
 8004c98:	1c43      	adds	r3, r0, #1
 8004c9a:	d102      	bne.n	8004ca2 <_close_r+0x1a>
 8004c9c:	6823      	ldr	r3, [r4, #0]
 8004c9e:	b103      	cbz	r3, 8004ca2 <_close_r+0x1a>
 8004ca0:	602b      	str	r3, [r5, #0]
 8004ca2:	bd38      	pop	{r3, r4, r5, pc}
 8004ca4:	20000234 	.word	0x20000234

08004ca8 <_fstat_r>:
 8004ca8:	b538      	push	{r3, r4, r5, lr}
 8004caa:	2300      	movs	r3, #0
 8004cac:	4c06      	ldr	r4, [pc, #24]	; (8004cc8 <_fstat_r+0x20>)
 8004cae:	4605      	mov	r5, r0
 8004cb0:	4608      	mov	r0, r1
 8004cb2:	4611      	mov	r1, r2
 8004cb4:	6023      	str	r3, [r4, #0]
 8004cb6:	f7fd f963 	bl	8001f80 <_fstat>
 8004cba:	1c43      	adds	r3, r0, #1
 8004cbc:	d102      	bne.n	8004cc4 <_fstat_r+0x1c>
 8004cbe:	6823      	ldr	r3, [r4, #0]
 8004cc0:	b103      	cbz	r3, 8004cc4 <_fstat_r+0x1c>
 8004cc2:	602b      	str	r3, [r5, #0]
 8004cc4:	bd38      	pop	{r3, r4, r5, pc}
 8004cc6:	bf00      	nop
 8004cc8:	20000234 	.word	0x20000234

08004ccc <_isatty_r>:
 8004ccc:	b538      	push	{r3, r4, r5, lr}
 8004cce:	2300      	movs	r3, #0
 8004cd0:	4c05      	ldr	r4, [pc, #20]	; (8004ce8 <_isatty_r+0x1c>)
 8004cd2:	4605      	mov	r5, r0
 8004cd4:	4608      	mov	r0, r1
 8004cd6:	6023      	str	r3, [r4, #0]
 8004cd8:	f7fd f961 	bl	8001f9e <_isatty>
 8004cdc:	1c43      	adds	r3, r0, #1
 8004cde:	d102      	bne.n	8004ce6 <_isatty_r+0x1a>
 8004ce0:	6823      	ldr	r3, [r4, #0]
 8004ce2:	b103      	cbz	r3, 8004ce6 <_isatty_r+0x1a>
 8004ce4:	602b      	str	r3, [r5, #0]
 8004ce6:	bd38      	pop	{r3, r4, r5, pc}
 8004ce8:	20000234 	.word	0x20000234

08004cec <_lseek_r>:
 8004cec:	b538      	push	{r3, r4, r5, lr}
 8004cee:	4605      	mov	r5, r0
 8004cf0:	4608      	mov	r0, r1
 8004cf2:	4611      	mov	r1, r2
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	4c05      	ldr	r4, [pc, #20]	; (8004d0c <_lseek_r+0x20>)
 8004cf8:	6022      	str	r2, [r4, #0]
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	f7fd f959 	bl	8001fb2 <_lseek>
 8004d00:	1c43      	adds	r3, r0, #1
 8004d02:	d102      	bne.n	8004d0a <_lseek_r+0x1e>
 8004d04:	6823      	ldr	r3, [r4, #0]
 8004d06:	b103      	cbz	r3, 8004d0a <_lseek_r+0x1e>
 8004d08:	602b      	str	r3, [r5, #0]
 8004d0a:	bd38      	pop	{r3, r4, r5, pc}
 8004d0c:	20000234 	.word	0x20000234

08004d10 <memchr>:
 8004d10:	b510      	push	{r4, lr}
 8004d12:	b2c9      	uxtb	r1, r1
 8004d14:	4402      	add	r2, r0
 8004d16:	4290      	cmp	r0, r2
 8004d18:	4603      	mov	r3, r0
 8004d1a:	d101      	bne.n	8004d20 <memchr+0x10>
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	e003      	b.n	8004d28 <memchr+0x18>
 8004d20:	781c      	ldrb	r4, [r3, #0]
 8004d22:	3001      	adds	r0, #1
 8004d24:	428c      	cmp	r4, r1
 8004d26:	d1f6      	bne.n	8004d16 <memchr+0x6>
 8004d28:	4618      	mov	r0, r3
 8004d2a:	bd10      	pop	{r4, pc}

08004d2c <__malloc_lock>:
 8004d2c:	4770      	bx	lr

08004d2e <__malloc_unlock>:
 8004d2e:	4770      	bx	lr

08004d30 <_read_r>:
 8004d30:	b538      	push	{r3, r4, r5, lr}
 8004d32:	4605      	mov	r5, r0
 8004d34:	4608      	mov	r0, r1
 8004d36:	4611      	mov	r1, r2
 8004d38:	2200      	movs	r2, #0
 8004d3a:	4c05      	ldr	r4, [pc, #20]	; (8004d50 <_read_r+0x20>)
 8004d3c:	6022      	str	r2, [r4, #0]
 8004d3e:	461a      	mov	r2, r3
 8004d40:	f7fd f8f6 	bl	8001f30 <_read>
 8004d44:	1c43      	adds	r3, r0, #1
 8004d46:	d102      	bne.n	8004d4e <_read_r+0x1e>
 8004d48:	6823      	ldr	r3, [r4, #0]
 8004d4a:	b103      	cbz	r3, 8004d4e <_read_r+0x1e>
 8004d4c:	602b      	str	r3, [r5, #0]
 8004d4e:	bd38      	pop	{r3, r4, r5, pc}
 8004d50:	20000234 	.word	0x20000234

08004d54 <pow>:
 8004d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d58:	b08f      	sub	sp, #60	; 0x3c
 8004d5a:	461d      	mov	r5, r3
 8004d5c:	4680      	mov	r8, r0
 8004d5e:	4689      	mov	r9, r1
 8004d60:	4614      	mov	r4, r2
 8004d62:	f000 f9a9 	bl	80050b8 <__ieee754_pow>
 8004d66:	4fa1      	ldr	r7, [pc, #644]	; (8004fec <pow+0x298>)
 8004d68:	e9cd 0100 	strd	r0, r1, [sp]
 8004d6c:	f997 3000 	ldrsb.w	r3, [r7]
 8004d70:	463e      	mov	r6, r7
 8004d72:	9302      	str	r3, [sp, #8]
 8004d74:	3301      	adds	r3, #1
 8004d76:	d05f      	beq.n	8004e38 <pow+0xe4>
 8004d78:	4622      	mov	r2, r4
 8004d7a:	462b      	mov	r3, r5
 8004d7c:	4620      	mov	r0, r4
 8004d7e:	4629      	mov	r1, r5
 8004d80:	f7fb fe3c 	bl	80009fc <__aeabi_dcmpun>
 8004d84:	4682      	mov	sl, r0
 8004d86:	2800      	cmp	r0, #0
 8004d88:	d156      	bne.n	8004e38 <pow+0xe4>
 8004d8a:	4642      	mov	r2, r8
 8004d8c:	464b      	mov	r3, r9
 8004d8e:	4640      	mov	r0, r8
 8004d90:	4649      	mov	r1, r9
 8004d92:	f7fb fe33 	bl	80009fc <__aeabi_dcmpun>
 8004d96:	9003      	str	r0, [sp, #12]
 8004d98:	b1e8      	cbz	r0, 8004dd6 <pow+0x82>
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	4620      	mov	r0, r4
 8004da0:	4629      	mov	r1, r5
 8004da2:	f7fb fdf9 	bl	8000998 <__aeabi_dcmpeq>
 8004da6:	2800      	cmp	r0, #0
 8004da8:	d046      	beq.n	8004e38 <pow+0xe4>
 8004daa:	2301      	movs	r3, #1
 8004dac:	2200      	movs	r2, #0
 8004dae:	9304      	str	r3, [sp, #16]
 8004db0:	4b8f      	ldr	r3, [pc, #572]	; (8004ff0 <pow+0x29c>)
 8004db2:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8004db6:	9305      	str	r3, [sp, #20]
 8004db8:	4b8e      	ldr	r3, [pc, #568]	; (8004ff4 <pow+0x2a0>)
 8004dba:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8004dbe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004dc2:	9b02      	ldr	r3, [sp, #8]
 8004dc4:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d031      	beq.n	8004e30 <pow+0xdc>
 8004dcc:	a804      	add	r0, sp, #16
 8004dce:	f000 ff33 	bl	8005c38 <matherr>
 8004dd2:	bb38      	cbnz	r0, 8004e24 <pow+0xd0>
 8004dd4:	e058      	b.n	8004e88 <pow+0x134>
 8004dd6:	f04f 0a00 	mov.w	sl, #0
 8004dda:	f04f 0b00 	mov.w	fp, #0
 8004dde:	4652      	mov	r2, sl
 8004de0:	465b      	mov	r3, fp
 8004de2:	4640      	mov	r0, r8
 8004de4:	4649      	mov	r1, r9
 8004de6:	f7fb fdd7 	bl	8000998 <__aeabi_dcmpeq>
 8004dea:	2800      	cmp	r0, #0
 8004dec:	d051      	beq.n	8004e92 <pow+0x13e>
 8004dee:	4652      	mov	r2, sl
 8004df0:	465b      	mov	r3, fp
 8004df2:	4620      	mov	r0, r4
 8004df4:	4629      	mov	r1, r5
 8004df6:	f7fb fdcf 	bl	8000998 <__aeabi_dcmpeq>
 8004dfa:	4606      	mov	r6, r0
 8004dfc:	b308      	cbz	r0, 8004e42 <pow+0xee>
 8004dfe:	2301      	movs	r3, #1
 8004e00:	9304      	str	r3, [sp, #16]
 8004e02:	4b7b      	ldr	r3, [pc, #492]	; (8004ff0 <pow+0x29c>)
 8004e04:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8004e08:	9305      	str	r3, [sp, #20]
 8004e0a:	9b03      	ldr	r3, [sp, #12]
 8004e0c:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8004e10:	930c      	str	r3, [sp, #48]	; 0x30
 8004e12:	9b02      	ldr	r3, [sp, #8]
 8004e14:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d0d7      	beq.n	8004dcc <pow+0x78>
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	4b75      	ldr	r3, [pc, #468]	; (8004ff4 <pow+0x2a0>)
 8004e20:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004e24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e26:	b11b      	cbz	r3, 8004e30 <pow+0xdc>
 8004e28:	f7ff f804 	bl	8003e34 <__errno>
 8004e2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e2e:	6003      	str	r3, [r0, #0]
 8004e30:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 8004e34:	e9cd 3400 	strd	r3, r4, [sp]
 8004e38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004e3c:	b00f      	add	sp, #60	; 0x3c
 8004e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e42:	4620      	mov	r0, r4
 8004e44:	4629      	mov	r1, r5
 8004e46:	f000 fef1 	bl	8005c2c <finite>
 8004e4a:	2800      	cmp	r0, #0
 8004e4c:	d0f4      	beq.n	8004e38 <pow+0xe4>
 8004e4e:	4652      	mov	r2, sl
 8004e50:	465b      	mov	r3, fp
 8004e52:	4620      	mov	r0, r4
 8004e54:	4629      	mov	r1, r5
 8004e56:	f7fb fda9 	bl	80009ac <__aeabi_dcmplt>
 8004e5a:	2800      	cmp	r0, #0
 8004e5c:	d0ec      	beq.n	8004e38 <pow+0xe4>
 8004e5e:	2301      	movs	r3, #1
 8004e60:	9304      	str	r3, [sp, #16]
 8004e62:	4b63      	ldr	r3, [pc, #396]	; (8004ff0 <pow+0x29c>)
 8004e64:	960c      	str	r6, [sp, #48]	; 0x30
 8004e66:	9305      	str	r3, [sp, #20]
 8004e68:	f997 3000 	ldrsb.w	r3, [r7]
 8004e6c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8004e70:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8004e74:	b913      	cbnz	r3, 8004e7c <pow+0x128>
 8004e76:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8004e7a:	e7a7      	b.n	8004dcc <pow+0x78>
 8004e7c:	2000      	movs	r0, #0
 8004e7e:	495e      	ldr	r1, [pc, #376]	; (8004ff8 <pow+0x2a4>)
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004e86:	d1a1      	bne.n	8004dcc <pow+0x78>
 8004e88:	f7fe ffd4 	bl	8003e34 <__errno>
 8004e8c:	2321      	movs	r3, #33	; 0x21
 8004e8e:	6003      	str	r3, [r0, #0]
 8004e90:	e7c8      	b.n	8004e24 <pow+0xd0>
 8004e92:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004e96:	f000 fec9 	bl	8005c2c <finite>
 8004e9a:	9002      	str	r0, [sp, #8]
 8004e9c:	2800      	cmp	r0, #0
 8004e9e:	d177      	bne.n	8004f90 <pow+0x23c>
 8004ea0:	4640      	mov	r0, r8
 8004ea2:	4649      	mov	r1, r9
 8004ea4:	f000 fec2 	bl	8005c2c <finite>
 8004ea8:	2800      	cmp	r0, #0
 8004eaa:	d071      	beq.n	8004f90 <pow+0x23c>
 8004eac:	4620      	mov	r0, r4
 8004eae:	4629      	mov	r1, r5
 8004eb0:	f000 febc 	bl	8005c2c <finite>
 8004eb4:	2800      	cmp	r0, #0
 8004eb6:	d06b      	beq.n	8004f90 <pow+0x23c>
 8004eb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	4610      	mov	r0, r2
 8004ec0:	f7fb fd9c 	bl	80009fc <__aeabi_dcmpun>
 8004ec4:	f997 7000 	ldrsb.w	r7, [r7]
 8004ec8:	4b49      	ldr	r3, [pc, #292]	; (8004ff0 <pow+0x29c>)
 8004eca:	b1a0      	cbz	r0, 8004ef6 <pow+0x1a2>
 8004ecc:	2201      	movs	r2, #1
 8004ece:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004ed2:	9b02      	ldr	r3, [sp, #8]
 8004ed4:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8004ed8:	930c      	str	r3, [sp, #48]	; 0x30
 8004eda:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8004ede:	2f00      	cmp	r7, #0
 8004ee0:	d0c9      	beq.n	8004e76 <pow+0x122>
 8004ee2:	4652      	mov	r2, sl
 8004ee4:	465b      	mov	r3, fp
 8004ee6:	4650      	mov	r0, sl
 8004ee8:	4659      	mov	r1, fp
 8004eea:	f7fb fc17 	bl	800071c <__aeabi_ddiv>
 8004eee:	2f02      	cmp	r7, #2
 8004ef0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004ef4:	e7c7      	b.n	8004e86 <pow+0x132>
 8004ef6:	2203      	movs	r2, #3
 8004ef8:	900c      	str	r0, [sp, #48]	; 0x30
 8004efa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004efe:	4620      	mov	r0, r4
 8004f00:	4629      	mov	r1, r5
 8004f02:	2200      	movs	r2, #0
 8004f04:	4b3d      	ldr	r3, [pc, #244]	; (8004ffc <pow+0x2a8>)
 8004f06:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8004f0a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8004f0e:	f7fb fadb 	bl	80004c8 <__aeabi_dmul>
 8004f12:	4604      	mov	r4, r0
 8004f14:	460d      	mov	r5, r1
 8004f16:	bb17      	cbnz	r7, 8004f5e <pow+0x20a>
 8004f18:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004f1c:	4b38      	ldr	r3, [pc, #224]	; (8005000 <pow+0x2ac>)
 8004f1e:	4640      	mov	r0, r8
 8004f20:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004f24:	4649      	mov	r1, r9
 8004f26:	4652      	mov	r2, sl
 8004f28:	465b      	mov	r3, fp
 8004f2a:	f7fb fd3f 	bl	80009ac <__aeabi_dcmplt>
 8004f2e:	2800      	cmp	r0, #0
 8004f30:	d054      	beq.n	8004fdc <pow+0x288>
 8004f32:	4620      	mov	r0, r4
 8004f34:	4629      	mov	r1, r5
 8004f36:	f000 fe87 	bl	8005c48 <rint>
 8004f3a:	4622      	mov	r2, r4
 8004f3c:	462b      	mov	r3, r5
 8004f3e:	f7fb fd2b 	bl	8000998 <__aeabi_dcmpeq>
 8004f42:	b920      	cbnz	r0, 8004f4e <pow+0x1fa>
 8004f44:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004f48:	4b2e      	ldr	r3, [pc, #184]	; (8005004 <pow+0x2b0>)
 8004f4a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004f4e:	f996 3000 	ldrsb.w	r3, [r6]
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d142      	bne.n	8004fdc <pow+0x288>
 8004f56:	f7fe ff6d 	bl	8003e34 <__errno>
 8004f5a:	2322      	movs	r3, #34	; 0x22
 8004f5c:	e797      	b.n	8004e8e <pow+0x13a>
 8004f5e:	2200      	movs	r2, #0
 8004f60:	4b29      	ldr	r3, [pc, #164]	; (8005008 <pow+0x2b4>)
 8004f62:	4640      	mov	r0, r8
 8004f64:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004f68:	4649      	mov	r1, r9
 8004f6a:	4652      	mov	r2, sl
 8004f6c:	465b      	mov	r3, fp
 8004f6e:	f7fb fd1d 	bl	80009ac <__aeabi_dcmplt>
 8004f72:	2800      	cmp	r0, #0
 8004f74:	d0eb      	beq.n	8004f4e <pow+0x1fa>
 8004f76:	4620      	mov	r0, r4
 8004f78:	4629      	mov	r1, r5
 8004f7a:	f000 fe65 	bl	8005c48 <rint>
 8004f7e:	4622      	mov	r2, r4
 8004f80:	462b      	mov	r3, r5
 8004f82:	f7fb fd09 	bl	8000998 <__aeabi_dcmpeq>
 8004f86:	2800      	cmp	r0, #0
 8004f88:	d1e1      	bne.n	8004f4e <pow+0x1fa>
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	4b1a      	ldr	r3, [pc, #104]	; (8004ff8 <pow+0x2a4>)
 8004f8e:	e7dc      	b.n	8004f4a <pow+0x1f6>
 8004f90:	2200      	movs	r2, #0
 8004f92:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f96:	2300      	movs	r3, #0
 8004f98:	f7fb fcfe 	bl	8000998 <__aeabi_dcmpeq>
 8004f9c:	2800      	cmp	r0, #0
 8004f9e:	f43f af4b 	beq.w	8004e38 <pow+0xe4>
 8004fa2:	4640      	mov	r0, r8
 8004fa4:	4649      	mov	r1, r9
 8004fa6:	f000 fe41 	bl	8005c2c <finite>
 8004faa:	2800      	cmp	r0, #0
 8004fac:	f43f af44 	beq.w	8004e38 <pow+0xe4>
 8004fb0:	4620      	mov	r0, r4
 8004fb2:	4629      	mov	r1, r5
 8004fb4:	f000 fe3a 	bl	8005c2c <finite>
 8004fb8:	2800      	cmp	r0, #0
 8004fba:	f43f af3d 	beq.w	8004e38 <pow+0xe4>
 8004fbe:	2304      	movs	r3, #4
 8004fc0:	9304      	str	r3, [sp, #16]
 8004fc2:	4b0b      	ldr	r3, [pc, #44]	; (8004ff0 <pow+0x29c>)
 8004fc4:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8004fc8:	9305      	str	r3, [sp, #20]
 8004fca:	2300      	movs	r3, #0
 8004fcc:	2400      	movs	r4, #0
 8004fce:	930c      	str	r3, [sp, #48]	; 0x30
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8004fd6:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8004fda:	e7b8      	b.n	8004f4e <pow+0x1fa>
 8004fdc:	a804      	add	r0, sp, #16
 8004fde:	f000 fe2b 	bl	8005c38 <matherr>
 8004fe2:	2800      	cmp	r0, #0
 8004fe4:	f47f af1e 	bne.w	8004e24 <pow+0xd0>
 8004fe8:	e7b5      	b.n	8004f56 <pow+0x202>
 8004fea:	bf00      	nop
 8004fec:	200000dc 	.word	0x200000dc
 8004ff0:	08005fbf 	.word	0x08005fbf
 8004ff4:	3ff00000 	.word	0x3ff00000
 8004ff8:	fff00000 	.word	0xfff00000
 8004ffc:	3fe00000 	.word	0x3fe00000
 8005000:	47efffff 	.word	0x47efffff
 8005004:	c7efffff 	.word	0xc7efffff
 8005008:	7ff00000 	.word	0x7ff00000

0800500c <sqrt>:
 800500c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005010:	b08b      	sub	sp, #44	; 0x2c
 8005012:	4604      	mov	r4, r0
 8005014:	460d      	mov	r5, r1
 8005016:	f000 fd59 	bl	8005acc <__ieee754_sqrt>
 800501a:	4b24      	ldr	r3, [pc, #144]	; (80050ac <sqrt+0xa0>)
 800501c:	4680      	mov	r8, r0
 800501e:	f993 a000 	ldrsb.w	sl, [r3]
 8005022:	4689      	mov	r9, r1
 8005024:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005028:	d02b      	beq.n	8005082 <sqrt+0x76>
 800502a:	4622      	mov	r2, r4
 800502c:	462b      	mov	r3, r5
 800502e:	4620      	mov	r0, r4
 8005030:	4629      	mov	r1, r5
 8005032:	f7fb fce3 	bl	80009fc <__aeabi_dcmpun>
 8005036:	4683      	mov	fp, r0
 8005038:	bb18      	cbnz	r0, 8005082 <sqrt+0x76>
 800503a:	2600      	movs	r6, #0
 800503c:	2700      	movs	r7, #0
 800503e:	4632      	mov	r2, r6
 8005040:	463b      	mov	r3, r7
 8005042:	4620      	mov	r0, r4
 8005044:	4629      	mov	r1, r5
 8005046:	f7fb fcb1 	bl	80009ac <__aeabi_dcmplt>
 800504a:	b1d0      	cbz	r0, 8005082 <sqrt+0x76>
 800504c:	2301      	movs	r3, #1
 800504e:	9300      	str	r3, [sp, #0]
 8005050:	4b17      	ldr	r3, [pc, #92]	; (80050b0 <sqrt+0xa4>)
 8005052:	f8cd b020 	str.w	fp, [sp, #32]
 8005056:	9301      	str	r3, [sp, #4]
 8005058:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800505c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005060:	f1ba 0f00 	cmp.w	sl, #0
 8005064:	d112      	bne.n	800508c <sqrt+0x80>
 8005066:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800506a:	4668      	mov	r0, sp
 800506c:	f000 fde4 	bl	8005c38 <matherr>
 8005070:	b1b8      	cbz	r0, 80050a2 <sqrt+0x96>
 8005072:	9b08      	ldr	r3, [sp, #32]
 8005074:	b11b      	cbz	r3, 800507e <sqrt+0x72>
 8005076:	f7fe fedd 	bl	8003e34 <__errno>
 800507a:	9b08      	ldr	r3, [sp, #32]
 800507c:	6003      	str	r3, [r0, #0]
 800507e:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8005082:	4640      	mov	r0, r8
 8005084:	4649      	mov	r1, r9
 8005086:	b00b      	add	sp, #44	; 0x2c
 8005088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800508c:	4632      	mov	r2, r6
 800508e:	463b      	mov	r3, r7
 8005090:	4630      	mov	r0, r6
 8005092:	4639      	mov	r1, r7
 8005094:	f7fb fb42 	bl	800071c <__aeabi_ddiv>
 8005098:	f1ba 0f02 	cmp.w	sl, #2
 800509c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80050a0:	d1e3      	bne.n	800506a <sqrt+0x5e>
 80050a2:	f7fe fec7 	bl	8003e34 <__errno>
 80050a6:	2321      	movs	r3, #33	; 0x21
 80050a8:	6003      	str	r3, [r0, #0]
 80050aa:	e7e2      	b.n	8005072 <sqrt+0x66>
 80050ac:	200000dc 	.word	0x200000dc
 80050b0:	08005fc3 	.word	0x08005fc3
 80050b4:	00000000 	.word	0x00000000

080050b8 <__ieee754_pow>:
 80050b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050bc:	b091      	sub	sp, #68	; 0x44
 80050be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80050c2:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 80050c6:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80050ca:	ea55 0302 	orrs.w	r3, r5, r2
 80050ce:	4607      	mov	r7, r0
 80050d0:	4688      	mov	r8, r1
 80050d2:	f000 84b7 	beq.w	8005a44 <__ieee754_pow+0x98c>
 80050d6:	4b80      	ldr	r3, [pc, #512]	; (80052d8 <__ieee754_pow+0x220>)
 80050d8:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 80050dc:	429c      	cmp	r4, r3
 80050de:	4689      	mov	r9, r1
 80050e0:	4682      	mov	sl, r0
 80050e2:	dc09      	bgt.n	80050f8 <__ieee754_pow+0x40>
 80050e4:	d103      	bne.n	80050ee <__ieee754_pow+0x36>
 80050e6:	b938      	cbnz	r0, 80050f8 <__ieee754_pow+0x40>
 80050e8:	42a5      	cmp	r5, r4
 80050ea:	dc0d      	bgt.n	8005108 <__ieee754_pow+0x50>
 80050ec:	e001      	b.n	80050f2 <__ieee754_pow+0x3a>
 80050ee:	429d      	cmp	r5, r3
 80050f0:	dc02      	bgt.n	80050f8 <__ieee754_pow+0x40>
 80050f2:	429d      	cmp	r5, r3
 80050f4:	d10e      	bne.n	8005114 <__ieee754_pow+0x5c>
 80050f6:	b16a      	cbz	r2, 8005114 <__ieee754_pow+0x5c>
 80050f8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80050fc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005100:	ea54 030a 	orrs.w	r3, r4, sl
 8005104:	f000 849e 	beq.w	8005a44 <__ieee754_pow+0x98c>
 8005108:	4874      	ldr	r0, [pc, #464]	; (80052dc <__ieee754_pow+0x224>)
 800510a:	b011      	add	sp, #68	; 0x44
 800510c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005110:	f000 bd94 	b.w	8005c3c <nan>
 8005114:	f1b9 0f00 	cmp.w	r9, #0
 8005118:	da53      	bge.n	80051c2 <__ieee754_pow+0x10a>
 800511a:	4b71      	ldr	r3, [pc, #452]	; (80052e0 <__ieee754_pow+0x228>)
 800511c:	429d      	cmp	r5, r3
 800511e:	dc4e      	bgt.n	80051be <__ieee754_pow+0x106>
 8005120:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005124:	429d      	cmp	r5, r3
 8005126:	dd4c      	ble.n	80051c2 <__ieee754_pow+0x10a>
 8005128:	152b      	asrs	r3, r5, #20
 800512a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800512e:	2b14      	cmp	r3, #20
 8005130:	dd28      	ble.n	8005184 <__ieee754_pow+0xcc>
 8005132:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005136:	fa22 f103 	lsr.w	r1, r2, r3
 800513a:	fa01 f303 	lsl.w	r3, r1, r3
 800513e:	4293      	cmp	r3, r2
 8005140:	d13f      	bne.n	80051c2 <__ieee754_pow+0x10a>
 8005142:	f001 0101 	and.w	r1, r1, #1
 8005146:	f1c1 0302 	rsb	r3, r1, #2
 800514a:	9300      	str	r3, [sp, #0]
 800514c:	2a00      	cmp	r2, #0
 800514e:	d15c      	bne.n	800520a <__ieee754_pow+0x152>
 8005150:	4b61      	ldr	r3, [pc, #388]	; (80052d8 <__ieee754_pow+0x220>)
 8005152:	429d      	cmp	r5, r3
 8005154:	d126      	bne.n	80051a4 <__ieee754_pow+0xec>
 8005156:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800515a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800515e:	ea53 030a 	orrs.w	r3, r3, sl
 8005162:	f000 846f 	beq.w	8005a44 <__ieee754_pow+0x98c>
 8005166:	4b5f      	ldr	r3, [pc, #380]	; (80052e4 <__ieee754_pow+0x22c>)
 8005168:	429c      	cmp	r4, r3
 800516a:	dd2c      	ble.n	80051c6 <__ieee754_pow+0x10e>
 800516c:	2e00      	cmp	r6, #0
 800516e:	f280 846f 	bge.w	8005a50 <__ieee754_pow+0x998>
 8005172:	f04f 0b00 	mov.w	fp, #0
 8005176:	f04f 0c00 	mov.w	ip, #0
 800517a:	4658      	mov	r0, fp
 800517c:	4661      	mov	r1, ip
 800517e:	b011      	add	sp, #68	; 0x44
 8005180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005184:	2a00      	cmp	r2, #0
 8005186:	d13e      	bne.n	8005206 <__ieee754_pow+0x14e>
 8005188:	f1c3 0314 	rsb	r3, r3, #20
 800518c:	fa45 f103 	asr.w	r1, r5, r3
 8005190:	fa01 f303 	lsl.w	r3, r1, r3
 8005194:	42ab      	cmp	r3, r5
 8005196:	f040 8463 	bne.w	8005a60 <__ieee754_pow+0x9a8>
 800519a:	f001 0101 	and.w	r1, r1, #1
 800519e:	f1c1 0302 	rsb	r3, r1, #2
 80051a2:	9300      	str	r3, [sp, #0]
 80051a4:	4b50      	ldr	r3, [pc, #320]	; (80052e8 <__ieee754_pow+0x230>)
 80051a6:	429d      	cmp	r5, r3
 80051a8:	d114      	bne.n	80051d4 <__ieee754_pow+0x11c>
 80051aa:	2e00      	cmp	r6, #0
 80051ac:	f280 8454 	bge.w	8005a58 <__ieee754_pow+0x9a0>
 80051b0:	463a      	mov	r2, r7
 80051b2:	4643      	mov	r3, r8
 80051b4:	2000      	movs	r0, #0
 80051b6:	494c      	ldr	r1, [pc, #304]	; (80052e8 <__ieee754_pow+0x230>)
 80051b8:	f7fb fab0 	bl	800071c <__aeabi_ddiv>
 80051bc:	e013      	b.n	80051e6 <__ieee754_pow+0x12e>
 80051be:	2302      	movs	r3, #2
 80051c0:	e7c3      	b.n	800514a <__ieee754_pow+0x92>
 80051c2:	2300      	movs	r3, #0
 80051c4:	e7c1      	b.n	800514a <__ieee754_pow+0x92>
 80051c6:	2e00      	cmp	r6, #0
 80051c8:	dad3      	bge.n	8005172 <__ieee754_pow+0xba>
 80051ca:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 80051ce:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 80051d2:	e7d2      	b.n	800517a <__ieee754_pow+0xc2>
 80051d4:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 80051d8:	d108      	bne.n	80051ec <__ieee754_pow+0x134>
 80051da:	463a      	mov	r2, r7
 80051dc:	4643      	mov	r3, r8
 80051de:	4638      	mov	r0, r7
 80051e0:	4641      	mov	r1, r8
 80051e2:	f7fb f971 	bl	80004c8 <__aeabi_dmul>
 80051e6:	4683      	mov	fp, r0
 80051e8:	468c      	mov	ip, r1
 80051ea:	e7c6      	b.n	800517a <__ieee754_pow+0xc2>
 80051ec:	4b3f      	ldr	r3, [pc, #252]	; (80052ec <__ieee754_pow+0x234>)
 80051ee:	429e      	cmp	r6, r3
 80051f0:	d10b      	bne.n	800520a <__ieee754_pow+0x152>
 80051f2:	f1b9 0f00 	cmp.w	r9, #0
 80051f6:	db08      	blt.n	800520a <__ieee754_pow+0x152>
 80051f8:	4638      	mov	r0, r7
 80051fa:	4641      	mov	r1, r8
 80051fc:	b011      	add	sp, #68	; 0x44
 80051fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005202:	f000 bc63 	b.w	8005acc <__ieee754_sqrt>
 8005206:	2300      	movs	r3, #0
 8005208:	9300      	str	r3, [sp, #0]
 800520a:	4638      	mov	r0, r7
 800520c:	4641      	mov	r1, r8
 800520e:	f000 fd09 	bl	8005c24 <fabs>
 8005212:	4683      	mov	fp, r0
 8005214:	468c      	mov	ip, r1
 8005216:	f1ba 0f00 	cmp.w	sl, #0
 800521a:	d12b      	bne.n	8005274 <__ieee754_pow+0x1bc>
 800521c:	b124      	cbz	r4, 8005228 <__ieee754_pow+0x170>
 800521e:	4b32      	ldr	r3, [pc, #200]	; (80052e8 <__ieee754_pow+0x230>)
 8005220:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8005224:	429a      	cmp	r2, r3
 8005226:	d125      	bne.n	8005274 <__ieee754_pow+0x1bc>
 8005228:	2e00      	cmp	r6, #0
 800522a:	da07      	bge.n	800523c <__ieee754_pow+0x184>
 800522c:	465a      	mov	r2, fp
 800522e:	4663      	mov	r3, ip
 8005230:	2000      	movs	r0, #0
 8005232:	492d      	ldr	r1, [pc, #180]	; (80052e8 <__ieee754_pow+0x230>)
 8005234:	f7fb fa72 	bl	800071c <__aeabi_ddiv>
 8005238:	4683      	mov	fp, r0
 800523a:	468c      	mov	ip, r1
 800523c:	f1b9 0f00 	cmp.w	r9, #0
 8005240:	da9b      	bge.n	800517a <__ieee754_pow+0xc2>
 8005242:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005246:	9b00      	ldr	r3, [sp, #0]
 8005248:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800524c:	4323      	orrs	r3, r4
 800524e:	d108      	bne.n	8005262 <__ieee754_pow+0x1aa>
 8005250:	465a      	mov	r2, fp
 8005252:	4663      	mov	r3, ip
 8005254:	4658      	mov	r0, fp
 8005256:	4661      	mov	r1, ip
 8005258:	f7fa ff7e 	bl	8000158 <__aeabi_dsub>
 800525c:	4602      	mov	r2, r0
 800525e:	460b      	mov	r3, r1
 8005260:	e7aa      	b.n	80051b8 <__ieee754_pow+0x100>
 8005262:	9b00      	ldr	r3, [sp, #0]
 8005264:	2b01      	cmp	r3, #1
 8005266:	d188      	bne.n	800517a <__ieee754_pow+0xc2>
 8005268:	4658      	mov	r0, fp
 800526a:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800526e:	4683      	mov	fp, r0
 8005270:	469c      	mov	ip, r3
 8005272:	e782      	b.n	800517a <__ieee754_pow+0xc2>
 8005274:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8005278:	f109 33ff 	add.w	r3, r9, #4294967295
 800527c:	930d      	str	r3, [sp, #52]	; 0x34
 800527e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005280:	9b00      	ldr	r3, [sp, #0]
 8005282:	4313      	orrs	r3, r2
 8005284:	d104      	bne.n	8005290 <__ieee754_pow+0x1d8>
 8005286:	463a      	mov	r2, r7
 8005288:	4643      	mov	r3, r8
 800528a:	4638      	mov	r0, r7
 800528c:	4641      	mov	r1, r8
 800528e:	e7e3      	b.n	8005258 <__ieee754_pow+0x1a0>
 8005290:	4b17      	ldr	r3, [pc, #92]	; (80052f0 <__ieee754_pow+0x238>)
 8005292:	429d      	cmp	r5, r3
 8005294:	f340 80fe 	ble.w	8005494 <__ieee754_pow+0x3dc>
 8005298:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800529c:	429d      	cmp	r5, r3
 800529e:	dd0b      	ble.n	80052b8 <__ieee754_pow+0x200>
 80052a0:	4b10      	ldr	r3, [pc, #64]	; (80052e4 <__ieee754_pow+0x22c>)
 80052a2:	429c      	cmp	r4, r3
 80052a4:	dc0e      	bgt.n	80052c4 <__ieee754_pow+0x20c>
 80052a6:	2e00      	cmp	r6, #0
 80052a8:	f6bf af63 	bge.w	8005172 <__ieee754_pow+0xba>
 80052ac:	a308      	add	r3, pc, #32	; (adr r3, 80052d0 <__ieee754_pow+0x218>)
 80052ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b2:	4610      	mov	r0, r2
 80052b4:	4619      	mov	r1, r3
 80052b6:	e794      	b.n	80051e2 <__ieee754_pow+0x12a>
 80052b8:	4b0e      	ldr	r3, [pc, #56]	; (80052f4 <__ieee754_pow+0x23c>)
 80052ba:	429c      	cmp	r4, r3
 80052bc:	ddf3      	ble.n	80052a6 <__ieee754_pow+0x1ee>
 80052be:	4b0a      	ldr	r3, [pc, #40]	; (80052e8 <__ieee754_pow+0x230>)
 80052c0:	429c      	cmp	r4, r3
 80052c2:	dd19      	ble.n	80052f8 <__ieee754_pow+0x240>
 80052c4:	2e00      	cmp	r6, #0
 80052c6:	dcf1      	bgt.n	80052ac <__ieee754_pow+0x1f4>
 80052c8:	e753      	b.n	8005172 <__ieee754_pow+0xba>
 80052ca:	bf00      	nop
 80052cc:	f3af 8000 	nop.w
 80052d0:	8800759c 	.word	0x8800759c
 80052d4:	7e37e43c 	.word	0x7e37e43c
 80052d8:	7ff00000 	.word	0x7ff00000
 80052dc:	08005f91 	.word	0x08005f91
 80052e0:	433fffff 	.word	0x433fffff
 80052e4:	3fefffff 	.word	0x3fefffff
 80052e8:	3ff00000 	.word	0x3ff00000
 80052ec:	3fe00000 	.word	0x3fe00000
 80052f0:	41e00000 	.word	0x41e00000
 80052f4:	3feffffe 	.word	0x3feffffe
 80052f8:	4661      	mov	r1, ip
 80052fa:	2200      	movs	r2, #0
 80052fc:	4b60      	ldr	r3, [pc, #384]	; (8005480 <__ieee754_pow+0x3c8>)
 80052fe:	4658      	mov	r0, fp
 8005300:	f7fa ff2a 	bl	8000158 <__aeabi_dsub>
 8005304:	a354      	add	r3, pc, #336	; (adr r3, 8005458 <__ieee754_pow+0x3a0>)
 8005306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530a:	4604      	mov	r4, r0
 800530c:	460d      	mov	r5, r1
 800530e:	f7fb f8db 	bl	80004c8 <__aeabi_dmul>
 8005312:	a353      	add	r3, pc, #332	; (adr r3, 8005460 <__ieee754_pow+0x3a8>)
 8005314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005318:	4606      	mov	r6, r0
 800531a:	460f      	mov	r7, r1
 800531c:	4620      	mov	r0, r4
 800531e:	4629      	mov	r1, r5
 8005320:	f7fb f8d2 	bl	80004c8 <__aeabi_dmul>
 8005324:	2200      	movs	r2, #0
 8005326:	4682      	mov	sl, r0
 8005328:	468b      	mov	fp, r1
 800532a:	4b56      	ldr	r3, [pc, #344]	; (8005484 <__ieee754_pow+0x3cc>)
 800532c:	4620      	mov	r0, r4
 800532e:	4629      	mov	r1, r5
 8005330:	f7fb f8ca 	bl	80004c8 <__aeabi_dmul>
 8005334:	4602      	mov	r2, r0
 8005336:	460b      	mov	r3, r1
 8005338:	a14b      	add	r1, pc, #300	; (adr r1, 8005468 <__ieee754_pow+0x3b0>)
 800533a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800533e:	f7fa ff0b 	bl	8000158 <__aeabi_dsub>
 8005342:	4622      	mov	r2, r4
 8005344:	462b      	mov	r3, r5
 8005346:	f7fb f8bf 	bl	80004c8 <__aeabi_dmul>
 800534a:	4602      	mov	r2, r0
 800534c:	460b      	mov	r3, r1
 800534e:	2000      	movs	r0, #0
 8005350:	494d      	ldr	r1, [pc, #308]	; (8005488 <__ieee754_pow+0x3d0>)
 8005352:	f7fa ff01 	bl	8000158 <__aeabi_dsub>
 8005356:	4622      	mov	r2, r4
 8005358:	462b      	mov	r3, r5
 800535a:	4680      	mov	r8, r0
 800535c:	4689      	mov	r9, r1
 800535e:	4620      	mov	r0, r4
 8005360:	4629      	mov	r1, r5
 8005362:	f7fb f8b1 	bl	80004c8 <__aeabi_dmul>
 8005366:	4602      	mov	r2, r0
 8005368:	460b      	mov	r3, r1
 800536a:	4640      	mov	r0, r8
 800536c:	4649      	mov	r1, r9
 800536e:	f7fb f8ab 	bl	80004c8 <__aeabi_dmul>
 8005372:	a33f      	add	r3, pc, #252	; (adr r3, 8005470 <__ieee754_pow+0x3b8>)
 8005374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005378:	f7fb f8a6 	bl	80004c8 <__aeabi_dmul>
 800537c:	4602      	mov	r2, r0
 800537e:	460b      	mov	r3, r1
 8005380:	4650      	mov	r0, sl
 8005382:	4659      	mov	r1, fp
 8005384:	f7fa fee8 	bl	8000158 <__aeabi_dsub>
 8005388:	4602      	mov	r2, r0
 800538a:	460b      	mov	r3, r1
 800538c:	4604      	mov	r4, r0
 800538e:	460d      	mov	r5, r1
 8005390:	4630      	mov	r0, r6
 8005392:	4639      	mov	r1, r7
 8005394:	f7fa fee2 	bl	800015c <__adddf3>
 8005398:	2000      	movs	r0, #0
 800539a:	468b      	mov	fp, r1
 800539c:	4682      	mov	sl, r0
 800539e:	4632      	mov	r2, r6
 80053a0:	463b      	mov	r3, r7
 80053a2:	f7fa fed9 	bl	8000158 <__aeabi_dsub>
 80053a6:	4602      	mov	r2, r0
 80053a8:	460b      	mov	r3, r1
 80053aa:	4620      	mov	r0, r4
 80053ac:	4629      	mov	r1, r5
 80053ae:	f7fa fed3 	bl	8000158 <__aeabi_dsub>
 80053b2:	9b00      	ldr	r3, [sp, #0]
 80053b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80053b6:	3b01      	subs	r3, #1
 80053b8:	4313      	orrs	r3, r2
 80053ba:	f04f 0300 	mov.w	r3, #0
 80053be:	bf0c      	ite	eq
 80053c0:	4c32      	ldreq	r4, [pc, #200]	; (800548c <__ieee754_pow+0x3d4>)
 80053c2:	4c2f      	ldrne	r4, [pc, #188]	; (8005480 <__ieee754_pow+0x3c8>)
 80053c4:	4606      	mov	r6, r0
 80053c6:	e9cd 3400 	strd	r3, r4, [sp]
 80053ca:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80053ce:	2400      	movs	r4, #0
 80053d0:	460f      	mov	r7, r1
 80053d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053d6:	4622      	mov	r2, r4
 80053d8:	462b      	mov	r3, r5
 80053da:	f7fa febd 	bl	8000158 <__aeabi_dsub>
 80053de:	4652      	mov	r2, sl
 80053e0:	465b      	mov	r3, fp
 80053e2:	f7fb f871 	bl	80004c8 <__aeabi_dmul>
 80053e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80053ea:	4680      	mov	r8, r0
 80053ec:	4689      	mov	r9, r1
 80053ee:	4630      	mov	r0, r6
 80053f0:	4639      	mov	r1, r7
 80053f2:	f7fb f869 	bl	80004c8 <__aeabi_dmul>
 80053f6:	4602      	mov	r2, r0
 80053f8:	460b      	mov	r3, r1
 80053fa:	4640      	mov	r0, r8
 80053fc:	4649      	mov	r1, r9
 80053fe:	f7fa fead 	bl	800015c <__adddf3>
 8005402:	4622      	mov	r2, r4
 8005404:	462b      	mov	r3, r5
 8005406:	4680      	mov	r8, r0
 8005408:	4689      	mov	r9, r1
 800540a:	4650      	mov	r0, sl
 800540c:	4659      	mov	r1, fp
 800540e:	f7fb f85b 	bl	80004c8 <__aeabi_dmul>
 8005412:	4604      	mov	r4, r0
 8005414:	460d      	mov	r5, r1
 8005416:	460b      	mov	r3, r1
 8005418:	4602      	mov	r2, r0
 800541a:	4649      	mov	r1, r9
 800541c:	4640      	mov	r0, r8
 800541e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005422:	f7fa fe9b 	bl	800015c <__adddf3>
 8005426:	4b1a      	ldr	r3, [pc, #104]	; (8005490 <__ieee754_pow+0x3d8>)
 8005428:	4682      	mov	sl, r0
 800542a:	4299      	cmp	r1, r3
 800542c:	460f      	mov	r7, r1
 800542e:	460e      	mov	r6, r1
 8005430:	f340 82e1 	ble.w	80059f6 <__ieee754_pow+0x93e>
 8005434:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005438:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800543c:	4303      	orrs	r3, r0
 800543e:	f000 81db 	beq.w	80057f8 <__ieee754_pow+0x740>
 8005442:	a30d      	add	r3, pc, #52	; (adr r3, 8005478 <__ieee754_pow+0x3c0>)
 8005444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005448:	e9dd 0100 	ldrd	r0, r1, [sp]
 800544c:	f7fb f83c 	bl	80004c8 <__aeabi_dmul>
 8005450:	a309      	add	r3, pc, #36	; (adr r3, 8005478 <__ieee754_pow+0x3c0>)
 8005452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005456:	e6c4      	b.n	80051e2 <__ieee754_pow+0x12a>
 8005458:	60000000 	.word	0x60000000
 800545c:	3ff71547 	.word	0x3ff71547
 8005460:	f85ddf44 	.word	0xf85ddf44
 8005464:	3e54ae0b 	.word	0x3e54ae0b
 8005468:	55555555 	.word	0x55555555
 800546c:	3fd55555 	.word	0x3fd55555
 8005470:	652b82fe 	.word	0x652b82fe
 8005474:	3ff71547 	.word	0x3ff71547
 8005478:	8800759c 	.word	0x8800759c
 800547c:	7e37e43c 	.word	0x7e37e43c
 8005480:	3ff00000 	.word	0x3ff00000
 8005484:	3fd00000 	.word	0x3fd00000
 8005488:	3fe00000 	.word	0x3fe00000
 800548c:	bff00000 	.word	0xbff00000
 8005490:	408fffff 	.word	0x408fffff
 8005494:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8005498:	f04f 0200 	mov.w	r2, #0
 800549c:	da08      	bge.n	80054b0 <__ieee754_pow+0x3f8>
 800549e:	4658      	mov	r0, fp
 80054a0:	4bcd      	ldr	r3, [pc, #820]	; (80057d8 <__ieee754_pow+0x720>)
 80054a2:	4661      	mov	r1, ip
 80054a4:	f7fb f810 	bl	80004c8 <__aeabi_dmul>
 80054a8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80054ac:	4683      	mov	fp, r0
 80054ae:	460c      	mov	r4, r1
 80054b0:	1523      	asrs	r3, r4, #20
 80054b2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80054b6:	4413      	add	r3, r2
 80054b8:	930c      	str	r3, [sp, #48]	; 0x30
 80054ba:	4bc8      	ldr	r3, [pc, #800]	; (80057dc <__ieee754_pow+0x724>)
 80054bc:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80054c0:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80054c4:	429c      	cmp	r4, r3
 80054c6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80054ca:	dd08      	ble.n	80054de <__ieee754_pow+0x426>
 80054cc:	4bc4      	ldr	r3, [pc, #784]	; (80057e0 <__ieee754_pow+0x728>)
 80054ce:	429c      	cmp	r4, r3
 80054d0:	f340 815b 	ble.w	800578a <__ieee754_pow+0x6d2>
 80054d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80054d6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80054da:	3301      	adds	r3, #1
 80054dc:	930c      	str	r3, [sp, #48]	; 0x30
 80054de:	f04f 0800 	mov.w	r8, #0
 80054e2:	4658      	mov	r0, fp
 80054e4:	4629      	mov	r1, r5
 80054e6:	4bbf      	ldr	r3, [pc, #764]	; (80057e4 <__ieee754_pow+0x72c>)
 80054e8:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 80054ec:	444b      	add	r3, r9
 80054ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 80054f2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80054f6:	461a      	mov	r2, r3
 80054f8:	4623      	mov	r3, r4
 80054fa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80054fe:	f7fa fe2b 	bl	8000158 <__aeabi_dsub>
 8005502:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005506:	4606      	mov	r6, r0
 8005508:	460f      	mov	r7, r1
 800550a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800550e:	f7fa fe25 	bl	800015c <__adddf3>
 8005512:	4602      	mov	r2, r0
 8005514:	460b      	mov	r3, r1
 8005516:	2000      	movs	r0, #0
 8005518:	49b3      	ldr	r1, [pc, #716]	; (80057e8 <__ieee754_pow+0x730>)
 800551a:	f7fb f8ff 	bl	800071c <__aeabi_ddiv>
 800551e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8005522:	4602      	mov	r2, r0
 8005524:	460b      	mov	r3, r1
 8005526:	4630      	mov	r0, r6
 8005528:	4639      	mov	r1, r7
 800552a:	f7fa ffcd 	bl	80004c8 <__aeabi_dmul>
 800552e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005532:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8005536:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800553a:	2300      	movs	r3, #0
 800553c:	2200      	movs	r2, #0
 800553e:	106d      	asrs	r5, r5, #1
 8005540:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005544:	9304      	str	r3, [sp, #16]
 8005546:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800554a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800554e:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 8005552:	4650      	mov	r0, sl
 8005554:	4659      	mov	r1, fp
 8005556:	4614      	mov	r4, r2
 8005558:	461d      	mov	r5, r3
 800555a:	f7fa ffb5 	bl	80004c8 <__aeabi_dmul>
 800555e:	4602      	mov	r2, r0
 8005560:	460b      	mov	r3, r1
 8005562:	4630      	mov	r0, r6
 8005564:	4639      	mov	r1, r7
 8005566:	f7fa fdf7 	bl	8000158 <__aeabi_dsub>
 800556a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800556e:	4606      	mov	r6, r0
 8005570:	460f      	mov	r7, r1
 8005572:	4620      	mov	r0, r4
 8005574:	4629      	mov	r1, r5
 8005576:	f7fa fdef 	bl	8000158 <__aeabi_dsub>
 800557a:	4602      	mov	r2, r0
 800557c:	460b      	mov	r3, r1
 800557e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005582:	f7fa fde9 	bl	8000158 <__aeabi_dsub>
 8005586:	4652      	mov	r2, sl
 8005588:	465b      	mov	r3, fp
 800558a:	f7fa ff9d 	bl	80004c8 <__aeabi_dmul>
 800558e:	4602      	mov	r2, r0
 8005590:	460b      	mov	r3, r1
 8005592:	4630      	mov	r0, r6
 8005594:	4639      	mov	r1, r7
 8005596:	f7fa fddf 	bl	8000158 <__aeabi_dsub>
 800559a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800559e:	f7fa ff93 	bl	80004c8 <__aeabi_dmul>
 80055a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80055a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80055aa:	4610      	mov	r0, r2
 80055ac:	4619      	mov	r1, r3
 80055ae:	f7fa ff8b 	bl	80004c8 <__aeabi_dmul>
 80055b2:	a377      	add	r3, pc, #476	; (adr r3, 8005790 <__ieee754_pow+0x6d8>)
 80055b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b8:	4604      	mov	r4, r0
 80055ba:	460d      	mov	r5, r1
 80055bc:	f7fa ff84 	bl	80004c8 <__aeabi_dmul>
 80055c0:	a375      	add	r3, pc, #468	; (adr r3, 8005798 <__ieee754_pow+0x6e0>)
 80055c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c6:	f7fa fdc9 	bl	800015c <__adddf3>
 80055ca:	4622      	mov	r2, r4
 80055cc:	462b      	mov	r3, r5
 80055ce:	f7fa ff7b 	bl	80004c8 <__aeabi_dmul>
 80055d2:	a373      	add	r3, pc, #460	; (adr r3, 80057a0 <__ieee754_pow+0x6e8>)
 80055d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d8:	f7fa fdc0 	bl	800015c <__adddf3>
 80055dc:	4622      	mov	r2, r4
 80055de:	462b      	mov	r3, r5
 80055e0:	f7fa ff72 	bl	80004c8 <__aeabi_dmul>
 80055e4:	a370      	add	r3, pc, #448	; (adr r3, 80057a8 <__ieee754_pow+0x6f0>)
 80055e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ea:	f7fa fdb7 	bl	800015c <__adddf3>
 80055ee:	4622      	mov	r2, r4
 80055f0:	462b      	mov	r3, r5
 80055f2:	f7fa ff69 	bl	80004c8 <__aeabi_dmul>
 80055f6:	a36e      	add	r3, pc, #440	; (adr r3, 80057b0 <__ieee754_pow+0x6f8>)
 80055f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055fc:	f7fa fdae 	bl	800015c <__adddf3>
 8005600:	4622      	mov	r2, r4
 8005602:	462b      	mov	r3, r5
 8005604:	f7fa ff60 	bl	80004c8 <__aeabi_dmul>
 8005608:	a36b      	add	r3, pc, #428	; (adr r3, 80057b8 <__ieee754_pow+0x700>)
 800560a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800560e:	f7fa fda5 	bl	800015c <__adddf3>
 8005612:	4622      	mov	r2, r4
 8005614:	4606      	mov	r6, r0
 8005616:	460f      	mov	r7, r1
 8005618:	462b      	mov	r3, r5
 800561a:	4620      	mov	r0, r4
 800561c:	4629      	mov	r1, r5
 800561e:	f7fa ff53 	bl	80004c8 <__aeabi_dmul>
 8005622:	4602      	mov	r2, r0
 8005624:	460b      	mov	r3, r1
 8005626:	4630      	mov	r0, r6
 8005628:	4639      	mov	r1, r7
 800562a:	f7fa ff4d 	bl	80004c8 <__aeabi_dmul>
 800562e:	4604      	mov	r4, r0
 8005630:	460d      	mov	r5, r1
 8005632:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005636:	4652      	mov	r2, sl
 8005638:	465b      	mov	r3, fp
 800563a:	f7fa fd8f 	bl	800015c <__adddf3>
 800563e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005642:	f7fa ff41 	bl	80004c8 <__aeabi_dmul>
 8005646:	4622      	mov	r2, r4
 8005648:	462b      	mov	r3, r5
 800564a:	f7fa fd87 	bl	800015c <__adddf3>
 800564e:	4652      	mov	r2, sl
 8005650:	4606      	mov	r6, r0
 8005652:	460f      	mov	r7, r1
 8005654:	465b      	mov	r3, fp
 8005656:	4650      	mov	r0, sl
 8005658:	4659      	mov	r1, fp
 800565a:	f7fa ff35 	bl	80004c8 <__aeabi_dmul>
 800565e:	2200      	movs	r2, #0
 8005660:	4b62      	ldr	r3, [pc, #392]	; (80057ec <__ieee754_pow+0x734>)
 8005662:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005666:	f7fa fd79 	bl	800015c <__adddf3>
 800566a:	4632      	mov	r2, r6
 800566c:	463b      	mov	r3, r7
 800566e:	f7fa fd75 	bl	800015c <__adddf3>
 8005672:	9804      	ldr	r0, [sp, #16]
 8005674:	460d      	mov	r5, r1
 8005676:	4604      	mov	r4, r0
 8005678:	4602      	mov	r2, r0
 800567a:	460b      	mov	r3, r1
 800567c:	4650      	mov	r0, sl
 800567e:	4659      	mov	r1, fp
 8005680:	f7fa ff22 	bl	80004c8 <__aeabi_dmul>
 8005684:	2200      	movs	r2, #0
 8005686:	4682      	mov	sl, r0
 8005688:	468b      	mov	fp, r1
 800568a:	4b58      	ldr	r3, [pc, #352]	; (80057ec <__ieee754_pow+0x734>)
 800568c:	4620      	mov	r0, r4
 800568e:	4629      	mov	r1, r5
 8005690:	f7fa fd62 	bl	8000158 <__aeabi_dsub>
 8005694:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005698:	f7fa fd5e 	bl	8000158 <__aeabi_dsub>
 800569c:	4602      	mov	r2, r0
 800569e:	460b      	mov	r3, r1
 80056a0:	4630      	mov	r0, r6
 80056a2:	4639      	mov	r1, r7
 80056a4:	f7fa fd58 	bl	8000158 <__aeabi_dsub>
 80056a8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80056ac:	f7fa ff0c 	bl	80004c8 <__aeabi_dmul>
 80056b0:	4622      	mov	r2, r4
 80056b2:	4606      	mov	r6, r0
 80056b4:	460f      	mov	r7, r1
 80056b6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80056ba:	462b      	mov	r3, r5
 80056bc:	f7fa ff04 	bl	80004c8 <__aeabi_dmul>
 80056c0:	4602      	mov	r2, r0
 80056c2:	460b      	mov	r3, r1
 80056c4:	4630      	mov	r0, r6
 80056c6:	4639      	mov	r1, r7
 80056c8:	f7fa fd48 	bl	800015c <__adddf3>
 80056cc:	4606      	mov	r6, r0
 80056ce:	460f      	mov	r7, r1
 80056d0:	4602      	mov	r2, r0
 80056d2:	460b      	mov	r3, r1
 80056d4:	4650      	mov	r0, sl
 80056d6:	4659      	mov	r1, fp
 80056d8:	f7fa fd40 	bl	800015c <__adddf3>
 80056dc:	a338      	add	r3, pc, #224	; (adr r3, 80057c0 <__ieee754_pow+0x708>)
 80056de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e2:	9804      	ldr	r0, [sp, #16]
 80056e4:	460d      	mov	r5, r1
 80056e6:	4604      	mov	r4, r0
 80056e8:	f7fa feee 	bl	80004c8 <__aeabi_dmul>
 80056ec:	4652      	mov	r2, sl
 80056ee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80056f2:	465b      	mov	r3, fp
 80056f4:	4620      	mov	r0, r4
 80056f6:	4629      	mov	r1, r5
 80056f8:	f7fa fd2e 	bl	8000158 <__aeabi_dsub>
 80056fc:	4602      	mov	r2, r0
 80056fe:	460b      	mov	r3, r1
 8005700:	4630      	mov	r0, r6
 8005702:	4639      	mov	r1, r7
 8005704:	f7fa fd28 	bl	8000158 <__aeabi_dsub>
 8005708:	a32f      	add	r3, pc, #188	; (adr r3, 80057c8 <__ieee754_pow+0x710>)
 800570a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800570e:	f7fa fedb 	bl	80004c8 <__aeabi_dmul>
 8005712:	a32f      	add	r3, pc, #188	; (adr r3, 80057d0 <__ieee754_pow+0x718>)
 8005714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005718:	4606      	mov	r6, r0
 800571a:	460f      	mov	r7, r1
 800571c:	4620      	mov	r0, r4
 800571e:	4629      	mov	r1, r5
 8005720:	f7fa fed2 	bl	80004c8 <__aeabi_dmul>
 8005724:	4602      	mov	r2, r0
 8005726:	460b      	mov	r3, r1
 8005728:	4630      	mov	r0, r6
 800572a:	4639      	mov	r1, r7
 800572c:	f7fa fd16 	bl	800015c <__adddf3>
 8005730:	4b2f      	ldr	r3, [pc, #188]	; (80057f0 <__ieee754_pow+0x738>)
 8005732:	444b      	add	r3, r9
 8005734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005738:	f7fa fd10 	bl	800015c <__adddf3>
 800573c:	4604      	mov	r4, r0
 800573e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005740:	460d      	mov	r5, r1
 8005742:	f7fa fe57 	bl	80003f4 <__aeabi_i2d>
 8005746:	4606      	mov	r6, r0
 8005748:	460f      	mov	r7, r1
 800574a:	4b2a      	ldr	r3, [pc, #168]	; (80057f4 <__ieee754_pow+0x73c>)
 800574c:	4622      	mov	r2, r4
 800574e:	444b      	add	r3, r9
 8005750:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005754:	462b      	mov	r3, r5
 8005756:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800575a:	f7fa fcff 	bl	800015c <__adddf3>
 800575e:	4642      	mov	r2, r8
 8005760:	464b      	mov	r3, r9
 8005762:	f7fa fcfb 	bl	800015c <__adddf3>
 8005766:	4632      	mov	r2, r6
 8005768:	463b      	mov	r3, r7
 800576a:	f7fa fcf7 	bl	800015c <__adddf3>
 800576e:	9804      	ldr	r0, [sp, #16]
 8005770:	4632      	mov	r2, r6
 8005772:	463b      	mov	r3, r7
 8005774:	4682      	mov	sl, r0
 8005776:	468b      	mov	fp, r1
 8005778:	f7fa fcee 	bl	8000158 <__aeabi_dsub>
 800577c:	4642      	mov	r2, r8
 800577e:	464b      	mov	r3, r9
 8005780:	f7fa fcea 	bl	8000158 <__aeabi_dsub>
 8005784:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005788:	e60b      	b.n	80053a2 <__ieee754_pow+0x2ea>
 800578a:	f04f 0801 	mov.w	r8, #1
 800578e:	e6a8      	b.n	80054e2 <__ieee754_pow+0x42a>
 8005790:	4a454eef 	.word	0x4a454eef
 8005794:	3fca7e28 	.word	0x3fca7e28
 8005798:	93c9db65 	.word	0x93c9db65
 800579c:	3fcd864a 	.word	0x3fcd864a
 80057a0:	a91d4101 	.word	0xa91d4101
 80057a4:	3fd17460 	.word	0x3fd17460
 80057a8:	518f264d 	.word	0x518f264d
 80057ac:	3fd55555 	.word	0x3fd55555
 80057b0:	db6fabff 	.word	0xdb6fabff
 80057b4:	3fdb6db6 	.word	0x3fdb6db6
 80057b8:	33333303 	.word	0x33333303
 80057bc:	3fe33333 	.word	0x3fe33333
 80057c0:	e0000000 	.word	0xe0000000
 80057c4:	3feec709 	.word	0x3feec709
 80057c8:	dc3a03fd 	.word	0xdc3a03fd
 80057cc:	3feec709 	.word	0x3feec709
 80057d0:	145b01f5 	.word	0x145b01f5
 80057d4:	be3e2fe0 	.word	0xbe3e2fe0
 80057d8:	43400000 	.word	0x43400000
 80057dc:	0003988e 	.word	0x0003988e
 80057e0:	000bb679 	.word	0x000bb679
 80057e4:	08005fc8 	.word	0x08005fc8
 80057e8:	3ff00000 	.word	0x3ff00000
 80057ec:	40080000 	.word	0x40080000
 80057f0:	08005fe8 	.word	0x08005fe8
 80057f4:	08005fd8 	.word	0x08005fd8
 80057f8:	a39b      	add	r3, pc, #620	; (adr r3, 8005a68 <__ieee754_pow+0x9b0>)
 80057fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057fe:	4640      	mov	r0, r8
 8005800:	4649      	mov	r1, r9
 8005802:	f7fa fcab 	bl	800015c <__adddf3>
 8005806:	4622      	mov	r2, r4
 8005808:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800580c:	462b      	mov	r3, r5
 800580e:	4650      	mov	r0, sl
 8005810:	4639      	mov	r1, r7
 8005812:	f7fa fca1 	bl	8000158 <__aeabi_dsub>
 8005816:	4602      	mov	r2, r0
 8005818:	460b      	mov	r3, r1
 800581a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800581e:	f7fb f8e3 	bl	80009e8 <__aeabi_dcmpgt>
 8005822:	2800      	cmp	r0, #0
 8005824:	f47f ae0d 	bne.w	8005442 <__ieee754_pow+0x38a>
 8005828:	4aa3      	ldr	r2, [pc, #652]	; (8005ab8 <__ieee754_pow+0xa00>)
 800582a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800582e:	4293      	cmp	r3, r2
 8005830:	f340 8103 	ble.w	8005a3a <__ieee754_pow+0x982>
 8005834:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005838:	2000      	movs	r0, #0
 800583a:	151b      	asrs	r3, r3, #20
 800583c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005840:	fa4a f303 	asr.w	r3, sl, r3
 8005844:	4433      	add	r3, r6
 8005846:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800584a:	4f9c      	ldr	r7, [pc, #624]	; (8005abc <__ieee754_pow+0xa04>)
 800584c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8005850:	4117      	asrs	r7, r2
 8005852:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8005856:	ea23 0107 	bic.w	r1, r3, r7
 800585a:	f1c2 0214 	rsb	r2, r2, #20
 800585e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8005862:	fa4a fa02 	asr.w	sl, sl, r2
 8005866:	2e00      	cmp	r6, #0
 8005868:	4602      	mov	r2, r0
 800586a:	460b      	mov	r3, r1
 800586c:	4620      	mov	r0, r4
 800586e:	4629      	mov	r1, r5
 8005870:	bfb8      	it	lt
 8005872:	f1ca 0a00 	rsblt	sl, sl, #0
 8005876:	f7fa fc6f 	bl	8000158 <__aeabi_dsub>
 800587a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800587e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005882:	4642      	mov	r2, r8
 8005884:	464b      	mov	r3, r9
 8005886:	f7fa fc69 	bl	800015c <__adddf3>
 800588a:	a379      	add	r3, pc, #484	; (adr r3, 8005a70 <__ieee754_pow+0x9b8>)
 800588c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005890:	2000      	movs	r0, #0
 8005892:	460d      	mov	r5, r1
 8005894:	4604      	mov	r4, r0
 8005896:	f7fa fe17 	bl	80004c8 <__aeabi_dmul>
 800589a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800589e:	4606      	mov	r6, r0
 80058a0:	460f      	mov	r7, r1
 80058a2:	4620      	mov	r0, r4
 80058a4:	4629      	mov	r1, r5
 80058a6:	f7fa fc57 	bl	8000158 <__aeabi_dsub>
 80058aa:	4602      	mov	r2, r0
 80058ac:	460b      	mov	r3, r1
 80058ae:	4640      	mov	r0, r8
 80058b0:	4649      	mov	r1, r9
 80058b2:	f7fa fc51 	bl	8000158 <__aeabi_dsub>
 80058b6:	a370      	add	r3, pc, #448	; (adr r3, 8005a78 <__ieee754_pow+0x9c0>)
 80058b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058bc:	f7fa fe04 	bl	80004c8 <__aeabi_dmul>
 80058c0:	a36f      	add	r3, pc, #444	; (adr r3, 8005a80 <__ieee754_pow+0x9c8>)
 80058c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c6:	4680      	mov	r8, r0
 80058c8:	4689      	mov	r9, r1
 80058ca:	4620      	mov	r0, r4
 80058cc:	4629      	mov	r1, r5
 80058ce:	f7fa fdfb 	bl	80004c8 <__aeabi_dmul>
 80058d2:	4602      	mov	r2, r0
 80058d4:	460b      	mov	r3, r1
 80058d6:	4640      	mov	r0, r8
 80058d8:	4649      	mov	r1, r9
 80058da:	f7fa fc3f 	bl	800015c <__adddf3>
 80058de:	4604      	mov	r4, r0
 80058e0:	460d      	mov	r5, r1
 80058e2:	4602      	mov	r2, r0
 80058e4:	460b      	mov	r3, r1
 80058e6:	4630      	mov	r0, r6
 80058e8:	4639      	mov	r1, r7
 80058ea:	f7fa fc37 	bl	800015c <__adddf3>
 80058ee:	4632      	mov	r2, r6
 80058f0:	463b      	mov	r3, r7
 80058f2:	4680      	mov	r8, r0
 80058f4:	4689      	mov	r9, r1
 80058f6:	f7fa fc2f 	bl	8000158 <__aeabi_dsub>
 80058fa:	4602      	mov	r2, r0
 80058fc:	460b      	mov	r3, r1
 80058fe:	4620      	mov	r0, r4
 8005900:	4629      	mov	r1, r5
 8005902:	f7fa fc29 	bl	8000158 <__aeabi_dsub>
 8005906:	4642      	mov	r2, r8
 8005908:	4606      	mov	r6, r0
 800590a:	460f      	mov	r7, r1
 800590c:	464b      	mov	r3, r9
 800590e:	4640      	mov	r0, r8
 8005910:	4649      	mov	r1, r9
 8005912:	f7fa fdd9 	bl	80004c8 <__aeabi_dmul>
 8005916:	a35c      	add	r3, pc, #368	; (adr r3, 8005a88 <__ieee754_pow+0x9d0>)
 8005918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800591c:	4604      	mov	r4, r0
 800591e:	460d      	mov	r5, r1
 8005920:	f7fa fdd2 	bl	80004c8 <__aeabi_dmul>
 8005924:	a35a      	add	r3, pc, #360	; (adr r3, 8005a90 <__ieee754_pow+0x9d8>)
 8005926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800592a:	f7fa fc15 	bl	8000158 <__aeabi_dsub>
 800592e:	4622      	mov	r2, r4
 8005930:	462b      	mov	r3, r5
 8005932:	f7fa fdc9 	bl	80004c8 <__aeabi_dmul>
 8005936:	a358      	add	r3, pc, #352	; (adr r3, 8005a98 <__ieee754_pow+0x9e0>)
 8005938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593c:	f7fa fc0e 	bl	800015c <__adddf3>
 8005940:	4622      	mov	r2, r4
 8005942:	462b      	mov	r3, r5
 8005944:	f7fa fdc0 	bl	80004c8 <__aeabi_dmul>
 8005948:	a355      	add	r3, pc, #340	; (adr r3, 8005aa0 <__ieee754_pow+0x9e8>)
 800594a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800594e:	f7fa fc03 	bl	8000158 <__aeabi_dsub>
 8005952:	4622      	mov	r2, r4
 8005954:	462b      	mov	r3, r5
 8005956:	f7fa fdb7 	bl	80004c8 <__aeabi_dmul>
 800595a:	a353      	add	r3, pc, #332	; (adr r3, 8005aa8 <__ieee754_pow+0x9f0>)
 800595c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005960:	f7fa fbfc 	bl	800015c <__adddf3>
 8005964:	4622      	mov	r2, r4
 8005966:	462b      	mov	r3, r5
 8005968:	f7fa fdae 	bl	80004c8 <__aeabi_dmul>
 800596c:	4602      	mov	r2, r0
 800596e:	460b      	mov	r3, r1
 8005970:	4640      	mov	r0, r8
 8005972:	4649      	mov	r1, r9
 8005974:	f7fa fbf0 	bl	8000158 <__aeabi_dsub>
 8005978:	4604      	mov	r4, r0
 800597a:	460d      	mov	r5, r1
 800597c:	4602      	mov	r2, r0
 800597e:	460b      	mov	r3, r1
 8005980:	4640      	mov	r0, r8
 8005982:	4649      	mov	r1, r9
 8005984:	f7fa fda0 	bl	80004c8 <__aeabi_dmul>
 8005988:	2200      	movs	r2, #0
 800598a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800598e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005992:	4620      	mov	r0, r4
 8005994:	4629      	mov	r1, r5
 8005996:	f7fa fbdf 	bl	8000158 <__aeabi_dsub>
 800599a:	4602      	mov	r2, r0
 800599c:	460b      	mov	r3, r1
 800599e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059a2:	f7fa febb 	bl	800071c <__aeabi_ddiv>
 80059a6:	4632      	mov	r2, r6
 80059a8:	4604      	mov	r4, r0
 80059aa:	460d      	mov	r5, r1
 80059ac:	463b      	mov	r3, r7
 80059ae:	4640      	mov	r0, r8
 80059b0:	4649      	mov	r1, r9
 80059b2:	f7fa fd89 	bl	80004c8 <__aeabi_dmul>
 80059b6:	4632      	mov	r2, r6
 80059b8:	463b      	mov	r3, r7
 80059ba:	f7fa fbcf 	bl	800015c <__adddf3>
 80059be:	4602      	mov	r2, r0
 80059c0:	460b      	mov	r3, r1
 80059c2:	4620      	mov	r0, r4
 80059c4:	4629      	mov	r1, r5
 80059c6:	f7fa fbc7 	bl	8000158 <__aeabi_dsub>
 80059ca:	4642      	mov	r2, r8
 80059cc:	464b      	mov	r3, r9
 80059ce:	f7fa fbc3 	bl	8000158 <__aeabi_dsub>
 80059d2:	4602      	mov	r2, r0
 80059d4:	460b      	mov	r3, r1
 80059d6:	2000      	movs	r0, #0
 80059d8:	4939      	ldr	r1, [pc, #228]	; (8005ac0 <__ieee754_pow+0xa08>)
 80059da:	f7fa fbbd 	bl	8000158 <__aeabi_dsub>
 80059de:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80059e2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80059e6:	da2b      	bge.n	8005a40 <__ieee754_pow+0x988>
 80059e8:	4652      	mov	r2, sl
 80059ea:	f000 f9b9 	bl	8005d60 <scalbn>
 80059ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80059f2:	f7ff bbf6 	b.w	80051e2 <__ieee754_pow+0x12a>
 80059f6:	4b33      	ldr	r3, [pc, #204]	; (8005ac4 <__ieee754_pow+0xa0c>)
 80059f8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80059fc:	429f      	cmp	r7, r3
 80059fe:	f77f af13 	ble.w	8005828 <__ieee754_pow+0x770>
 8005a02:	4b31      	ldr	r3, [pc, #196]	; (8005ac8 <__ieee754_pow+0xa10>)
 8005a04:	440b      	add	r3, r1
 8005a06:	4303      	orrs	r3, r0
 8005a08:	d00b      	beq.n	8005a22 <__ieee754_pow+0x96a>
 8005a0a:	a329      	add	r3, pc, #164	; (adr r3, 8005ab0 <__ieee754_pow+0x9f8>)
 8005a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a10:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a14:	f7fa fd58 	bl	80004c8 <__aeabi_dmul>
 8005a18:	a325      	add	r3, pc, #148	; (adr r3, 8005ab0 <__ieee754_pow+0x9f8>)
 8005a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a1e:	f7ff bbe0 	b.w	80051e2 <__ieee754_pow+0x12a>
 8005a22:	4622      	mov	r2, r4
 8005a24:	462b      	mov	r3, r5
 8005a26:	f7fa fb97 	bl	8000158 <__aeabi_dsub>
 8005a2a:	4642      	mov	r2, r8
 8005a2c:	464b      	mov	r3, r9
 8005a2e:	f7fa ffd1 	bl	80009d4 <__aeabi_dcmpge>
 8005a32:	2800      	cmp	r0, #0
 8005a34:	f43f aef8 	beq.w	8005828 <__ieee754_pow+0x770>
 8005a38:	e7e7      	b.n	8005a0a <__ieee754_pow+0x952>
 8005a3a:	f04f 0a00 	mov.w	sl, #0
 8005a3e:	e71e      	b.n	800587e <__ieee754_pow+0x7c6>
 8005a40:	4621      	mov	r1, r4
 8005a42:	e7d4      	b.n	80059ee <__ieee754_pow+0x936>
 8005a44:	f04f 0b00 	mov.w	fp, #0
 8005a48:	f8df c074 	ldr.w	ip, [pc, #116]	; 8005ac0 <__ieee754_pow+0xa08>
 8005a4c:	f7ff bb95 	b.w	800517a <__ieee754_pow+0xc2>
 8005a50:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8005a54:	f7ff bb91 	b.w	800517a <__ieee754_pow+0xc2>
 8005a58:	4638      	mov	r0, r7
 8005a5a:	4641      	mov	r1, r8
 8005a5c:	f7ff bbc3 	b.w	80051e6 <__ieee754_pow+0x12e>
 8005a60:	9200      	str	r2, [sp, #0]
 8005a62:	f7ff bb9f 	b.w	80051a4 <__ieee754_pow+0xec>
 8005a66:	bf00      	nop
 8005a68:	652b82fe 	.word	0x652b82fe
 8005a6c:	3c971547 	.word	0x3c971547
 8005a70:	00000000 	.word	0x00000000
 8005a74:	3fe62e43 	.word	0x3fe62e43
 8005a78:	fefa39ef 	.word	0xfefa39ef
 8005a7c:	3fe62e42 	.word	0x3fe62e42
 8005a80:	0ca86c39 	.word	0x0ca86c39
 8005a84:	be205c61 	.word	0xbe205c61
 8005a88:	72bea4d0 	.word	0x72bea4d0
 8005a8c:	3e663769 	.word	0x3e663769
 8005a90:	c5d26bf1 	.word	0xc5d26bf1
 8005a94:	3ebbbd41 	.word	0x3ebbbd41
 8005a98:	af25de2c 	.word	0xaf25de2c
 8005a9c:	3f11566a 	.word	0x3f11566a
 8005aa0:	16bebd93 	.word	0x16bebd93
 8005aa4:	3f66c16c 	.word	0x3f66c16c
 8005aa8:	5555553e 	.word	0x5555553e
 8005aac:	3fc55555 	.word	0x3fc55555
 8005ab0:	c2f8f359 	.word	0xc2f8f359
 8005ab4:	01a56e1f 	.word	0x01a56e1f
 8005ab8:	3fe00000 	.word	0x3fe00000
 8005abc:	000fffff 	.word	0x000fffff
 8005ac0:	3ff00000 	.word	0x3ff00000
 8005ac4:	4090cbff 	.word	0x4090cbff
 8005ac8:	3f6f3400 	.word	0x3f6f3400

08005acc <__ieee754_sqrt>:
 8005acc:	4b54      	ldr	r3, [pc, #336]	; (8005c20 <__ieee754_sqrt+0x154>)
 8005ace:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ad2:	438b      	bics	r3, r1
 8005ad4:	4606      	mov	r6, r0
 8005ad6:	460d      	mov	r5, r1
 8005ad8:	460a      	mov	r2, r1
 8005ada:	460c      	mov	r4, r1
 8005adc:	d10f      	bne.n	8005afe <__ieee754_sqrt+0x32>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	460b      	mov	r3, r1
 8005ae2:	f7fa fcf1 	bl	80004c8 <__aeabi_dmul>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	460b      	mov	r3, r1
 8005aea:	4630      	mov	r0, r6
 8005aec:	4629      	mov	r1, r5
 8005aee:	f7fa fb35 	bl	800015c <__adddf3>
 8005af2:	4606      	mov	r6, r0
 8005af4:	460d      	mov	r5, r1
 8005af6:	4630      	mov	r0, r6
 8005af8:	4629      	mov	r1, r5
 8005afa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005afe:	2900      	cmp	r1, #0
 8005b00:	4607      	mov	r7, r0
 8005b02:	4603      	mov	r3, r0
 8005b04:	dc0e      	bgt.n	8005b24 <__ieee754_sqrt+0x58>
 8005b06:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8005b0a:	ea5c 0707 	orrs.w	r7, ip, r7
 8005b0e:	d0f2      	beq.n	8005af6 <__ieee754_sqrt+0x2a>
 8005b10:	b141      	cbz	r1, 8005b24 <__ieee754_sqrt+0x58>
 8005b12:	4602      	mov	r2, r0
 8005b14:	460b      	mov	r3, r1
 8005b16:	f7fa fb1f 	bl	8000158 <__aeabi_dsub>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	f7fa fdfd 	bl	800071c <__aeabi_ddiv>
 8005b22:	e7e6      	b.n	8005af2 <__ieee754_sqrt+0x26>
 8005b24:	1512      	asrs	r2, r2, #20
 8005b26:	d074      	beq.n	8005c12 <__ieee754_sqrt+0x146>
 8005b28:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8005b2c:	07d5      	lsls	r5, r2, #31
 8005b2e:	f04f 0500 	mov.w	r5, #0
 8005b32:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005b36:	bf48      	it	mi
 8005b38:	0fd9      	lsrmi	r1, r3, #31
 8005b3a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8005b3e:	bf44      	itt	mi
 8005b40:	005b      	lslmi	r3, r3, #1
 8005b42:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 8005b46:	1051      	asrs	r1, r2, #1
 8005b48:	0fda      	lsrs	r2, r3, #31
 8005b4a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8005b4e:	4628      	mov	r0, r5
 8005b50:	2216      	movs	r2, #22
 8005b52:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8005b56:	005b      	lsls	r3, r3, #1
 8005b58:	1987      	adds	r7, r0, r6
 8005b5a:	42a7      	cmp	r7, r4
 8005b5c:	bfde      	ittt	le
 8005b5e:	19b8      	addle	r0, r7, r6
 8005b60:	1be4      	suble	r4, r4, r7
 8005b62:	19ad      	addle	r5, r5, r6
 8005b64:	0fdf      	lsrs	r7, r3, #31
 8005b66:	3a01      	subs	r2, #1
 8005b68:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8005b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005b70:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005b74:	d1f0      	bne.n	8005b58 <__ieee754_sqrt+0x8c>
 8005b76:	f04f 0c20 	mov.w	ip, #32
 8005b7a:	4696      	mov	lr, r2
 8005b7c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005b80:	4284      	cmp	r4, r0
 8005b82:	eb06 070e 	add.w	r7, r6, lr
 8005b86:	dc02      	bgt.n	8005b8e <__ieee754_sqrt+0xc2>
 8005b88:	d112      	bne.n	8005bb0 <__ieee754_sqrt+0xe4>
 8005b8a:	429f      	cmp	r7, r3
 8005b8c:	d810      	bhi.n	8005bb0 <__ieee754_sqrt+0xe4>
 8005b8e:	2f00      	cmp	r7, #0
 8005b90:	eb07 0e06 	add.w	lr, r7, r6
 8005b94:	da42      	bge.n	8005c1c <__ieee754_sqrt+0x150>
 8005b96:	f1be 0f00 	cmp.w	lr, #0
 8005b9a:	db3f      	blt.n	8005c1c <__ieee754_sqrt+0x150>
 8005b9c:	f100 0801 	add.w	r8, r0, #1
 8005ba0:	1a24      	subs	r4, r4, r0
 8005ba2:	4640      	mov	r0, r8
 8005ba4:	429f      	cmp	r7, r3
 8005ba6:	bf88      	it	hi
 8005ba8:	f104 34ff 	addhi.w	r4, r4, #4294967295
 8005bac:	1bdb      	subs	r3, r3, r7
 8005bae:	4432      	add	r2, r6
 8005bb0:	0064      	lsls	r4, r4, #1
 8005bb2:	f1bc 0c01 	subs.w	ip, ip, #1
 8005bb6:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 8005bba:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005bbe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005bc2:	d1dd      	bne.n	8005b80 <__ieee754_sqrt+0xb4>
 8005bc4:	4323      	orrs	r3, r4
 8005bc6:	d006      	beq.n	8005bd6 <__ieee754_sqrt+0x10a>
 8005bc8:	1c54      	adds	r4, r2, #1
 8005bca:	bf0b      	itete	eq
 8005bcc:	4662      	moveq	r2, ip
 8005bce:	3201      	addne	r2, #1
 8005bd0:	3501      	addeq	r5, #1
 8005bd2:	f022 0201 	bicne.w	r2, r2, #1
 8005bd6:	106b      	asrs	r3, r5, #1
 8005bd8:	0852      	lsrs	r2, r2, #1
 8005bda:	07e8      	lsls	r0, r5, #31
 8005bdc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005be0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005be4:	bf48      	it	mi
 8005be6:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8005bea:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 8005bee:	4616      	mov	r6, r2
 8005bf0:	e781      	b.n	8005af6 <__ieee754_sqrt+0x2a>
 8005bf2:	0adc      	lsrs	r4, r3, #11
 8005bf4:	3915      	subs	r1, #21
 8005bf6:	055b      	lsls	r3, r3, #21
 8005bf8:	2c00      	cmp	r4, #0
 8005bfa:	d0fa      	beq.n	8005bf2 <__ieee754_sqrt+0x126>
 8005bfc:	02e6      	lsls	r6, r4, #11
 8005bfe:	d50a      	bpl.n	8005c16 <__ieee754_sqrt+0x14a>
 8005c00:	f1c2 0020 	rsb	r0, r2, #32
 8005c04:	fa23 f000 	lsr.w	r0, r3, r0
 8005c08:	1e55      	subs	r5, r2, #1
 8005c0a:	4093      	lsls	r3, r2
 8005c0c:	4304      	orrs	r4, r0
 8005c0e:	1b4a      	subs	r2, r1, r5
 8005c10:	e78a      	b.n	8005b28 <__ieee754_sqrt+0x5c>
 8005c12:	4611      	mov	r1, r2
 8005c14:	e7f0      	b.n	8005bf8 <__ieee754_sqrt+0x12c>
 8005c16:	0064      	lsls	r4, r4, #1
 8005c18:	3201      	adds	r2, #1
 8005c1a:	e7ef      	b.n	8005bfc <__ieee754_sqrt+0x130>
 8005c1c:	4680      	mov	r8, r0
 8005c1e:	e7bf      	b.n	8005ba0 <__ieee754_sqrt+0xd4>
 8005c20:	7ff00000 	.word	0x7ff00000

08005c24 <fabs>:
 8005c24:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005c28:	4619      	mov	r1, r3
 8005c2a:	4770      	bx	lr

08005c2c <finite>:
 8005c2c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8005c30:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 8005c34:	0fc0      	lsrs	r0, r0, #31
 8005c36:	4770      	bx	lr

08005c38 <matherr>:
 8005c38:	2000      	movs	r0, #0
 8005c3a:	4770      	bx	lr

08005c3c <nan>:
 8005c3c:	2000      	movs	r0, #0
 8005c3e:	4901      	ldr	r1, [pc, #4]	; (8005c44 <nan+0x8>)
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop
 8005c44:	7ff80000 	.word	0x7ff80000

08005c48 <rint>:
 8005c48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c4a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005c4e:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 8005c52:	f1bc 0f13 	cmp.w	ip, #19
 8005c56:	4604      	mov	r4, r0
 8005c58:	460d      	mov	r5, r1
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	4606      	mov	r6, r0
 8005c5e:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 8005c62:	dc5a      	bgt.n	8005d1a <rint+0xd2>
 8005c64:	f1bc 0f00 	cmp.w	ip, #0
 8005c68:	da2b      	bge.n	8005cc2 <rint+0x7a>
 8005c6a:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8005c6e:	4302      	orrs	r2, r0
 8005c70:	d023      	beq.n	8005cba <rint+0x72>
 8005c72:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8005c76:	4302      	orrs	r2, r0
 8005c78:	4256      	negs	r6, r2
 8005c7a:	4316      	orrs	r6, r2
 8005c7c:	0c4b      	lsrs	r3, r1, #17
 8005c7e:	0b36      	lsrs	r6, r6, #12
 8005c80:	4934      	ldr	r1, [pc, #208]	; (8005d54 <rint+0x10c>)
 8005c82:	045b      	lsls	r3, r3, #17
 8005c84:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 8005c88:	ea46 0503 	orr.w	r5, r6, r3
 8005c8c:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8005c90:	4602      	mov	r2, r0
 8005c92:	462b      	mov	r3, r5
 8005c94:	e9d1 4500 	ldrd	r4, r5, [r1]
 8005c98:	4620      	mov	r0, r4
 8005c9a:	4629      	mov	r1, r5
 8005c9c:	f7fa fa5e 	bl	800015c <__adddf3>
 8005ca0:	e9cd 0100 	strd	r0, r1, [sp]
 8005ca4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ca8:	462b      	mov	r3, r5
 8005caa:	4622      	mov	r2, r4
 8005cac:	f7fa fa54 	bl	8000158 <__aeabi_dsub>
 8005cb0:	4604      	mov	r4, r0
 8005cb2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005cb6:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 8005cba:	4620      	mov	r0, r4
 8005cbc:	4629      	mov	r1, r5
 8005cbe:	b003      	add	sp, #12
 8005cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cc2:	4a25      	ldr	r2, [pc, #148]	; (8005d58 <rint+0x110>)
 8005cc4:	fa42 f20c 	asr.w	r2, r2, ip
 8005cc8:	4011      	ands	r1, r2
 8005cca:	4301      	orrs	r1, r0
 8005ccc:	d0f5      	beq.n	8005cba <rint+0x72>
 8005cce:	0852      	lsrs	r2, r2, #1
 8005cd0:	ea05 0102 	and.w	r1, r5, r2
 8005cd4:	ea50 0601 	orrs.w	r6, r0, r1
 8005cd8:	d00c      	beq.n	8005cf4 <rint+0xac>
 8005cda:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005cde:	f1bc 0f13 	cmp.w	ip, #19
 8005ce2:	bf0c      	ite	eq
 8005ce4:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 8005ce8:	2600      	movne	r6, #0
 8005cea:	ea25 0202 	bic.w	r2, r5, r2
 8005cee:	fa43 f30c 	asr.w	r3, r3, ip
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	4917      	ldr	r1, [pc, #92]	; (8005d54 <rint+0x10c>)
 8005cf6:	4632      	mov	r2, r6
 8005cf8:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 8005cfc:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005d00:	4620      	mov	r0, r4
 8005d02:	4629      	mov	r1, r5
 8005d04:	f7fa fa2a 	bl	800015c <__adddf3>
 8005d08:	e9cd 0100 	strd	r0, r1, [sp]
 8005d0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d10:	4622      	mov	r2, r4
 8005d12:	462b      	mov	r3, r5
 8005d14:	f7fa fa20 	bl	8000158 <__aeabi_dsub>
 8005d18:	e008      	b.n	8005d2c <rint+0xe4>
 8005d1a:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 8005d1e:	dd08      	ble.n	8005d32 <rint+0xea>
 8005d20:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 8005d24:	d1c9      	bne.n	8005cba <rint+0x72>
 8005d26:	4602      	mov	r2, r0
 8005d28:	f7fa fa18 	bl	800015c <__adddf3>
 8005d2c:	4604      	mov	r4, r0
 8005d2e:	460d      	mov	r5, r1
 8005d30:	e7c3      	b.n	8005cba <rint+0x72>
 8005d32:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 8005d36:	f04f 32ff 	mov.w	r2, #4294967295
 8005d3a:	40ca      	lsrs	r2, r1
 8005d3c:	4210      	tst	r0, r2
 8005d3e:	d0bc      	beq.n	8005cba <rint+0x72>
 8005d40:	0852      	lsrs	r2, r2, #1
 8005d42:	4210      	tst	r0, r2
 8005d44:	bf1f      	itttt	ne
 8005d46:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 8005d4a:	ea20 0202 	bicne.w	r2, r0, r2
 8005d4e:	410e      	asrne	r6, r1
 8005d50:	4316      	orrne	r6, r2
 8005d52:	e7cf      	b.n	8005cf4 <rint+0xac>
 8005d54:	08005ff8 	.word	0x08005ff8
 8005d58:	000fffff 	.word	0x000fffff
 8005d5c:	00000000 	.word	0x00000000

08005d60 <scalbn>:
 8005d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d62:	4616      	mov	r6, r2
 8005d64:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005d68:	4604      	mov	r4, r0
 8005d6a:	460d      	mov	r5, r1
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	b982      	cbnz	r2, 8005d92 <scalbn+0x32>
 8005d70:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005d74:	4303      	orrs	r3, r0
 8005d76:	d034      	beq.n	8005de2 <scalbn+0x82>
 8005d78:	4b2d      	ldr	r3, [pc, #180]	; (8005e30 <scalbn+0xd0>)
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f7fa fba4 	bl	80004c8 <__aeabi_dmul>
 8005d80:	4b2c      	ldr	r3, [pc, #176]	; (8005e34 <scalbn+0xd4>)
 8005d82:	4604      	mov	r4, r0
 8005d84:	429e      	cmp	r6, r3
 8005d86:	460d      	mov	r5, r1
 8005d88:	da0d      	bge.n	8005da6 <scalbn+0x46>
 8005d8a:	a325      	add	r3, pc, #148	; (adr r3, 8005e20 <scalbn+0xc0>)
 8005d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d90:	e01c      	b.n	8005dcc <scalbn+0x6c>
 8005d92:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8005d96:	42ba      	cmp	r2, r7
 8005d98:	d109      	bne.n	8005dae <scalbn+0x4e>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	f7fa f9de 	bl	800015c <__adddf3>
 8005da0:	4604      	mov	r4, r0
 8005da2:	460d      	mov	r5, r1
 8005da4:	e01d      	b.n	8005de2 <scalbn+0x82>
 8005da6:	460b      	mov	r3, r1
 8005da8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005dac:	3a36      	subs	r2, #54	; 0x36
 8005dae:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005db2:	4432      	add	r2, r6
 8005db4:	428a      	cmp	r2, r1
 8005db6:	dd0c      	ble.n	8005dd2 <scalbn+0x72>
 8005db8:	4622      	mov	r2, r4
 8005dba:	462b      	mov	r3, r5
 8005dbc:	a11a      	add	r1, pc, #104	; (adr r1, 8005e28 <scalbn+0xc8>)
 8005dbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005dc2:	f000 f83b 	bl	8005e3c <copysign>
 8005dc6:	a318      	add	r3, pc, #96	; (adr r3, 8005e28 <scalbn+0xc8>)
 8005dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dcc:	f7fa fb7c 	bl	80004c8 <__aeabi_dmul>
 8005dd0:	e7e6      	b.n	8005da0 <scalbn+0x40>
 8005dd2:	2a00      	cmp	r2, #0
 8005dd4:	dd08      	ble.n	8005de8 <scalbn+0x88>
 8005dd6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005dda:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005dde:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005de2:	4620      	mov	r0, r4
 8005de4:	4629      	mov	r1, r5
 8005de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005de8:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005dec:	da0b      	bge.n	8005e06 <scalbn+0xa6>
 8005dee:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005df2:	429e      	cmp	r6, r3
 8005df4:	4622      	mov	r2, r4
 8005df6:	462b      	mov	r3, r5
 8005df8:	dce0      	bgt.n	8005dbc <scalbn+0x5c>
 8005dfa:	a109      	add	r1, pc, #36	; (adr r1, 8005e20 <scalbn+0xc0>)
 8005dfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e00:	f000 f81c 	bl	8005e3c <copysign>
 8005e04:	e7c1      	b.n	8005d8a <scalbn+0x2a>
 8005e06:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005e0a:	3236      	adds	r2, #54	; 0x36
 8005e0c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005e10:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005e14:	4620      	mov	r0, r4
 8005e16:	4629      	mov	r1, r5
 8005e18:	2200      	movs	r2, #0
 8005e1a:	4b07      	ldr	r3, [pc, #28]	; (8005e38 <scalbn+0xd8>)
 8005e1c:	e7d6      	b.n	8005dcc <scalbn+0x6c>
 8005e1e:	bf00      	nop
 8005e20:	c2f8f359 	.word	0xc2f8f359
 8005e24:	01a56e1f 	.word	0x01a56e1f
 8005e28:	8800759c 	.word	0x8800759c
 8005e2c:	7e37e43c 	.word	0x7e37e43c
 8005e30:	43500000 	.word	0x43500000
 8005e34:	ffff3cb0 	.word	0xffff3cb0
 8005e38:	3c900000 	.word	0x3c900000

08005e3c <copysign>:
 8005e3c:	b530      	push	{r4, r5, lr}
 8005e3e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8005e42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e46:	ea42 0503 	orr.w	r5, r2, r3
 8005e4a:	4629      	mov	r1, r5
 8005e4c:	bd30      	pop	{r4, r5, pc}
	...

08005e50 <_init>:
 8005e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e52:	bf00      	nop
 8005e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e56:	bc08      	pop	{r3}
 8005e58:	469e      	mov	lr, r3
 8005e5a:	4770      	bx	lr

08005e5c <_fini>:
 8005e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e5e:	bf00      	nop
 8005e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e62:	bc08      	pop	{r3}
 8005e64:	469e      	mov	lr, r3
 8005e66:	4770      	bx	lr
