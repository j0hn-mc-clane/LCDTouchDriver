
lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060e8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000036b0  080061f8  080061f8  000161f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098a8  080098a8  000200f0  2**0
                  CONTENTS
  4 .ARM          00000000  080098a8  080098a8  000200f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080098a8  080098a8  000200f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098a8  080098a8  000198a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080098ac  080098ac  000198ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  080098b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  200000f0  080099a0  000200f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000024c  080099a0  0002024c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b453  00000000  00000000  00020119  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001db2  00000000  00000000  0002b56c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000900  00000000  00000000  0002d320  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000808  00000000  00000000  0002dc20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00005175  00000000  00000000  0002e428  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00002ccc  00000000  00000000  0003359d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  00036269  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002e8c  00000000  00000000  000362e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000f0 	.word	0x200000f0
 800012c:	00000000 	.word	0x00000000
 8000130:	080061e0 	.word	0x080061e0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000f4 	.word	0x200000f4
 800014c:	080061e0 	.word	0x080061e0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <LCD_SendCommand>:


//***** Functions prototypes *****//

//1. Write Command to LCD
void LCD_SendCommand(uint8_t com) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60000000) = com;
	uint8_t tmpCmd = com;
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	73fb      	strb	r3, [r7, #15]
	//Set DC HIGH for COMMAND mode
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_RESET);
 8000a86:	4b11      	ldr	r3, [pc, #68]	; (8000acc <LCD_SendCommand+0x54>)
 8000a88:	6818      	ldr	r0, [r3, #0]
 8000a8a:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <LCD_SendCommand+0x58>)
 8000a8c:	881b      	ldrh	r3, [r3, #0]
 8000a8e:	2200      	movs	r2, #0
 8000a90:	4619      	mov	r1, r3
 8000a92:	f002 fbe7 	bl	8003264 <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 8000a96:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <LCD_SendCommand+0x5c>)
 8000a98:	6818      	ldr	r0, [r3, #0]
 8000a9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <LCD_SendCommand+0x60>)
 8000a9c:	881b      	ldrh	r3, [r3, #0]
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	f002 fbdf 	bl	8003264 <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpCmd, 1, 5);
 8000aa6:	f107 010f 	add.w	r1, r7, #15
 8000aaa:	2305      	movs	r3, #5
 8000aac:	2201      	movs	r2, #1
 8000aae:	480b      	ldr	r0, [pc, #44]	; (8000adc <LCD_SendCommand+0x64>)
 8000ab0:	f003 f9cb 	bl	8003e4a <HAL_SPI_Transmit>
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 8000ab4:	4b07      	ldr	r3, [pc, #28]	; (8000ad4 <LCD_SendCommand+0x5c>)
 8000ab6:	6818      	ldr	r0, [r3, #0]
 8000ab8:	4b07      	ldr	r3, [pc, #28]	; (8000ad8 <LCD_SendCommand+0x60>)
 8000aba:	881b      	ldrh	r3, [r3, #0]
 8000abc:	2201      	movs	r2, #1
 8000abe:	4619      	mov	r1, r3
 8000ac0:	f002 fbd0 	bl	8003264 <HAL_GPIO_WritePin>
}
 8000ac4:	bf00      	nop
 8000ac6:	3710      	adds	r7, #16
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20000170 	.word	0x20000170
 8000ad0:	20000174 	.word	0x20000174
 8000ad4:	20000168 	.word	0x20000168
 8000ad8:	2000016c 	.word	0x2000016c
 8000adc:	20000110 	.word	0x20000110

08000ae0 <LCD_SendData>:

//2. Write data to LCD
void LCD_SendData(uint8_t data) {
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60040000) = data;
	uint8_t tmpCmd = data;
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	73fb      	strb	r3, [r7, #15]
	//Set DC LOW for DATA mode
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
 8000aee:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <LCD_SendData+0x54>)
 8000af0:	6818      	ldr	r0, [r3, #0]
 8000af2:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <LCD_SendData+0x58>)
 8000af4:	881b      	ldrh	r3, [r3, #0]
 8000af6:	2201      	movs	r2, #1
 8000af8:	4619      	mov	r1, r3
 8000afa:	f002 fbb3 	bl	8003264 <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 8000afe:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <LCD_SendData+0x5c>)
 8000b00:	6818      	ldr	r0, [r3, #0]
 8000b02:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <LCD_SendData+0x60>)
 8000b04:	881b      	ldrh	r3, [r3, #0]
 8000b06:	2200      	movs	r2, #0
 8000b08:	4619      	mov	r1, r3
 8000b0a:	f002 fbab 	bl	8003264 <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpCmd, 1, 5);
 8000b0e:	f107 010f 	add.w	r1, r7, #15
 8000b12:	2305      	movs	r3, #5
 8000b14:	2201      	movs	r2, #1
 8000b16:	480b      	ldr	r0, [pc, #44]	; (8000b44 <LCD_SendData+0x64>)
 8000b18:	f003 f997 	bl	8003e4a <HAL_SPI_Transmit>
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 8000b1c:	4b07      	ldr	r3, [pc, #28]	; (8000b3c <LCD_SendData+0x5c>)
 8000b1e:	6818      	ldr	r0, [r3, #0]
 8000b20:	4b07      	ldr	r3, [pc, #28]	; (8000b40 <LCD_SendData+0x60>)
 8000b22:	881b      	ldrh	r3, [r3, #0]
 8000b24:	2201      	movs	r2, #1
 8000b26:	4619      	mov	r1, r3
 8000b28:	f002 fb9c 	bl	8003264 <HAL_GPIO_WritePin>
}
 8000b2c:	bf00      	nop
 8000b2e:	3710      	adds	r7, #16
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000170 	.word	0x20000170
 8000b38:	20000174 	.word	0x20000174
 8000b3c:	20000168 	.word	0x20000168
 8000b40:	2000016c 	.word	0x2000016c
 8000b44:	20000110 	.word	0x20000110

08000b48 <LCD_SendDataMulti>:
//2.2 Write multiple/DMA
void LCD_SendDataMulti(uint16_t Colordata, uint32_t size) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	6039      	str	r1, [r7, #0]
 8000b52:	80fb      	strh	r3, [r7, #6]
	uint8_t colorL, colorH;

	//Set DC LOW for DATA mode
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
 8000b54:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <LCD_SendDataMulti+0x54>)
 8000b56:	6818      	ldr	r0, [r3, #0]
 8000b58:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <LCD_SendDataMulti+0x58>)
 8000b5a:	881b      	ldrh	r3, [r3, #0]
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	4619      	mov	r1, r3
 8000b60:	f002 fb80 	bl	8003264 <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 8000b64:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <LCD_SendDataMulti+0x5c>)
 8000b66:	6818      	ldr	r0, [r3, #0]
 8000b68:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <LCD_SendDataMulti+0x60>)
 8000b6a:	881b      	ldrh	r3, [r3, #0]
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	4619      	mov	r1, r3
 8000b70:	f002 fb78 	bl	8003264 <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&lcdSPIhandle, (uint8_t*) &Colordata, size, 1000);
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	b29a      	uxth	r2, r3
 8000b78:	1db9      	adds	r1, r7, #6
 8000b7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b7e:	480b      	ldr	r0, [pc, #44]	; (8000bac <LCD_SendDataMulti+0x64>)
 8000b80:	f003 f963 	bl	8003e4a <HAL_SPI_Transmit>
	//Wait for end of DMA transfer
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 8000b84:	4b07      	ldr	r3, [pc, #28]	; (8000ba4 <LCD_SendDataMulti+0x5c>)
 8000b86:	6818      	ldr	r0, [r3, #0]
 8000b88:	4b07      	ldr	r3, [pc, #28]	; (8000ba8 <LCD_SendDataMulti+0x60>)
 8000b8a:	881b      	ldrh	r3, [r3, #0]
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	4619      	mov	r1, r3
 8000b90:	f002 fb68 	bl	8003264 <HAL_GPIO_WritePin>
}
 8000b94:	bf00      	nop
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20000170 	.word	0x20000170
 8000ba0:	20000174 	.word	0x20000174
 8000ba4:	20000168 	.word	0x20000168
 8000ba8:	2000016c 	.word	0x2000016c
 8000bac:	20000110 	.word	0x20000110

08000bb0 <LCD_SetCursorPosition>:

//3. Set cursor position
void LCD_SetCursorPosition(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8000bb0:	b590      	push	{r4, r7, lr}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4604      	mov	r4, r0
 8000bb8:	4608      	mov	r0, r1
 8000bba:	4611      	mov	r1, r2
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	4623      	mov	r3, r4
 8000bc0:	80fb      	strh	r3, [r7, #6]
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	80bb      	strh	r3, [r7, #4]
 8000bc6:	460b      	mov	r3, r1
 8000bc8:	807b      	strh	r3, [r7, #2]
 8000bca:	4613      	mov	r3, r2
 8000bcc:	803b      	strh	r3, [r7, #0]

	LCD_SendCommand(HX8357_CASET);
 8000bce:	202a      	movs	r0, #42	; 0x2a
 8000bd0:	f7ff ff52 	bl	8000a78 <LCD_SendCommand>
	LCD_SendData(x1 >> 8);
 8000bd4:	88fb      	ldrh	r3, [r7, #6]
 8000bd6:	0a1b      	lsrs	r3, r3, #8
 8000bd8:	b29b      	uxth	r3, r3
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff ff7f 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(x1 & 0xFF);
 8000be2:	88fb      	ldrh	r3, [r7, #6]
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff ff7a 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(x2 >> 8);
 8000bec:	887b      	ldrh	r3, [r7, #2]
 8000bee:	0a1b      	lsrs	r3, r3, #8
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff ff73 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(x2 & 0xFF);
 8000bfa:	887b      	ldrh	r3, [r7, #2]
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff ff6e 	bl	8000ae0 <LCD_SendData>

	LCD_SendCommand(HX8357_PASET);
 8000c04:	202b      	movs	r0, #43	; 0x2b
 8000c06:	f7ff ff37 	bl	8000a78 <LCD_SendCommand>
	LCD_SendData(y1 >> 8);
 8000c0a:	88bb      	ldrh	r3, [r7, #4]
 8000c0c:	0a1b      	lsrs	r3, r3, #8
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff ff64 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(y1 & 0xFF);
 8000c18:	88bb      	ldrh	r3, [r7, #4]
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff ff5f 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(y2 >> 8);
 8000c22:	883b      	ldrh	r3, [r7, #0]
 8000c24:	0a1b      	lsrs	r3, r3, #8
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff ff58 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(y2 & 0xFF);
 8000c30:	883b      	ldrh	r3, [r7, #0]
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff ff53 	bl	8000ae0 <LCD_SendData>
	LCD_SendCommand(HX8357_RAMWR);
 8000c3a:	202c      	movs	r0, #44	; 0x2c
 8000c3c:	f7ff ff1c 	bl	8000a78 <LCD_SendCommand>
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd90      	pop	{r4, r7, pc}

08000c48 <LCD_Init>:
//4. Initialise function
void LCD_Init(SPI_HandleTypeDef *spiLcdHandle, GPIO_TypeDef *csPORT,
		uint16_t csPIN, GPIO_TypeDef *dcPORT, uint16_t dcPIN,
		GPIO_TypeDef *resetPORT, uint16_t resetPIN) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	603b      	str	r3, [r7, #0]
 8000c54:	4613      	mov	r3, r2
 8000c56:	80fb      	strh	r3, [r7, #6]
	//Copy SPI settings
	memcpy(&lcdSPIhandle, spiLcdHandle, sizeof(*spiLcdHandle));
 8000c58:	2258      	movs	r2, #88	; 0x58
 8000c5a:	68f9      	ldr	r1, [r7, #12]
 8000c5c:	489e      	ldr	r0, [pc, #632]	; (8000ed8 <LCD_Init+0x290>)
 8000c5e:	f003 fadb 	bl	8004218 <memcpy>
	//CS pin
	tftCS_GPIO = csPORT;
 8000c62:	4a9e      	ldr	r2, [pc, #632]	; (8000edc <LCD_Init+0x294>)
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	6013      	str	r3, [r2, #0]
	tftCS_PIN = csPIN;
 8000c68:	4a9d      	ldr	r2, [pc, #628]	; (8000ee0 <LCD_Init+0x298>)
 8000c6a:	88fb      	ldrh	r3, [r7, #6]
 8000c6c:	8013      	strh	r3, [r2, #0]
	//DC pin
	tftDC_GPIO = dcPORT;
 8000c6e:	4a9d      	ldr	r2, [pc, #628]	; (8000ee4 <LCD_Init+0x29c>)
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	6013      	str	r3, [r2, #0]
	tftDC_PIN = dcPIN;
 8000c74:	4a9c      	ldr	r2, [pc, #624]	; (8000ee8 <LCD_Init+0x2a0>)
 8000c76:	8b3b      	ldrh	r3, [r7, #24]
 8000c78:	8013      	strh	r3, [r2, #0]
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 8000c7a:	4b98      	ldr	r3, [pc, #608]	; (8000edc <LCD_Init+0x294>)
 8000c7c:	6818      	ldr	r0, [r3, #0]
 8000c7e:	4b98      	ldr	r3, [pc, #608]	; (8000ee0 <LCD_Init+0x298>)
 8000c80:	881b      	ldrh	r3, [r3, #0]
 8000c82:	2201      	movs	r2, #1
 8000c84:	4619      	mov	r1, r3
 8000c86:	f002 faed 	bl	8003264 <HAL_GPIO_WritePin>
	//RESET pin
	tftRESET_GPIO = resetPORT;
 8000c8a:	4a98      	ldr	r2, [pc, #608]	; (8000eec <LCD_Init+0x2a4>)
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	6013      	str	r3, [r2, #0]
	tftRESET_PIN = resetPIN;
 8000c90:	4a97      	ldr	r2, [pc, #604]	; (8000ef0 <LCD_Init+0x2a8>)
 8000c92:	8c3b      	ldrh	r3, [r7, #32]
 8000c94:	8013      	strh	r3, [r2, #0]
	HAL_GPIO_WritePin(resetPORT, resetPIN, GPIO_PIN_SET);  //Turn LCD ON
 8000c96:	8c3b      	ldrh	r3, [r7, #32]
 8000c98:	2201      	movs	r2, #1
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	69f8      	ldr	r0, [r7, #28]
 8000c9e:	f002 fae1 	bl	8003264 <HAL_GPIO_WritePin>

	LCD_SendCommand(HX8357_SWRESET);
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	f7ff fee8 	bl	8000a78 <LCD_SendCommand>
	LCD_SendCommand(0x80);
 8000ca8:	2080      	movs	r0, #128	; 0x80
 8000caa:	f7ff fee5 	bl	8000a78 <LCD_SendCommand>
	HAL_Delay(10);
 8000cae:	200a      	movs	r0, #10
 8000cb0:	f001 fc3c 	bl	800252c <HAL_Delay>
	LCD_SendCommand(HX8357D_SETC);
 8000cb4:	20b9      	movs	r0, #185	; 0xb9
 8000cb6:	f7ff fedf 	bl	8000a78 <LCD_SendCommand>
	LCD_SendData(0xFF);
 8000cba:	20ff      	movs	r0, #255	; 0xff
 8000cbc:	f7ff ff10 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x83);
 8000cc0:	2083      	movs	r0, #131	; 0x83
 8000cc2:	f7ff ff0d 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x57);
 8000cc6:	2057      	movs	r0, #87	; 0x57
 8000cc8:	f7ff ff0a 	bl	8000ae0 <LCD_SendData>
	LCD_SendCommand(0xFF);
 8000ccc:	20ff      	movs	r0, #255	; 0xff
 8000cce:	f7ff fed3 	bl	8000a78 <LCD_SendCommand>
	LCD_SendCommand(0x80);
 8000cd2:	2080      	movs	r0, #128	; 0x80
 8000cd4:	f7ff fed0 	bl	8000a78 <LCD_SendCommand>
	HAL_Delay(300);
 8000cd8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000cdc:	f001 fc26 	bl	800252c <HAL_Delay>
	LCD_SendCommand(HX8357_SETRGB);
 8000ce0:	20b3      	movs	r0, #179	; 0xb3
 8000ce2:	f7ff fec9 	bl	8000a78 <LCD_SendCommand>
	LCD_SendData(0x80);
 8000ce6:	2080      	movs	r0, #128	; 0x80
 8000ce8:	f7ff fefa 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x00);
 8000cec:	2000      	movs	r0, #0
 8000cee:	f7ff fef7 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x06);
 8000cf2:	2006      	movs	r0, #6
 8000cf4:	f7ff fef4 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x06);
 8000cf8:	2006      	movs	r0, #6
 8000cfa:	f7ff fef1 	bl	8000ae0 <LCD_SendData>
	LCD_SendCommand(HX8357D_SETCOM);
 8000cfe:	20b6      	movs	r0, #182	; 0xb6
 8000d00:	f7ff feba 	bl	8000a78 <LCD_SendCommand>
	LCD_SendData(0x25);
 8000d04:	2025      	movs	r0, #37	; 0x25
 8000d06:	f7ff feeb 	bl	8000ae0 <LCD_SendData>
	LCD_SendCommand(HX8357_SETOSC);
 8000d0a:	20b0      	movs	r0, #176	; 0xb0
 8000d0c:	f7ff feb4 	bl	8000a78 <LCD_SendCommand>
	LCD_SendData(0x68);
 8000d10:	2068      	movs	r0, #104	; 0x68
 8000d12:	f7ff fee5 	bl	8000ae0 <LCD_SendData>
	LCD_SendCommand(HX8357_SETPANEL);
 8000d16:	20cc      	movs	r0, #204	; 0xcc
 8000d18:	f7ff feae 	bl	8000a78 <LCD_SendCommand>
	LCD_SendData(0x05);
 8000d1c:	2005      	movs	r0, #5
 8000d1e:	f7ff fedf 	bl	8000ae0 <LCD_SendData>
	LCD_SendCommand(HX8357_SETPWR1);
 8000d22:	20b1      	movs	r0, #177	; 0xb1
 8000d24:	f7ff fea8 	bl	8000a78 <LCD_SendCommand>
	LCD_SendData(0x00);
 8000d28:	2000      	movs	r0, #0
 8000d2a:	f7ff fed9 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x15);
 8000d2e:	2015      	movs	r0, #21
 8000d30:	f7ff fed6 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x1C);
 8000d34:	201c      	movs	r0, #28
 8000d36:	f7ff fed3 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x1C);
 8000d3a:	201c      	movs	r0, #28
 8000d3c:	f7ff fed0 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x83);
 8000d40:	2083      	movs	r0, #131	; 0x83
 8000d42:	f7ff fecd 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0xAA);
 8000d46:	20aa      	movs	r0, #170	; 0xaa
 8000d48:	f7ff feca 	bl	8000ae0 <LCD_SendData>
	LCD_SendCommand(HX8357D_SETSTBA);
 8000d4c:	20c0      	movs	r0, #192	; 0xc0
 8000d4e:	f7ff fe93 	bl	8000a78 <LCD_SendCommand>
	LCD_SendData(0x50);
 8000d52:	2050      	movs	r0, #80	; 0x50
 8000d54:	f7ff fec4 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x50);
 8000d58:	2050      	movs	r0, #80	; 0x50
 8000d5a:	f7ff fec1 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x01);
 8000d5e:	2001      	movs	r0, #1
 8000d60:	f7ff febe 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x3C);
 8000d64:	203c      	movs	r0, #60	; 0x3c
 8000d66:	f7ff febb 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x1E);
 8000d6a:	201e      	movs	r0, #30
 8000d6c:	f7ff feb8 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x08);
 8000d70:	2008      	movs	r0, #8
 8000d72:	f7ff feb5 	bl	8000ae0 <LCD_SendData>
	LCD_SendCommand(HX8357D_SETCYC);
 8000d76:	20b4      	movs	r0, #180	; 0xb4
 8000d78:	f7ff fe7e 	bl	8000a78 <LCD_SendCommand>
	LCD_SendData(0x02);
 8000d7c:	2002      	movs	r0, #2
 8000d7e:	f7ff feaf 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x40);
 8000d82:	2040      	movs	r0, #64	; 0x40
 8000d84:	f7ff feac 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x00);
 8000d88:	2000      	movs	r0, #0
 8000d8a:	f7ff fea9 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x2A);
 8000d8e:	202a      	movs	r0, #42	; 0x2a
 8000d90:	f7ff fea6 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x2A);
 8000d94:	202a      	movs	r0, #42	; 0x2a
 8000d96:	f7ff fea3 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x0D);
 8000d9a:	200d      	movs	r0, #13
 8000d9c:	f7ff fea0 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x78);
 8000da0:	2078      	movs	r0, #120	; 0x78
 8000da2:	f7ff fe9d 	bl	8000ae0 <LCD_SendData>
	LCD_SendCommand(HX8357D_SETGAMMA);
 8000da6:	20e0      	movs	r0, #224	; 0xe0
 8000da8:	f7ff fe66 	bl	8000a78 <LCD_SendCommand>

	LCD_SendData(0x02);
 8000dac:	2002      	movs	r0, #2
 8000dae:	f7ff fe97 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x0A);
 8000db2:	200a      	movs	r0, #10
 8000db4:	f7ff fe94 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x11);
 8000db8:	2011      	movs	r0, #17
 8000dba:	f7ff fe91 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x1D);
 8000dbe:	201d      	movs	r0, #29
 8000dc0:	f7ff fe8e 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x23);
 8000dc4:	2023      	movs	r0, #35	; 0x23
 8000dc6:	f7ff fe8b 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x35);
 8000dca:	2035      	movs	r0, #53	; 0x35
 8000dcc:	f7ff fe88 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x41);
 8000dd0:	2041      	movs	r0, #65	; 0x41
 8000dd2:	f7ff fe85 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x4b);
 8000dd6:	204b      	movs	r0, #75	; 0x4b
 8000dd8:	f7ff fe82 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x4b);
 8000ddc:	204b      	movs	r0, #75	; 0x4b
 8000dde:	f7ff fe7f 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x42);
 8000de2:	2042      	movs	r0, #66	; 0x42
 8000de4:	f7ff fe7c 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x3A);
 8000de8:	203a      	movs	r0, #58	; 0x3a
 8000dea:	f7ff fe79 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x27);
 8000dee:	2027      	movs	r0, #39	; 0x27
 8000df0:	f7ff fe76 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x1B);
 8000df4:	201b      	movs	r0, #27
 8000df6:	f7ff fe73 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x08);
 8000dfa:	2008      	movs	r0, #8
 8000dfc:	f7ff fe70 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x09);
 8000e00:	2009      	movs	r0, #9
 8000e02:	f7ff fe6d 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x03);
 8000e06:	2003      	movs	r0, #3
 8000e08:	f7ff fe6a 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x02);
 8000e0c:	2002      	movs	r0, #2
 8000e0e:	f7ff fe67 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x0A);
 8000e12:	200a      	movs	r0, #10
 8000e14:	f7ff fe64 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x11);
 8000e18:	2011      	movs	r0, #17
 8000e1a:	f7ff fe61 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x1d);
 8000e1e:	201d      	movs	r0, #29
 8000e20:	f7ff fe5e 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x23);
 8000e24:	2023      	movs	r0, #35	; 0x23
 8000e26:	f7ff fe5b 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x35);
 8000e2a:	2035      	movs	r0, #53	; 0x35
 8000e2c:	f7ff fe58 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x41);
 8000e30:	2041      	movs	r0, #65	; 0x41
 8000e32:	f7ff fe55 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x4b);
 8000e36:	204b      	movs	r0, #75	; 0x4b
 8000e38:	f7ff fe52 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x4b);
 8000e3c:	204b      	movs	r0, #75	; 0x4b
 8000e3e:	f7ff fe4f 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x42);
 8000e42:	2042      	movs	r0, #66	; 0x42
 8000e44:	f7ff fe4c 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x3A);
 8000e48:	203a      	movs	r0, #58	; 0x3a
 8000e4a:	f7ff fe49 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x27);
 8000e4e:	2027      	movs	r0, #39	; 0x27
 8000e50:	f7ff fe46 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x1B);
 8000e54:	201b      	movs	r0, #27
 8000e56:	f7ff fe43 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x08);
 8000e5a:	2008      	movs	r0, #8
 8000e5c:	f7ff fe40 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x09);
 8000e60:	2009      	movs	r0, #9
 8000e62:	f7ff fe3d 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x03);
 8000e66:	2003      	movs	r0, #3
 8000e68:	f7ff fe3a 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x00);
 8000e6c:	2000      	movs	r0, #0
 8000e6e:	f7ff fe37 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x01);
 8000e72:	2001      	movs	r0, #1
 8000e74:	f7ff fe34 	bl	8000ae0 <LCD_SendData>

	LCD_SendCommand(HX8357_COLMOD);
 8000e78:	203a      	movs	r0, #58	; 0x3a
 8000e7a:	f7ff fdfd 	bl	8000a78 <LCD_SendCommand>
	LCD_SendData(0x55);
 8000e7e:	2055      	movs	r0, #85	; 0x55
 8000e80:	f7ff fe2e 	bl	8000ae0 <LCD_SendData>
	LCD_SendCommand(HX8357_MADCTL);
 8000e84:	2036      	movs	r0, #54	; 0x36
 8000e86:	f7ff fdf7 	bl	8000a78 <LCD_SendCommand>
	LCD_SendData(0xC0);
 8000e8a:	20c0      	movs	r0, #192	; 0xc0
 8000e8c:	f7ff fe28 	bl	8000ae0 <LCD_SendData>
	LCD_SendCommand(HX8357_TEON);
 8000e90:	2035      	movs	r0, #53	; 0x35
 8000e92:	f7ff fdf1 	bl	8000a78 <LCD_SendCommand>
	LCD_SendData(0x00);
 8000e96:	2000      	movs	r0, #0
 8000e98:	f7ff fe22 	bl	8000ae0 <LCD_SendData>
	LCD_SendCommand(HX8357_TEARLINE);
 8000e9c:	2044      	movs	r0, #68	; 0x44
 8000e9e:	f7ff fdeb 	bl	8000a78 <LCD_SendCommand>
	LCD_SendDataMulti(0x00, 0x02);
 8000ea2:	2102      	movs	r1, #2
 8000ea4:	2000      	movs	r0, #0
 8000ea6:	f7ff fe4f 	bl	8000b48 <LCD_SendDataMulti>
	LCD_SendCommand(HX8357_SLPOUT);
 8000eaa:	2011      	movs	r0, #17
 8000eac:	f7ff fde4 	bl	8000a78 <LCD_SendCommand>
	LCD_SendCommand(0x80);
 8000eb0:	2080      	movs	r0, #128	; 0x80
 8000eb2:	f7ff fde1 	bl	8000a78 <LCD_SendCommand>
	HAL_Delay(150);
 8000eb6:	2096      	movs	r0, #150	; 0x96
 8000eb8:	f001 fb38 	bl	800252c <HAL_Delay>
	LCD_SendCommand(HX8357_DISPON);
 8000ebc:	2029      	movs	r0, #41	; 0x29
 8000ebe:	f7ff fddb 	bl	8000a78 <LCD_SendCommand>
	LCD_SendCommand(0x80);
 8000ec2:	2080      	movs	r0, #128	; 0x80
 8000ec4:	f7ff fdd8 	bl	8000a78 <LCD_SendCommand>
	HAL_Delay(50);
 8000ec8:	2032      	movs	r0, #50	; 0x32
 8000eca:	f001 fb2f 	bl	800252c <HAL_Delay>
}
 8000ece:	bf00      	nop
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000110 	.word	0x20000110
 8000edc:	20000168 	.word	0x20000168
 8000ee0:	2000016c 	.word	0x2000016c
 8000ee4:	20000170 	.word	0x20000170
 8000ee8:	20000174 	.word	0x20000174
 8000eec:	20000178 	.word	0x20000178
 8000ef0:	2000017c 	.word	0x2000017c

08000ef4 <LCD_DrawPixel>:

//5. Write data to a single pixel
void LCD_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	80fb      	strh	r3, [r7, #6]
 8000efe:	460b      	mov	r3, r1
 8000f00:	80bb      	strh	r3, [r7, #4]
 8000f02:	4613      	mov	r3, r2
 8000f04:	807b      	strh	r3, [r7, #2]
	LCD_SetCursorPosition(x, y, x, y);
 8000f06:	88bb      	ldrh	r3, [r7, #4]
 8000f08:	88fa      	ldrh	r2, [r7, #6]
 8000f0a:	88b9      	ldrh	r1, [r7, #4]
 8000f0c:	88f8      	ldrh	r0, [r7, #6]
 8000f0e:	f7ff fe4f 	bl	8000bb0 <LCD_SetCursorPosition>
	LCD_SendData(color >> 8);
 8000f12:	887b      	ldrh	r3, [r7, #2]
 8000f14:	0a1b      	lsrs	r3, r3, #8
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff fde0 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(color & 0xFF);
 8000f20:	887b      	ldrh	r3, [r7, #2]
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff fddb 	bl	8000ae0 <LCD_SendData>
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <LCD_Fill>:

//6. Fill the entire screen with a background color
void LCD_Fill(uint16_t color) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	80fb      	strh	r3, [r7, #6]
	uint32_t n = LCD_PIXEL_COUNT;
 8000f3e:	f44f 3316 	mov.w	r3, #153600	; 0x25800
 8000f42:	60fb      	str	r3, [r7, #12]
	uint16_t myColor = 0xFF;
 8000f44:	23ff      	movs	r3, #255	; 0xff
 8000f46:	817b      	strh	r3, [r7, #10]

	if (rotationNum == 1 || rotationNum == 3) {
 8000f48:	4b1b      	ldr	r3, [pc, #108]	; (8000fb8 <LCD_Fill+0x84>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d003      	beq.n	8000f58 <LCD_Fill+0x24>
 8000f50:	4b19      	ldr	r3, [pc, #100]	; (8000fb8 <LCD_Fill+0x84>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	2b03      	cmp	r3, #3
 8000f56:	d108      	bne.n	8000f6a <LCD_Fill+0x36>
		LCD_SetCursorPosition(0, 0, HX8357_TFTWIDTH - 1, HX8357_TFTHEIGHT - 1);
 8000f58:	f240 13df 	movw	r3, #479	; 0x1df
 8000f5c:	f240 123f 	movw	r2, #319	; 0x13f
 8000f60:	2100      	movs	r1, #0
 8000f62:	2000      	movs	r0, #0
 8000f64:	f7ff fe24 	bl	8000bb0 <LCD_SetCursorPosition>
 8000f68:	e00f      	b.n	8000f8a <LCD_Fill+0x56>
	} else if (rotationNum == 2 || rotationNum == 4) {
 8000f6a:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <LCD_Fill+0x84>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	d003      	beq.n	8000f7a <LCD_Fill+0x46>
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <LCD_Fill+0x84>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	2b04      	cmp	r3, #4
 8000f78:	d117      	bne.n	8000faa <LCD_Fill+0x76>
		LCD_SetCursorPosition(0, 0, HX8357_TFTHEIGHT - 1, HX8357_TFTWIDTH - 1);
 8000f7a:	f240 133f 	movw	r3, #319	; 0x13f
 8000f7e:	f240 12df 	movw	r2, #479	; 0x1df
 8000f82:	2100      	movs	r1, #0
 8000f84:	2000      	movs	r0, #0
 8000f86:	f7ff fe13 	bl	8000bb0 <LCD_SetCursorPosition>
	}

	while (n) {
 8000f8a:	e00e      	b.n	8000faa <LCD_Fill+0x76>
		n--;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	60fb      	str	r3, [r7, #12]
		LCD_SendData(color >> 8);
 8000f92:	88fb      	ldrh	r3, [r7, #6]
 8000f94:	0a1b      	lsrs	r3, r3, #8
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff fda0 	bl	8000ae0 <LCD_SendData>
		LCD_SendData(color & 0xff);
 8000fa0:	88fb      	ldrh	r3, [r7, #6]
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fd9b 	bl	8000ae0 <LCD_SendData>
	while (n) {
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d1ed      	bne.n	8000f8c <LCD_Fill+0x58>
	}
}
 8000fb0:	bf00      	nop
 8000fb2:	3710      	adds	r7, #16
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000000 	.word	0x20000000

08000fbc <LCD_Fill_Rect>:
//7. Rectangle drawing functions
void LCD_Fill_Rect(unsigned int x0, unsigned int y0, unsigned int x1,
		unsigned int y1, uint16_t color) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
 8000fc8:	603b      	str	r3, [r7, #0]
	uint32_t n = ((x1 + 1) - x0) * ((y1 + 1) - y0);
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	6839      	ldr	r1, [r7, #0]
 8000fd4:	68ba      	ldr	r2, [r7, #8]
 8000fd6:	1a8a      	subs	r2, r1, r2
 8000fd8:	3201      	adds	r2, #1
 8000fda:	fb02 f303 	mul.w	r3, r2, r3
 8000fde:	617b      	str	r3, [r7, #20]
	if (n > LCD_PIXEL_COUNT)
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	f5b3 3f16 	cmp.w	r3, #153600	; 0x25800
 8000fe6:	d902      	bls.n	8000fee <LCD_Fill_Rect+0x32>
		n = LCD_PIXEL_COUNT;
 8000fe8:	f44f 3316 	mov.w	r3, #153600	; 0x25800
 8000fec:	617b      	str	r3, [r7, #20]
	LCD_SetCursorPosition(x0, y0, x1, y1);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	b298      	uxth	r0, r3
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	b299      	uxth	r1, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	b29a      	uxth	r2, r3
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	f7ff fdd7 	bl	8000bb0 <LCD_SetCursorPosition>
	while (n) {
 8001002:	e00e      	b.n	8001022 <LCD_Fill_Rect+0x66>
		n--;
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	3b01      	subs	r3, #1
 8001008:	617b      	str	r3, [r7, #20]
		LCD_SendData(color >> 8);
 800100a:	8c3b      	ldrh	r3, [r7, #32]
 800100c:	0a1b      	lsrs	r3, r3, #8
 800100e:	b29b      	uxth	r3, r3
 8001010:	b2db      	uxtb	r3, r3
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff fd64 	bl	8000ae0 <LCD_SendData>
		LCD_SendData(color & 0xff);
 8001018:	8c3b      	ldrh	r3, [r7, #32]
 800101a:	b2db      	uxtb	r3, r3
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff fd5f 	bl	8000ae0 <LCD_SendData>
	while (n) {
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d1ed      	bne.n	8001004 <LCD_Fill_Rect+0x48>
	}
}
 8001028:	bf00      	nop
 800102a:	3718      	adds	r7, #24
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <LCD_drawCircle>:

//8. Circle drawing functions
void LCD_drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 8001030:	b590      	push	{r4, r7, lr}
 8001032:	b087      	sub	sp, #28
 8001034:	af00      	add	r7, sp, #0
 8001036:	4604      	mov	r4, r0
 8001038:	4608      	mov	r0, r1
 800103a:	4611      	mov	r1, r2
 800103c:	461a      	mov	r2, r3
 800103e:	4623      	mov	r3, r4
 8001040:	80fb      	strh	r3, [r7, #6]
 8001042:	4603      	mov	r3, r0
 8001044:	80bb      	strh	r3, [r7, #4]
 8001046:	460b      	mov	r3, r1
 8001048:	807b      	strh	r3, [r7, #2]
 800104a:	4613      	mov	r3, r2
 800104c:	803b      	strh	r3, [r7, #0]
	int16_t f = 1 - r;
 800104e:	887b      	ldrh	r3, [r7, #2]
 8001050:	f1c3 0301 	rsb	r3, r3, #1
 8001054:	b29b      	uxth	r3, r3
 8001056:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8001058:	2301      	movs	r3, #1
 800105a:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 800105c:	887b      	ldrh	r3, [r7, #2]
 800105e:	461a      	mov	r2, r3
 8001060:	03d2      	lsls	r2, r2, #15
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	b29b      	uxth	r3, r3
 8001068:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 800106e:	887b      	ldrh	r3, [r7, #2]
 8001070:	81fb      	strh	r3, [r7, #14]

	LCD_DrawPixel(x0, y0 + r, color);
 8001072:	88f8      	ldrh	r0, [r7, #6]
 8001074:	88ba      	ldrh	r2, [r7, #4]
 8001076:	887b      	ldrh	r3, [r7, #2]
 8001078:	4413      	add	r3, r2
 800107a:	b29b      	uxth	r3, r3
 800107c:	883a      	ldrh	r2, [r7, #0]
 800107e:	4619      	mov	r1, r3
 8001080:	f7ff ff38 	bl	8000ef4 <LCD_DrawPixel>
	LCD_DrawPixel(x0, y0 - r, color);
 8001084:	88f8      	ldrh	r0, [r7, #6]
 8001086:	88ba      	ldrh	r2, [r7, #4]
 8001088:	887b      	ldrh	r3, [r7, #2]
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	b29b      	uxth	r3, r3
 800108e:	883a      	ldrh	r2, [r7, #0]
 8001090:	4619      	mov	r1, r3
 8001092:	f7ff ff2f 	bl	8000ef4 <LCD_DrawPixel>
	LCD_DrawPixel(x0 + r, y0, color);
 8001096:	88fa      	ldrh	r2, [r7, #6]
 8001098:	887b      	ldrh	r3, [r7, #2]
 800109a:	4413      	add	r3, r2
 800109c:	b29b      	uxth	r3, r3
 800109e:	88b9      	ldrh	r1, [r7, #4]
 80010a0:	883a      	ldrh	r2, [r7, #0]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff ff26 	bl	8000ef4 <LCD_DrawPixel>
	LCD_DrawPixel(x0 - r, y0, color);
 80010a8:	88fa      	ldrh	r2, [r7, #6]
 80010aa:	887b      	ldrh	r3, [r7, #2]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	88b9      	ldrh	r1, [r7, #4]
 80010b2:	883a      	ldrh	r2, [r7, #0]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff1d 	bl	8000ef4 <LCD_DrawPixel>

	while (x < y) {
 80010ba:	e081      	b.n	80011c0 <LCD_drawCircle+0x190>
		if (f >= 0) {
 80010bc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	db0e      	blt.n	80010e2 <LCD_drawCircle+0xb2>
			y--;
 80010c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	3b01      	subs	r3, #1
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 80010d0:	8a7b      	ldrh	r3, [r7, #18]
 80010d2:	3302      	adds	r3, #2
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 80010d8:	8afa      	ldrh	r2, [r7, #22]
 80010da:	8a7b      	ldrh	r3, [r7, #18]
 80010dc:	4413      	add	r3, r2
 80010de:	b29b      	uxth	r3, r3
 80010e0:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 80010e2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80010e6:	b29b      	uxth	r3, r3
 80010e8:	3301      	adds	r3, #1
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 80010ee:	8abb      	ldrh	r3, [r7, #20]
 80010f0:	3302      	adds	r3, #2
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 80010f6:	8afa      	ldrh	r2, [r7, #22]
 80010f8:	8abb      	ldrh	r3, [r7, #20]
 80010fa:	4413      	add	r3, r2
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	82fb      	strh	r3, [r7, #22]

		LCD_DrawPixel(x0 + x, y0 + y, color);
 8001100:	88fa      	ldrh	r2, [r7, #6]
 8001102:	8a3b      	ldrh	r3, [r7, #16]
 8001104:	4413      	add	r3, r2
 8001106:	b298      	uxth	r0, r3
 8001108:	88ba      	ldrh	r2, [r7, #4]
 800110a:	89fb      	ldrh	r3, [r7, #14]
 800110c:	4413      	add	r3, r2
 800110e:	b29b      	uxth	r3, r3
 8001110:	883a      	ldrh	r2, [r7, #0]
 8001112:	4619      	mov	r1, r3
 8001114:	f7ff feee 	bl	8000ef4 <LCD_DrawPixel>
		LCD_DrawPixel(x0 - x, y0 + y, color);
 8001118:	88fa      	ldrh	r2, [r7, #6]
 800111a:	8a3b      	ldrh	r3, [r7, #16]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	b298      	uxth	r0, r3
 8001120:	88ba      	ldrh	r2, [r7, #4]
 8001122:	89fb      	ldrh	r3, [r7, #14]
 8001124:	4413      	add	r3, r2
 8001126:	b29b      	uxth	r3, r3
 8001128:	883a      	ldrh	r2, [r7, #0]
 800112a:	4619      	mov	r1, r3
 800112c:	f7ff fee2 	bl	8000ef4 <LCD_DrawPixel>
		LCD_DrawPixel(x0 + x, y0 - y, color);
 8001130:	88fa      	ldrh	r2, [r7, #6]
 8001132:	8a3b      	ldrh	r3, [r7, #16]
 8001134:	4413      	add	r3, r2
 8001136:	b298      	uxth	r0, r3
 8001138:	88ba      	ldrh	r2, [r7, #4]
 800113a:	89fb      	ldrh	r3, [r7, #14]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	b29b      	uxth	r3, r3
 8001140:	883a      	ldrh	r2, [r7, #0]
 8001142:	4619      	mov	r1, r3
 8001144:	f7ff fed6 	bl	8000ef4 <LCD_DrawPixel>
		LCD_DrawPixel(x0 - x, y0 - y, color);
 8001148:	88fa      	ldrh	r2, [r7, #6]
 800114a:	8a3b      	ldrh	r3, [r7, #16]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	b298      	uxth	r0, r3
 8001150:	88ba      	ldrh	r2, [r7, #4]
 8001152:	89fb      	ldrh	r3, [r7, #14]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	b29b      	uxth	r3, r3
 8001158:	883a      	ldrh	r2, [r7, #0]
 800115a:	4619      	mov	r1, r3
 800115c:	f7ff feca 	bl	8000ef4 <LCD_DrawPixel>
		LCD_DrawPixel(x0 + y, y0 + x, color);
 8001160:	88fa      	ldrh	r2, [r7, #6]
 8001162:	89fb      	ldrh	r3, [r7, #14]
 8001164:	4413      	add	r3, r2
 8001166:	b298      	uxth	r0, r3
 8001168:	88ba      	ldrh	r2, [r7, #4]
 800116a:	8a3b      	ldrh	r3, [r7, #16]
 800116c:	4413      	add	r3, r2
 800116e:	b29b      	uxth	r3, r3
 8001170:	883a      	ldrh	r2, [r7, #0]
 8001172:	4619      	mov	r1, r3
 8001174:	f7ff febe 	bl	8000ef4 <LCD_DrawPixel>
		LCD_DrawPixel(x0 - y, y0 + x, color);
 8001178:	88fa      	ldrh	r2, [r7, #6]
 800117a:	89fb      	ldrh	r3, [r7, #14]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	b298      	uxth	r0, r3
 8001180:	88ba      	ldrh	r2, [r7, #4]
 8001182:	8a3b      	ldrh	r3, [r7, #16]
 8001184:	4413      	add	r3, r2
 8001186:	b29b      	uxth	r3, r3
 8001188:	883a      	ldrh	r2, [r7, #0]
 800118a:	4619      	mov	r1, r3
 800118c:	f7ff feb2 	bl	8000ef4 <LCD_DrawPixel>
		LCD_DrawPixel(x0 + y, y0 - x, color);
 8001190:	88fa      	ldrh	r2, [r7, #6]
 8001192:	89fb      	ldrh	r3, [r7, #14]
 8001194:	4413      	add	r3, r2
 8001196:	b298      	uxth	r0, r3
 8001198:	88ba      	ldrh	r2, [r7, #4]
 800119a:	8a3b      	ldrh	r3, [r7, #16]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	b29b      	uxth	r3, r3
 80011a0:	883a      	ldrh	r2, [r7, #0]
 80011a2:	4619      	mov	r1, r3
 80011a4:	f7ff fea6 	bl	8000ef4 <LCD_DrawPixel>
		LCD_DrawPixel(x0 - y, y0 - x, color);
 80011a8:	88fa      	ldrh	r2, [r7, #6]
 80011aa:	89fb      	ldrh	r3, [r7, #14]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	b298      	uxth	r0, r3
 80011b0:	88ba      	ldrh	r2, [r7, #4]
 80011b2:	8a3b      	ldrh	r3, [r7, #16]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	883a      	ldrh	r2, [r7, #0]
 80011ba:	4619      	mov	r1, r3
 80011bc:	f7ff fe9a 	bl	8000ef4 <LCD_DrawPixel>
	while (x < y) {
 80011c0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80011c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	f6ff af77 	blt.w	80010bc <LCD_drawCircle+0x8c>
	}
}
 80011ce:	bf00      	nop
 80011d0:	371c      	adds	r7, #28
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd90      	pop	{r4, r7, pc}

080011d6 <LCD_drawLine>:
	fillCircleHelper(x0, y0, r, 3, 0, color);
}

//9. Line drawing functions
void LCD_drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
		uint16_t color) {
 80011d6:	b590      	push	{r4, r7, lr}
 80011d8:	b089      	sub	sp, #36	; 0x24
 80011da:	af00      	add	r7, sp, #0
 80011dc:	4604      	mov	r4, r0
 80011de:	4608      	mov	r0, r1
 80011e0:	4611      	mov	r1, r2
 80011e2:	461a      	mov	r2, r3
 80011e4:	4623      	mov	r3, r4
 80011e6:	80fb      	strh	r3, [r7, #6]
 80011e8:	4603      	mov	r3, r0
 80011ea:	80bb      	strh	r3, [r7, #4]
 80011ec:	460b      	mov	r3, r1
 80011ee:	807b      	strh	r3, [r7, #2]
 80011f0:	4613      	mov	r3, r2
 80011f2:	803b      	strh	r3, [r7, #0]
	int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80011f4:	f9b7 2000 	ldrsh.w	r2, [r7]
 80011f8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001202:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001206:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800120a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800120e:	1acb      	subs	r3, r1, r3
 8001210:	2b00      	cmp	r3, #0
 8001212:	bfb8      	it	lt
 8001214:	425b      	neglt	r3, r3
 8001216:	429a      	cmp	r2, r3
 8001218:	bfcc      	ite	gt
 800121a:	2301      	movgt	r3, #1
 800121c:	2300      	movle	r3, #0
 800121e:	b2db      	uxtb	r3, r3
 8001220:	837b      	strh	r3, [r7, #26]
	if (steep) {
 8001222:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d00b      	beq.n	8001242 <LCD_drawLine+0x6c>
		swap(x0, y0);
 800122a:	88fb      	ldrh	r3, [r7, #6]
 800122c:	833b      	strh	r3, [r7, #24]
 800122e:	88bb      	ldrh	r3, [r7, #4]
 8001230:	80fb      	strh	r3, [r7, #6]
 8001232:	8b3b      	ldrh	r3, [r7, #24]
 8001234:	80bb      	strh	r3, [r7, #4]
		swap(x1, y1);
 8001236:	887b      	ldrh	r3, [r7, #2]
 8001238:	82fb      	strh	r3, [r7, #22]
 800123a:	883b      	ldrh	r3, [r7, #0]
 800123c:	807b      	strh	r3, [r7, #2]
 800123e:	8afb      	ldrh	r3, [r7, #22]
 8001240:	803b      	strh	r3, [r7, #0]
	}

	if (x0 > x1) {
 8001242:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001246:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800124a:	429a      	cmp	r2, r3
 800124c:	dd0b      	ble.n	8001266 <LCD_drawLine+0x90>
		swap(x0, x1);
 800124e:	88fb      	ldrh	r3, [r7, #6]
 8001250:	82bb      	strh	r3, [r7, #20]
 8001252:	887b      	ldrh	r3, [r7, #2]
 8001254:	80fb      	strh	r3, [r7, #6]
 8001256:	8abb      	ldrh	r3, [r7, #20]
 8001258:	807b      	strh	r3, [r7, #2]
		swap(y0, y1);
 800125a:	88bb      	ldrh	r3, [r7, #4]
 800125c:	827b      	strh	r3, [r7, #18]
 800125e:	883b      	ldrh	r3, [r7, #0]
 8001260:	80bb      	strh	r3, [r7, #4]
 8001262:	8a7b      	ldrh	r3, [r7, #18]
 8001264:	803b      	strh	r3, [r7, #0]
	}

	int16_t dx, dy;
	dx = x1 - x0;
 8001266:	887a      	ldrh	r2, [r7, #2]
 8001268:	88fb      	ldrh	r3, [r7, #6]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	b29b      	uxth	r3, r3
 800126e:	823b      	strh	r3, [r7, #16]
	dy = abs(y1 - y0);
 8001270:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001274:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b00      	cmp	r3, #0
 800127c:	bfb8      	it	lt
 800127e:	425b      	neglt	r3, r3
 8001280:	81fb      	strh	r3, [r7, #14]

	int16_t err = dx / 2;
 8001282:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001286:	0fda      	lsrs	r2, r3, #31
 8001288:	4413      	add	r3, r2
 800128a:	105b      	asrs	r3, r3, #1
 800128c:	83fb      	strh	r3, [r7, #30]
	int16_t ystep;

	if (y0 < y1) {
 800128e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001292:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001296:	429a      	cmp	r2, r3
 8001298:	da02      	bge.n	80012a0 <LCD_drawLine+0xca>
		ystep = 1;
 800129a:	2301      	movs	r3, #1
 800129c:	83bb      	strh	r3, [r7, #28]
 800129e:	e02d      	b.n	80012fc <LCD_drawLine+0x126>
	} else {
		ystep = -1;
 80012a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012a4:	83bb      	strh	r3, [r7, #28]
	}

	for (; x0 <= x1; x0++) {
 80012a6:	e029      	b.n	80012fc <LCD_drawLine+0x126>
		if (steep) {
 80012a8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d006      	beq.n	80012be <LCD_drawLine+0xe8>
			LCD_DrawPixel(y0, x0, color);
 80012b0:	88bb      	ldrh	r3, [r7, #4]
 80012b2:	88f9      	ldrh	r1, [r7, #6]
 80012b4:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff fe1c 	bl	8000ef4 <LCD_DrawPixel>
 80012bc:	e005      	b.n	80012ca <LCD_drawLine+0xf4>
		} else {
			LCD_DrawPixel(x0, y0, color);
 80012be:	88fb      	ldrh	r3, [r7, #6]
 80012c0:	88b9      	ldrh	r1, [r7, #4]
 80012c2:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fe15 	bl	8000ef4 <LCD_DrawPixel>
		}
		err -= dy;
 80012ca:	8bfa      	ldrh	r2, [r7, #30]
 80012cc:	89fb      	ldrh	r3, [r7, #14]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	83fb      	strh	r3, [r7, #30]
		if (err < 0) {
 80012d4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	da09      	bge.n	80012f0 <LCD_drawLine+0x11a>
			y0 += ystep;
 80012dc:	88ba      	ldrh	r2, [r7, #4]
 80012de:	8bbb      	ldrh	r3, [r7, #28]
 80012e0:	4413      	add	r3, r2
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	80bb      	strh	r3, [r7, #4]
			err += dx;
 80012e6:	8bfa      	ldrh	r2, [r7, #30]
 80012e8:	8a3b      	ldrh	r3, [r7, #16]
 80012ea:	4413      	add	r3, r2
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	83fb      	strh	r3, [r7, #30]
	for (; x0 <= x1; x0++) {
 80012f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	3301      	adds	r3, #1
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	80fb      	strh	r3, [r7, #6]
 80012fc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001300:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001304:	429a      	cmp	r2, r3
 8001306:	ddcf      	ble.n	80012a8 <LCD_drawLine+0xd2>
		}
	}
}
 8001308:	bf00      	nop
 800130a:	3724      	adds	r7, #36	; 0x24
 800130c:	46bd      	mov	sp, r7
 800130e:	bd90      	pop	{r4, r7, pc}

08001310 <LCD_drawChar>:
	}
}

//11. Text printing functions
void LCD_drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size)
{
 8001310:	b5b0      	push	{r4, r5, r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af02      	add	r7, sp, #8
 8001316:	4604      	mov	r4, r0
 8001318:	4608      	mov	r0, r1
 800131a:	4611      	mov	r1, r2
 800131c:	461a      	mov	r2, r3
 800131e:	4623      	mov	r3, r4
 8001320:	80fb      	strh	r3, [r7, #6]
 8001322:	4603      	mov	r3, r0
 8001324:	80bb      	strh	r3, [r7, #4]
 8001326:	460b      	mov	r3, r1
 8001328:	70fb      	strb	r3, [r7, #3]
 800132a:	4613      	mov	r3, r2
 800132c:	803b      	strh	r3, [r7, #0]
	if(rotationNum == 1 || rotationNum ==3)
 800132e:	4b9b      	ldr	r3, [pc, #620]	; (800159c <LCD_drawChar+0x28c>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d003      	beq.n	800133e <LCD_drawChar+0x2e>
 8001336:	4b99      	ldr	r3, [pc, #612]	; (800159c <LCD_drawChar+0x28c>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	2b03      	cmp	r3, #3
 800133c:	d122      	bne.n	8001384 <LCD_drawChar+0x74>
	{
		if((x >= HX8357_TFTWIDTH)            || // Clip right
 800133e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001342:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001346:	f280 8122 	bge.w	800158e <LCD_drawChar+0x27e>
 800134a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800134e:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001352:	f280 811c 	bge.w	800158e <LCD_drawChar+0x27e>
     (y >= HX8357_TFTHEIGHT)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
 8001356:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800135a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800135e:	4613      	mov	r3, r2
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	4413      	add	r3, r2
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	440b      	add	r3, r1
 8001368:	3b01      	subs	r3, #1
     (y >= HX8357_TFTHEIGHT)           || // Clip bottom
 800136a:	2b00      	cmp	r3, #0
 800136c:	f2c0 810f 	blt.w	800158e <LCD_drawChar+0x27e>
     ((y + 8 * size - 1) < 0))   // Clip top
 8001370:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001374:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001378:	00db      	lsls	r3, r3, #3
 800137a:	4413      	add	r3, r2
 800137c:	3b01      	subs	r3, #1
     ((x + 6 * size - 1) < 0) || // Clip left
 800137e:	2b00      	cmp	r3, #0
 8001380:	da24      	bge.n	80013cc <LCD_drawChar+0xbc>
    return;
 8001382:	e104      	b.n	800158e <LCD_drawChar+0x27e>
	}
	else
	{
		if((y >= HX8357_TFTWIDTH)            || // Clip right
 8001384:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001388:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800138c:	f280 8101 	bge.w	8001592 <LCD_drawChar+0x282>
 8001390:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001394:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001398:	f280 80fb 	bge.w	8001592 <LCD_drawChar+0x282>
     (x >= HX8357_TFTHEIGHT)           || // Clip bottom
     ((y + 6 * size - 1) < 0) || // Clip left
 800139c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80013a0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80013a4:	4613      	mov	r3, r2
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	4413      	add	r3, r2
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	440b      	add	r3, r1
 80013ae:	3b01      	subs	r3, #1
     (x >= HX8357_TFTHEIGHT)           || // Clip bottom
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	f2c0 80ee 	blt.w	8001592 <LCD_drawChar+0x282>
     ((x + 8 * size - 1) < 0))   // Clip top
 80013b6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80013ba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	4413      	add	r3, r2
 80013c2:	3b01      	subs	r3, #1
     ((y + 6 * size - 1) < 0) || // Clip left
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	f2c0 80e4 	blt.w	8001592 <LCD_drawChar+0x282>
 80013ca:	e000      	b.n	80013ce <LCD_drawChar+0xbe>
		if((x >= HX8357_TFTWIDTH)            || // Clip right
 80013cc:	bf00      	nop
    return;
	}


  if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
 80013ce:	4b74      	ldr	r3, [pc, #464]	; (80015a0 <LCD_drawChar+0x290>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	f083 0301 	eor.w	r3, r3, #1
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d005      	beq.n	80013e8 <LCD_drawChar+0xd8>
 80013dc:	78fb      	ldrb	r3, [r7, #3]
 80013de:	2baf      	cmp	r3, #175	; 0xaf
 80013e0:	d902      	bls.n	80013e8 <LCD_drawChar+0xd8>
 80013e2:	78fb      	ldrb	r3, [r7, #3]
 80013e4:	3301      	adds	r3, #1
 80013e6:	70fb      	strb	r3, [r7, #3]

  for (int8_t i=0; i<6; i++ ) {
 80013e8:	2300      	movs	r3, #0
 80013ea:	73fb      	strb	r3, [r7, #15]
 80013ec:	e0c9      	b.n	8001582 <LCD_drawChar+0x272>
    uint8_t line;
    if (i == 5)
 80013ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013f2:	2b05      	cmp	r3, #5
 80013f4:	d102      	bne.n	80013fc <LCD_drawChar+0xec>
      line = 0x0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	73bb      	strb	r3, [r7, #14]
 80013fa:	e00b      	b.n	8001414 <LCD_drawChar+0x104>
    else
      line = pgm_read_byte(font1+(c*5)+i);
 80013fc:	78fa      	ldrb	r2, [r7, #3]
 80013fe:	4613      	mov	r3, r2
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	4413      	add	r3, r2
 8001404:	461a      	mov	r2, r3
 8001406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800140a:	4413      	add	r3, r2
 800140c:	4a65      	ldr	r2, [pc, #404]	; (80015a4 <LCD_drawChar+0x294>)
 800140e:	4413      	add	r3, r2
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 8001414:	2300      	movs	r3, #0
 8001416:	737b      	strb	r3, [r7, #13]
 8001418:	e0a8      	b.n	800156c <LCD_drawChar+0x25c>
      if (line & 0x1) {
 800141a:	7bbb      	ldrb	r3, [r7, #14]
 800141c:	f003 0301 	and.w	r3, r3, #1
 8001420:	2b00      	cmp	r3, #0
 8001422:	d04b      	beq.n	80014bc <LCD_drawChar+0x1ac>
        if (size == 1) // default size
 8001424:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001428:	2b01      	cmp	r3, #1
 800142a:	d110      	bne.n	800144e <LCD_drawChar+0x13e>
          LCD_DrawPixel(x+i, y+j, color);
 800142c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001430:	b29a      	uxth	r2, r3
 8001432:	88fb      	ldrh	r3, [r7, #6]
 8001434:	4413      	add	r3, r2
 8001436:	b298      	uxth	r0, r3
 8001438:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800143c:	b29a      	uxth	r2, r3
 800143e:	88bb      	ldrh	r3, [r7, #4]
 8001440:	4413      	add	r3, r2
 8001442:	b29b      	uxth	r3, r3
 8001444:	883a      	ldrh	r2, [r7, #0]
 8001446:	4619      	mov	r1, r3
 8001448:	f7ff fd54 	bl	8000ef4 <LCD_DrawPixel>
 800144c:	e085      	b.n	800155a <LCD_drawChar+0x24a>
        else {  // big size
          LCD_Fill_Rect(x+(i*size), y+(j*size), size + x+(i*size), size+1 + y+(j*size), color);
 800144e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001456:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 800145a:	fb01 f303 	mul.w	r3, r1, r3
 800145e:	4413      	add	r3, r2
 8001460:	4618      	mov	r0, r3
 8001462:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001466:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800146a:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 800146e:	fb01 f303 	mul.w	r3, r1, r3
 8001472:	4413      	add	r3, r2
 8001474:	461c      	mov	r4, r3
 8001476:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800147a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800147e:	441a      	add	r2, r3
 8001480:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001484:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8001488:	fb01 f303 	mul.w	r3, r1, r3
 800148c:	4413      	add	r3, r2
 800148e:	461d      	mov	r5, r3
 8001490:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001494:	1c5a      	adds	r2, r3, #1
 8001496:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800149a:	441a      	add	r2, r3
 800149c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80014a0:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80014a4:	fb01 f303 	mul.w	r3, r1, r3
 80014a8:	4413      	add	r3, r2
 80014aa:	461a      	mov	r2, r3
 80014ac:	883b      	ldrh	r3, [r7, #0]
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	4613      	mov	r3, r2
 80014b2:	462a      	mov	r2, r5
 80014b4:	4621      	mov	r1, r4
 80014b6:	f7ff fd81 	bl	8000fbc <LCD_Fill_Rect>
 80014ba:	e04e      	b.n	800155a <LCD_drawChar+0x24a>
        }
      } else if (bg != color) {
 80014bc:	8c3a      	ldrh	r2, [r7, #32]
 80014be:	883b      	ldrh	r3, [r7, #0]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d04a      	beq.n	800155a <LCD_drawChar+0x24a>
        if (size == 1) // default size
 80014c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d110      	bne.n	80014ee <LCD_drawChar+0x1de>
          LCD_DrawPixel(x+i, y+j, bg);
 80014cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	88fb      	ldrh	r3, [r7, #6]
 80014d4:	4413      	add	r3, r2
 80014d6:	b298      	uxth	r0, r3
 80014d8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80014dc:	b29a      	uxth	r2, r3
 80014de:	88bb      	ldrh	r3, [r7, #4]
 80014e0:	4413      	add	r3, r2
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	8c3a      	ldrh	r2, [r7, #32]
 80014e6:	4619      	mov	r1, r3
 80014e8:	f7ff fd04 	bl	8000ef4 <LCD_DrawPixel>
 80014ec:	e035      	b.n	800155a <LCD_drawChar+0x24a>
        else {  // big size
          LCD_Fill_Rect(x+i*size, y+j*size, size + x+i*size, size+1 + y+j*size, bg);
 80014ee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80014f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014f6:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80014fa:	fb01 f303 	mul.w	r3, r1, r3
 80014fe:	4413      	add	r3, r2
 8001500:	4618      	mov	r0, r3
 8001502:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001506:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800150a:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 800150e:	fb01 f303 	mul.w	r3, r1, r3
 8001512:	4413      	add	r3, r2
 8001514:	461c      	mov	r4, r3
 8001516:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800151a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800151e:	441a      	add	r2, r3
 8001520:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001524:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8001528:	fb01 f303 	mul.w	r3, r1, r3
 800152c:	4413      	add	r3, r2
 800152e:	461d      	mov	r5, r3
 8001530:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001534:	1c5a      	adds	r2, r3, #1
 8001536:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800153a:	441a      	add	r2, r3
 800153c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001540:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8001544:	fb01 f303 	mul.w	r3, r1, r3
 8001548:	4413      	add	r3, r2
 800154a:	461a      	mov	r2, r3
 800154c:	8c3b      	ldrh	r3, [r7, #32]
 800154e:	9300      	str	r3, [sp, #0]
 8001550:	4613      	mov	r3, r2
 8001552:	462a      	mov	r2, r5
 8001554:	4621      	mov	r1, r4
 8001556:	f7ff fd31 	bl	8000fbc <LCD_Fill_Rect>
        }
      }
      line >>= 1;
 800155a:	7bbb      	ldrb	r3, [r7, #14]
 800155c:	085b      	lsrs	r3, r3, #1
 800155e:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 8001560:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001564:	b2db      	uxtb	r3, r3
 8001566:	3301      	adds	r3, #1
 8001568:	b2db      	uxtb	r3, r3
 800156a:	737b      	strb	r3, [r7, #13]
 800156c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001570:	2b07      	cmp	r3, #7
 8001572:	f77f af52 	ble.w	800141a <LCD_drawChar+0x10a>
  for (int8_t i=0; i<6; i++ ) {
 8001576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800157a:	b2db      	uxtb	r3, r3
 800157c:	3301      	adds	r3, #1
 800157e:	b2db      	uxtb	r3, r3
 8001580:	73fb      	strb	r3, [r7, #15]
 8001582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001586:	2b05      	cmp	r3, #5
 8001588:	f77f af31 	ble.w	80013ee <LCD_drawChar+0xde>
 800158c:	e002      	b.n	8001594 <LCD_drawChar+0x284>
    return;
 800158e:	bf00      	nop
 8001590:	e000      	b.n	8001594 <LCD_drawChar+0x284>
    return;
 8001592:	bf00      	nop
    }
  }
}
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bdb0      	pop	{r4, r5, r7, pc}
 800159a:	bf00      	nop
 800159c:	20000000 	.word	0x20000000
 80015a0:	2000010c 	.word	0x2000010c
 80015a4:	080062b0 	.word	0x080062b0

080015a8 <LCD_printText>:
void LCD_printText(char text[], int16_t x, int16_t y, uint16_t color, uint16_t bg, uint8_t size)
{
 80015a8:	b590      	push	{r4, r7, lr}
 80015aa:	b089      	sub	sp, #36	; 0x24
 80015ac:	af02      	add	r7, sp, #8
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	4608      	mov	r0, r1
 80015b2:	4611      	mov	r1, r2
 80015b4:	461a      	mov	r2, r3
 80015b6:	4603      	mov	r3, r0
 80015b8:	817b      	strh	r3, [r7, #10]
 80015ba:	460b      	mov	r3, r1
 80015bc:	813b      	strh	r3, [r7, #8]
 80015be:	4613      	mov	r3, r2
 80015c0:	80fb      	strh	r3, [r7, #6]
	int16_t offset;
	offset = size*6;
 80015c2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	461a      	mov	r2, r3
 80015ca:	0052      	lsls	r2, r2, #1
 80015cc:	4413      	add	r3, r2
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	82bb      	strh	r3, [r7, #20]
	for(uint16_t i=0; i<40 && text[i]!=NULL; i++)
 80015d4:	2300      	movs	r3, #0
 80015d6:	82fb      	strh	r3, [r7, #22]
 80015d8:	e01a      	b.n	8001610 <LCD_printText+0x68>
	{
		LCD_drawChar(x+(offset*i), y, text[i],color,bg,size);
 80015da:	8abb      	ldrh	r3, [r7, #20]
 80015dc:	8afa      	ldrh	r2, [r7, #22]
 80015de:	fb02 f303 	mul.w	r3, r2, r3
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	897b      	ldrh	r3, [r7, #10]
 80015e6:	4413      	add	r3, r2
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	b218      	sxth	r0, r3
 80015ec:	8afb      	ldrh	r3, [r7, #22]
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	4413      	add	r3, r2
 80015f2:	781a      	ldrb	r2, [r3, #0]
 80015f4:	88fc      	ldrh	r4, [r7, #6]
 80015f6:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 80015fa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80015fe:	9301      	str	r3, [sp, #4]
 8001600:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001602:	9300      	str	r3, [sp, #0]
 8001604:	4623      	mov	r3, r4
 8001606:	f7ff fe83 	bl	8001310 <LCD_drawChar>
	for(uint16_t i=0; i<40 && text[i]!=NULL; i++)
 800160a:	8afb      	ldrh	r3, [r7, #22]
 800160c:	3301      	adds	r3, #1
 800160e:	82fb      	strh	r3, [r7, #22]
 8001610:	8afb      	ldrh	r3, [r7, #22]
 8001612:	2b27      	cmp	r3, #39	; 0x27
 8001614:	d805      	bhi.n	8001622 <LCD_printText+0x7a>
 8001616:	8afb      	ldrh	r3, [r7, #22]
 8001618:	68fa      	ldr	r2, [r7, #12]
 800161a:	4413      	add	r3, r2
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1db      	bne.n	80015da <LCD_printText+0x32>
	}
}
 8001622:	bf00      	nop
 8001624:	371c      	adds	r7, #28
 8001626:	46bd      	mov	sp, r7
 8001628:	bd90      	pop	{r4, r7, pc}
	...

0800162c <LCD_setRotation>:

	LCD_SendData(data[size-1] & 0xFF);
}

//13. Set screen rotation
void LCD_setRotation(uint8_t rotate) {
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	71fb      	strb	r3, [r7, #7]
	switch (rotate) {
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	3b01      	subs	r3, #1
 800163a:	2b03      	cmp	r3, #3
 800163c:	d832      	bhi.n	80016a4 <LCD_setRotation+0x78>
 800163e:	a201      	add	r2, pc, #4	; (adr r2, 8001644 <LCD_setRotation+0x18>)
 8001640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001644:	08001655 	.word	0x08001655
 8001648:	08001669 	.word	0x08001669
 800164c:	0800167d 	.word	0x0800167d
 8001650:	08001691 	.word	0x08001691
	case 1:
		rotationNum = 1;
 8001654:	4b1a      	ldr	r3, [pc, #104]	; (80016c0 <LCD_setRotation+0x94>)
 8001656:	2201      	movs	r2, #1
 8001658:	701a      	strb	r2, [r3, #0]
		LCD_SendCommand(HX8357_MADCTL);
 800165a:	2036      	movs	r0, #54	; 0x36
 800165c:	f7ff fa0c 	bl	8000a78 <LCD_SendCommand>
		LCD_SendData(MADCTL_MX | MADCTL_MY | MADCTL_RGB);
 8001660:	20c0      	movs	r0, #192	; 0xc0
 8001662:	f7ff fa3d 	bl	8000ae0 <LCD_SendData>
		break;
 8001666:	e027      	b.n	80016b8 <LCD_setRotation+0x8c>
	case 2:
		rotationNum = 2;
 8001668:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <LCD_setRotation+0x94>)
 800166a:	2202      	movs	r2, #2
 800166c:	701a      	strb	r2, [r3, #0]
		LCD_SendCommand(HX8357_MADCTL);
 800166e:	2036      	movs	r0, #54	; 0x36
 8001670:	f7ff fa02 	bl	8000a78 <LCD_SendCommand>
		LCD_SendData(MADCTL_MV | MADCTL_MY | MADCTL_RGB);
 8001674:	20a0      	movs	r0, #160	; 0xa0
 8001676:	f7ff fa33 	bl	8000ae0 <LCD_SendData>
		break;
 800167a:	e01d      	b.n	80016b8 <LCD_setRotation+0x8c>
	case 3:
		rotationNum = 3;
 800167c:	4b10      	ldr	r3, [pc, #64]	; (80016c0 <LCD_setRotation+0x94>)
 800167e:	2203      	movs	r2, #3
 8001680:	701a      	strb	r2, [r3, #0]
		LCD_SendCommand(HX8357_MADCTL);
 8001682:	2036      	movs	r0, #54	; 0x36
 8001684:	f7ff f9f8 	bl	8000a78 <LCD_SendCommand>
		LCD_SendData(MADCTL_RGB);
 8001688:	2000      	movs	r0, #0
 800168a:	f7ff fa29 	bl	8000ae0 <LCD_SendData>
		break;
 800168e:	e013      	b.n	80016b8 <LCD_setRotation+0x8c>
	case 4:
		rotationNum = 4;
 8001690:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <LCD_setRotation+0x94>)
 8001692:	2204      	movs	r2, #4
 8001694:	701a      	strb	r2, [r3, #0]
		LCD_SendCommand(HX8357_MADCTL);
 8001696:	2036      	movs	r0, #54	; 0x36
 8001698:	f7ff f9ee 	bl	8000a78 <LCD_SendCommand>
		LCD_SendData(MADCTL_MX | MADCTL_MV | MADCTL_RGB);
 800169c:	2060      	movs	r0, #96	; 0x60
 800169e:	f7ff fa1f 	bl	8000ae0 <LCD_SendData>
		break;
 80016a2:	e009      	b.n	80016b8 <LCD_setRotation+0x8c>
	default:
		rotationNum = 1;
 80016a4:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <LCD_setRotation+0x94>)
 80016a6:	2201      	movs	r2, #1
 80016a8:	701a      	strb	r2, [r3, #0]
		LCD_SendCommand(HX8357_MADCTL);
 80016aa:	2036      	movs	r0, #54	; 0x36
 80016ac:	f7ff f9e4 	bl	8000a78 <LCD_SendCommand>
		LCD_SendData(MADCTL_MY | MADCTL_BGR);
 80016b0:	2088      	movs	r0, #136	; 0x88
 80016b2:	f7ff fa15 	bl	8000ae0 <LCD_SendData>
		break;
 80016b6:	bf00      	nop
	}
}
 80016b8:	bf00      	nop
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20000000 	.word	0x20000000

080016c4 <map>:
static uint16_t ym_PIN = YMIN_Pin;
static uint16_t xm_PIN = XMIN_Pin;
static uint16_t yp_PIN = YPLUS_Pin;
static uint16_t xp_PIN = XPLUS_Pin;

int map(int x, int in_min, int in_max, int out_min, int out_max) {
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
 80016d0:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80016d2:	68fa      	ldr	r2, [r7, #12]
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	69b9      	ldr	r1, [r7, #24]
 80016da:	683a      	ldr	r2, [r7, #0]
 80016dc:	1a8a      	subs	r2, r1, r2
 80016de:	fb02 f203 	mul.w	r2, r2, r3
 80016e2:	6879      	ldr	r1, [r7, #4]
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	1acb      	subs	r3, r1, r3
 80016e8:	fb92 f2f3 	sdiv	r2, r2, r3
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	4413      	add	r3, r2
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3714      	adds	r7, #20
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bc80      	pop	{r7}
 80016f8:	4770      	bx	lr
	...

080016fc <Touch_Init>:

void Touch_Init(ADC_HandleTypeDef *adc) {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
	memcpy(&adcHandle, adc, sizeof(*adc));
 8001704:	2230      	movs	r2, #48	; 0x30
 8001706:	6879      	ldr	r1, [r7, #4]
 8001708:	4803      	ldr	r0, [pc, #12]	; (8001718 <Touch_Init+0x1c>)
 800170a:	f002 fd85 	bl	8004218 <memcpy>
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000180 	.word	0x20000180

0800171c <setupForReadY>:

bool isTouch();
uint16_t getPressure();

void setupForReadY() {
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.Pin = yp_PIN;
 8001722:	4b2c      	ldr	r3, [pc, #176]	; (80017d4 <setupForReadY+0xb8>)
 8001724:	881b      	ldrh	r3, [r3, #0]
 8001726:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001728:	2301      	movs	r3, #1
 800172a:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 800172c:	2301      	movs	r3, #1
 800172e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001730:	2303      	movs	r3, #3
 8001732:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init( yp , &GPIO_InitStructure );
 8001734:	4b28      	ldr	r3, [pc, #160]	; (80017d8 <setupForReadY+0xbc>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	463a      	mov	r2, r7
 800173a:	4611      	mov	r1, r2
 800173c:	4618      	mov	r0, r3
 800173e:	f001 fc37 	bl	8002fb0 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(yp, yp_PIN, GPIO_PIN_SET);
 8001742:	4b25      	ldr	r3, [pc, #148]	; (80017d8 <setupForReadY+0xbc>)
 8001744:	6818      	ldr	r0, [r3, #0]
 8001746:	4b23      	ldr	r3, [pc, #140]	; (80017d4 <setupForReadY+0xb8>)
 8001748:	881b      	ldrh	r3, [r3, #0]
 800174a:	2201      	movs	r2, #1
 800174c:	4619      	mov	r1, r3
 800174e:	f001 fd89 	bl	8003264 <HAL_GPIO_WritePin>

	GPIO_InitStructure.Pin = ym_PIN;
 8001752:	4b22      	ldr	r3, [pc, #136]	; (80017dc <setupForReadY+0xc0>)
 8001754:	881b      	ldrh	r3, [r3, #0]
 8001756:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001758:	2301      	movs	r3, #1
 800175a:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 800175c:	2302      	movs	r3, #2
 800175e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001760:	2303      	movs	r3, #3
 8001762:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init( ym , &GPIO_InitStructure );
 8001764:	4b1e      	ldr	r3, [pc, #120]	; (80017e0 <setupForReadY+0xc4>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	463a      	mov	r2, r7
 800176a:	4611      	mov	r1, r2
 800176c:	4618      	mov	r0, r3
 800176e:	f001 fc1f 	bl	8002fb0 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(ym, ym_PIN, GPIO_PIN_RESET);
 8001772:	4b1b      	ldr	r3, [pc, #108]	; (80017e0 <setupForReadY+0xc4>)
 8001774:	6818      	ldr	r0, [r3, #0]
 8001776:	4b19      	ldr	r3, [pc, #100]	; (80017dc <setupForReadY+0xc0>)
 8001778:	881b      	ldrh	r3, [r3, #0]
 800177a:	2200      	movs	r2, #0
 800177c:	4619      	mov	r1, r3
 800177e:	f001 fd71 	bl	8003264 <HAL_GPIO_WritePin>

	GPIO_InitStructure.Pin = xp_PIN;
 8001782:	4b18      	ldr	r3, [pc, #96]	; (80017e4 <setupForReadY+0xc8>)
 8001784:	881b      	ldrh	r3, [r3, #0]
 8001786:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8001788:	2300      	movs	r3, #0
 800178a:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 800178c:	2302      	movs	r3, #2
 800178e:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init( xp , &GPIO_InitStructure );
 8001790:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <setupForReadY+0xcc>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	463a      	mov	r2, r7
 8001796:	4611      	mov	r1, r2
 8001798:	4618      	mov	r0, r3
 800179a:	f001 fc09 	bl	8002fb0 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(xp, xp_PIN, GPIO_PIN_RESET);
 800179e:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <setupForReadY+0xcc>)
 80017a0:	6818      	ldr	r0, [r3, #0]
 80017a2:	4b10      	ldr	r3, [pc, #64]	; (80017e4 <setupForReadY+0xc8>)
 80017a4:	881b      	ldrh	r3, [r3, #0]
 80017a6:	2200      	movs	r2, #0
 80017a8:	4619      	mov	r1, r3
 80017aa:	f001 fd5b 	bl	8003264 <HAL_GPIO_WritePin>

	GPIO_InitStructure.Pin = xm_PIN;
 80017ae:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <setupForReadY+0xd0>)
 80017b0:	881b      	ldrh	r3, [r3, #0]
 80017b2:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 80017b4:	2303      	movs	r3, #3
 80017b6:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init( xm , &GPIO_InitStructure );
 80017bc:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <setupForReadY+0xd4>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	463a      	mov	r2, r7
 80017c2:	4611      	mov	r1, r2
 80017c4:	4618      	mov	r0, r3
 80017c6:	f001 fbf3 	bl	8002fb0 <HAL_GPIO_Init>
}
 80017ca:	bf00      	nop
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20000018 	.word	0x20000018
 80017d8:	2000000c 	.word	0x2000000c
 80017dc:	20000014 	.word	0x20000014
 80017e0:	20000004 	.word	0x20000004
 80017e4:	2000001a 	.word	0x2000001a
 80017e8:	20000010 	.word	0x20000010
 80017ec:	20000016 	.word	0x20000016
 80017f0:	20000008 	.word	0x20000008

080017f4 <setupForReadX>:

void setupForReadX() {
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.Pin = xp_PIN;
 80017fa:	4b2c      	ldr	r3, [pc, #176]	; (80018ac <setupForReadX+0xb8>)
 80017fc:	881b      	ldrh	r3, [r3, #0]
 80017fe:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001800:	2301      	movs	r3, #1
 8001802:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 8001804:	2301      	movs	r3, #1
 8001806:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001808:	2303      	movs	r3, #3
 800180a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init( xp , &GPIO_InitStructure );
 800180c:	4b28      	ldr	r3, [pc, #160]	; (80018b0 <setupForReadX+0xbc>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	463a      	mov	r2, r7
 8001812:	4611      	mov	r1, r2
 8001814:	4618      	mov	r0, r3
 8001816:	f001 fbcb 	bl	8002fb0 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(xp, xp_PIN, GPIO_PIN_SET);
 800181a:	4b25      	ldr	r3, [pc, #148]	; (80018b0 <setupForReadX+0xbc>)
 800181c:	6818      	ldr	r0, [r3, #0]
 800181e:	4b23      	ldr	r3, [pc, #140]	; (80018ac <setupForReadX+0xb8>)
 8001820:	881b      	ldrh	r3, [r3, #0]
 8001822:	2201      	movs	r2, #1
 8001824:	4619      	mov	r1, r3
 8001826:	f001 fd1d 	bl	8003264 <HAL_GPIO_WritePin>

	GPIO_InitStructure.Pin = xm_PIN;
 800182a:	4b22      	ldr	r3, [pc, #136]	; (80018b4 <setupForReadX+0xc0>)
 800182c:	881b      	ldrh	r3, [r3, #0]
 800182e:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001830:	2301      	movs	r3, #1
 8001832:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 8001834:	2302      	movs	r3, #2
 8001836:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001838:	2303      	movs	r3, #3
 800183a:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init( xm , &GPIO_InitStructure );
 800183c:	4b1e      	ldr	r3, [pc, #120]	; (80018b8 <setupForReadX+0xc4>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	463a      	mov	r2, r7
 8001842:	4611      	mov	r1, r2
 8001844:	4618      	mov	r0, r3
 8001846:	f001 fbb3 	bl	8002fb0 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(xm, xm_PIN, GPIO_PIN_RESET);
 800184a:	4b1b      	ldr	r3, [pc, #108]	; (80018b8 <setupForReadX+0xc4>)
 800184c:	6818      	ldr	r0, [r3, #0]
 800184e:	4b19      	ldr	r3, [pc, #100]	; (80018b4 <setupForReadX+0xc0>)
 8001850:	881b      	ldrh	r3, [r3, #0]
 8001852:	2200      	movs	r2, #0
 8001854:	4619      	mov	r1, r3
 8001856:	f001 fd05 	bl	8003264 <HAL_GPIO_WritePin>

	GPIO_InitStructure.Pin = ym_PIN;
 800185a:	4b18      	ldr	r3, [pc, #96]	; (80018bc <setupForReadX+0xc8>)
 800185c:	881b      	ldrh	r3, [r3, #0]
 800185e:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8001860:	2300      	movs	r3, #0
 8001862:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 8001864:	2302      	movs	r3, #2
 8001866:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init( ym , &GPIO_InitStructure );
 8001868:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <setupForReadX+0xcc>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	463a      	mov	r2, r7
 800186e:	4611      	mov	r1, r2
 8001870:	4618      	mov	r0, r3
 8001872:	f001 fb9d 	bl	8002fb0 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(ym, ym_PIN, GPIO_PIN_RESET);
 8001876:	4b12      	ldr	r3, [pc, #72]	; (80018c0 <setupForReadX+0xcc>)
 8001878:	6818      	ldr	r0, [r3, #0]
 800187a:	4b10      	ldr	r3, [pc, #64]	; (80018bc <setupForReadX+0xc8>)
 800187c:	881b      	ldrh	r3, [r3, #0]
 800187e:	2200      	movs	r2, #0
 8001880:	4619      	mov	r1, r3
 8001882:	f001 fcef 	bl	8003264 <HAL_GPIO_WritePin>

	GPIO_InitStructure.Pin = yp_PIN;
 8001886:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <setupForReadX+0xd0>)
 8001888:	881b      	ldrh	r3, [r3, #0]
 800188a:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 800188c:	2303      	movs	r3, #3
 800188e:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init( yp , &GPIO_InitStructure );
 8001894:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <setupForReadX+0xd4>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	463a      	mov	r2, r7
 800189a:	4611      	mov	r1, r2
 800189c:	4618      	mov	r0, r3
 800189e:	f001 fb87 	bl	8002fb0 <HAL_GPIO_Init>
}
 80018a2:	bf00      	nop
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	2000001a 	.word	0x2000001a
 80018b0:	20000010 	.word	0x20000010
 80018b4:	20000016 	.word	0x20000016
 80018b8:	20000008 	.word	0x20000008
 80018bc:	20000014 	.word	0x20000014
 80018c0:	20000004 	.word	0x20000004
 80018c4:	20000018 	.word	0x20000018
 80018c8:	2000000c 	.word	0x2000000c

080018cc <readChannelXMin>:

int readChannelXMin() {
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig;
	sConfig.Channel = ADC_CHANNEL_13;
 80018d2:	230d      	movs	r3, #13
 80018d4:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80018d6:	2301      	movs	r3, #1
 80018d8:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80018da:	2307      	movs	r3, #7
 80018dc:	60fb      	str	r3, [r7, #12]
	int config = HAL_ADC_ConfigChannel(&adcHandle, &sConfig);
 80018de:	1d3b      	adds	r3, r7, #4
 80018e0:	4619      	mov	r1, r3
 80018e2:	480f      	ldr	r0, [pc, #60]	; (8001920 <readChannelXMin+0x54>)
 80018e4:	f001 f8fc 	bl	8002ae0 <HAL_ADC_ConfigChannel>
 80018e8:	4603      	mov	r3, r0
 80018ea:	613b      	str	r3, [r7, #16]
	if (config != HAL_OK)
	{
		//
	}
	HAL_Delay(10);
 80018ec:	200a      	movs	r0, #10
 80018ee:	f000 fe1d 	bl	800252c <HAL_Delay>
	HAL_ADC_Start(&adcHandle);
 80018f2:	480b      	ldr	r0, [pc, #44]	; (8001920 <readChannelXMin+0x54>)
 80018f4:	f000 ff14 	bl	8002720 <HAL_ADC_Start>
	uint32_t ADCValue;
	if(HAL_ADC_PollForConversion(&adcHandle, 5) == HAL_OK) {
 80018f8:	2105      	movs	r1, #5
 80018fa:	4809      	ldr	r0, [pc, #36]	; (8001920 <readChannelXMin+0x54>)
 80018fc:	f000 ffea 	bl	80028d4 <HAL_ADC_PollForConversion>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d103      	bne.n	800190e <readChannelXMin+0x42>
		ADCValue = HAL_ADC_GetValue(&adcHandle);
 8001906:	4806      	ldr	r0, [pc, #24]	; (8001920 <readChannelXMin+0x54>)
 8001908:	f001 f8de 	bl	8002ac8 <HAL_ADC_GetValue>
 800190c:	6178      	str	r0, [r7, #20]
	}
	HAL_ADC_Stop(&adcHandle);
 800190e:	4804      	ldr	r0, [pc, #16]	; (8001920 <readChannelXMin+0x54>)
 8001910:	f000 ffb4 	bl	800287c <HAL_ADC_Stop>
	return ADCValue;
 8001914:	697b      	ldr	r3, [r7, #20]
}
 8001916:	4618      	mov	r0, r3
 8001918:	3718      	adds	r7, #24
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000180 	.word	0x20000180

08001924 <readTouchY>:

int readTouchY() {
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af02      	add	r7, sp, #8
	setupForReadY();
 800192a:	f7ff fef7 	bl	800171c <setupForReadY>
	//return readChannelXMin();
	return map(readChannelXMin(), TS_MINY, TS_MAXY, 0, 480);
 800192e:	f7ff ffcd 	bl	80018cc <readChannelXMin>
 8001932:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	2300      	movs	r3, #0
 800193a:	f640 629c 	movw	r2, #3740	; 0xe9c
 800193e:	f240 1127 	movw	r1, #295	; 0x127
 8001942:	f7ff febf 	bl	80016c4 <map>
 8001946:	4603      	mov	r3, r0
}
 8001948:	4618      	mov	r0, r3
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
	...

08001950 <readChannelYPlus>:

int readChannelYPlus() {
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig;
	sConfig.Channel = ADC_CHANNEL_12;
 8001956:	230c      	movs	r3, #12
 8001958:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800195a:	2301      	movs	r3, #1
 800195c:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800195e:	2307      	movs	r3, #7
 8001960:	60fb      	str	r3, [r7, #12]
	int config = HAL_ADC_ConfigChannel(&adcHandle, &sConfig);
 8001962:	1d3b      	adds	r3, r7, #4
 8001964:	4619      	mov	r1, r3
 8001966:	480f      	ldr	r0, [pc, #60]	; (80019a4 <readChannelYPlus+0x54>)
 8001968:	f001 f8ba 	bl	8002ae0 <HAL_ADC_ConfigChannel>
 800196c:	4603      	mov	r3, r0
 800196e:	613b      	str	r3, [r7, #16]
	if (config != HAL_OK)
	{
		//
	}
	HAL_Delay(10);
 8001970:	200a      	movs	r0, #10
 8001972:	f000 fddb 	bl	800252c <HAL_Delay>
	HAL_ADC_Start(&adcHandle);
 8001976:	480b      	ldr	r0, [pc, #44]	; (80019a4 <readChannelYPlus+0x54>)
 8001978:	f000 fed2 	bl	8002720 <HAL_ADC_Start>
	uint32_t ADCValue;
	if(HAL_ADC_PollForConversion(&adcHandle, 5) == HAL_OK) {
 800197c:	2105      	movs	r1, #5
 800197e:	4809      	ldr	r0, [pc, #36]	; (80019a4 <readChannelYPlus+0x54>)
 8001980:	f000 ffa8 	bl	80028d4 <HAL_ADC_PollForConversion>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d103      	bne.n	8001992 <readChannelYPlus+0x42>
		ADCValue = HAL_ADC_GetValue(&adcHandle);
 800198a:	4806      	ldr	r0, [pc, #24]	; (80019a4 <readChannelYPlus+0x54>)
 800198c:	f001 f89c 	bl	8002ac8 <HAL_ADC_GetValue>
 8001990:	6178      	str	r0, [r7, #20]
	}
	HAL_ADC_Stop(&adcHandle);
 8001992:	4804      	ldr	r0, [pc, #16]	; (80019a4 <readChannelYPlus+0x54>)
 8001994:	f000 ff72 	bl	800287c <HAL_ADC_Stop>
	return ADCValue;
 8001998:	697b      	ldr	r3, [r7, #20]
}
 800199a:	4618      	mov	r0, r3
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000180 	.word	0x20000180

080019a8 <readTouchX>:

int readTouchX() {
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af02      	add	r7, sp, #8
	setupForReadX();
 80019ae:	f7ff ff21 	bl	80017f4 <setupForReadX>
	//return readChannelYPlus();
	return map(readChannelYPlus(), TS_MINX, TS_MAXX, 0, 320);
 80019b2:	f7ff ffcd 	bl	8001950 <readChannelYPlus>
 80019b6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	2300      	movs	r3, #0
 80019be:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80019c2:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 80019c6:	f7ff fe7d 	bl	80016c4 <map>
 80019ca:	4603      	mov	r3, r0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b083      	sub	sp, #12
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80019da:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80019de:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d013      	beq.n	8001a12 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80019ea:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80019ee:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80019f2:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00b      	beq.n	8001a12 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80019fa:	e000      	b.n	80019fe <ITM_SendChar+0x2c>
    {
      __NOP();
 80019fc:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80019fe:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d0f9      	beq.n	80019fc <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001a08:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	b2d2      	uxtb	r2, r2
 8001a10:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001a12:	687b      	ldr	r3, [r7, #4]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bc80      	pop	{r7}
 8001a1c:	4770      	bx	lr

08001a1e <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b086      	sub	sp, #24
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	60f8      	str	r0, [r7, #12]
 8001a26:	60b9      	str	r1, [r7, #8]
 8001a28:	607a      	str	r2, [r7, #4]
	int i = 0;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	617b      	str	r3, [r7, #20]
	for (i = 0; i < len; i++)
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]
 8001a32:	e009      	b.n	8001a48 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	1c5a      	adds	r2, r3, #1
 8001a38:	60ba      	str	r2, [r7, #8]
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff ffc8 	bl	80019d2 <ITM_SendChar>
	for (i = 0; i < len; i++)
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	3301      	adds	r3, #1
 8001a46:	617b      	str	r3, [r7, #20]
 8001a48:	697a      	ldr	r2, [r7, #20]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	dbf1      	blt.n	8001a34 <_write+0x16>
	return len;
 8001a50:	687b      	ldr	r3, [r7, #4]
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3718      	adds	r7, #24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
	...

08001a5c <drawStruct>:
	int start_x, start_y, end_x, end_y;
	uint8_t action;
	const uint8_t * icon;
};

void drawStruct(struct Button * p) {
 8001a5c:	b590      	push	{r4, r7, lr}
 8001a5e:	b087      	sub	sp, #28
 8001a60:	af02      	add	r7, sp, #8
 8001a62:	6078      	str	r0, [r7, #4]
	uint16_t color;
	switch(p->action) {
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	7c1b      	ldrb	r3, [r3, #16]
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d009      	beq.n	8001a80 <drawStruct+0x24>
 8001a6c:	2b03      	cmp	r3, #3
 8001a6e:	d00e      	beq.n	8001a8e <drawStruct+0x32>
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d113      	bne.n	8001a9c <drawStruct+0x40>
	case 1: color = HX8357_BLUE; p->icon = line_icon; break;
 8001a74:	231f      	movs	r3, #31
 8001a76:	81fb      	strh	r3, [r7, #14]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4a16      	ldr	r2, [pc, #88]	; (8001ad4 <drawStruct+0x78>)
 8001a7c:	615a      	str	r2, [r3, #20]
 8001a7e:	e014      	b.n	8001aaa <drawStruct+0x4e>
	case 2: color= HX8357_RED;  p->icon = circle_icon; break;
 8001a80:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001a84:	81fb      	strh	r3, [r7, #14]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a13      	ldr	r2, [pc, #76]	; (8001ad8 <drawStruct+0x7c>)
 8001a8a:	615a      	str	r2, [r3, #20]
 8001a8c:	e00d      	b.n	8001aaa <drawStruct+0x4e>
	case 3: color = HX8357_GREEN;  p->icon = graph_icon; break;
 8001a8e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001a92:	81fb      	strh	r3, [r7, #14]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	4a11      	ldr	r2, [pc, #68]	; (8001adc <drawStruct+0x80>)
 8001a98:	615a      	str	r2, [r3, #20]
 8001a9a:	e006      	b.n	8001aaa <drawStruct+0x4e>
	default: color = HX8357_YELLOW;  p->icon = trash_icon; break;
 8001a9c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001aa0:	81fb      	strh	r3, [r7, #14]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a0e      	ldr	r2, [pc, #56]	; (8001ae0 <drawStruct+0x84>)
 8001aa6:	615a      	str	r2, [r3, #20]
 8001aa8:	bf00      	nop
	}
	LCD_Fill_Rect(p->start_x, p->start_y, p->end_x, p->end_y, color);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	461a      	mov	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	461c      	mov	r4, r3
 8001ac2:	89fb      	ldrh	r3, [r7, #14]
 8001ac4:	9300      	str	r3, [sp, #0]
 8001ac6:	4623      	mov	r3, r4
 8001ac8:	f7ff fa78 	bl	8000fbc <LCD_Fill_Rect>
}
 8001acc:	bf00      	nop
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd90      	pop	{r4, r7, pc}
 8001ad4:	080073b0 	.word	0x080073b0
 8001ad8:	080067b0 	.word	0x080067b0
 8001adc:	08007fb0 	.word	0x08007fb0
 8001ae0:	08008bb0 	.word	0x08008bb0

08001ae4 <checkIfInBoundary>:

uint8_t checkIfInBoundary(struct Button * p, int x_coor) {
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
	if(x_coor >= p->start_x && x_coor <= p->end_x) {
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	683a      	ldr	r2, [r7, #0]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	db06      	blt.n	8001b06 <checkIfInBoundary+0x22>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	dc01      	bgt.n	8001b06 <checkIfInBoundary+0x22>
		return 1;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e000      	b.n	8001b08 <checkIfInBoundary+0x24>
	}

	return 0;
 8001b06:	2300      	movs	r3, #0
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bc80      	pop	{r7}
 8001b10:	4770      	bx	lr
	...

08001b14 <default_screen>:
struct Button line_button = {20, 400, 60, 480, 1 };
struct Button circle_button  = {80, 400, 120, 480, 2 };
struct Button polygon_button  = {140, 400, 180, 480, 3 };
struct Button clear_button  = {200, 400, 240, 480, 4 };

void default_screen() {
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
	LCD_Fill(HX8357_BLACK);
 8001b18:	2000      	movs	r0, #0
 8001b1a:	f7ff fa0b 	bl	8000f34 <LCD_Fill>
	drawStruct(&line_button);
 8001b1e:	4807      	ldr	r0, [pc, #28]	; (8001b3c <default_screen+0x28>)
 8001b20:	f7ff ff9c 	bl	8001a5c <drawStruct>
	drawStruct(&circle_button);
 8001b24:	4806      	ldr	r0, [pc, #24]	; (8001b40 <default_screen+0x2c>)
 8001b26:	f7ff ff99 	bl	8001a5c <drawStruct>
	drawStruct(&polygon_button);
 8001b2a:	4806      	ldr	r0, [pc, #24]	; (8001b44 <default_screen+0x30>)
 8001b2c:	f7ff ff96 	bl	8001a5c <drawStruct>
	drawStruct(&clear_button);
 8001b30:	4805      	ldr	r0, [pc, #20]	; (8001b48 <default_screen+0x34>)
 8001b32:	f7ff ff93 	bl	8001a5c <drawStruct>
}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	2000001c 	.word	0x2000001c
 8001b40:	20000034 	.word	0x20000034
 8001b44:	2000004c 	.word	0x2000004c
 8001b48:	20000064 	.word	0x20000064

08001b4c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001b4c:	b590      	push	{r4, r7, lr}
 8001b4e:	b095      	sub	sp, #84	; 0x54
 8001b50:	af04      	add	r7, sp, #16


	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001b52:	f000 fc89 	bl	8002468 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001b56:	f000 f953 	bl	8001e00 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001b5a:	f000 fa21 	bl	8001fa0 <MX_GPIO_Init>
	MX_ADC1_Init();
 8001b5e:	f000 f9ab 	bl	8001eb8 <MX_ADC1_Init>
	MX_SPI1_Init();
 8001b62:	f000 f9e7 	bl	8001f34 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	Touch_Init(&hadc1);
 8001b66:	4896      	ldr	r0, [pc, #600]	; (8001dc0 <main+0x274>)
 8001b68:	f7ff fdc8 	bl	80016fc <Touch_Init>
	LCD_Init(&hspi1, LCD_CS_GPIO_Port, LCD_CS_Pin, LCD_DC_GPIO_Port, LCD_DC_Pin, LCD_RST_GPIO_Port, LCD_RST_Pin);
 8001b6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b70:	9302      	str	r3, [sp, #8]
 8001b72:	4b94      	ldr	r3, [pc, #592]	; (8001dc4 <main+0x278>)
 8001b74:	9301      	str	r3, [sp, #4]
 8001b76:	2380      	movs	r3, #128	; 0x80
 8001b78:	9300      	str	r3, [sp, #0]
 8001b7a:	4b93      	ldr	r3, [pc, #588]	; (8001dc8 <main+0x27c>)
 8001b7c:	2240      	movs	r2, #64	; 0x40
 8001b7e:	4993      	ldr	r1, [pc, #588]	; (8001dcc <main+0x280>)
 8001b80:	4893      	ldr	r0, [pc, #588]	; (8001dd0 <main+0x284>)
 8001b82:	f7ff f861 	bl	8000c48 <LCD_Init>
	LCD_setRotation(3);
 8001b86:	2003      	movs	r0, #3
 8001b88:	f7ff fd50 	bl	800162c <LCD_setRotation>
	default_screen();
 8001b8c:	f7ff ffc2 	bl	8001b14 <default_screen>
	int current_x, current_y, radius, x_diff, y_diff;
	int previous_x, previous_y = 0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	63bb      	str	r3, [r7, #56]	; 0x38
	uint8_t enabled_action = 0;
 8001b94:	2300      	movs	r3, #0
 8001b96:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t in_button;
	int text_coords[2] = {300, 40};
 8001b9a:	4a8e      	ldr	r2, [pc, #568]	; (8001dd4 <main+0x288>)
 8001b9c:	f107 0318 	add.w	r3, r7, #24
 8001ba0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ba4:	e883 0003 	stmia.w	r3, {r0, r1}
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		current_x = readTouchX();
 8001ba8:	f7ff fefe 	bl	80019a8 <readTouchX>
 8001bac:	6338      	str	r0, [r7, #48]	; 0x30
		current_y = readTouchY();
 8001bae:	f7ff feb9 	bl	8001924 <readTouchY>
 8001bb2:	62f8      	str	r0, [r7, #44]	; 0x2c
		printf("TAPPED: (%d, %d)\n", current_x, current_y);
 8001bb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bb6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001bb8:	4887      	ldr	r0, [pc, #540]	; (8001dd8 <main+0x28c>)
 8001bba:	f002 fb41 	bl	8004240 <iprintf>
		if(current_x > 0 && current_y > 0) {
 8001bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f340 80f9 	ble.w	8001db8 <main+0x26c>
 8001bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f340 80f5 	ble.w	8001db8 <main+0x26c>
			// 1. Check if in boundary of button
			// 2. Also determine action
			if(current_y >= 400 && current_y <= 480) {
 8001bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001bd4:	db5a      	blt.n	8001c8c <main+0x140>
 8001bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd8:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001bdc:	dc56      	bgt.n	8001c8c <main+0x140>
				in_button = 0;
 8001bde:	2300      	movs	r3, #0
 8001be0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
				if(checkIfInBoundary(&line_button, current_x)) {
 8001be4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001be6:	487d      	ldr	r0, [pc, #500]	; (8001ddc <main+0x290>)
 8001be8:	f7ff ff7c 	bl	8001ae4 <checkIfInBoundary>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d016      	beq.n	8001c20 <main+0xd4>
					in_button = 1;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
					enabled_action = line_button.action;
 8001bf8:	4b78      	ldr	r3, [pc, #480]	; (8001ddc <main+0x290>)
 8001bfa:	7c1b      	ldrb	r3, [r3, #16]
 8001bfc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					LCD_printText("LINE", text_coords[0], text_coords[1], HX8357_WHITE, HX8357_BLACK, 4);
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	b219      	sxth	r1, r3
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	b21a      	sxth	r2, r3
 8001c08:	2304      	movs	r3, #4
 8001c0a:	9301      	str	r3, [sp, #4]
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	9300      	str	r3, [sp, #0]
 8001c10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c14:	4872      	ldr	r0, [pc, #456]	; (8001de0 <main+0x294>)
 8001c16:	f7ff fcc7 	bl	80015a8 <LCD_printText>
					printf("User tapped line button\n");
 8001c1a:	4872      	ldr	r0, [pc, #456]	; (8001de4 <main+0x298>)
 8001c1c:	f002 fb84 	bl	8004328 <puts>
				}

				if(checkIfInBoundary(&circle_button, current_x)) {
 8001c20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c22:	4871      	ldr	r0, [pc, #452]	; (8001de8 <main+0x29c>)
 8001c24:	f7ff ff5e 	bl	8001ae4 <checkIfInBoundary>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d009      	beq.n	8001c42 <main+0xf6>
					in_button = 1;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
					enabled_action = circle_button.action;
 8001c34:	4b6c      	ldr	r3, [pc, #432]	; (8001de8 <main+0x29c>)
 8001c36:	7c1b      	ldrb	r3, [r3, #16]
 8001c38:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					printf("User tapped circle button\n");
 8001c3c:	486b      	ldr	r0, [pc, #428]	; (8001dec <main+0x2a0>)
 8001c3e:	f002 fb73 	bl	8004328 <puts>
				}

				if(checkIfInBoundary(&polygon_button, current_x)) {
 8001c42:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c44:	486a      	ldr	r0, [pc, #424]	; (8001df0 <main+0x2a4>)
 8001c46:	f7ff ff4d 	bl	8001ae4 <checkIfInBoundary>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d009      	beq.n	8001c64 <main+0x118>
					in_button = 1;
 8001c50:	2301      	movs	r3, #1
 8001c52:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
					enabled_action = polygon_button.action;
 8001c56:	4b66      	ldr	r3, [pc, #408]	; (8001df0 <main+0x2a4>)
 8001c58:	7c1b      	ldrb	r3, [r3, #16]
 8001c5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					printf("User tapped polygon button\n");
 8001c5e:	4865      	ldr	r0, [pc, #404]	; (8001df4 <main+0x2a8>)
 8001c60:	f002 fb62 	bl	8004328 <puts>
				}
				if(checkIfInBoundary(&clear_button, current_x)) {
 8001c64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c66:	4864      	ldr	r0, [pc, #400]	; (8001df8 <main+0x2ac>)
 8001c68:	f7ff ff3c 	bl	8001ae4 <checkIfInBoundary>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d00f      	beq.n	8001c92 <main+0x146>
					in_button = 1;
 8001c72:	2301      	movs	r3, #1
 8001c74:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
					enabled_action = clear_button.action;
 8001c78:	4b5f      	ldr	r3, [pc, #380]	; (8001df8 <main+0x2ac>)
 8001c7a:	7c1b      	ldrb	r3, [r3, #16]
 8001c7c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					default_screen();
 8001c80:	f7ff ff48 	bl	8001b14 <default_screen>
					printf("User tapped clear button\n");
 8001c84:	485d      	ldr	r0, [pc, #372]	; (8001dfc <main+0x2b0>)
 8001c86:	f002 fb4f 	bl	8004328 <puts>
				if(checkIfInBoundary(&clear_button, current_x)) {
 8001c8a:	e002      	b.n	8001c92 <main+0x146>
				}

			} else {
				in_button = 0;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			}

			if(in_button) {
 8001c92:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d004      	beq.n	8001ca4 <main+0x158>
				previous_x = 0;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
				previous_y = 0;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ca2:	e089      	b.n	8001db8 <main+0x26c>
			} else {
				if(previous_x > 0 && previous_y > 0) {
 8001ca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f340 8082 	ble.w	8001db0 <main+0x264>
 8001cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	dd7e      	ble.n	8001db0 <main+0x264>
					switch(enabled_action) {
 8001cb2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	2b03      	cmp	r3, #3
 8001cba:	d869      	bhi.n	8001d90 <main+0x244>
 8001cbc:	a201      	add	r2, pc, #4	; (adr r2, 8001cc4 <main+0x178>)
 8001cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cc2:	bf00      	nop
 8001cc4:	08001cd5 	.word	0x08001cd5
 8001cc8:	08001cf3 	.word	0x08001cf3
 8001ccc:	08001da5 	.word	0x08001da5
 8001cd0:	08001da5 	.word	0x08001da5
					// 1 = line, 2 = circle, 3 = polygon
					case 1:
						LCD_drawLine(previous_x, previous_y, current_x, current_y, HX8357_WHITE);
 8001cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cd6:	b218      	sxth	r0, r3
 8001cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cda:	b219      	sxth	r1, r3
 8001cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cde:	b21a      	sxth	r2, r3
 8001ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ce2:	b21c      	sxth	r4, r3
 8001ce4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ce8:	9300      	str	r3, [sp, #0]
 8001cea:	4623      	mov	r3, r4
 8001cec:	f7ff fa73 	bl	80011d6 <LCD_drawLine>
						break;
 8001cf0:	e059      	b.n	8001da6 <main+0x25a>
					case 2:
						// Get distance
						x_diff = abs(current_x - previous_x);
 8001cf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	bfb8      	it	lt
 8001cfc:	425b      	neglt	r3, r3
 8001cfe:	62bb      	str	r3, [r7, #40]	; 0x28
						y_diff = abs(current_y - previous_y);
 8001d00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	bfb8      	it	lt
 8001d0a:	425b      	neglt	r3, r3
 8001d0c:	627b      	str	r3, [r7, #36]	; 0x24
						x_diff = pow(x_diff, 2);
 8001d0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d10:	f7fe fb70 	bl	80003f4 <__aeabi_i2d>
 8001d14:	f04f 0200 	mov.w	r2, #0
 8001d18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d1c:	f003 f9e2 	bl	80050e4 <pow>
 8001d20:	4603      	mov	r3, r0
 8001d22:	460c      	mov	r4, r1
 8001d24:	4618      	mov	r0, r3
 8001d26:	4621      	mov	r1, r4
 8001d28:	f7fe fe7e 	bl	8000a28 <__aeabi_d2iz>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	62bb      	str	r3, [r7, #40]	; 0x28
						y_diff = pow(y_diff, 2);
 8001d30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001d32:	f7fe fb5f 	bl	80003f4 <__aeabi_i2d>
 8001d36:	f04f 0200 	mov.w	r2, #0
 8001d3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d3e:	f003 f9d1 	bl	80050e4 <pow>
 8001d42:	4603      	mov	r3, r0
 8001d44:	460c      	mov	r4, r1
 8001d46:	4618      	mov	r0, r3
 8001d48:	4621      	mov	r1, r4
 8001d4a:	f7fe fe6d 	bl	8000a28 <__aeabi_d2iz>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	627b      	str	r3, [r7, #36]	; 0x24
						radius = sqrt((x_diff + y_diff));
 8001d52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d56:	4413      	add	r3, r2
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7fe fb4b 	bl	80003f4 <__aeabi_i2d>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	460c      	mov	r4, r1
 8001d62:	4618      	mov	r0, r3
 8001d64:	4621      	mov	r1, r4
 8001d66:	f003 fb19 	bl	800539c <sqrt>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	460c      	mov	r4, r1
 8001d6e:	4618      	mov	r0, r3
 8001d70:	4621      	mov	r1, r4
 8001d72:	f7fe fe59 	bl	8000a28 <__aeabi_d2iz>
 8001d76:	4603      	mov	r3, r0
 8001d78:	623b      	str	r3, [r7, #32]
						LCD_drawCircle(previous_x, previous_y, radius, HX8357_WHITE);
 8001d7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d7c:	b218      	sxth	r0, r3
 8001d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d80:	b219      	sxth	r1, r3
 8001d82:	6a3b      	ldr	r3, [r7, #32]
 8001d84:	b21a      	sxth	r2, r3
 8001d86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d8a:	f7ff f951 	bl	8001030 <LCD_drawCircle>
						break;
 8001d8e:	e00a      	b.n	8001da6 <main+0x25a>
					case 3:
						break;
					case 4:
						break;
					default: LCD_DrawPixel(current_x, current_y, HX8357_WHITE); break;
 8001d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d96:	b291      	uxth	r1, r2
 8001d98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff f8a9 	bl	8000ef4 <LCD_DrawPixel>
 8001da2:	e000      	b.n	8001da6 <main+0x25a>
						break;
 8001da4:	bf00      	nop
					}

					// Action finished
					previous_x = 0;
 8001da6:	2300      	movs	r3, #0
 8001da8:	63fb      	str	r3, [r7, #60]	; 0x3c
					previous_y = 0;
 8001daa:	2300      	movs	r3, #0
 8001dac:	63bb      	str	r3, [r7, #56]	; 0x38
 8001dae:	e003      	b.n	8001db8 <main+0x26c>
				} else {
					previous_x = current_x;
 8001db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001db2:	63fb      	str	r3, [r7, #60]	; 0x3c
					previous_y = current_y;
 8001db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db6:	63bb      	str	r3, [r7, #56]	; 0x38
				}
			}
		}

		// Kind of like dender relay for push button
		HAL_Delay(50);
 8001db8:	2032      	movs	r0, #50	; 0x32
 8001dba:	f000 fbb7 	bl	800252c <HAL_Delay>
		current_x = readTouchX();
 8001dbe:	e6f3      	b.n	8001ba8 <main+0x5c>
 8001dc0:	200001bc 	.word	0x200001bc
 8001dc4:	40010800 	.word	0x40010800
 8001dc8:	40011000 	.word	0x40011000
 8001dcc:	40010c00 	.word	0x40010c00
 8001dd0:	200001ec 	.word	0x200001ec
 8001dd4:	08006280 	.word	0x08006280
 8001dd8:	080061f8 	.word	0x080061f8
 8001ddc:	2000001c 	.word	0x2000001c
 8001de0:	0800620c 	.word	0x0800620c
 8001de4:	08006214 	.word	0x08006214
 8001de8:	20000034 	.word	0x20000034
 8001dec:	0800622c 	.word	0x0800622c
 8001df0:	2000004c 	.word	0x2000004c
 8001df4:	08006248 	.word	0x08006248
 8001df8:	20000064 	.word	0x20000064
 8001dfc:	08006264 	.word	0x08006264

08001e00 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b094      	sub	sp, #80	; 0x50
 8001e04:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e0a:	2228      	movs	r2, #40	; 0x28
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f002 fa0d 	bl	800422e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e14:	f107 0314 	add.w	r3, r7, #20
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	60da      	str	r2, [r3, #12]
 8001e22:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e24:	1d3b      	adds	r3, r7, #4
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	605a      	str	r2, [r3, #4]
 8001e2c:	609a      	str	r2, [r3, #8]
 8001e2e:	60da      	str	r2, [r3, #12]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e30:	2301      	movs	r3, #1
 8001e32:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e38:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e42:	2302      	movs	r3, #2
 8001e44:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e4a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001e4c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001e50:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e56:	4618      	mov	r0, r3
 8001e58:	f001 fa1c 	bl	8003294 <HAL_RCC_OscConfig>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <SystemClock_Config+0x66>
	{
		Error_Handler();
 8001e62:	f000 f945 	bl	80020f0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e66:	230f      	movs	r3, #15
 8001e68:	617b      	str	r3, [r7, #20]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e76:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e7c:	f107 0314 	add.w	r3, r7, #20
 8001e80:	2102      	movs	r1, #2
 8001e82:	4618      	mov	r0, r3
 8001e84:	f001 fc86 	bl	8003794 <HAL_RCC_ClockConfig>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <SystemClock_Config+0x92>
	{
		Error_Handler();
 8001e8e:	f000 f92f 	bl	80020f0 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001e92:	2302      	movs	r3, #2
 8001e94:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001e96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e9a:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e9c:	1d3b      	adds	r3, r7, #4
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f001 fe00 	bl	8003aa4 <HAL_RCCEx_PeriphCLKConfig>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <SystemClock_Config+0xae>
	{
		Error_Handler();
 8001eaa:	f000 f921 	bl	80020f0 <Error_Handler>
	}
}
 8001eae:	bf00      	nop
 8001eb0:	3750      	adds	r7, #80	; 0x50
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
	...

08001eb8 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8001ebe:	1d3b      	adds	r3, r7, #4
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	605a      	str	r2, [r3, #4]
 8001ec6:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 8001ec8:	4b18      	ldr	r3, [pc, #96]	; (8001f2c <MX_ADC1_Init+0x74>)
 8001eca:	4a19      	ldr	r2, [pc, #100]	; (8001f30 <MX_ADC1_Init+0x78>)
 8001ecc:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001ece:	4b17      	ldr	r3, [pc, #92]	; (8001f2c <MX_ADC1_Init+0x74>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001ed4:	4b15      	ldr	r3, [pc, #84]	; (8001f2c <MX_ADC1_Init+0x74>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001eda:	4b14      	ldr	r3, [pc, #80]	; (8001f2c <MX_ADC1_Init+0x74>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ee0:	4b12      	ldr	r3, [pc, #72]	; (8001f2c <MX_ADC1_Init+0x74>)
 8001ee2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001ee6:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ee8:	4b10      	ldr	r3, [pc, #64]	; (8001f2c <MX_ADC1_Init+0x74>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 8001eee:	4b0f      	ldr	r3, [pc, #60]	; (8001f2c <MX_ADC1_Init+0x74>)
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ef4:	480d      	ldr	r0, [pc, #52]	; (8001f2c <MX_ADC1_Init+0x74>)
 8001ef6:	f000 fb3b 	bl	8002570 <HAL_ADC_Init>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <MX_ADC1_Init+0x4c>
	{
		Error_Handler();
 8001f00:	f000 f8f6 	bl	80020f0 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_12;
 8001f04:	230c      	movs	r3, #12
 8001f06:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f10:	1d3b      	adds	r3, r7, #4
 8001f12:	4619      	mov	r1, r3
 8001f14:	4805      	ldr	r0, [pc, #20]	; (8001f2c <MX_ADC1_Init+0x74>)
 8001f16:	f000 fde3 	bl	8002ae0 <HAL_ADC_ConfigChannel>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_ADC1_Init+0x6c>
	{
		Error_Handler();
 8001f20:	f000 f8e6 	bl	80020f0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001f24:	bf00      	nop
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	200001bc 	.word	0x200001bc
 8001f30:	40012400 	.word	0x40012400

08001f34 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001f38:	4b17      	ldr	r3, [pc, #92]	; (8001f98 <MX_SPI1_Init+0x64>)
 8001f3a:	4a18      	ldr	r2, [pc, #96]	; (8001f9c <MX_SPI1_Init+0x68>)
 8001f3c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f3e:	4b16      	ldr	r3, [pc, #88]	; (8001f98 <MX_SPI1_Init+0x64>)
 8001f40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f44:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f46:	4b14      	ldr	r3, [pc, #80]	; (8001f98 <MX_SPI1_Init+0x64>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f4c:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <MX_SPI1_Init+0x64>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f52:	4b11      	ldr	r3, [pc, #68]	; (8001f98 <MX_SPI1_Init+0x64>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f58:	4b0f      	ldr	r3, [pc, #60]	; (8001f98 <MX_SPI1_Init+0x64>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f5e:	4b0e      	ldr	r3, [pc, #56]	; (8001f98 <MX_SPI1_Init+0x64>)
 8001f60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f64:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001f66:	4b0c      	ldr	r3, [pc, #48]	; (8001f98 <MX_SPI1_Init+0x64>)
 8001f68:	2208      	movs	r2, #8
 8001f6a:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f6c:	4b0a      	ldr	r3, [pc, #40]	; (8001f98 <MX_SPI1_Init+0x64>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f72:	4b09      	ldr	r3, [pc, #36]	; (8001f98 <MX_SPI1_Init+0x64>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f78:	4b07      	ldr	r3, [pc, #28]	; (8001f98 <MX_SPI1_Init+0x64>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8001f7e:	4b06      	ldr	r3, [pc, #24]	; (8001f98 <MX_SPI1_Init+0x64>)
 8001f80:	220a      	movs	r2, #10
 8001f82:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f84:	4804      	ldr	r0, [pc, #16]	; (8001f98 <MX_SPI1_Init+0x64>)
 8001f86:	f001 feff 	bl	8003d88 <HAL_SPI_Init>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 8001f90:	f000 f8ae 	bl	80020f0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001f94:	bf00      	nop
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	200001ec 	.word	0x200001ec
 8001f9c:	40013000 	.word	0x40013000

08001fa0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b088      	sub	sp, #32
 8001fa4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa6:	f107 0310 	add.w	r3, r7, #16
 8001faa:	2200      	movs	r2, #0
 8001fac:	601a      	str	r2, [r3, #0]
 8001fae:	605a      	str	r2, [r3, #4]
 8001fb0:	609a      	str	r2, [r3, #8]
 8001fb2:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001fb4:	4b4a      	ldr	r3, [pc, #296]	; (80020e0 <MX_GPIO_Init+0x140>)
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	4a49      	ldr	r2, [pc, #292]	; (80020e0 <MX_GPIO_Init+0x140>)
 8001fba:	f043 0320 	orr.w	r3, r3, #32
 8001fbe:	6193      	str	r3, [r2, #24]
 8001fc0:	4b47      	ldr	r3, [pc, #284]	; (80020e0 <MX_GPIO_Init+0x140>)
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	f003 0320 	and.w	r3, r3, #32
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001fcc:	4b44      	ldr	r3, [pc, #272]	; (80020e0 <MX_GPIO_Init+0x140>)
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	4a43      	ldr	r2, [pc, #268]	; (80020e0 <MX_GPIO_Init+0x140>)
 8001fd2:	f043 0310 	orr.w	r3, r3, #16
 8001fd6:	6193      	str	r3, [r2, #24]
 8001fd8:	4b41      	ldr	r3, [pc, #260]	; (80020e0 <MX_GPIO_Init+0x140>)
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	f003 0310 	and.w	r3, r3, #16
 8001fe0:	60bb      	str	r3, [r7, #8]
 8001fe2:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe4:	4b3e      	ldr	r3, [pc, #248]	; (80020e0 <MX_GPIO_Init+0x140>)
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	4a3d      	ldr	r2, [pc, #244]	; (80020e0 <MX_GPIO_Init+0x140>)
 8001fea:	f043 0304 	orr.w	r3, r3, #4
 8001fee:	6193      	str	r3, [r2, #24]
 8001ff0:	4b3b      	ldr	r3, [pc, #236]	; (80020e0 <MX_GPIO_Init+0x140>)
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	f003 0304 	and.w	r3, r3, #4
 8001ff8:	607b      	str	r3, [r7, #4]
 8001ffa:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001ffc:	4b38      	ldr	r3, [pc, #224]	; (80020e0 <MX_GPIO_Init+0x140>)
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	4a37      	ldr	r2, [pc, #220]	; (80020e0 <MX_GPIO_Init+0x140>)
 8002002:	f043 0308 	orr.w	r3, r3, #8
 8002006:	6193      	str	r3, [r2, #24]
 8002008:	4b35      	ldr	r3, [pc, #212]	; (80020e0 <MX_GPIO_Init+0x140>)
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	f003 0308 	and.w	r3, r3, #8
 8002010:	603b      	str	r3, [r7, #0]
 8002012:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8002014:	2200      	movs	r2, #0
 8002016:	2180      	movs	r1, #128	; 0x80
 8002018:	4832      	ldr	r0, [pc, #200]	; (80020e4 <MX_GPIO_Init+0x144>)
 800201a:	f001 f923 	bl	8003264 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LCD_RST_Pin|YMIN_Pin, GPIO_PIN_RESET);
 800201e:	2200      	movs	r2, #0
 8002020:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002024:	4830      	ldr	r0, [pc, #192]	; (80020e8 <MX_GPIO_Init+0x148>)
 8002026:	f001 f91d 	bl	8003264 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800202a:	2200      	movs	r2, #0
 800202c:	2140      	movs	r1, #64	; 0x40
 800202e:	482f      	ldr	r0, [pc, #188]	; (80020ec <MX_GPIO_Init+0x14c>)
 8002030:	f001 f918 	bl	8003264 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : XMIN_Pin */
	GPIO_InitStruct.Pin = XMIN_Pin;
 8002034:	2308      	movs	r3, #8
 8002036:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203c:	2300      	movs	r3, #0
 800203e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(XMIN_GPIO_Port, &GPIO_InitStruct);
 8002040:	f107 0310 	add.w	r3, r7, #16
 8002044:	4619      	mov	r1, r3
 8002046:	4827      	ldr	r0, [pc, #156]	; (80020e4 <MX_GPIO_Init+0x144>)
 8002048:	f000 ffb2 	bl	8002fb0 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_DC_Pin */
	GPIO_InitStruct.Pin = LCD_DC_Pin;
 800204c:	2380      	movs	r3, #128	; 0x80
 800204e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002050:	2301      	movs	r3, #1
 8002052:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002054:	2300      	movs	r3, #0
 8002056:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002058:	2302      	movs	r3, #2
 800205a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 800205c:	f107 0310 	add.w	r3, r7, #16
 8002060:	4619      	mov	r1, r3
 8002062:	4820      	ldr	r0, [pc, #128]	; (80020e4 <MX_GPIO_Init+0x144>)
 8002064:	f000 ffa4 	bl	8002fb0 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_RST_Pin */
	GPIO_InitStruct.Pin = LCD_RST_Pin;
 8002068:	f44f 7300 	mov.w	r3, #512	; 0x200
 800206c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800206e:	2301      	movs	r3, #1
 8002070:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002072:	2300      	movs	r3, #0
 8002074:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002076:	2302      	movs	r3, #2
 8002078:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 800207a:	f107 0310 	add.w	r3, r7, #16
 800207e:	4619      	mov	r1, r3
 8002080:	4819      	ldr	r0, [pc, #100]	; (80020e8 <MX_GPIO_Init+0x148>)
 8002082:	f000 ff95 	bl	8002fb0 <HAL_GPIO_Init>

	/*Configure GPIO pin : YMIN_Pin */
	GPIO_InitStruct.Pin = YMIN_Pin;
 8002086:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800208a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800208c:	2301      	movs	r3, #1
 800208e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002090:	2302      	movs	r3, #2
 8002092:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002094:	2303      	movs	r3, #3
 8002096:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(YMIN_GPIO_Port, &GPIO_InitStruct);
 8002098:	f107 0310 	add.w	r3, r7, #16
 800209c:	4619      	mov	r1, r3
 800209e:	4812      	ldr	r0, [pc, #72]	; (80020e8 <MX_GPIO_Init+0x148>)
 80020a0:	f000 ff86 	bl	8002fb0 <HAL_GPIO_Init>

	/*Configure GPIO pin : XPLUS_Pin */
	GPIO_InitStruct.Pin = XPLUS_Pin;
 80020a4:	2320      	movs	r3, #32
 80020a6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020a8:	2300      	movs	r3, #0
 80020aa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80020ac:	2302      	movs	r3, #2
 80020ae:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(XPLUS_GPIO_Port, &GPIO_InitStruct);
 80020b0:	f107 0310 	add.w	r3, r7, #16
 80020b4:	4619      	mov	r1, r3
 80020b6:	480d      	ldr	r0, [pc, #52]	; (80020ec <MX_GPIO_Init+0x14c>)
 80020b8:	f000 ff7a 	bl	8002fb0 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_CS_Pin */
	GPIO_InitStruct.Pin = LCD_CS_Pin;
 80020bc:	2340      	movs	r3, #64	; 0x40
 80020be:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020c0:	2301      	movs	r3, #1
 80020c2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c8:	2302      	movs	r3, #2
 80020ca:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 80020cc:	f107 0310 	add.w	r3, r7, #16
 80020d0:	4619      	mov	r1, r3
 80020d2:	4806      	ldr	r0, [pc, #24]	; (80020ec <MX_GPIO_Init+0x14c>)
 80020d4:	f000 ff6c 	bl	8002fb0 <HAL_GPIO_Init>

}
 80020d8:	bf00      	nop
 80020da:	3720      	adds	r7, #32
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40021000 	.word	0x40021000
 80020e4:	40011000 	.word	0x40011000
 80020e8:	40010800 	.word	0x40010800
 80020ec:	40010c00 	.word	0x40010c00

080020f0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80020f4:	bf00      	nop
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bc80      	pop	{r7}
 80020fa:	4770      	bx	lr

080020fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002102:	4b15      	ldr	r3, [pc, #84]	; (8002158 <HAL_MspInit+0x5c>)
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	4a14      	ldr	r2, [pc, #80]	; (8002158 <HAL_MspInit+0x5c>)
 8002108:	f043 0301 	orr.w	r3, r3, #1
 800210c:	6193      	str	r3, [r2, #24]
 800210e:	4b12      	ldr	r3, [pc, #72]	; (8002158 <HAL_MspInit+0x5c>)
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	60bb      	str	r3, [r7, #8]
 8002118:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800211a:	4b0f      	ldr	r3, [pc, #60]	; (8002158 <HAL_MspInit+0x5c>)
 800211c:	69db      	ldr	r3, [r3, #28]
 800211e:	4a0e      	ldr	r2, [pc, #56]	; (8002158 <HAL_MspInit+0x5c>)
 8002120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002124:	61d3      	str	r3, [r2, #28]
 8002126:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <HAL_MspInit+0x5c>)
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212e:	607b      	str	r3, [r7, #4]
 8002130:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002132:	4b0a      	ldr	r3, [pc, #40]	; (800215c <HAL_MspInit+0x60>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	4a04      	ldr	r2, [pc, #16]	; (800215c <HAL_MspInit+0x60>)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800214e:	bf00      	nop
 8002150:	3714      	adds	r7, #20
 8002152:	46bd      	mov	sp, r7
 8002154:	bc80      	pop	{r7}
 8002156:	4770      	bx	lr
 8002158:	40021000 	.word	0x40021000
 800215c:	40010000 	.word	0x40010000

08002160 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b088      	sub	sp, #32
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002168:	f107 0310 	add.w	r3, r7, #16
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a14      	ldr	r2, [pc, #80]	; (80021cc <HAL_ADC_MspInit+0x6c>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d121      	bne.n	80021c4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002180:	4b13      	ldr	r3, [pc, #76]	; (80021d0 <HAL_ADC_MspInit+0x70>)
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	4a12      	ldr	r2, [pc, #72]	; (80021d0 <HAL_ADC_MspInit+0x70>)
 8002186:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800218a:	6193      	str	r3, [r2, #24]
 800218c:	4b10      	ldr	r3, [pc, #64]	; (80021d0 <HAL_ADC_MspInit+0x70>)
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002194:	60fb      	str	r3, [r7, #12]
 8002196:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002198:	4b0d      	ldr	r3, [pc, #52]	; (80021d0 <HAL_ADC_MspInit+0x70>)
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	4a0c      	ldr	r2, [pc, #48]	; (80021d0 <HAL_ADC_MspInit+0x70>)
 800219e:	f043 0310 	orr.w	r3, r3, #16
 80021a2:	6193      	str	r3, [r2, #24]
 80021a4:	4b0a      	ldr	r3, [pc, #40]	; (80021d0 <HAL_ADC_MspInit+0x70>)
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	f003 0310 	and.w	r3, r3, #16
 80021ac:	60bb      	str	r3, [r7, #8]
 80021ae:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PC2     ------> ADC1_IN12 
    */
    GPIO_InitStruct.Pin = YPLUS_Pin;
 80021b0:	2304      	movs	r3, #4
 80021b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021b4:	2303      	movs	r3, #3
 80021b6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(YPLUS_GPIO_Port, &GPIO_InitStruct);
 80021b8:	f107 0310 	add.w	r3, r7, #16
 80021bc:	4619      	mov	r1, r3
 80021be:	4805      	ldr	r0, [pc, #20]	; (80021d4 <HAL_ADC_MspInit+0x74>)
 80021c0:	f000 fef6 	bl	8002fb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80021c4:	bf00      	nop
 80021c6:	3720      	adds	r7, #32
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	40012400 	.word	0x40012400
 80021d0:	40021000 	.word	0x40021000
 80021d4:	40011000 	.word	0x40011000

080021d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b088      	sub	sp, #32
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e0:	f107 0310 	add.w	r3, r7, #16
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	605a      	str	r2, [r3, #4]
 80021ea:	609a      	str	r2, [r3, #8]
 80021ec:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a1b      	ldr	r2, [pc, #108]	; (8002260 <HAL_SPI_MspInit+0x88>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d12f      	bne.n	8002258 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021f8:	4b1a      	ldr	r3, [pc, #104]	; (8002264 <HAL_SPI_MspInit+0x8c>)
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	4a19      	ldr	r2, [pc, #100]	; (8002264 <HAL_SPI_MspInit+0x8c>)
 80021fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002202:	6193      	str	r3, [r2, #24]
 8002204:	4b17      	ldr	r3, [pc, #92]	; (8002264 <HAL_SPI_MspInit+0x8c>)
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800220c:	60fb      	str	r3, [r7, #12]
 800220e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002210:	4b14      	ldr	r3, [pc, #80]	; (8002264 <HAL_SPI_MspInit+0x8c>)
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	4a13      	ldr	r2, [pc, #76]	; (8002264 <HAL_SPI_MspInit+0x8c>)
 8002216:	f043 0304 	orr.w	r3, r3, #4
 800221a:	6193      	str	r3, [r2, #24]
 800221c:	4b11      	ldr	r3, [pc, #68]	; (8002264 <HAL_SPI_MspInit+0x8c>)
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	f003 0304 	and.w	r3, r3, #4
 8002224:	60bb      	str	r3, [r7, #8]
 8002226:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002228:	23a0      	movs	r3, #160	; 0xa0
 800222a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222c:	2302      	movs	r3, #2
 800222e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002230:	2303      	movs	r3, #3
 8002232:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002234:	f107 0310 	add.w	r3, r7, #16
 8002238:	4619      	mov	r1, r3
 800223a:	480b      	ldr	r0, [pc, #44]	; (8002268 <HAL_SPI_MspInit+0x90>)
 800223c:	f000 feb8 	bl	8002fb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002240:	2340      	movs	r3, #64	; 0x40
 8002242:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002244:	2300      	movs	r3, #0
 8002246:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002248:	2300      	movs	r3, #0
 800224a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800224c:	f107 0310 	add.w	r3, r7, #16
 8002250:	4619      	mov	r1, r3
 8002252:	4805      	ldr	r0, [pc, #20]	; (8002268 <HAL_SPI_MspInit+0x90>)
 8002254:	f000 feac 	bl	8002fb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002258:	bf00      	nop
 800225a:	3720      	adds	r7, #32
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	40013000 	.word	0x40013000
 8002264:	40021000 	.word	0x40021000
 8002268:	40010800 	.word	0x40010800

0800226c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002270:	bf00      	nop
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr

08002278 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800227c:	e7fe      	b.n	800227c <HardFault_Handler+0x4>

0800227e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800227e:	b480      	push	{r7}
 8002280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002282:	e7fe      	b.n	8002282 <MemManage_Handler+0x4>

08002284 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002288:	e7fe      	b.n	8002288 <BusFault_Handler+0x4>

0800228a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800228a:	b480      	push	{r7}
 800228c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800228e:	e7fe      	b.n	800228e <UsageFault_Handler+0x4>

08002290 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002294:	bf00      	nop
 8002296:	46bd      	mov	sp, r7
 8002298:	bc80      	pop	{r7}
 800229a:	4770      	bx	lr

0800229c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022a0:	bf00      	nop
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr

080022a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022ac:	bf00      	nop
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bc80      	pop	{r7}
 80022b2:	4770      	bx	lr

080022b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022b8:	f000 f91c 	bl	80024f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022bc:	bf00      	nop
 80022be:	bd80      	pop	{r7, pc}

080022c0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022cc:	2300      	movs	r3, #0
 80022ce:	617b      	str	r3, [r7, #20]
 80022d0:	e00a      	b.n	80022e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022d2:	f3af 8000 	nop.w
 80022d6:	4601      	mov	r1, r0
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	1c5a      	adds	r2, r3, #1
 80022dc:	60ba      	str	r2, [r7, #8]
 80022de:	b2ca      	uxtb	r2, r1
 80022e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	3301      	adds	r3, #1
 80022e6:	617b      	str	r3, [r7, #20]
 80022e8:	697a      	ldr	r2, [r7, #20]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	dbf0      	blt.n	80022d2 <_read+0x12>
	}

return len;
 80022f0:	687b      	ldr	r3, [r7, #4]
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3718      	adds	r7, #24
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <_close>:
	}
	return len;
}

int _close(int file)
{
 80022fa:	b480      	push	{r7}
 80022fc:	b083      	sub	sp, #12
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
	return -1;
 8002302:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002306:	4618      	mov	r0, r3
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	bc80      	pop	{r7}
 800230e:	4770      	bx	lr

08002310 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002320:	605a      	str	r2, [r3, #4]
	return 0;
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	bc80      	pop	{r7}
 800232c:	4770      	bx	lr

0800232e <_isatty>:

int _isatty(int file)
{
 800232e:	b480      	push	{r7}
 8002330:	b083      	sub	sp, #12
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
	return 1;
 8002336:	2301      	movs	r3, #1
}
 8002338:	4618      	mov	r0, r3
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	bc80      	pop	{r7}
 8002340:	4770      	bx	lr

08002342 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002342:	b480      	push	{r7}
 8002344:	b085      	sub	sp, #20
 8002346:	af00      	add	r7, sp, #0
 8002348:	60f8      	str	r0, [r7, #12]
 800234a:	60b9      	str	r1, [r7, #8]
 800234c:	607a      	str	r2, [r7, #4]
	return 0;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	3714      	adds	r7, #20
 8002354:	46bd      	mov	sp, r7
 8002356:	bc80      	pop	{r7}
 8002358:	4770      	bx	lr
	...

0800235c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002364:	4b11      	ldr	r3, [pc, #68]	; (80023ac <_sbrk+0x50>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d102      	bne.n	8002372 <_sbrk+0x16>
		heap_end = &end;
 800236c:	4b0f      	ldr	r3, [pc, #60]	; (80023ac <_sbrk+0x50>)
 800236e:	4a10      	ldr	r2, [pc, #64]	; (80023b0 <_sbrk+0x54>)
 8002370:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002372:	4b0e      	ldr	r3, [pc, #56]	; (80023ac <_sbrk+0x50>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002378:	4b0c      	ldr	r3, [pc, #48]	; (80023ac <_sbrk+0x50>)
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4413      	add	r3, r2
 8002380:	466a      	mov	r2, sp
 8002382:	4293      	cmp	r3, r2
 8002384:	d907      	bls.n	8002396 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002386:	f001 ff1d 	bl	80041c4 <__errno>
 800238a:	4602      	mov	r2, r0
 800238c:	230c      	movs	r3, #12
 800238e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002390:	f04f 33ff 	mov.w	r3, #4294967295
 8002394:	e006      	b.n	80023a4 <_sbrk+0x48>
	}

	heap_end += incr;
 8002396:	4b05      	ldr	r3, [pc, #20]	; (80023ac <_sbrk+0x50>)
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4413      	add	r3, r2
 800239e:	4a03      	ldr	r2, [pc, #12]	; (80023ac <_sbrk+0x50>)
 80023a0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80023a2:	68fb      	ldr	r3, [r7, #12]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3710      	adds	r7, #16
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	200001b0 	.word	0x200001b0
 80023b0:	20000250 	.word	0x20000250

080023b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80023b8:	4b15      	ldr	r3, [pc, #84]	; (8002410 <SystemInit+0x5c>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a14      	ldr	r2, [pc, #80]	; (8002410 <SystemInit+0x5c>)
 80023be:	f043 0301 	orr.w	r3, r3, #1
 80023c2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80023c4:	4b12      	ldr	r3, [pc, #72]	; (8002410 <SystemInit+0x5c>)
 80023c6:	685a      	ldr	r2, [r3, #4]
 80023c8:	4911      	ldr	r1, [pc, #68]	; (8002410 <SystemInit+0x5c>)
 80023ca:	4b12      	ldr	r3, [pc, #72]	; (8002414 <SystemInit+0x60>)
 80023cc:	4013      	ands	r3, r2
 80023ce:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80023d0:	4b0f      	ldr	r3, [pc, #60]	; (8002410 <SystemInit+0x5c>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a0e      	ldr	r2, [pc, #56]	; (8002410 <SystemInit+0x5c>)
 80023d6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80023da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023de:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80023e0:	4b0b      	ldr	r3, [pc, #44]	; (8002410 <SystemInit+0x5c>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a0a      	ldr	r2, [pc, #40]	; (8002410 <SystemInit+0x5c>)
 80023e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023ea:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80023ec:	4b08      	ldr	r3, [pc, #32]	; (8002410 <SystemInit+0x5c>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	4a07      	ldr	r2, [pc, #28]	; (8002410 <SystemInit+0x5c>)
 80023f2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80023f6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80023f8:	4b05      	ldr	r3, [pc, #20]	; (8002410 <SystemInit+0x5c>)
 80023fa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80023fe:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002400:	4b05      	ldr	r3, [pc, #20]	; (8002418 <SystemInit+0x64>)
 8002402:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002406:	609a      	str	r2, [r3, #8]
#endif 
}
 8002408:	bf00      	nop
 800240a:	46bd      	mov	sp, r7
 800240c:	bc80      	pop	{r7}
 800240e:	4770      	bx	lr
 8002410:	40021000 	.word	0x40021000
 8002414:	f8ff0000 	.word	0xf8ff0000
 8002418:	e000ed00 	.word	0xe000ed00

0800241c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800241c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800241e:	e003      	b.n	8002428 <LoopCopyDataInit>

08002420 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002420:	4b0b      	ldr	r3, [pc, #44]	; (8002450 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002422:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002424:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002426:	3104      	adds	r1, #4

08002428 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002428:	480a      	ldr	r0, [pc, #40]	; (8002454 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800242a:	4b0b      	ldr	r3, [pc, #44]	; (8002458 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800242c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800242e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002430:	d3f6      	bcc.n	8002420 <CopyDataInit>
  ldr r2, =_sbss
 8002432:	4a0a      	ldr	r2, [pc, #40]	; (800245c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002434:	e002      	b.n	800243c <LoopFillZerobss>

08002436 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002436:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002438:	f842 3b04 	str.w	r3, [r2], #4

0800243c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800243c:	4b08      	ldr	r3, [pc, #32]	; (8002460 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800243e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002440:	d3f9      	bcc.n	8002436 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002442:	f7ff ffb7 	bl	80023b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002446:	f001 fec3 	bl	80041d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800244a:	f7ff fb7f 	bl	8001b4c <main>
  bx lr
 800244e:	4770      	bx	lr
  ldr r3, =_sidata
 8002450:	080098b0 	.word	0x080098b0
  ldr r0, =_sdata
 8002454:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002458:	200000f0 	.word	0x200000f0
  ldr r2, =_sbss
 800245c:	200000f0 	.word	0x200000f0
  ldr r3, = _ebss
 8002460:	2000024c 	.word	0x2000024c

08002464 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002464:	e7fe      	b.n	8002464 <ADC1_2_IRQHandler>
	...

08002468 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800246c:	4b08      	ldr	r3, [pc, #32]	; (8002490 <HAL_Init+0x28>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a07      	ldr	r2, [pc, #28]	; (8002490 <HAL_Init+0x28>)
 8002472:	f043 0310 	orr.w	r3, r3, #16
 8002476:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002478:	2003      	movs	r0, #3
 800247a:	f000 fd65 	bl	8002f48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800247e:	2000      	movs	r0, #0
 8002480:	f000 f808 	bl	8002494 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002484:	f7ff fe3a 	bl	80020fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	40022000 	.word	0x40022000

08002494 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800249c:	4b12      	ldr	r3, [pc, #72]	; (80024e8 <HAL_InitTick+0x54>)
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	4b12      	ldr	r3, [pc, #72]	; (80024ec <HAL_InitTick+0x58>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	4619      	mov	r1, r3
 80024a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80024ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b2:	4618      	mov	r0, r3
 80024b4:	f000 fd6f 	bl	8002f96 <HAL_SYSTICK_Config>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e00e      	b.n	80024e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2b0f      	cmp	r3, #15
 80024c6:	d80a      	bhi.n	80024de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024c8:	2200      	movs	r2, #0
 80024ca:	6879      	ldr	r1, [r7, #4]
 80024cc:	f04f 30ff 	mov.w	r0, #4294967295
 80024d0:	f000 fd45 	bl	8002f5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024d4:	4a06      	ldr	r2, [pc, #24]	; (80024f0 <HAL_InitTick+0x5c>)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024da:	2300      	movs	r3, #0
 80024dc:	e000      	b.n	80024e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	2000007c 	.word	0x2000007c
 80024ec:	20000084 	.word	0x20000084
 80024f0:	20000080 	.word	0x20000080

080024f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024f8:	4b05      	ldr	r3, [pc, #20]	; (8002510 <HAL_IncTick+0x1c>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	461a      	mov	r2, r3
 80024fe:	4b05      	ldr	r3, [pc, #20]	; (8002514 <HAL_IncTick+0x20>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4413      	add	r3, r2
 8002504:	4a03      	ldr	r2, [pc, #12]	; (8002514 <HAL_IncTick+0x20>)
 8002506:	6013      	str	r3, [r2, #0]
}
 8002508:	bf00      	nop
 800250a:	46bd      	mov	sp, r7
 800250c:	bc80      	pop	{r7}
 800250e:	4770      	bx	lr
 8002510:	20000084 	.word	0x20000084
 8002514:	20000244 	.word	0x20000244

08002518 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  return uwTick;
 800251c:	4b02      	ldr	r3, [pc, #8]	; (8002528 <HAL_GetTick+0x10>)
 800251e:	681b      	ldr	r3, [r3, #0]
}
 8002520:	4618      	mov	r0, r3
 8002522:	46bd      	mov	sp, r7
 8002524:	bc80      	pop	{r7}
 8002526:	4770      	bx	lr
 8002528:	20000244 	.word	0x20000244

0800252c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002534:	f7ff fff0 	bl	8002518 <HAL_GetTick>
 8002538:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002544:	d005      	beq.n	8002552 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002546:	4b09      	ldr	r3, [pc, #36]	; (800256c <HAL_Delay+0x40>)
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	461a      	mov	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	4413      	add	r3, r2
 8002550:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002552:	bf00      	nop
 8002554:	f7ff ffe0 	bl	8002518 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	429a      	cmp	r2, r3
 8002562:	d8f7      	bhi.n	8002554 <HAL_Delay+0x28>
  {
  }
}
 8002564:	bf00      	nop
 8002566:	3710      	adds	r7, #16
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	20000084 	.word	0x20000084

08002570 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002578:	2300      	movs	r3, #0
 800257a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800257c:	2300      	movs	r3, #0
 800257e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002580:	2300      	movs	r3, #0
 8002582:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002584:	2300      	movs	r3, #0
 8002586:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e0be      	b.n	8002710 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259c:	2b00      	cmp	r3, #0
 800259e:	d109      	bne.n	80025b4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7ff fdd6 	bl	8002160 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f000 fbdd 	bl	8002d74 <ADC_ConversionStop_Disable>
 80025ba:	4603      	mov	r3, r0
 80025bc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c2:	f003 0310 	and.w	r3, r3, #16
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	f040 8099 	bne.w	80026fe <HAL_ADC_Init+0x18e>
 80025cc:	7dfb      	ldrb	r3, [r7, #23]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f040 8095 	bne.w	80026fe <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80025dc:	f023 0302 	bic.w	r3, r3, #2
 80025e0:	f043 0202 	orr.w	r2, r3, #2
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80025f0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	7b1b      	ldrb	r3, [r3, #12]
 80025f6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80025f8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80025fa:	68ba      	ldr	r2, [r7, #8]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002608:	d003      	beq.n	8002612 <HAL_ADC_Init+0xa2>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d102      	bne.n	8002618 <HAL_ADC_Init+0xa8>
 8002612:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002616:	e000      	b.n	800261a <HAL_ADC_Init+0xaa>
 8002618:	2300      	movs	r3, #0
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	4313      	orrs	r3, r2
 800261e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	7d1b      	ldrb	r3, [r3, #20]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d119      	bne.n	800265c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	7b1b      	ldrb	r3, [r3, #12]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d109      	bne.n	8002644 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	3b01      	subs	r3, #1
 8002636:	035a      	lsls	r2, r3, #13
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	4313      	orrs	r3, r2
 800263c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002640:	613b      	str	r3, [r7, #16]
 8002642:	e00b      	b.n	800265c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002648:	f043 0220 	orr.w	r2, r3, #32
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002654:	f043 0201 	orr.w	r2, r3, #1
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	430a      	orrs	r2, r1
 800266e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689a      	ldr	r2, [r3, #8]
 8002676:	4b28      	ldr	r3, [pc, #160]	; (8002718 <HAL_ADC_Init+0x1a8>)
 8002678:	4013      	ands	r3, r2
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	6812      	ldr	r2, [r2, #0]
 800267e:	68b9      	ldr	r1, [r7, #8]
 8002680:	430b      	orrs	r3, r1
 8002682:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800268c:	d003      	beq.n	8002696 <HAL_ADC_Init+0x126>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d104      	bne.n	80026a0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	3b01      	subs	r3, #1
 800269c:	051b      	lsls	r3, r3, #20
 800269e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	430a      	orrs	r2, r1
 80026b2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	689a      	ldr	r2, [r3, #8]
 80026ba:	4b18      	ldr	r3, [pc, #96]	; (800271c <HAL_ADC_Init+0x1ac>)
 80026bc:	4013      	ands	r3, r2
 80026be:	68ba      	ldr	r2, [r7, #8]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d10b      	bne.n	80026dc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ce:	f023 0303 	bic.w	r3, r3, #3
 80026d2:	f043 0201 	orr.w	r2, r3, #1
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80026da:	e018      	b.n	800270e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e0:	f023 0312 	bic.w	r3, r3, #18
 80026e4:	f043 0210 	orr.w	r2, r3, #16
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f0:	f043 0201 	orr.w	r2, r3, #1
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80026fc:	e007      	b.n	800270e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002702:	f043 0210 	orr.w	r2, r3, #16
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800270e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002710:	4618      	mov	r0, r3
 8002712:	3718      	adds	r7, #24
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	ffe1f7fd 	.word	0xffe1f7fd
 800271c:	ff1f0efe 	.word	0xff1f0efe

08002720 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002728:	2300      	movs	r3, #0
 800272a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002732:	2b01      	cmp	r3, #1
 8002734:	d101      	bne.n	800273a <HAL_ADC_Start+0x1a>
 8002736:	2302      	movs	r3, #2
 8002738:	e098      	b.n	800286c <HAL_ADC_Start+0x14c>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2201      	movs	r2, #1
 800273e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f000 fac4 	bl	8002cd0 <ADC_Enable>
 8002748:	4603      	mov	r3, r0
 800274a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800274c:	7bfb      	ldrb	r3, [r7, #15]
 800274e:	2b00      	cmp	r3, #0
 8002750:	f040 8087 	bne.w	8002862 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002758:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800275c:	f023 0301 	bic.w	r3, r3, #1
 8002760:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a41      	ldr	r2, [pc, #260]	; (8002874 <HAL_ADC_Start+0x154>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d105      	bne.n	800277e <HAL_ADC_Start+0x5e>
 8002772:	4b41      	ldr	r3, [pc, #260]	; (8002878 <HAL_ADC_Start+0x158>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d115      	bne.n	80027aa <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002782:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002794:	2b00      	cmp	r3, #0
 8002796:	d026      	beq.n	80027e6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027a0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80027a8:	e01d      	b.n	80027e6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a2f      	ldr	r2, [pc, #188]	; (8002878 <HAL_ADC_Start+0x158>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d004      	beq.n	80027ca <HAL_ADC_Start+0xaa>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a2b      	ldr	r2, [pc, #172]	; (8002874 <HAL_ADC_Start+0x154>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d10d      	bne.n	80027e6 <HAL_ADC_Start+0xc6>
 80027ca:	4b2b      	ldr	r3, [pc, #172]	; (8002878 <HAL_ADC_Start+0x158>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d007      	beq.n	80027e6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027da:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027de:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d006      	beq.n	8002800 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f6:	f023 0206 	bic.w	r2, r3, #6
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80027fe:	e002      	b.n	8002806 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f06f 0202 	mvn.w	r2, #2
 8002816:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002822:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002826:	d113      	bne.n	8002850 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800282c:	4a11      	ldr	r2, [pc, #68]	; (8002874 <HAL_ADC_Start+0x154>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d105      	bne.n	800283e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002832:	4b11      	ldr	r3, [pc, #68]	; (8002878 <HAL_ADC_Start+0x158>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800283a:	2b00      	cmp	r3, #0
 800283c:	d108      	bne.n	8002850 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800284c:	609a      	str	r2, [r3, #8]
 800284e:	e00c      	b.n	800286a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689a      	ldr	r2, [r3, #8]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800285e:	609a      	str	r2, [r3, #8]
 8002860:	e003      	b.n	800286a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800286a:	7bfb      	ldrb	r3, [r7, #15]
}
 800286c:	4618      	mov	r0, r3
 800286e:	3710      	adds	r7, #16
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	40012800 	.word	0x40012800
 8002878:	40012400 	.word	0x40012400

0800287c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002884:	2300      	movs	r3, #0
 8002886:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800288e:	2b01      	cmp	r3, #1
 8002890:	d101      	bne.n	8002896 <HAL_ADC_Stop+0x1a>
 8002892:	2302      	movs	r3, #2
 8002894:	e01a      	b.n	80028cc <HAL_ADC_Stop+0x50>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2201      	movs	r2, #1
 800289a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 fa68 	bl	8002d74 <ADC_ConversionStop_Disable>
 80028a4:	4603      	mov	r3, r0
 80028a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80028a8:	7bfb      	ldrb	r3, [r7, #15]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d109      	bne.n	80028c2 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80028b6:	f023 0301 	bic.w	r3, r3, #1
 80028ba:	f043 0201 	orr.w	r2, r3, #1
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80028ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80028d4:	b590      	push	{r4, r7, lr}
 80028d6:	b087      	sub	sp, #28
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80028de:	2300      	movs	r3, #0
 80028e0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80028e2:	2300      	movs	r3, #0
 80028e4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80028e6:	2300      	movs	r3, #0
 80028e8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80028ea:	f7ff fe15 	bl	8002518 <HAL_GetTick>
 80028ee:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00b      	beq.n	8002916 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002902:	f043 0220 	orr.w	r2, r3, #32
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e0c8      	b.n	8002aa8 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002920:	2b00      	cmp	r3, #0
 8002922:	d12a      	bne.n	800297a <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800292e:	2b00      	cmp	r3, #0
 8002930:	d123      	bne.n	800297a <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002932:	e01a      	b.n	800296a <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800293a:	d016      	beq.n	800296a <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d007      	beq.n	8002952 <HAL_ADC_PollForConversion+0x7e>
 8002942:	f7ff fde9 	bl	8002518 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	429a      	cmp	r2, r3
 8002950:	d20b      	bcs.n	800296a <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002956:	f043 0204 	orr.w	r2, r3, #4
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e09e      	b.n	8002aa8 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d0dd      	beq.n	8002934 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002978:	e06c      	b.n	8002a54 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800297a:	4b4d      	ldr	r3, [pc, #308]	; (8002ab0 <HAL_ADC_PollForConversion+0x1dc>)
 800297c:	681c      	ldr	r4, [r3, #0]
 800297e:	2002      	movs	r0, #2
 8002980:	f001 f946 	bl	8003c10 <HAL_RCCEx_GetPeriphCLKFreq>
 8002984:	4603      	mov	r3, r0
 8002986:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6919      	ldr	r1, [r3, #16]
 8002990:	4b48      	ldr	r3, [pc, #288]	; (8002ab4 <HAL_ADC_PollForConversion+0x1e0>)
 8002992:	400b      	ands	r3, r1
 8002994:	2b00      	cmp	r3, #0
 8002996:	d118      	bne.n	80029ca <HAL_ADC_PollForConversion+0xf6>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68d9      	ldr	r1, [r3, #12]
 800299e:	4b46      	ldr	r3, [pc, #280]	; (8002ab8 <HAL_ADC_PollForConversion+0x1e4>)
 80029a0:	400b      	ands	r3, r1
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d111      	bne.n	80029ca <HAL_ADC_PollForConversion+0xf6>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	6919      	ldr	r1, [r3, #16]
 80029ac:	4b43      	ldr	r3, [pc, #268]	; (8002abc <HAL_ADC_PollForConversion+0x1e8>)
 80029ae:	400b      	ands	r3, r1
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d108      	bne.n	80029c6 <HAL_ADC_PollForConversion+0xf2>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68d9      	ldr	r1, [r3, #12]
 80029ba:	4b41      	ldr	r3, [pc, #260]	; (8002ac0 <HAL_ADC_PollForConversion+0x1ec>)
 80029bc:	400b      	ands	r3, r1
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_ADC_PollForConversion+0xf2>
 80029c2:	2314      	movs	r3, #20
 80029c4:	e020      	b.n	8002a08 <HAL_ADC_PollForConversion+0x134>
 80029c6:	2329      	movs	r3, #41	; 0x29
 80029c8:	e01e      	b.n	8002a08 <HAL_ADC_PollForConversion+0x134>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	6919      	ldr	r1, [r3, #16]
 80029d0:	4b3a      	ldr	r3, [pc, #232]	; (8002abc <HAL_ADC_PollForConversion+0x1e8>)
 80029d2:	400b      	ands	r3, r1
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d106      	bne.n	80029e6 <HAL_ADC_PollForConversion+0x112>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68d9      	ldr	r1, [r3, #12]
 80029de:	4b38      	ldr	r3, [pc, #224]	; (8002ac0 <HAL_ADC_PollForConversion+0x1ec>)
 80029e0:	400b      	ands	r3, r1
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00d      	beq.n	8002a02 <HAL_ADC_PollForConversion+0x12e>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	6919      	ldr	r1, [r3, #16]
 80029ec:	4b35      	ldr	r3, [pc, #212]	; (8002ac4 <HAL_ADC_PollForConversion+0x1f0>)
 80029ee:	400b      	ands	r3, r1
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d108      	bne.n	8002a06 <HAL_ADC_PollForConversion+0x132>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68d9      	ldr	r1, [r3, #12]
 80029fa:	4b32      	ldr	r3, [pc, #200]	; (8002ac4 <HAL_ADC_PollForConversion+0x1f0>)
 80029fc:	400b      	ands	r3, r1
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_ADC_PollForConversion+0x132>
 8002a02:	2354      	movs	r3, #84	; 0x54
 8002a04:	e000      	b.n	8002a08 <HAL_ADC_PollForConversion+0x134>
 8002a06:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002a08:	fb02 f303 	mul.w	r3, r2, r3
 8002a0c:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002a0e:	e01d      	b.n	8002a4c <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a16:	d016      	beq.n	8002a46 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d007      	beq.n	8002a2e <HAL_ADC_PollForConversion+0x15a>
 8002a1e:	f7ff fd7b 	bl	8002518 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d20b      	bcs.n	8002a46 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a32:	f043 0204 	orr.w	r2, r3, #4
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e030      	b.n	8002aa8 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d8dd      	bhi.n	8002a10 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f06f 0212 	mvn.w	r2, #18
 8002a5c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a62:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002a74:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002a78:	d115      	bne.n	8002aa6 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d111      	bne.n	8002aa6 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d105      	bne.n	8002aa6 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9e:	f043 0201 	orr.w	r2, r3, #1
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	371c      	adds	r7, #28
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd90      	pop	{r4, r7, pc}
 8002ab0:	2000007c 	.word	0x2000007c
 8002ab4:	24924924 	.word	0x24924924
 8002ab8:	00924924 	.word	0x00924924
 8002abc:	12492492 	.word	0x12492492
 8002ac0:	00492492 	.word	0x00492492
 8002ac4:	00249249 	.word	0x00249249

08002ac8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bc80      	pop	{r7}
 8002ade:	4770      	bx	lr

08002ae0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002aea:	2300      	movs	r3, #0
 8002aec:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002aee:	2300      	movs	r3, #0
 8002af0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d101      	bne.n	8002b00 <HAL_ADC_ConfigChannel+0x20>
 8002afc:	2302      	movs	r3, #2
 8002afe:	e0dc      	b.n	8002cba <HAL_ADC_ConfigChannel+0x1da>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	2b06      	cmp	r3, #6
 8002b0e:	d81c      	bhi.n	8002b4a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685a      	ldr	r2, [r3, #4]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4413      	add	r3, r2
 8002b20:	3b05      	subs	r3, #5
 8002b22:	221f      	movs	r2, #31
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	43db      	mvns	r3, r3
 8002b2a:	4019      	ands	r1, r3
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	6818      	ldr	r0, [r3, #0]
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685a      	ldr	r2, [r3, #4]
 8002b34:	4613      	mov	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4413      	add	r3, r2
 8002b3a:	3b05      	subs	r3, #5
 8002b3c:	fa00 f203 	lsl.w	r2, r0, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	430a      	orrs	r2, r1
 8002b46:	635a      	str	r2, [r3, #52]	; 0x34
 8002b48:	e03c      	b.n	8002bc4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	2b0c      	cmp	r3, #12
 8002b50:	d81c      	bhi.n	8002b8c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685a      	ldr	r2, [r3, #4]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4413      	add	r3, r2
 8002b62:	3b23      	subs	r3, #35	; 0x23
 8002b64:	221f      	movs	r2, #31
 8002b66:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6a:	43db      	mvns	r3, r3
 8002b6c:	4019      	ands	r1, r3
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	6818      	ldr	r0, [r3, #0]
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	685a      	ldr	r2, [r3, #4]
 8002b76:	4613      	mov	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	4413      	add	r3, r2
 8002b7c:	3b23      	subs	r3, #35	; 0x23
 8002b7e:	fa00 f203 	lsl.w	r2, r0, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	430a      	orrs	r2, r1
 8002b88:	631a      	str	r2, [r3, #48]	; 0x30
 8002b8a:	e01b      	b.n	8002bc4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	685a      	ldr	r2, [r3, #4]
 8002b96:	4613      	mov	r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	4413      	add	r3, r2
 8002b9c:	3b41      	subs	r3, #65	; 0x41
 8002b9e:	221f      	movs	r2, #31
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	43db      	mvns	r3, r3
 8002ba6:	4019      	ands	r1, r3
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	6818      	ldr	r0, [r3, #0]
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685a      	ldr	r2, [r3, #4]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	4413      	add	r3, r2
 8002bb6:	3b41      	subs	r3, #65	; 0x41
 8002bb8:	fa00 f203 	lsl.w	r2, r0, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2b09      	cmp	r3, #9
 8002bca:	d91c      	bls.n	8002c06 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68d9      	ldr	r1, [r3, #12]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	4413      	add	r3, r2
 8002bdc:	3b1e      	subs	r3, #30
 8002bde:	2207      	movs	r2, #7
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	43db      	mvns	r3, r3
 8002be6:	4019      	ands	r1, r3
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	6898      	ldr	r0, [r3, #8]
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	4413      	add	r3, r2
 8002bf6:	3b1e      	subs	r3, #30
 8002bf8:	fa00 f203 	lsl.w	r2, r0, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	430a      	orrs	r2, r1
 8002c02:	60da      	str	r2, [r3, #12]
 8002c04:	e019      	b.n	8002c3a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	6919      	ldr	r1, [r3, #16]
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	4613      	mov	r3, r2
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	4413      	add	r3, r2
 8002c16:	2207      	movs	r2, #7
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	43db      	mvns	r3, r3
 8002c1e:	4019      	ands	r1, r3
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	6898      	ldr	r0, [r3, #8]
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	4413      	add	r3, r2
 8002c2e:	fa00 f203 	lsl.w	r2, r0, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	430a      	orrs	r2, r1
 8002c38:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2b10      	cmp	r3, #16
 8002c40:	d003      	beq.n	8002c4a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002c46:	2b11      	cmp	r3, #17
 8002c48:	d132      	bne.n	8002cb0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a1d      	ldr	r2, [pc, #116]	; (8002cc4 <HAL_ADC_ConfigChannel+0x1e4>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d125      	bne.n	8002ca0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d126      	bne.n	8002cb0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002c70:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2b10      	cmp	r3, #16
 8002c78:	d11a      	bne.n	8002cb0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c7a:	4b13      	ldr	r3, [pc, #76]	; (8002cc8 <HAL_ADC_ConfigChannel+0x1e8>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a13      	ldr	r2, [pc, #76]	; (8002ccc <HAL_ADC_ConfigChannel+0x1ec>)
 8002c80:	fba2 2303 	umull	r2, r3, r2, r3
 8002c84:	0c9a      	lsrs	r2, r3, #18
 8002c86:	4613      	mov	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	4413      	add	r3, r2
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c90:	e002      	b.n	8002c98 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	3b01      	subs	r3, #1
 8002c96:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1f9      	bne.n	8002c92 <HAL_ADC_ConfigChannel+0x1b2>
 8002c9e:	e007      	b.n	8002cb0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca4:	f043 0220 	orr.w	r2, r3, #32
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3714      	adds	r7, #20
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bc80      	pop	{r7}
 8002cc2:	4770      	bx	lr
 8002cc4:	40012400 	.word	0x40012400
 8002cc8:	2000007c 	.word	0x2000007c
 8002ccc:	431bde83 	.word	0x431bde83

08002cd0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d039      	beq.n	8002d62 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	689a      	ldr	r2, [r3, #8]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f042 0201 	orr.w	r2, r2, #1
 8002cfc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002cfe:	4b1b      	ldr	r3, [pc, #108]	; (8002d6c <ADC_Enable+0x9c>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a1b      	ldr	r2, [pc, #108]	; (8002d70 <ADC_Enable+0xa0>)
 8002d04:	fba2 2303 	umull	r2, r3, r2, r3
 8002d08:	0c9b      	lsrs	r3, r3, #18
 8002d0a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002d0c:	e002      	b.n	8002d14 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	3b01      	subs	r3, #1
 8002d12:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1f9      	bne.n	8002d0e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d1a:	f7ff fbfd 	bl	8002518 <HAL_GetTick>
 8002d1e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002d20:	e018      	b.n	8002d54 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d22:	f7ff fbf9 	bl	8002518 <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d911      	bls.n	8002d54 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d34:	f043 0210 	orr.w	r2, r3, #16
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d40:	f043 0201 	orr.w	r2, r3, #1
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e007      	b.n	8002d64 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d1df      	bne.n	8002d22 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	2000007c 	.word	0x2000007c
 8002d70:	431bde83 	.word	0x431bde83

08002d74 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d127      	bne.n	8002dde <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f022 0201 	bic.w	r2, r2, #1
 8002d9c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d9e:	f7ff fbbb 	bl	8002518 <HAL_GetTick>
 8002da2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002da4:	e014      	b.n	8002dd0 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002da6:	f7ff fbb7 	bl	8002518 <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d90d      	bls.n	8002dd0 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db8:	f043 0210 	orr.w	r2, r3, #16
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc4:	f043 0201 	orr.w	r2, r3, #1
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e007      	b.n	8002de0 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d0e3      	beq.n	8002da6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <__NVIC_SetPriorityGrouping>:
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f003 0307 	and.w	r3, r3, #7
 8002df6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002df8:	4b0c      	ldr	r3, [pc, #48]	; (8002e2c <__NVIC_SetPriorityGrouping+0x44>)
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dfe:	68ba      	ldr	r2, [r7, #8]
 8002e00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e04:	4013      	ands	r3, r2
 8002e06:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e1a:	4a04      	ldr	r2, [pc, #16]	; (8002e2c <__NVIC_SetPriorityGrouping+0x44>)
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	60d3      	str	r3, [r2, #12]
}
 8002e20:	bf00      	nop
 8002e22:	3714      	adds	r7, #20
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bc80      	pop	{r7}
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	e000ed00 	.word	0xe000ed00

08002e30 <__NVIC_GetPriorityGrouping>:
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e34:	4b04      	ldr	r3, [pc, #16]	; (8002e48 <__NVIC_GetPriorityGrouping+0x18>)
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	0a1b      	lsrs	r3, r3, #8
 8002e3a:	f003 0307 	and.w	r3, r3, #7
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bc80      	pop	{r7}
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	e000ed00 	.word	0xe000ed00

08002e4c <__NVIC_SetPriority>:
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	4603      	mov	r3, r0
 8002e54:	6039      	str	r1, [r7, #0]
 8002e56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	db0a      	blt.n	8002e76 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	b2da      	uxtb	r2, r3
 8002e64:	490c      	ldr	r1, [pc, #48]	; (8002e98 <__NVIC_SetPriority+0x4c>)
 8002e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e6a:	0112      	lsls	r2, r2, #4
 8002e6c:	b2d2      	uxtb	r2, r2
 8002e6e:	440b      	add	r3, r1
 8002e70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002e74:	e00a      	b.n	8002e8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	b2da      	uxtb	r2, r3
 8002e7a:	4908      	ldr	r1, [pc, #32]	; (8002e9c <__NVIC_SetPriority+0x50>)
 8002e7c:	79fb      	ldrb	r3, [r7, #7]
 8002e7e:	f003 030f 	and.w	r3, r3, #15
 8002e82:	3b04      	subs	r3, #4
 8002e84:	0112      	lsls	r2, r2, #4
 8002e86:	b2d2      	uxtb	r2, r2
 8002e88:	440b      	add	r3, r1
 8002e8a:	761a      	strb	r2, [r3, #24]
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bc80      	pop	{r7}
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	e000e100 	.word	0xe000e100
 8002e9c:	e000ed00 	.word	0xe000ed00

08002ea0 <NVIC_EncodePriority>:
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b089      	sub	sp, #36	; 0x24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f003 0307 	and.w	r3, r3, #7
 8002eb2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	f1c3 0307 	rsb	r3, r3, #7
 8002eba:	2b04      	cmp	r3, #4
 8002ebc:	bf28      	it	cs
 8002ebe:	2304      	movcs	r3, #4
 8002ec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	3304      	adds	r3, #4
 8002ec6:	2b06      	cmp	r3, #6
 8002ec8:	d902      	bls.n	8002ed0 <NVIC_EncodePriority+0x30>
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	3b03      	subs	r3, #3
 8002ece:	e000      	b.n	8002ed2 <NVIC_EncodePriority+0x32>
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	fa02 f303 	lsl.w	r3, r2, r3
 8002ede:	43da      	mvns	r2, r3
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	401a      	ands	r2, r3
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef2:	43d9      	mvns	r1, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ef8:	4313      	orrs	r3, r2
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3724      	adds	r7, #36	; 0x24
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bc80      	pop	{r7}
 8002f02:	4770      	bx	lr

08002f04 <SysTick_Config>:
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f14:	d301      	bcc.n	8002f1a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002f16:	2301      	movs	r3, #1
 8002f18:	e00f      	b.n	8002f3a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f1a:	4a0a      	ldr	r2, [pc, #40]	; (8002f44 <SysTick_Config+0x40>)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f22:	210f      	movs	r1, #15
 8002f24:	f04f 30ff 	mov.w	r0, #4294967295
 8002f28:	f7ff ff90 	bl	8002e4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f2c:	4b05      	ldr	r3, [pc, #20]	; (8002f44 <SysTick_Config+0x40>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f32:	4b04      	ldr	r3, [pc, #16]	; (8002f44 <SysTick_Config+0x40>)
 8002f34:	2207      	movs	r2, #7
 8002f36:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	e000e010 	.word	0xe000e010

08002f48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f7ff ff49 	bl	8002de8 <__NVIC_SetPriorityGrouping>
}
 8002f56:	bf00      	nop
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b086      	sub	sp, #24
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	4603      	mov	r3, r0
 8002f66:	60b9      	str	r1, [r7, #8]
 8002f68:	607a      	str	r2, [r7, #4]
 8002f6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f70:	f7ff ff5e 	bl	8002e30 <__NVIC_GetPriorityGrouping>
 8002f74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	68b9      	ldr	r1, [r7, #8]
 8002f7a:	6978      	ldr	r0, [r7, #20]
 8002f7c:	f7ff ff90 	bl	8002ea0 <NVIC_EncodePriority>
 8002f80:	4602      	mov	r2, r0
 8002f82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f86:	4611      	mov	r1, r2
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff ff5f 	bl	8002e4c <__NVIC_SetPriority>
}
 8002f8e:	bf00      	nop
 8002f90:	3718      	adds	r7, #24
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b082      	sub	sp, #8
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7ff ffb0 	bl	8002f04 <SysTick_Config>
 8002fa4:	4603      	mov	r3, r0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
	...

08002fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b08b      	sub	sp, #44	; 0x2c
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fc2:	e127      	b.n	8003214 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	69fa      	ldr	r2, [r7, #28]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	f040 8116 	bne.w	800320e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	2b12      	cmp	r3, #18
 8002fe8:	d034      	beq.n	8003054 <HAL_GPIO_Init+0xa4>
 8002fea:	2b12      	cmp	r3, #18
 8002fec:	d80d      	bhi.n	800300a <HAL_GPIO_Init+0x5a>
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d02b      	beq.n	800304a <HAL_GPIO_Init+0x9a>
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d804      	bhi.n	8003000 <HAL_GPIO_Init+0x50>
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d031      	beq.n	800305e <HAL_GPIO_Init+0xae>
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d01c      	beq.n	8003038 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002ffe:	e048      	b.n	8003092 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003000:	2b03      	cmp	r3, #3
 8003002:	d043      	beq.n	800308c <HAL_GPIO_Init+0xdc>
 8003004:	2b11      	cmp	r3, #17
 8003006:	d01b      	beq.n	8003040 <HAL_GPIO_Init+0x90>
          break;
 8003008:	e043      	b.n	8003092 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800300a:	4a89      	ldr	r2, [pc, #548]	; (8003230 <HAL_GPIO_Init+0x280>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d026      	beq.n	800305e <HAL_GPIO_Init+0xae>
 8003010:	4a87      	ldr	r2, [pc, #540]	; (8003230 <HAL_GPIO_Init+0x280>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d806      	bhi.n	8003024 <HAL_GPIO_Init+0x74>
 8003016:	4a87      	ldr	r2, [pc, #540]	; (8003234 <HAL_GPIO_Init+0x284>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d020      	beq.n	800305e <HAL_GPIO_Init+0xae>
 800301c:	4a86      	ldr	r2, [pc, #536]	; (8003238 <HAL_GPIO_Init+0x288>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d01d      	beq.n	800305e <HAL_GPIO_Init+0xae>
          break;
 8003022:	e036      	b.n	8003092 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003024:	4a85      	ldr	r2, [pc, #532]	; (800323c <HAL_GPIO_Init+0x28c>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d019      	beq.n	800305e <HAL_GPIO_Init+0xae>
 800302a:	4a85      	ldr	r2, [pc, #532]	; (8003240 <HAL_GPIO_Init+0x290>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d016      	beq.n	800305e <HAL_GPIO_Init+0xae>
 8003030:	4a84      	ldr	r2, [pc, #528]	; (8003244 <HAL_GPIO_Init+0x294>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d013      	beq.n	800305e <HAL_GPIO_Init+0xae>
          break;
 8003036:	e02c      	b.n	8003092 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	623b      	str	r3, [r7, #32]
          break;
 800303e:	e028      	b.n	8003092 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	3304      	adds	r3, #4
 8003046:	623b      	str	r3, [r7, #32]
          break;
 8003048:	e023      	b.n	8003092 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	3308      	adds	r3, #8
 8003050:	623b      	str	r3, [r7, #32]
          break;
 8003052:	e01e      	b.n	8003092 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	330c      	adds	r3, #12
 800305a:	623b      	str	r3, [r7, #32]
          break;
 800305c:	e019      	b.n	8003092 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d102      	bne.n	800306c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003066:	2304      	movs	r3, #4
 8003068:	623b      	str	r3, [r7, #32]
          break;
 800306a:	e012      	b.n	8003092 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d105      	bne.n	8003080 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003074:	2308      	movs	r3, #8
 8003076:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	69fa      	ldr	r2, [r7, #28]
 800307c:	611a      	str	r2, [r3, #16]
          break;
 800307e:	e008      	b.n	8003092 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003080:	2308      	movs	r3, #8
 8003082:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	69fa      	ldr	r2, [r7, #28]
 8003088:	615a      	str	r2, [r3, #20]
          break;
 800308a:	e002      	b.n	8003092 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800308c:	2300      	movs	r3, #0
 800308e:	623b      	str	r3, [r7, #32]
          break;
 8003090:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	2bff      	cmp	r3, #255	; 0xff
 8003096:	d801      	bhi.n	800309c <HAL_GPIO_Init+0xec>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	e001      	b.n	80030a0 <HAL_GPIO_Init+0xf0>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	3304      	adds	r3, #4
 80030a0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	2bff      	cmp	r3, #255	; 0xff
 80030a6:	d802      	bhi.n	80030ae <HAL_GPIO_Init+0xfe>
 80030a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	e002      	b.n	80030b4 <HAL_GPIO_Init+0x104>
 80030ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b0:	3b08      	subs	r3, #8
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	210f      	movs	r1, #15
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	fa01 f303 	lsl.w	r3, r1, r3
 80030c2:	43db      	mvns	r3, r3
 80030c4:	401a      	ands	r2, r3
 80030c6:	6a39      	ldr	r1, [r7, #32]
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	fa01 f303 	lsl.w	r3, r1, r3
 80030ce:	431a      	orrs	r2, r3
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f000 8096 	beq.w	800320e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80030e2:	4b59      	ldr	r3, [pc, #356]	; (8003248 <HAL_GPIO_Init+0x298>)
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	4a58      	ldr	r2, [pc, #352]	; (8003248 <HAL_GPIO_Init+0x298>)
 80030e8:	f043 0301 	orr.w	r3, r3, #1
 80030ec:	6193      	str	r3, [r2, #24]
 80030ee:	4b56      	ldr	r3, [pc, #344]	; (8003248 <HAL_GPIO_Init+0x298>)
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	60bb      	str	r3, [r7, #8]
 80030f8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80030fa:	4a54      	ldr	r2, [pc, #336]	; (800324c <HAL_GPIO_Init+0x29c>)
 80030fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fe:	089b      	lsrs	r3, r3, #2
 8003100:	3302      	adds	r3, #2
 8003102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003106:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310a:	f003 0303 	and.w	r3, r3, #3
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	220f      	movs	r2, #15
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	43db      	mvns	r3, r3
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	4013      	ands	r3, r2
 800311c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a4b      	ldr	r2, [pc, #300]	; (8003250 <HAL_GPIO_Init+0x2a0>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d013      	beq.n	800314e <HAL_GPIO_Init+0x19e>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a4a      	ldr	r2, [pc, #296]	; (8003254 <HAL_GPIO_Init+0x2a4>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d00d      	beq.n	800314a <HAL_GPIO_Init+0x19a>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a49      	ldr	r2, [pc, #292]	; (8003258 <HAL_GPIO_Init+0x2a8>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d007      	beq.n	8003146 <HAL_GPIO_Init+0x196>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a48      	ldr	r2, [pc, #288]	; (800325c <HAL_GPIO_Init+0x2ac>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d101      	bne.n	8003142 <HAL_GPIO_Init+0x192>
 800313e:	2303      	movs	r3, #3
 8003140:	e006      	b.n	8003150 <HAL_GPIO_Init+0x1a0>
 8003142:	2304      	movs	r3, #4
 8003144:	e004      	b.n	8003150 <HAL_GPIO_Init+0x1a0>
 8003146:	2302      	movs	r3, #2
 8003148:	e002      	b.n	8003150 <HAL_GPIO_Init+0x1a0>
 800314a:	2301      	movs	r3, #1
 800314c:	e000      	b.n	8003150 <HAL_GPIO_Init+0x1a0>
 800314e:	2300      	movs	r3, #0
 8003150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003152:	f002 0203 	and.w	r2, r2, #3
 8003156:	0092      	lsls	r2, r2, #2
 8003158:	4093      	lsls	r3, r2
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	4313      	orrs	r3, r2
 800315e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003160:	493a      	ldr	r1, [pc, #232]	; (800324c <HAL_GPIO_Init+0x29c>)
 8003162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003164:	089b      	lsrs	r3, r3, #2
 8003166:	3302      	adds	r3, #2
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d006      	beq.n	8003188 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800317a:	4b39      	ldr	r3, [pc, #228]	; (8003260 <HAL_GPIO_Init+0x2b0>)
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	4938      	ldr	r1, [pc, #224]	; (8003260 <HAL_GPIO_Init+0x2b0>)
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	4313      	orrs	r3, r2
 8003184:	600b      	str	r3, [r1, #0]
 8003186:	e006      	b.n	8003196 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003188:	4b35      	ldr	r3, [pc, #212]	; (8003260 <HAL_GPIO_Init+0x2b0>)
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	43db      	mvns	r3, r3
 8003190:	4933      	ldr	r1, [pc, #204]	; (8003260 <HAL_GPIO_Init+0x2b0>)
 8003192:	4013      	ands	r3, r2
 8003194:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d006      	beq.n	80031b0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80031a2:	4b2f      	ldr	r3, [pc, #188]	; (8003260 <HAL_GPIO_Init+0x2b0>)
 80031a4:	685a      	ldr	r2, [r3, #4]
 80031a6:	492e      	ldr	r1, [pc, #184]	; (8003260 <HAL_GPIO_Init+0x2b0>)
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	604b      	str	r3, [r1, #4]
 80031ae:	e006      	b.n	80031be <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80031b0:	4b2b      	ldr	r3, [pc, #172]	; (8003260 <HAL_GPIO_Init+0x2b0>)
 80031b2:	685a      	ldr	r2, [r3, #4]
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	43db      	mvns	r3, r3
 80031b8:	4929      	ldr	r1, [pc, #164]	; (8003260 <HAL_GPIO_Init+0x2b0>)
 80031ba:	4013      	ands	r3, r2
 80031bc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d006      	beq.n	80031d8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80031ca:	4b25      	ldr	r3, [pc, #148]	; (8003260 <HAL_GPIO_Init+0x2b0>)
 80031cc:	689a      	ldr	r2, [r3, #8]
 80031ce:	4924      	ldr	r1, [pc, #144]	; (8003260 <HAL_GPIO_Init+0x2b0>)
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	608b      	str	r3, [r1, #8]
 80031d6:	e006      	b.n	80031e6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80031d8:	4b21      	ldr	r3, [pc, #132]	; (8003260 <HAL_GPIO_Init+0x2b0>)
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	43db      	mvns	r3, r3
 80031e0:	491f      	ldr	r1, [pc, #124]	; (8003260 <HAL_GPIO_Init+0x2b0>)
 80031e2:	4013      	ands	r3, r2
 80031e4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d006      	beq.n	8003200 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80031f2:	4b1b      	ldr	r3, [pc, #108]	; (8003260 <HAL_GPIO_Init+0x2b0>)
 80031f4:	68da      	ldr	r2, [r3, #12]
 80031f6:	491a      	ldr	r1, [pc, #104]	; (8003260 <HAL_GPIO_Init+0x2b0>)
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	60cb      	str	r3, [r1, #12]
 80031fe:	e006      	b.n	800320e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003200:	4b17      	ldr	r3, [pc, #92]	; (8003260 <HAL_GPIO_Init+0x2b0>)
 8003202:	68da      	ldr	r2, [r3, #12]
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	43db      	mvns	r3, r3
 8003208:	4915      	ldr	r1, [pc, #84]	; (8003260 <HAL_GPIO_Init+0x2b0>)
 800320a:	4013      	ands	r3, r2
 800320c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003210:	3301      	adds	r3, #1
 8003212:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321a:	fa22 f303 	lsr.w	r3, r2, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	f47f aed0 	bne.w	8002fc4 <HAL_GPIO_Init+0x14>
  }
}
 8003224:	bf00      	nop
 8003226:	372c      	adds	r7, #44	; 0x2c
 8003228:	46bd      	mov	sp, r7
 800322a:	bc80      	pop	{r7}
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	10210000 	.word	0x10210000
 8003234:	10110000 	.word	0x10110000
 8003238:	10120000 	.word	0x10120000
 800323c:	10310000 	.word	0x10310000
 8003240:	10320000 	.word	0x10320000
 8003244:	10220000 	.word	0x10220000
 8003248:	40021000 	.word	0x40021000
 800324c:	40010000 	.word	0x40010000
 8003250:	40010800 	.word	0x40010800
 8003254:	40010c00 	.word	0x40010c00
 8003258:	40011000 	.word	0x40011000
 800325c:	40011400 	.word	0x40011400
 8003260:	40010400 	.word	0x40010400

08003264 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	460b      	mov	r3, r1
 800326e:	807b      	strh	r3, [r7, #2]
 8003270:	4613      	mov	r3, r2
 8003272:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003274:	787b      	ldrb	r3, [r7, #1]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800327a:	887a      	ldrh	r2, [r7, #2]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003280:	e003      	b.n	800328a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003282:	887b      	ldrh	r3, [r7, #2]
 8003284:	041a      	lsls	r2, r3, #16
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	611a      	str	r2, [r3, #16]
}
 800328a:	bf00      	nop
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	bc80      	pop	{r7}
 8003292:	4770      	bx	lr

08003294 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e26c      	b.n	8003780 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	f000 8087 	beq.w	80033c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032b4:	4b92      	ldr	r3, [pc, #584]	; (8003500 <HAL_RCC_OscConfig+0x26c>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f003 030c 	and.w	r3, r3, #12
 80032bc:	2b04      	cmp	r3, #4
 80032be:	d00c      	beq.n	80032da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032c0:	4b8f      	ldr	r3, [pc, #572]	; (8003500 <HAL_RCC_OscConfig+0x26c>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f003 030c 	and.w	r3, r3, #12
 80032c8:	2b08      	cmp	r3, #8
 80032ca:	d112      	bne.n	80032f2 <HAL_RCC_OscConfig+0x5e>
 80032cc:	4b8c      	ldr	r3, [pc, #560]	; (8003500 <HAL_RCC_OscConfig+0x26c>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032d8:	d10b      	bne.n	80032f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032da:	4b89      	ldr	r3, [pc, #548]	; (8003500 <HAL_RCC_OscConfig+0x26c>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d06c      	beq.n	80033c0 <HAL_RCC_OscConfig+0x12c>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d168      	bne.n	80033c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e246      	b.n	8003780 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032fa:	d106      	bne.n	800330a <HAL_RCC_OscConfig+0x76>
 80032fc:	4b80      	ldr	r3, [pc, #512]	; (8003500 <HAL_RCC_OscConfig+0x26c>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a7f      	ldr	r2, [pc, #508]	; (8003500 <HAL_RCC_OscConfig+0x26c>)
 8003302:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003306:	6013      	str	r3, [r2, #0]
 8003308:	e02e      	b.n	8003368 <HAL_RCC_OscConfig+0xd4>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d10c      	bne.n	800332c <HAL_RCC_OscConfig+0x98>
 8003312:	4b7b      	ldr	r3, [pc, #492]	; (8003500 <HAL_RCC_OscConfig+0x26c>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a7a      	ldr	r2, [pc, #488]	; (8003500 <HAL_RCC_OscConfig+0x26c>)
 8003318:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800331c:	6013      	str	r3, [r2, #0]
 800331e:	4b78      	ldr	r3, [pc, #480]	; (8003500 <HAL_RCC_OscConfig+0x26c>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a77      	ldr	r2, [pc, #476]	; (8003500 <HAL_RCC_OscConfig+0x26c>)
 8003324:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003328:	6013      	str	r3, [r2, #0]
 800332a:	e01d      	b.n	8003368 <HAL_RCC_OscConfig+0xd4>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003334:	d10c      	bne.n	8003350 <HAL_RCC_OscConfig+0xbc>
 8003336:	4b72      	ldr	r3, [pc, #456]	; (8003500 <HAL_RCC_OscConfig+0x26c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a71      	ldr	r2, [pc, #452]	; (8003500 <HAL_RCC_OscConfig+0x26c>)
 800333c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003340:	6013      	str	r3, [r2, #0]
 8003342:	4b6f      	ldr	r3, [pc, #444]	; (8003500 <HAL_RCC_OscConfig+0x26c>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a6e      	ldr	r2, [pc, #440]	; (8003500 <HAL_RCC_OscConfig+0x26c>)
 8003348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800334c:	6013      	str	r3, [r2, #0]
 800334e:	e00b      	b.n	8003368 <HAL_RCC_OscConfig+0xd4>
 8003350:	4b6b      	ldr	r3, [pc, #428]	; (8003500 <HAL_RCC_OscConfig+0x26c>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a6a      	ldr	r2, [pc, #424]	; (8003500 <HAL_RCC_OscConfig+0x26c>)
 8003356:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800335a:	6013      	str	r3, [r2, #0]
 800335c:	4b68      	ldr	r3, [pc, #416]	; (8003500 <HAL_RCC_OscConfig+0x26c>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a67      	ldr	r2, [pc, #412]	; (8003500 <HAL_RCC_OscConfig+0x26c>)
 8003362:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003366:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d013      	beq.n	8003398 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003370:	f7ff f8d2 	bl	8002518 <HAL_GetTick>
 8003374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003376:	e008      	b.n	800338a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003378:	f7ff f8ce 	bl	8002518 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b64      	cmp	r3, #100	; 0x64
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e1fa      	b.n	8003780 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800338a:	4b5d      	ldr	r3, [pc, #372]	; (8003500 <HAL_RCC_OscConfig+0x26c>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d0f0      	beq.n	8003378 <HAL_RCC_OscConfig+0xe4>
 8003396:	e014      	b.n	80033c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003398:	f7ff f8be 	bl	8002518 <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033a0:	f7ff f8ba 	bl	8002518 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b64      	cmp	r3, #100	; 0x64
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e1e6      	b.n	8003780 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033b2:	4b53      	ldr	r3, [pc, #332]	; (8003500 <HAL_RCC_OscConfig+0x26c>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1f0      	bne.n	80033a0 <HAL_RCC_OscConfig+0x10c>
 80033be:	e000      	b.n	80033c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d063      	beq.n	8003496 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033ce:	4b4c      	ldr	r3, [pc, #304]	; (8003500 <HAL_RCC_OscConfig+0x26c>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f003 030c 	and.w	r3, r3, #12
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00b      	beq.n	80033f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80033da:	4b49      	ldr	r3, [pc, #292]	; (8003500 <HAL_RCC_OscConfig+0x26c>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f003 030c 	and.w	r3, r3, #12
 80033e2:	2b08      	cmp	r3, #8
 80033e4:	d11c      	bne.n	8003420 <HAL_RCC_OscConfig+0x18c>
 80033e6:	4b46      	ldr	r3, [pc, #280]	; (8003500 <HAL_RCC_OscConfig+0x26c>)
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d116      	bne.n	8003420 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033f2:	4b43      	ldr	r3, [pc, #268]	; (8003500 <HAL_RCC_OscConfig+0x26c>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d005      	beq.n	800340a <HAL_RCC_OscConfig+0x176>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d001      	beq.n	800340a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e1ba      	b.n	8003780 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800340a:	4b3d      	ldr	r3, [pc, #244]	; (8003500 <HAL_RCC_OscConfig+0x26c>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	4939      	ldr	r1, [pc, #228]	; (8003500 <HAL_RCC_OscConfig+0x26c>)
 800341a:	4313      	orrs	r3, r2
 800341c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800341e:	e03a      	b.n	8003496 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d020      	beq.n	800346a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003428:	4b36      	ldr	r3, [pc, #216]	; (8003504 <HAL_RCC_OscConfig+0x270>)
 800342a:	2201      	movs	r2, #1
 800342c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800342e:	f7ff f873 	bl	8002518 <HAL_GetTick>
 8003432:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003434:	e008      	b.n	8003448 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003436:	f7ff f86f 	bl	8002518 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	2b02      	cmp	r3, #2
 8003442:	d901      	bls.n	8003448 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e19b      	b.n	8003780 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003448:	4b2d      	ldr	r3, [pc, #180]	; (8003500 <HAL_RCC_OscConfig+0x26c>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0302 	and.w	r3, r3, #2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d0f0      	beq.n	8003436 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003454:	4b2a      	ldr	r3, [pc, #168]	; (8003500 <HAL_RCC_OscConfig+0x26c>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	00db      	lsls	r3, r3, #3
 8003462:	4927      	ldr	r1, [pc, #156]	; (8003500 <HAL_RCC_OscConfig+0x26c>)
 8003464:	4313      	orrs	r3, r2
 8003466:	600b      	str	r3, [r1, #0]
 8003468:	e015      	b.n	8003496 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800346a:	4b26      	ldr	r3, [pc, #152]	; (8003504 <HAL_RCC_OscConfig+0x270>)
 800346c:	2200      	movs	r2, #0
 800346e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003470:	f7ff f852 	bl	8002518 <HAL_GetTick>
 8003474:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003476:	e008      	b.n	800348a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003478:	f7ff f84e 	bl	8002518 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b02      	cmp	r3, #2
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e17a      	b.n	8003780 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800348a:	4b1d      	ldr	r3, [pc, #116]	; (8003500 <HAL_RCC_OscConfig+0x26c>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1f0      	bne.n	8003478 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0308 	and.w	r3, r3, #8
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d03a      	beq.n	8003518 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d019      	beq.n	80034de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034aa:	4b17      	ldr	r3, [pc, #92]	; (8003508 <HAL_RCC_OscConfig+0x274>)
 80034ac:	2201      	movs	r2, #1
 80034ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034b0:	f7ff f832 	bl	8002518 <HAL_GetTick>
 80034b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034b6:	e008      	b.n	80034ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034b8:	f7ff f82e 	bl	8002518 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e15a      	b.n	8003780 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ca:	4b0d      	ldr	r3, [pc, #52]	; (8003500 <HAL_RCC_OscConfig+0x26c>)
 80034cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d0f0      	beq.n	80034b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80034d6:	2001      	movs	r0, #1
 80034d8:	f000 fac6 	bl	8003a68 <RCC_Delay>
 80034dc:	e01c      	b.n	8003518 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034de:	4b0a      	ldr	r3, [pc, #40]	; (8003508 <HAL_RCC_OscConfig+0x274>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034e4:	f7ff f818 	bl	8002518 <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034ea:	e00f      	b.n	800350c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034ec:	f7ff f814 	bl	8002518 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d908      	bls.n	800350c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e140      	b.n	8003780 <HAL_RCC_OscConfig+0x4ec>
 80034fe:	bf00      	nop
 8003500:	40021000 	.word	0x40021000
 8003504:	42420000 	.word	0x42420000
 8003508:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800350c:	4b9e      	ldr	r3, [pc, #632]	; (8003788 <HAL_RCC_OscConfig+0x4f4>)
 800350e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b00      	cmp	r3, #0
 8003516:	d1e9      	bne.n	80034ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0304 	and.w	r3, r3, #4
 8003520:	2b00      	cmp	r3, #0
 8003522:	f000 80a6 	beq.w	8003672 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003526:	2300      	movs	r3, #0
 8003528:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800352a:	4b97      	ldr	r3, [pc, #604]	; (8003788 <HAL_RCC_OscConfig+0x4f4>)
 800352c:	69db      	ldr	r3, [r3, #28]
 800352e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d10d      	bne.n	8003552 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003536:	4b94      	ldr	r3, [pc, #592]	; (8003788 <HAL_RCC_OscConfig+0x4f4>)
 8003538:	69db      	ldr	r3, [r3, #28]
 800353a:	4a93      	ldr	r2, [pc, #588]	; (8003788 <HAL_RCC_OscConfig+0x4f4>)
 800353c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003540:	61d3      	str	r3, [r2, #28]
 8003542:	4b91      	ldr	r3, [pc, #580]	; (8003788 <HAL_RCC_OscConfig+0x4f4>)
 8003544:	69db      	ldr	r3, [r3, #28]
 8003546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800354a:	60bb      	str	r3, [r7, #8]
 800354c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800354e:	2301      	movs	r3, #1
 8003550:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003552:	4b8e      	ldr	r3, [pc, #568]	; (800378c <HAL_RCC_OscConfig+0x4f8>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800355a:	2b00      	cmp	r3, #0
 800355c:	d118      	bne.n	8003590 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800355e:	4b8b      	ldr	r3, [pc, #556]	; (800378c <HAL_RCC_OscConfig+0x4f8>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a8a      	ldr	r2, [pc, #552]	; (800378c <HAL_RCC_OscConfig+0x4f8>)
 8003564:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003568:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800356a:	f7fe ffd5 	bl	8002518 <HAL_GetTick>
 800356e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003570:	e008      	b.n	8003584 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003572:	f7fe ffd1 	bl	8002518 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b64      	cmp	r3, #100	; 0x64
 800357e:	d901      	bls.n	8003584 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e0fd      	b.n	8003780 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003584:	4b81      	ldr	r3, [pc, #516]	; (800378c <HAL_RCC_OscConfig+0x4f8>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800358c:	2b00      	cmp	r3, #0
 800358e:	d0f0      	beq.n	8003572 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d106      	bne.n	80035a6 <HAL_RCC_OscConfig+0x312>
 8003598:	4b7b      	ldr	r3, [pc, #492]	; (8003788 <HAL_RCC_OscConfig+0x4f4>)
 800359a:	6a1b      	ldr	r3, [r3, #32]
 800359c:	4a7a      	ldr	r2, [pc, #488]	; (8003788 <HAL_RCC_OscConfig+0x4f4>)
 800359e:	f043 0301 	orr.w	r3, r3, #1
 80035a2:	6213      	str	r3, [r2, #32]
 80035a4:	e02d      	b.n	8003602 <HAL_RCC_OscConfig+0x36e>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10c      	bne.n	80035c8 <HAL_RCC_OscConfig+0x334>
 80035ae:	4b76      	ldr	r3, [pc, #472]	; (8003788 <HAL_RCC_OscConfig+0x4f4>)
 80035b0:	6a1b      	ldr	r3, [r3, #32]
 80035b2:	4a75      	ldr	r2, [pc, #468]	; (8003788 <HAL_RCC_OscConfig+0x4f4>)
 80035b4:	f023 0301 	bic.w	r3, r3, #1
 80035b8:	6213      	str	r3, [r2, #32]
 80035ba:	4b73      	ldr	r3, [pc, #460]	; (8003788 <HAL_RCC_OscConfig+0x4f4>)
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	4a72      	ldr	r2, [pc, #456]	; (8003788 <HAL_RCC_OscConfig+0x4f4>)
 80035c0:	f023 0304 	bic.w	r3, r3, #4
 80035c4:	6213      	str	r3, [r2, #32]
 80035c6:	e01c      	b.n	8003602 <HAL_RCC_OscConfig+0x36e>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	2b05      	cmp	r3, #5
 80035ce:	d10c      	bne.n	80035ea <HAL_RCC_OscConfig+0x356>
 80035d0:	4b6d      	ldr	r3, [pc, #436]	; (8003788 <HAL_RCC_OscConfig+0x4f4>)
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	4a6c      	ldr	r2, [pc, #432]	; (8003788 <HAL_RCC_OscConfig+0x4f4>)
 80035d6:	f043 0304 	orr.w	r3, r3, #4
 80035da:	6213      	str	r3, [r2, #32]
 80035dc:	4b6a      	ldr	r3, [pc, #424]	; (8003788 <HAL_RCC_OscConfig+0x4f4>)
 80035de:	6a1b      	ldr	r3, [r3, #32]
 80035e0:	4a69      	ldr	r2, [pc, #420]	; (8003788 <HAL_RCC_OscConfig+0x4f4>)
 80035e2:	f043 0301 	orr.w	r3, r3, #1
 80035e6:	6213      	str	r3, [r2, #32]
 80035e8:	e00b      	b.n	8003602 <HAL_RCC_OscConfig+0x36e>
 80035ea:	4b67      	ldr	r3, [pc, #412]	; (8003788 <HAL_RCC_OscConfig+0x4f4>)
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	4a66      	ldr	r2, [pc, #408]	; (8003788 <HAL_RCC_OscConfig+0x4f4>)
 80035f0:	f023 0301 	bic.w	r3, r3, #1
 80035f4:	6213      	str	r3, [r2, #32]
 80035f6:	4b64      	ldr	r3, [pc, #400]	; (8003788 <HAL_RCC_OscConfig+0x4f4>)
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	4a63      	ldr	r2, [pc, #396]	; (8003788 <HAL_RCC_OscConfig+0x4f4>)
 80035fc:	f023 0304 	bic.w	r3, r3, #4
 8003600:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d015      	beq.n	8003636 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800360a:	f7fe ff85 	bl	8002518 <HAL_GetTick>
 800360e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003610:	e00a      	b.n	8003628 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003612:	f7fe ff81 	bl	8002518 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003620:	4293      	cmp	r3, r2
 8003622:	d901      	bls.n	8003628 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e0ab      	b.n	8003780 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003628:	4b57      	ldr	r3, [pc, #348]	; (8003788 <HAL_RCC_OscConfig+0x4f4>)
 800362a:	6a1b      	ldr	r3, [r3, #32]
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d0ee      	beq.n	8003612 <HAL_RCC_OscConfig+0x37e>
 8003634:	e014      	b.n	8003660 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003636:	f7fe ff6f 	bl	8002518 <HAL_GetTick>
 800363a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800363c:	e00a      	b.n	8003654 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800363e:	f7fe ff6b 	bl	8002518 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	f241 3288 	movw	r2, #5000	; 0x1388
 800364c:	4293      	cmp	r3, r2
 800364e:	d901      	bls.n	8003654 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e095      	b.n	8003780 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003654:	4b4c      	ldr	r3, [pc, #304]	; (8003788 <HAL_RCC_OscConfig+0x4f4>)
 8003656:	6a1b      	ldr	r3, [r3, #32]
 8003658:	f003 0302 	and.w	r3, r3, #2
 800365c:	2b00      	cmp	r3, #0
 800365e:	d1ee      	bne.n	800363e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003660:	7dfb      	ldrb	r3, [r7, #23]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d105      	bne.n	8003672 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003666:	4b48      	ldr	r3, [pc, #288]	; (8003788 <HAL_RCC_OscConfig+0x4f4>)
 8003668:	69db      	ldr	r3, [r3, #28]
 800366a:	4a47      	ldr	r2, [pc, #284]	; (8003788 <HAL_RCC_OscConfig+0x4f4>)
 800366c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003670:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	69db      	ldr	r3, [r3, #28]
 8003676:	2b00      	cmp	r3, #0
 8003678:	f000 8081 	beq.w	800377e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800367c:	4b42      	ldr	r3, [pc, #264]	; (8003788 <HAL_RCC_OscConfig+0x4f4>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f003 030c 	and.w	r3, r3, #12
 8003684:	2b08      	cmp	r3, #8
 8003686:	d061      	beq.n	800374c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	69db      	ldr	r3, [r3, #28]
 800368c:	2b02      	cmp	r3, #2
 800368e:	d146      	bne.n	800371e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003690:	4b3f      	ldr	r3, [pc, #252]	; (8003790 <HAL_RCC_OscConfig+0x4fc>)
 8003692:	2200      	movs	r2, #0
 8003694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003696:	f7fe ff3f 	bl	8002518 <HAL_GetTick>
 800369a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800369c:	e008      	b.n	80036b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800369e:	f7fe ff3b 	bl	8002518 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d901      	bls.n	80036b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e067      	b.n	8003780 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036b0:	4b35      	ldr	r3, [pc, #212]	; (8003788 <HAL_RCC_OscConfig+0x4f4>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1f0      	bne.n	800369e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036c4:	d108      	bne.n	80036d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80036c6:	4b30      	ldr	r3, [pc, #192]	; (8003788 <HAL_RCC_OscConfig+0x4f4>)
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	492d      	ldr	r1, [pc, #180]	; (8003788 <HAL_RCC_OscConfig+0x4f4>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036d8:	4b2b      	ldr	r3, [pc, #172]	; (8003788 <HAL_RCC_OscConfig+0x4f4>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a19      	ldr	r1, [r3, #32]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e8:	430b      	orrs	r3, r1
 80036ea:	4927      	ldr	r1, [pc, #156]	; (8003788 <HAL_RCC_OscConfig+0x4f4>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036f0:	4b27      	ldr	r3, [pc, #156]	; (8003790 <HAL_RCC_OscConfig+0x4fc>)
 80036f2:	2201      	movs	r2, #1
 80036f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f6:	f7fe ff0f 	bl	8002518 <HAL_GetTick>
 80036fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036fc:	e008      	b.n	8003710 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036fe:	f7fe ff0b 	bl	8002518 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	2b02      	cmp	r3, #2
 800370a:	d901      	bls.n	8003710 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e037      	b.n	8003780 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003710:	4b1d      	ldr	r3, [pc, #116]	; (8003788 <HAL_RCC_OscConfig+0x4f4>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d0f0      	beq.n	80036fe <HAL_RCC_OscConfig+0x46a>
 800371c:	e02f      	b.n	800377e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800371e:	4b1c      	ldr	r3, [pc, #112]	; (8003790 <HAL_RCC_OscConfig+0x4fc>)
 8003720:	2200      	movs	r2, #0
 8003722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003724:	f7fe fef8 	bl	8002518 <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800372a:	e008      	b.n	800373e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800372c:	f7fe fef4 	bl	8002518 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e020      	b.n	8003780 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800373e:	4b12      	ldr	r3, [pc, #72]	; (8003788 <HAL_RCC_OscConfig+0x4f4>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1f0      	bne.n	800372c <HAL_RCC_OscConfig+0x498>
 800374a:	e018      	b.n	800377e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	69db      	ldr	r3, [r3, #28]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d101      	bne.n	8003758 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e013      	b.n	8003780 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003758:	4b0b      	ldr	r3, [pc, #44]	; (8003788 <HAL_RCC_OscConfig+0x4f4>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a1b      	ldr	r3, [r3, #32]
 8003768:	429a      	cmp	r2, r3
 800376a:	d106      	bne.n	800377a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003776:	429a      	cmp	r2, r3
 8003778:	d001      	beq.n	800377e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e000      	b.n	8003780 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	3718      	adds	r7, #24
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	40021000 	.word	0x40021000
 800378c:	40007000 	.word	0x40007000
 8003790:	42420060 	.word	0x42420060

08003794 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d101      	bne.n	80037a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e0d0      	b.n	800394a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037a8:	4b6a      	ldr	r3, [pc, #424]	; (8003954 <HAL_RCC_ClockConfig+0x1c0>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0307 	and.w	r3, r3, #7
 80037b0:	683a      	ldr	r2, [r7, #0]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d910      	bls.n	80037d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037b6:	4b67      	ldr	r3, [pc, #412]	; (8003954 <HAL_RCC_ClockConfig+0x1c0>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f023 0207 	bic.w	r2, r3, #7
 80037be:	4965      	ldr	r1, [pc, #404]	; (8003954 <HAL_RCC_ClockConfig+0x1c0>)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037c6:	4b63      	ldr	r3, [pc, #396]	; (8003954 <HAL_RCC_ClockConfig+0x1c0>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0307 	and.w	r3, r3, #7
 80037ce:	683a      	ldr	r2, [r7, #0]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d001      	beq.n	80037d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e0b8      	b.n	800394a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d020      	beq.n	8003826 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0304 	and.w	r3, r3, #4
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d005      	beq.n	80037fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037f0:	4b59      	ldr	r3, [pc, #356]	; (8003958 <HAL_RCC_ClockConfig+0x1c4>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	4a58      	ldr	r2, [pc, #352]	; (8003958 <HAL_RCC_ClockConfig+0x1c4>)
 80037f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80037fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0308 	and.w	r3, r3, #8
 8003804:	2b00      	cmp	r3, #0
 8003806:	d005      	beq.n	8003814 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003808:	4b53      	ldr	r3, [pc, #332]	; (8003958 <HAL_RCC_ClockConfig+0x1c4>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	4a52      	ldr	r2, [pc, #328]	; (8003958 <HAL_RCC_ClockConfig+0x1c4>)
 800380e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003812:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003814:	4b50      	ldr	r3, [pc, #320]	; (8003958 <HAL_RCC_ClockConfig+0x1c4>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	494d      	ldr	r1, [pc, #308]	; (8003958 <HAL_RCC_ClockConfig+0x1c4>)
 8003822:	4313      	orrs	r3, r2
 8003824:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b00      	cmp	r3, #0
 8003830:	d040      	beq.n	80038b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	2b01      	cmp	r3, #1
 8003838:	d107      	bne.n	800384a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800383a:	4b47      	ldr	r3, [pc, #284]	; (8003958 <HAL_RCC_ClockConfig+0x1c4>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d115      	bne.n	8003872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e07f      	b.n	800394a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	2b02      	cmp	r3, #2
 8003850:	d107      	bne.n	8003862 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003852:	4b41      	ldr	r3, [pc, #260]	; (8003958 <HAL_RCC_ClockConfig+0x1c4>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d109      	bne.n	8003872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e073      	b.n	800394a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003862:	4b3d      	ldr	r3, [pc, #244]	; (8003958 <HAL_RCC_ClockConfig+0x1c4>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e06b      	b.n	800394a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003872:	4b39      	ldr	r3, [pc, #228]	; (8003958 <HAL_RCC_ClockConfig+0x1c4>)
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f023 0203 	bic.w	r2, r3, #3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	4936      	ldr	r1, [pc, #216]	; (8003958 <HAL_RCC_ClockConfig+0x1c4>)
 8003880:	4313      	orrs	r3, r2
 8003882:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003884:	f7fe fe48 	bl	8002518 <HAL_GetTick>
 8003888:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800388a:	e00a      	b.n	80038a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800388c:	f7fe fe44 	bl	8002518 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	f241 3288 	movw	r2, #5000	; 0x1388
 800389a:	4293      	cmp	r3, r2
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e053      	b.n	800394a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038a2:	4b2d      	ldr	r3, [pc, #180]	; (8003958 <HAL_RCC_ClockConfig+0x1c4>)
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f003 020c 	and.w	r2, r3, #12
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d1eb      	bne.n	800388c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038b4:	4b27      	ldr	r3, [pc, #156]	; (8003954 <HAL_RCC_ClockConfig+0x1c0>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0307 	and.w	r3, r3, #7
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d210      	bcs.n	80038e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038c2:	4b24      	ldr	r3, [pc, #144]	; (8003954 <HAL_RCC_ClockConfig+0x1c0>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f023 0207 	bic.w	r2, r3, #7
 80038ca:	4922      	ldr	r1, [pc, #136]	; (8003954 <HAL_RCC_ClockConfig+0x1c0>)
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038d2:	4b20      	ldr	r3, [pc, #128]	; (8003954 <HAL_RCC_ClockConfig+0x1c0>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0307 	and.w	r3, r3, #7
 80038da:	683a      	ldr	r2, [r7, #0]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d001      	beq.n	80038e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e032      	b.n	800394a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0304 	and.w	r3, r3, #4
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d008      	beq.n	8003902 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038f0:	4b19      	ldr	r3, [pc, #100]	; (8003958 <HAL_RCC_ClockConfig+0x1c4>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	4916      	ldr	r1, [pc, #88]	; (8003958 <HAL_RCC_ClockConfig+0x1c4>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0308 	and.w	r3, r3, #8
 800390a:	2b00      	cmp	r3, #0
 800390c:	d009      	beq.n	8003922 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800390e:	4b12      	ldr	r3, [pc, #72]	; (8003958 <HAL_RCC_ClockConfig+0x1c4>)
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	00db      	lsls	r3, r3, #3
 800391c:	490e      	ldr	r1, [pc, #56]	; (8003958 <HAL_RCC_ClockConfig+0x1c4>)
 800391e:	4313      	orrs	r3, r2
 8003920:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003922:	f000 f821 	bl	8003968 <HAL_RCC_GetSysClockFreq>
 8003926:	4601      	mov	r1, r0
 8003928:	4b0b      	ldr	r3, [pc, #44]	; (8003958 <HAL_RCC_ClockConfig+0x1c4>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	091b      	lsrs	r3, r3, #4
 800392e:	f003 030f 	and.w	r3, r3, #15
 8003932:	4a0a      	ldr	r2, [pc, #40]	; (800395c <HAL_RCC_ClockConfig+0x1c8>)
 8003934:	5cd3      	ldrb	r3, [r2, r3]
 8003936:	fa21 f303 	lsr.w	r3, r1, r3
 800393a:	4a09      	ldr	r2, [pc, #36]	; (8003960 <HAL_RCC_ClockConfig+0x1cc>)
 800393c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800393e:	4b09      	ldr	r3, [pc, #36]	; (8003964 <HAL_RCC_ClockConfig+0x1d0>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4618      	mov	r0, r3
 8003944:	f7fe fda6 	bl	8002494 <HAL_InitTick>

  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	40022000 	.word	0x40022000
 8003958:	40021000 	.word	0x40021000
 800395c:	080097b0 	.word	0x080097b0
 8003960:	2000007c 	.word	0x2000007c
 8003964:	20000080 	.word	0x20000080

08003968 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003968:	b490      	push	{r4, r7}
 800396a:	b08a      	sub	sp, #40	; 0x28
 800396c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800396e:	4b2a      	ldr	r3, [pc, #168]	; (8003a18 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003970:	1d3c      	adds	r4, r7, #4
 8003972:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003974:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003978:	4b28      	ldr	r3, [pc, #160]	; (8003a1c <HAL_RCC_GetSysClockFreq+0xb4>)
 800397a:	881b      	ldrh	r3, [r3, #0]
 800397c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800397e:	2300      	movs	r3, #0
 8003980:	61fb      	str	r3, [r7, #28]
 8003982:	2300      	movs	r3, #0
 8003984:	61bb      	str	r3, [r7, #24]
 8003986:	2300      	movs	r3, #0
 8003988:	627b      	str	r3, [r7, #36]	; 0x24
 800398a:	2300      	movs	r3, #0
 800398c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800398e:	2300      	movs	r3, #0
 8003990:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003992:	4b23      	ldr	r3, [pc, #140]	; (8003a20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	f003 030c 	and.w	r3, r3, #12
 800399e:	2b04      	cmp	r3, #4
 80039a0:	d002      	beq.n	80039a8 <HAL_RCC_GetSysClockFreq+0x40>
 80039a2:	2b08      	cmp	r3, #8
 80039a4:	d003      	beq.n	80039ae <HAL_RCC_GetSysClockFreq+0x46>
 80039a6:	e02d      	b.n	8003a04 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039a8:	4b1e      	ldr	r3, [pc, #120]	; (8003a24 <HAL_RCC_GetSysClockFreq+0xbc>)
 80039aa:	623b      	str	r3, [r7, #32]
      break;
 80039ac:	e02d      	b.n	8003a0a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	0c9b      	lsrs	r3, r3, #18
 80039b2:	f003 030f 	and.w	r3, r3, #15
 80039b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80039ba:	4413      	add	r3, r2
 80039bc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80039c0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d013      	beq.n	80039f4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039cc:	4b14      	ldr	r3, [pc, #80]	; (8003a20 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	0c5b      	lsrs	r3, r3, #17
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80039da:	4413      	add	r3, r2
 80039dc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80039e0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	4a0f      	ldr	r2, [pc, #60]	; (8003a24 <HAL_RCC_GetSysClockFreq+0xbc>)
 80039e6:	fb02 f203 	mul.w	r2, r2, r3
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f0:	627b      	str	r3, [r7, #36]	; 0x24
 80039f2:	e004      	b.n	80039fe <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	4a0c      	ldr	r2, [pc, #48]	; (8003a28 <HAL_RCC_GetSysClockFreq+0xc0>)
 80039f8:	fb02 f303 	mul.w	r3, r2, r3
 80039fc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80039fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a00:	623b      	str	r3, [r7, #32]
      break;
 8003a02:	e002      	b.n	8003a0a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a04:	4b07      	ldr	r3, [pc, #28]	; (8003a24 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a06:	623b      	str	r3, [r7, #32]
      break;
 8003a08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a0a:	6a3b      	ldr	r3, [r7, #32]
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3728      	adds	r7, #40	; 0x28
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bc90      	pop	{r4, r7}
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	08006288 	.word	0x08006288
 8003a1c:	08006298 	.word	0x08006298
 8003a20:	40021000 	.word	0x40021000
 8003a24:	007a1200 	.word	0x007a1200
 8003a28:	003d0900 	.word	0x003d0900

08003a2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a30:	4b02      	ldr	r3, [pc, #8]	; (8003a3c <HAL_RCC_GetHCLKFreq+0x10>)
 8003a32:	681b      	ldr	r3, [r3, #0]
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bc80      	pop	{r7}
 8003a3a:	4770      	bx	lr
 8003a3c:	2000007c 	.word	0x2000007c

08003a40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a44:	f7ff fff2 	bl	8003a2c <HAL_RCC_GetHCLKFreq>
 8003a48:	4601      	mov	r1, r0
 8003a4a:	4b05      	ldr	r3, [pc, #20]	; (8003a60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	0adb      	lsrs	r3, r3, #11
 8003a50:	f003 0307 	and.w	r3, r3, #7
 8003a54:	4a03      	ldr	r2, [pc, #12]	; (8003a64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a56:	5cd3      	ldrb	r3, [r2, r3]
 8003a58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	40021000 	.word	0x40021000
 8003a64:	080097c0 	.word	0x080097c0

08003a68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a70:	4b0a      	ldr	r3, [pc, #40]	; (8003a9c <RCC_Delay+0x34>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a0a      	ldr	r2, [pc, #40]	; (8003aa0 <RCC_Delay+0x38>)
 8003a76:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7a:	0a5b      	lsrs	r3, r3, #9
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	fb02 f303 	mul.w	r3, r2, r3
 8003a82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a84:	bf00      	nop
  }
  while (Delay --);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	1e5a      	subs	r2, r3, #1
 8003a8a:	60fa      	str	r2, [r7, #12]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1f9      	bne.n	8003a84 <RCC_Delay+0x1c>
}
 8003a90:	bf00      	nop
 8003a92:	3714      	adds	r7, #20
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bc80      	pop	{r7}
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	2000007c 	.word	0x2000007c
 8003aa0:	10624dd3 	.word	0x10624dd3

08003aa4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003aac:	2300      	movs	r3, #0
 8003aae:	613b      	str	r3, [r7, #16]
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d07d      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ac4:	4b4f      	ldr	r3, [pc, #316]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ac6:	69db      	ldr	r3, [r3, #28]
 8003ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10d      	bne.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ad0:	4b4c      	ldr	r3, [pc, #304]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ad2:	69db      	ldr	r3, [r3, #28]
 8003ad4:	4a4b      	ldr	r2, [pc, #300]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ad6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ada:	61d3      	str	r3, [r2, #28]
 8003adc:	4b49      	ldr	r3, [pc, #292]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ade:	69db      	ldr	r3, [r3, #28]
 8003ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ae4:	60bb      	str	r3, [r7, #8]
 8003ae6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aec:	4b46      	ldr	r3, [pc, #280]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d118      	bne.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003af8:	4b43      	ldr	r3, [pc, #268]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a42      	ldr	r2, [pc, #264]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003afe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b02:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b04:	f7fe fd08 	bl	8002518 <HAL_GetTick>
 8003b08:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b0a:	e008      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b0c:	f7fe fd04 	bl	8002518 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b64      	cmp	r3, #100	; 0x64
 8003b18:	d901      	bls.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e06d      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b1e:	4b3a      	ldr	r3, [pc, #232]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d0f0      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b2a:	4b36      	ldr	r3, [pc, #216]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b32:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d02e      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d027      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b48:	4b2e      	ldr	r3, [pc, #184]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b4a:	6a1b      	ldr	r3, [r3, #32]
 8003b4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b50:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b52:	4b2e      	ldr	r3, [pc, #184]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b54:	2201      	movs	r2, #1
 8003b56:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b58:	4b2c      	ldr	r3, [pc, #176]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b5e:	4a29      	ldr	r2, [pc, #164]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d014      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b6e:	f7fe fcd3 	bl	8002518 <HAL_GetTick>
 8003b72:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b74:	e00a      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b76:	f7fe fccf 	bl	8002518 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d901      	bls.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e036      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b8c:	4b1d      	ldr	r3, [pc, #116]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b8e:	6a1b      	ldr	r3, [r3, #32]
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d0ee      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b98:	4b1a      	ldr	r3, [pc, #104]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b9a:	6a1b      	ldr	r3, [r3, #32]
 8003b9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	4917      	ldr	r1, [pc, #92]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003baa:	7dfb      	ldrb	r3, [r7, #23]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d105      	bne.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bb0:	4b14      	ldr	r3, [pc, #80]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bb2:	69db      	ldr	r3, [r3, #28]
 8003bb4:	4a13      	ldr	r2, [pc, #76]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0302 	and.w	r3, r3, #2
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d008      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bc8:	4b0e      	ldr	r3, [pc, #56]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	490b      	ldr	r1, [pc, #44]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0310 	and.w	r3, r3, #16
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d008      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003be6:	4b07      	ldr	r3, [pc, #28]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	4904      	ldr	r1, [pc, #16]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3718      	adds	r7, #24
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	40021000 	.word	0x40021000
 8003c08:	40007000 	.word	0x40007000
 8003c0c:	42420440 	.word	0x42420440

08003c10 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003c10:	b590      	push	{r4, r7, lr}
 8003c12:	b08d      	sub	sp, #52	; 0x34
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003c18:	4b55      	ldr	r3, [pc, #340]	; (8003d70 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003c1a:	f107 040c 	add.w	r4, r7, #12
 8003c1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003c24:	4b53      	ldr	r3, [pc, #332]	; (8003d74 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003c26:	881b      	ldrh	r3, [r3, #0]
 8003c28:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c2e:	2300      	movs	r3, #0
 8003c30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c32:	2300      	movs	r3, #0
 8003c34:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003c36:	2300      	movs	r3, #0
 8003c38:	61fb      	str	r3, [r7, #28]
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d07f      	beq.n	8003d44 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8003c44:	2b10      	cmp	r3, #16
 8003c46:	d002      	beq.n	8003c4e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d048      	beq.n	8003cde <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003c4c:	e08b      	b.n	8003d66 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8003c4e:	4b4a      	ldr	r3, [pc, #296]	; (8003d78 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003c54:	4b48      	ldr	r3, [pc, #288]	; (8003d78 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d07f      	beq.n	8003d60 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	0c9b      	lsrs	r3, r3, #18
 8003c64:	f003 030f 	and.w	r3, r3, #15
 8003c68:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003c6c:	4413      	add	r3, r2
 8003c6e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003c72:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d018      	beq.n	8003cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c7e:	4b3e      	ldr	r3, [pc, #248]	; (8003d78 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	0c5b      	lsrs	r3, r3, #17
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003c8c:	4413      	add	r3, r2
 8003c8e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003c92:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00d      	beq.n	8003cba <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003c9e:	4a37      	ldr	r2, [pc, #220]	; (8003d7c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca2:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ca6:	6a3b      	ldr	r3, [r7, #32]
 8003ca8:	fb02 f303 	mul.w	r3, r2, r3
 8003cac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cae:	e004      	b.n	8003cba <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003cb0:	6a3b      	ldr	r3, [r7, #32]
 8003cb2:	4a33      	ldr	r2, [pc, #204]	; (8003d80 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003cb4:	fb02 f303 	mul.w	r3, r2, r3
 8003cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003cba:	4b2f      	ldr	r3, [pc, #188]	; (8003d78 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cc6:	d102      	bne.n	8003cce <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8003cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cca:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003ccc:	e048      	b.n	8003d60 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8003cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd0:	005b      	lsls	r3, r3, #1
 8003cd2:	4a2c      	ldr	r2, [pc, #176]	; (8003d84 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd8:	085b      	lsrs	r3, r3, #1
 8003cda:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003cdc:	e040      	b.n	8003d60 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8003cde:	4b26      	ldr	r3, [pc, #152]	; (8003d78 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
 8003ce2:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cee:	d108      	bne.n	8003d02 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d003      	beq.n	8003d02 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8003cfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d00:	e01f      	b.n	8003d42 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d0c:	d109      	bne.n	8003d22 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8003d0e:	4b1a      	ldr	r3, [pc, #104]	; (8003d78 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d003      	beq.n	8003d22 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8003d1a:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003d1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d20:	e00f      	b.n	8003d42 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d2c:	d11a      	bne.n	8003d64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8003d2e:	4b12      	ldr	r3, [pc, #72]	; (8003d78 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d014      	beq.n	8003d64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8003d3a:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003d3e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003d40:	e010      	b.n	8003d64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8003d42:	e00f      	b.n	8003d64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003d44:	f7ff fe7c 	bl	8003a40 <HAL_RCC_GetPCLK2Freq>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	4b0b      	ldr	r3, [pc, #44]	; (8003d78 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	0b9b      	lsrs	r3, r3, #14
 8003d50:	f003 0303 	and.w	r3, r3, #3
 8003d54:	3301      	adds	r3, #1
 8003d56:	005b      	lsls	r3, r3, #1
 8003d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d5c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003d5e:	e002      	b.n	8003d66 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003d60:	bf00      	nop
 8003d62:	e000      	b.n	8003d66 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003d64:	bf00      	nop
    }
  }
  return (frequency);
 8003d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3734      	adds	r7, #52	; 0x34
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd90      	pop	{r4, r7, pc}
 8003d70:	0800629c 	.word	0x0800629c
 8003d74:	080062ac 	.word	0x080062ac
 8003d78:	40021000 	.word	0x40021000
 8003d7c:	007a1200 	.word	0x007a1200
 8003d80:	003d0900 	.word	0x003d0900
 8003d84:	aaaaaaab 	.word	0xaaaaaaab

08003d88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d101      	bne.n	8003d9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e053      	b.n	8003e42 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d106      	bne.n	8003dba <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f7fe fa0f 	bl	80021d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2202      	movs	r2, #2
 8003dbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dd0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685a      	ldr	r2, [r3, #4]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	431a      	orrs	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	431a      	orrs	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	431a      	orrs	r2, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003df6:	431a      	orrs	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	69db      	ldr	r3, [r3, #28]
 8003dfc:	431a      	orrs	r2, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a1b      	ldr	r3, [r3, #32]
 8003e02:	ea42 0103 	orr.w	r1, r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	0c1a      	lsrs	r2, r3, #16
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f002 0204 	and.w	r2, r2, #4
 8003e20:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	69da      	ldr	r2, [r3, #28]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e30:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b088      	sub	sp, #32
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	60f8      	str	r0, [r7, #12]
 8003e52:	60b9      	str	r1, [r7, #8]
 8003e54:	603b      	str	r3, [r7, #0]
 8003e56:	4613      	mov	r3, r2
 8003e58:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d101      	bne.n	8003e6c <HAL_SPI_Transmit+0x22>
 8003e68:	2302      	movs	r3, #2
 8003e6a:	e11e      	b.n	80040aa <HAL_SPI_Transmit+0x260>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e74:	f7fe fb50 	bl	8002518 <HAL_GetTick>
 8003e78:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003e7a:	88fb      	ldrh	r3, [r7, #6]
 8003e7c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d002      	beq.n	8003e90 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e8e:	e103      	b.n	8004098 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d002      	beq.n	8003e9c <HAL_SPI_Transmit+0x52>
 8003e96:	88fb      	ldrh	r3, [r7, #6]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d102      	bne.n	8003ea2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ea0:	e0fa      	b.n	8004098 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2203      	movs	r2, #3
 8003ea6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	68ba      	ldr	r2, [r7, #8]
 8003eb4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	88fa      	ldrh	r2, [r7, #6]
 8003eba:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	88fa      	ldrh	r2, [r7, #6]
 8003ec0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2200      	movs	r2, #0
 8003ede:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ee8:	d107      	bne.n	8003efa <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ef8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f04:	2b40      	cmp	r3, #64	; 0x40
 8003f06:	d007      	beq.n	8003f18 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f20:	d14b      	bne.n	8003fba <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d002      	beq.n	8003f30 <HAL_SPI_Transmit+0xe6>
 8003f2a:	8afb      	ldrh	r3, [r7, #22]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d13e      	bne.n	8003fae <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f34:	881a      	ldrh	r2, [r3, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f40:	1c9a      	adds	r2, r3, #2
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003f54:	e02b      	b.n	8003fae <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d112      	bne.n	8003f8a <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f68:	881a      	ldrh	r2, [r3, #0]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f74:	1c9a      	adds	r2, r3, #2
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	3b01      	subs	r3, #1
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	86da      	strh	r2, [r3, #54]	; 0x36
 8003f88:	e011      	b.n	8003fae <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f8a:	f7fe fac5 	bl	8002518 <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	683a      	ldr	r2, [r7, #0]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d803      	bhi.n	8003fa2 <HAL_SPI_Transmit+0x158>
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fa0:	d102      	bne.n	8003fa8 <HAL_SPI_Transmit+0x15e>
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d102      	bne.n	8003fae <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003fac:	e074      	b.n	8004098 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1ce      	bne.n	8003f56 <HAL_SPI_Transmit+0x10c>
 8003fb8:	e04c      	b.n	8004054 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d002      	beq.n	8003fc8 <HAL_SPI_Transmit+0x17e>
 8003fc2:	8afb      	ldrh	r3, [r7, #22]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d140      	bne.n	800404a <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	330c      	adds	r3, #12
 8003fd2:	7812      	ldrb	r2, [r2, #0]
 8003fd4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fda:	1c5a      	adds	r2, r3, #1
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003fee:	e02c      	b.n	800404a <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d113      	bne.n	8004026 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	330c      	adds	r3, #12
 8004008:	7812      	ldrb	r2, [r2, #0]
 800400a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004010:	1c5a      	adds	r2, r3, #1
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800401a:	b29b      	uxth	r3, r3
 800401c:	3b01      	subs	r3, #1
 800401e:	b29a      	uxth	r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	86da      	strh	r2, [r3, #54]	; 0x36
 8004024:	e011      	b.n	800404a <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004026:	f7fe fa77 	bl	8002518 <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	683a      	ldr	r2, [r7, #0]
 8004032:	429a      	cmp	r2, r3
 8004034:	d803      	bhi.n	800403e <HAL_SPI_Transmit+0x1f4>
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800403c:	d102      	bne.n	8004044 <HAL_SPI_Transmit+0x1fa>
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d102      	bne.n	800404a <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004048:	e026      	b.n	8004098 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800404e:	b29b      	uxth	r3, r3
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1cd      	bne.n	8003ff0 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004054:	69ba      	ldr	r2, [r7, #24]
 8004056:	6839      	ldr	r1, [r7, #0]
 8004058:	68f8      	ldr	r0, [r7, #12]
 800405a:	f000 f894 	bl	8004186 <SPI_EndRxTxTransaction>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d002      	beq.n	800406a <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2220      	movs	r2, #32
 8004068:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d10a      	bne.n	8004088 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004072:	2300      	movs	r3, #0
 8004074:	613b      	str	r3, [r7, #16]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	613b      	str	r3, [r7, #16]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	613b      	str	r3, [r7, #16]
 8004086:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800408c:	2b00      	cmp	r3, #0
 800408e:	d002      	beq.n	8004096 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	77fb      	strb	r3, [r7, #31]
 8004094:	e000      	b.n	8004098 <HAL_SPI_Transmit+0x24e>
  }

error:
 8004096:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80040a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3720      	adds	r7, #32
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b084      	sub	sp, #16
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	60f8      	str	r0, [r7, #12]
 80040ba:	60b9      	str	r1, [r7, #8]
 80040bc:	603b      	str	r3, [r7, #0]
 80040be:	4613      	mov	r3, r2
 80040c0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040c2:	e04c      	b.n	800415e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ca:	d048      	beq.n	800415e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80040cc:	f7fe fa24 	bl	8002518 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	683a      	ldr	r2, [r7, #0]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d902      	bls.n	80040e2 <SPI_WaitFlagStateUntilTimeout+0x30>
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d13d      	bne.n	800415e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	685a      	ldr	r2, [r3, #4]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80040f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040fa:	d111      	bne.n	8004120 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004104:	d004      	beq.n	8004110 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800410e:	d107      	bne.n	8004120 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800411e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004124:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004128:	d10f      	bne.n	800414a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004138:	601a      	str	r2, [r3, #0]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004148:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2201      	movs	r2, #1
 800414e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e00f      	b.n	800417e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	689a      	ldr	r2, [r3, #8]
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	4013      	ands	r3, r2
 8004168:	68ba      	ldr	r2, [r7, #8]
 800416a:	429a      	cmp	r2, r3
 800416c:	bf0c      	ite	eq
 800416e:	2301      	moveq	r3, #1
 8004170:	2300      	movne	r3, #0
 8004172:	b2db      	uxtb	r3, r3
 8004174:	461a      	mov	r2, r3
 8004176:	79fb      	ldrb	r3, [r7, #7]
 8004178:	429a      	cmp	r2, r3
 800417a:	d1a3      	bne.n	80040c4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}

08004186 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004186:	b580      	push	{r7, lr}
 8004188:	b086      	sub	sp, #24
 800418a:	af02      	add	r7, sp, #8
 800418c:	60f8      	str	r0, [r7, #12]
 800418e:	60b9      	str	r1, [r7, #8]
 8004190:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	9300      	str	r3, [sp, #0]
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	2200      	movs	r2, #0
 800419a:	2180      	movs	r1, #128	; 0x80
 800419c:	68f8      	ldr	r0, [r7, #12]
 800419e:	f7ff ff88 	bl	80040b2 <SPI_WaitFlagStateUntilTimeout>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d007      	beq.n	80041b8 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ac:	f043 0220 	orr.w	r2, r3, #32
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e000      	b.n	80041ba <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
	...

080041c4 <__errno>:
 80041c4:	4b01      	ldr	r3, [pc, #4]	; (80041cc <__errno+0x8>)
 80041c6:	6818      	ldr	r0, [r3, #0]
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	20000088 	.word	0x20000088

080041d0 <__libc_init_array>:
 80041d0:	b570      	push	{r4, r5, r6, lr}
 80041d2:	2500      	movs	r5, #0
 80041d4:	4e0c      	ldr	r6, [pc, #48]	; (8004208 <__libc_init_array+0x38>)
 80041d6:	4c0d      	ldr	r4, [pc, #52]	; (800420c <__libc_init_array+0x3c>)
 80041d8:	1ba4      	subs	r4, r4, r6
 80041da:	10a4      	asrs	r4, r4, #2
 80041dc:	42a5      	cmp	r5, r4
 80041de:	d109      	bne.n	80041f4 <__libc_init_array+0x24>
 80041e0:	f001 fffe 	bl	80061e0 <_init>
 80041e4:	2500      	movs	r5, #0
 80041e6:	4e0a      	ldr	r6, [pc, #40]	; (8004210 <__libc_init_array+0x40>)
 80041e8:	4c0a      	ldr	r4, [pc, #40]	; (8004214 <__libc_init_array+0x44>)
 80041ea:	1ba4      	subs	r4, r4, r6
 80041ec:	10a4      	asrs	r4, r4, #2
 80041ee:	42a5      	cmp	r5, r4
 80041f0:	d105      	bne.n	80041fe <__libc_init_array+0x2e>
 80041f2:	bd70      	pop	{r4, r5, r6, pc}
 80041f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80041f8:	4798      	blx	r3
 80041fa:	3501      	adds	r5, #1
 80041fc:	e7ee      	b.n	80041dc <__libc_init_array+0xc>
 80041fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004202:	4798      	blx	r3
 8004204:	3501      	adds	r5, #1
 8004206:	e7f2      	b.n	80041ee <__libc_init_array+0x1e>
 8004208:	080098a8 	.word	0x080098a8
 800420c:	080098a8 	.word	0x080098a8
 8004210:	080098a8 	.word	0x080098a8
 8004214:	080098ac 	.word	0x080098ac

08004218 <memcpy>:
 8004218:	b510      	push	{r4, lr}
 800421a:	1e43      	subs	r3, r0, #1
 800421c:	440a      	add	r2, r1
 800421e:	4291      	cmp	r1, r2
 8004220:	d100      	bne.n	8004224 <memcpy+0xc>
 8004222:	bd10      	pop	{r4, pc}
 8004224:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004228:	f803 4f01 	strb.w	r4, [r3, #1]!
 800422c:	e7f7      	b.n	800421e <memcpy+0x6>

0800422e <memset>:
 800422e:	4603      	mov	r3, r0
 8004230:	4402      	add	r2, r0
 8004232:	4293      	cmp	r3, r2
 8004234:	d100      	bne.n	8004238 <memset+0xa>
 8004236:	4770      	bx	lr
 8004238:	f803 1b01 	strb.w	r1, [r3], #1
 800423c:	e7f9      	b.n	8004232 <memset+0x4>
	...

08004240 <iprintf>:
 8004240:	b40f      	push	{r0, r1, r2, r3}
 8004242:	4b0a      	ldr	r3, [pc, #40]	; (800426c <iprintf+0x2c>)
 8004244:	b513      	push	{r0, r1, r4, lr}
 8004246:	681c      	ldr	r4, [r3, #0]
 8004248:	b124      	cbz	r4, 8004254 <iprintf+0x14>
 800424a:	69a3      	ldr	r3, [r4, #24]
 800424c:	b913      	cbnz	r3, 8004254 <iprintf+0x14>
 800424e:	4620      	mov	r0, r4
 8004250:	f000 fa22 	bl	8004698 <__sinit>
 8004254:	ab05      	add	r3, sp, #20
 8004256:	9a04      	ldr	r2, [sp, #16]
 8004258:	68a1      	ldr	r1, [r4, #8]
 800425a:	4620      	mov	r0, r4
 800425c:	9301      	str	r3, [sp, #4]
 800425e:	f000 fbd7 	bl	8004a10 <_vfiprintf_r>
 8004262:	b002      	add	sp, #8
 8004264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004268:	b004      	add	sp, #16
 800426a:	4770      	bx	lr
 800426c:	20000088 	.word	0x20000088

08004270 <_puts_r>:
 8004270:	b570      	push	{r4, r5, r6, lr}
 8004272:	460e      	mov	r6, r1
 8004274:	4605      	mov	r5, r0
 8004276:	b118      	cbz	r0, 8004280 <_puts_r+0x10>
 8004278:	6983      	ldr	r3, [r0, #24]
 800427a:	b90b      	cbnz	r3, 8004280 <_puts_r+0x10>
 800427c:	f000 fa0c 	bl	8004698 <__sinit>
 8004280:	69ab      	ldr	r3, [r5, #24]
 8004282:	68ac      	ldr	r4, [r5, #8]
 8004284:	b913      	cbnz	r3, 800428c <_puts_r+0x1c>
 8004286:	4628      	mov	r0, r5
 8004288:	f000 fa06 	bl	8004698 <__sinit>
 800428c:	4b23      	ldr	r3, [pc, #140]	; (800431c <_puts_r+0xac>)
 800428e:	429c      	cmp	r4, r3
 8004290:	d117      	bne.n	80042c2 <_puts_r+0x52>
 8004292:	686c      	ldr	r4, [r5, #4]
 8004294:	89a3      	ldrh	r3, [r4, #12]
 8004296:	071b      	lsls	r3, r3, #28
 8004298:	d51d      	bpl.n	80042d6 <_puts_r+0x66>
 800429a:	6923      	ldr	r3, [r4, #16]
 800429c:	b1db      	cbz	r3, 80042d6 <_puts_r+0x66>
 800429e:	3e01      	subs	r6, #1
 80042a0:	68a3      	ldr	r3, [r4, #8]
 80042a2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80042a6:	3b01      	subs	r3, #1
 80042a8:	60a3      	str	r3, [r4, #8]
 80042aa:	b9e9      	cbnz	r1, 80042e8 <_puts_r+0x78>
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	da2e      	bge.n	800430e <_puts_r+0x9e>
 80042b0:	4622      	mov	r2, r4
 80042b2:	210a      	movs	r1, #10
 80042b4:	4628      	mov	r0, r5
 80042b6:	f000 f83f 	bl	8004338 <__swbuf_r>
 80042ba:	3001      	adds	r0, #1
 80042bc:	d011      	beq.n	80042e2 <_puts_r+0x72>
 80042be:	200a      	movs	r0, #10
 80042c0:	e011      	b.n	80042e6 <_puts_r+0x76>
 80042c2:	4b17      	ldr	r3, [pc, #92]	; (8004320 <_puts_r+0xb0>)
 80042c4:	429c      	cmp	r4, r3
 80042c6:	d101      	bne.n	80042cc <_puts_r+0x5c>
 80042c8:	68ac      	ldr	r4, [r5, #8]
 80042ca:	e7e3      	b.n	8004294 <_puts_r+0x24>
 80042cc:	4b15      	ldr	r3, [pc, #84]	; (8004324 <_puts_r+0xb4>)
 80042ce:	429c      	cmp	r4, r3
 80042d0:	bf08      	it	eq
 80042d2:	68ec      	ldreq	r4, [r5, #12]
 80042d4:	e7de      	b.n	8004294 <_puts_r+0x24>
 80042d6:	4621      	mov	r1, r4
 80042d8:	4628      	mov	r0, r5
 80042da:	f000 f87f 	bl	80043dc <__swsetup_r>
 80042de:	2800      	cmp	r0, #0
 80042e0:	d0dd      	beq.n	800429e <_puts_r+0x2e>
 80042e2:	f04f 30ff 	mov.w	r0, #4294967295
 80042e6:	bd70      	pop	{r4, r5, r6, pc}
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	da04      	bge.n	80042f6 <_puts_r+0x86>
 80042ec:	69a2      	ldr	r2, [r4, #24]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	dc06      	bgt.n	8004300 <_puts_r+0x90>
 80042f2:	290a      	cmp	r1, #10
 80042f4:	d004      	beq.n	8004300 <_puts_r+0x90>
 80042f6:	6823      	ldr	r3, [r4, #0]
 80042f8:	1c5a      	adds	r2, r3, #1
 80042fa:	6022      	str	r2, [r4, #0]
 80042fc:	7019      	strb	r1, [r3, #0]
 80042fe:	e7cf      	b.n	80042a0 <_puts_r+0x30>
 8004300:	4622      	mov	r2, r4
 8004302:	4628      	mov	r0, r5
 8004304:	f000 f818 	bl	8004338 <__swbuf_r>
 8004308:	3001      	adds	r0, #1
 800430a:	d1c9      	bne.n	80042a0 <_puts_r+0x30>
 800430c:	e7e9      	b.n	80042e2 <_puts_r+0x72>
 800430e:	200a      	movs	r0, #10
 8004310:	6823      	ldr	r3, [r4, #0]
 8004312:	1c5a      	adds	r2, r3, #1
 8004314:	6022      	str	r2, [r4, #0]
 8004316:	7018      	strb	r0, [r3, #0]
 8004318:	e7e5      	b.n	80042e6 <_puts_r+0x76>
 800431a:	bf00      	nop
 800431c:	080097ec 	.word	0x080097ec
 8004320:	0800980c 	.word	0x0800980c
 8004324:	080097cc 	.word	0x080097cc

08004328 <puts>:
 8004328:	4b02      	ldr	r3, [pc, #8]	; (8004334 <puts+0xc>)
 800432a:	4601      	mov	r1, r0
 800432c:	6818      	ldr	r0, [r3, #0]
 800432e:	f7ff bf9f 	b.w	8004270 <_puts_r>
 8004332:	bf00      	nop
 8004334:	20000088 	.word	0x20000088

08004338 <__swbuf_r>:
 8004338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800433a:	460e      	mov	r6, r1
 800433c:	4614      	mov	r4, r2
 800433e:	4605      	mov	r5, r0
 8004340:	b118      	cbz	r0, 800434a <__swbuf_r+0x12>
 8004342:	6983      	ldr	r3, [r0, #24]
 8004344:	b90b      	cbnz	r3, 800434a <__swbuf_r+0x12>
 8004346:	f000 f9a7 	bl	8004698 <__sinit>
 800434a:	4b21      	ldr	r3, [pc, #132]	; (80043d0 <__swbuf_r+0x98>)
 800434c:	429c      	cmp	r4, r3
 800434e:	d12a      	bne.n	80043a6 <__swbuf_r+0x6e>
 8004350:	686c      	ldr	r4, [r5, #4]
 8004352:	69a3      	ldr	r3, [r4, #24]
 8004354:	60a3      	str	r3, [r4, #8]
 8004356:	89a3      	ldrh	r3, [r4, #12]
 8004358:	071a      	lsls	r2, r3, #28
 800435a:	d52e      	bpl.n	80043ba <__swbuf_r+0x82>
 800435c:	6923      	ldr	r3, [r4, #16]
 800435e:	b363      	cbz	r3, 80043ba <__swbuf_r+0x82>
 8004360:	6923      	ldr	r3, [r4, #16]
 8004362:	6820      	ldr	r0, [r4, #0]
 8004364:	b2f6      	uxtb	r6, r6
 8004366:	1ac0      	subs	r0, r0, r3
 8004368:	6963      	ldr	r3, [r4, #20]
 800436a:	4637      	mov	r7, r6
 800436c:	4283      	cmp	r3, r0
 800436e:	dc04      	bgt.n	800437a <__swbuf_r+0x42>
 8004370:	4621      	mov	r1, r4
 8004372:	4628      	mov	r0, r5
 8004374:	f000 f926 	bl	80045c4 <_fflush_r>
 8004378:	bb28      	cbnz	r0, 80043c6 <__swbuf_r+0x8e>
 800437a:	68a3      	ldr	r3, [r4, #8]
 800437c:	3001      	adds	r0, #1
 800437e:	3b01      	subs	r3, #1
 8004380:	60a3      	str	r3, [r4, #8]
 8004382:	6823      	ldr	r3, [r4, #0]
 8004384:	1c5a      	adds	r2, r3, #1
 8004386:	6022      	str	r2, [r4, #0]
 8004388:	701e      	strb	r6, [r3, #0]
 800438a:	6963      	ldr	r3, [r4, #20]
 800438c:	4283      	cmp	r3, r0
 800438e:	d004      	beq.n	800439a <__swbuf_r+0x62>
 8004390:	89a3      	ldrh	r3, [r4, #12]
 8004392:	07db      	lsls	r3, r3, #31
 8004394:	d519      	bpl.n	80043ca <__swbuf_r+0x92>
 8004396:	2e0a      	cmp	r6, #10
 8004398:	d117      	bne.n	80043ca <__swbuf_r+0x92>
 800439a:	4621      	mov	r1, r4
 800439c:	4628      	mov	r0, r5
 800439e:	f000 f911 	bl	80045c4 <_fflush_r>
 80043a2:	b190      	cbz	r0, 80043ca <__swbuf_r+0x92>
 80043a4:	e00f      	b.n	80043c6 <__swbuf_r+0x8e>
 80043a6:	4b0b      	ldr	r3, [pc, #44]	; (80043d4 <__swbuf_r+0x9c>)
 80043a8:	429c      	cmp	r4, r3
 80043aa:	d101      	bne.n	80043b0 <__swbuf_r+0x78>
 80043ac:	68ac      	ldr	r4, [r5, #8]
 80043ae:	e7d0      	b.n	8004352 <__swbuf_r+0x1a>
 80043b0:	4b09      	ldr	r3, [pc, #36]	; (80043d8 <__swbuf_r+0xa0>)
 80043b2:	429c      	cmp	r4, r3
 80043b4:	bf08      	it	eq
 80043b6:	68ec      	ldreq	r4, [r5, #12]
 80043b8:	e7cb      	b.n	8004352 <__swbuf_r+0x1a>
 80043ba:	4621      	mov	r1, r4
 80043bc:	4628      	mov	r0, r5
 80043be:	f000 f80d 	bl	80043dc <__swsetup_r>
 80043c2:	2800      	cmp	r0, #0
 80043c4:	d0cc      	beq.n	8004360 <__swbuf_r+0x28>
 80043c6:	f04f 37ff 	mov.w	r7, #4294967295
 80043ca:	4638      	mov	r0, r7
 80043cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043ce:	bf00      	nop
 80043d0:	080097ec 	.word	0x080097ec
 80043d4:	0800980c 	.word	0x0800980c
 80043d8:	080097cc 	.word	0x080097cc

080043dc <__swsetup_r>:
 80043dc:	4b32      	ldr	r3, [pc, #200]	; (80044a8 <__swsetup_r+0xcc>)
 80043de:	b570      	push	{r4, r5, r6, lr}
 80043e0:	681d      	ldr	r5, [r3, #0]
 80043e2:	4606      	mov	r6, r0
 80043e4:	460c      	mov	r4, r1
 80043e6:	b125      	cbz	r5, 80043f2 <__swsetup_r+0x16>
 80043e8:	69ab      	ldr	r3, [r5, #24]
 80043ea:	b913      	cbnz	r3, 80043f2 <__swsetup_r+0x16>
 80043ec:	4628      	mov	r0, r5
 80043ee:	f000 f953 	bl	8004698 <__sinit>
 80043f2:	4b2e      	ldr	r3, [pc, #184]	; (80044ac <__swsetup_r+0xd0>)
 80043f4:	429c      	cmp	r4, r3
 80043f6:	d10f      	bne.n	8004418 <__swsetup_r+0x3c>
 80043f8:	686c      	ldr	r4, [r5, #4]
 80043fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043fe:	b29a      	uxth	r2, r3
 8004400:	0715      	lsls	r5, r2, #28
 8004402:	d42c      	bmi.n	800445e <__swsetup_r+0x82>
 8004404:	06d0      	lsls	r0, r2, #27
 8004406:	d411      	bmi.n	800442c <__swsetup_r+0x50>
 8004408:	2209      	movs	r2, #9
 800440a:	6032      	str	r2, [r6, #0]
 800440c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004410:	81a3      	strh	r3, [r4, #12]
 8004412:	f04f 30ff 	mov.w	r0, #4294967295
 8004416:	e03e      	b.n	8004496 <__swsetup_r+0xba>
 8004418:	4b25      	ldr	r3, [pc, #148]	; (80044b0 <__swsetup_r+0xd4>)
 800441a:	429c      	cmp	r4, r3
 800441c:	d101      	bne.n	8004422 <__swsetup_r+0x46>
 800441e:	68ac      	ldr	r4, [r5, #8]
 8004420:	e7eb      	b.n	80043fa <__swsetup_r+0x1e>
 8004422:	4b24      	ldr	r3, [pc, #144]	; (80044b4 <__swsetup_r+0xd8>)
 8004424:	429c      	cmp	r4, r3
 8004426:	bf08      	it	eq
 8004428:	68ec      	ldreq	r4, [r5, #12]
 800442a:	e7e6      	b.n	80043fa <__swsetup_r+0x1e>
 800442c:	0751      	lsls	r1, r2, #29
 800442e:	d512      	bpl.n	8004456 <__swsetup_r+0x7a>
 8004430:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004432:	b141      	cbz	r1, 8004446 <__swsetup_r+0x6a>
 8004434:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004438:	4299      	cmp	r1, r3
 800443a:	d002      	beq.n	8004442 <__swsetup_r+0x66>
 800443c:	4630      	mov	r0, r6
 800443e:	f000 fa19 	bl	8004874 <_free_r>
 8004442:	2300      	movs	r3, #0
 8004444:	6363      	str	r3, [r4, #52]	; 0x34
 8004446:	89a3      	ldrh	r3, [r4, #12]
 8004448:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800444c:	81a3      	strh	r3, [r4, #12]
 800444e:	2300      	movs	r3, #0
 8004450:	6063      	str	r3, [r4, #4]
 8004452:	6923      	ldr	r3, [r4, #16]
 8004454:	6023      	str	r3, [r4, #0]
 8004456:	89a3      	ldrh	r3, [r4, #12]
 8004458:	f043 0308 	orr.w	r3, r3, #8
 800445c:	81a3      	strh	r3, [r4, #12]
 800445e:	6923      	ldr	r3, [r4, #16]
 8004460:	b94b      	cbnz	r3, 8004476 <__swsetup_r+0x9a>
 8004462:	89a3      	ldrh	r3, [r4, #12]
 8004464:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800446c:	d003      	beq.n	8004476 <__swsetup_r+0x9a>
 800446e:	4621      	mov	r1, r4
 8004470:	4630      	mov	r0, r6
 8004472:	f000 f9bf 	bl	80047f4 <__smakebuf_r>
 8004476:	89a2      	ldrh	r2, [r4, #12]
 8004478:	f012 0301 	ands.w	r3, r2, #1
 800447c:	d00c      	beq.n	8004498 <__swsetup_r+0xbc>
 800447e:	2300      	movs	r3, #0
 8004480:	60a3      	str	r3, [r4, #8]
 8004482:	6963      	ldr	r3, [r4, #20]
 8004484:	425b      	negs	r3, r3
 8004486:	61a3      	str	r3, [r4, #24]
 8004488:	6923      	ldr	r3, [r4, #16]
 800448a:	b953      	cbnz	r3, 80044a2 <__swsetup_r+0xc6>
 800448c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004490:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004494:	d1ba      	bne.n	800440c <__swsetup_r+0x30>
 8004496:	bd70      	pop	{r4, r5, r6, pc}
 8004498:	0792      	lsls	r2, r2, #30
 800449a:	bf58      	it	pl
 800449c:	6963      	ldrpl	r3, [r4, #20]
 800449e:	60a3      	str	r3, [r4, #8]
 80044a0:	e7f2      	b.n	8004488 <__swsetup_r+0xac>
 80044a2:	2000      	movs	r0, #0
 80044a4:	e7f7      	b.n	8004496 <__swsetup_r+0xba>
 80044a6:	bf00      	nop
 80044a8:	20000088 	.word	0x20000088
 80044ac:	080097ec 	.word	0x080097ec
 80044b0:	0800980c 	.word	0x0800980c
 80044b4:	080097cc 	.word	0x080097cc

080044b8 <__sflush_r>:
 80044b8:	898a      	ldrh	r2, [r1, #12]
 80044ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044be:	4605      	mov	r5, r0
 80044c0:	0710      	lsls	r0, r2, #28
 80044c2:	460c      	mov	r4, r1
 80044c4:	d458      	bmi.n	8004578 <__sflush_r+0xc0>
 80044c6:	684b      	ldr	r3, [r1, #4]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	dc05      	bgt.n	80044d8 <__sflush_r+0x20>
 80044cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	dc02      	bgt.n	80044d8 <__sflush_r+0x20>
 80044d2:	2000      	movs	r0, #0
 80044d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80044da:	2e00      	cmp	r6, #0
 80044dc:	d0f9      	beq.n	80044d2 <__sflush_r+0x1a>
 80044de:	2300      	movs	r3, #0
 80044e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80044e4:	682f      	ldr	r7, [r5, #0]
 80044e6:	6a21      	ldr	r1, [r4, #32]
 80044e8:	602b      	str	r3, [r5, #0]
 80044ea:	d032      	beq.n	8004552 <__sflush_r+0x9a>
 80044ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80044ee:	89a3      	ldrh	r3, [r4, #12]
 80044f0:	075a      	lsls	r2, r3, #29
 80044f2:	d505      	bpl.n	8004500 <__sflush_r+0x48>
 80044f4:	6863      	ldr	r3, [r4, #4]
 80044f6:	1ac0      	subs	r0, r0, r3
 80044f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80044fa:	b10b      	cbz	r3, 8004500 <__sflush_r+0x48>
 80044fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80044fe:	1ac0      	subs	r0, r0, r3
 8004500:	2300      	movs	r3, #0
 8004502:	4602      	mov	r2, r0
 8004504:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004506:	6a21      	ldr	r1, [r4, #32]
 8004508:	4628      	mov	r0, r5
 800450a:	47b0      	blx	r6
 800450c:	1c43      	adds	r3, r0, #1
 800450e:	89a3      	ldrh	r3, [r4, #12]
 8004510:	d106      	bne.n	8004520 <__sflush_r+0x68>
 8004512:	6829      	ldr	r1, [r5, #0]
 8004514:	291d      	cmp	r1, #29
 8004516:	d848      	bhi.n	80045aa <__sflush_r+0xf2>
 8004518:	4a29      	ldr	r2, [pc, #164]	; (80045c0 <__sflush_r+0x108>)
 800451a:	40ca      	lsrs	r2, r1
 800451c:	07d6      	lsls	r6, r2, #31
 800451e:	d544      	bpl.n	80045aa <__sflush_r+0xf2>
 8004520:	2200      	movs	r2, #0
 8004522:	6062      	str	r2, [r4, #4]
 8004524:	6922      	ldr	r2, [r4, #16]
 8004526:	04d9      	lsls	r1, r3, #19
 8004528:	6022      	str	r2, [r4, #0]
 800452a:	d504      	bpl.n	8004536 <__sflush_r+0x7e>
 800452c:	1c42      	adds	r2, r0, #1
 800452e:	d101      	bne.n	8004534 <__sflush_r+0x7c>
 8004530:	682b      	ldr	r3, [r5, #0]
 8004532:	b903      	cbnz	r3, 8004536 <__sflush_r+0x7e>
 8004534:	6560      	str	r0, [r4, #84]	; 0x54
 8004536:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004538:	602f      	str	r7, [r5, #0]
 800453a:	2900      	cmp	r1, #0
 800453c:	d0c9      	beq.n	80044d2 <__sflush_r+0x1a>
 800453e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004542:	4299      	cmp	r1, r3
 8004544:	d002      	beq.n	800454c <__sflush_r+0x94>
 8004546:	4628      	mov	r0, r5
 8004548:	f000 f994 	bl	8004874 <_free_r>
 800454c:	2000      	movs	r0, #0
 800454e:	6360      	str	r0, [r4, #52]	; 0x34
 8004550:	e7c0      	b.n	80044d4 <__sflush_r+0x1c>
 8004552:	2301      	movs	r3, #1
 8004554:	4628      	mov	r0, r5
 8004556:	47b0      	blx	r6
 8004558:	1c41      	adds	r1, r0, #1
 800455a:	d1c8      	bne.n	80044ee <__sflush_r+0x36>
 800455c:	682b      	ldr	r3, [r5, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d0c5      	beq.n	80044ee <__sflush_r+0x36>
 8004562:	2b1d      	cmp	r3, #29
 8004564:	d001      	beq.n	800456a <__sflush_r+0xb2>
 8004566:	2b16      	cmp	r3, #22
 8004568:	d101      	bne.n	800456e <__sflush_r+0xb6>
 800456a:	602f      	str	r7, [r5, #0]
 800456c:	e7b1      	b.n	80044d2 <__sflush_r+0x1a>
 800456e:	89a3      	ldrh	r3, [r4, #12]
 8004570:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004574:	81a3      	strh	r3, [r4, #12]
 8004576:	e7ad      	b.n	80044d4 <__sflush_r+0x1c>
 8004578:	690f      	ldr	r7, [r1, #16]
 800457a:	2f00      	cmp	r7, #0
 800457c:	d0a9      	beq.n	80044d2 <__sflush_r+0x1a>
 800457e:	0793      	lsls	r3, r2, #30
 8004580:	bf18      	it	ne
 8004582:	2300      	movne	r3, #0
 8004584:	680e      	ldr	r6, [r1, #0]
 8004586:	bf08      	it	eq
 8004588:	694b      	ldreq	r3, [r1, #20]
 800458a:	eba6 0807 	sub.w	r8, r6, r7
 800458e:	600f      	str	r7, [r1, #0]
 8004590:	608b      	str	r3, [r1, #8]
 8004592:	f1b8 0f00 	cmp.w	r8, #0
 8004596:	dd9c      	ble.n	80044d2 <__sflush_r+0x1a>
 8004598:	4643      	mov	r3, r8
 800459a:	463a      	mov	r2, r7
 800459c:	6a21      	ldr	r1, [r4, #32]
 800459e:	4628      	mov	r0, r5
 80045a0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80045a2:	47b0      	blx	r6
 80045a4:	2800      	cmp	r0, #0
 80045a6:	dc06      	bgt.n	80045b6 <__sflush_r+0xfe>
 80045a8:	89a3      	ldrh	r3, [r4, #12]
 80045aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045ae:	81a3      	strh	r3, [r4, #12]
 80045b0:	f04f 30ff 	mov.w	r0, #4294967295
 80045b4:	e78e      	b.n	80044d4 <__sflush_r+0x1c>
 80045b6:	4407      	add	r7, r0
 80045b8:	eba8 0800 	sub.w	r8, r8, r0
 80045bc:	e7e9      	b.n	8004592 <__sflush_r+0xda>
 80045be:	bf00      	nop
 80045c0:	20400001 	.word	0x20400001

080045c4 <_fflush_r>:
 80045c4:	b538      	push	{r3, r4, r5, lr}
 80045c6:	690b      	ldr	r3, [r1, #16]
 80045c8:	4605      	mov	r5, r0
 80045ca:	460c      	mov	r4, r1
 80045cc:	b1db      	cbz	r3, 8004606 <_fflush_r+0x42>
 80045ce:	b118      	cbz	r0, 80045d8 <_fflush_r+0x14>
 80045d0:	6983      	ldr	r3, [r0, #24]
 80045d2:	b90b      	cbnz	r3, 80045d8 <_fflush_r+0x14>
 80045d4:	f000 f860 	bl	8004698 <__sinit>
 80045d8:	4b0c      	ldr	r3, [pc, #48]	; (800460c <_fflush_r+0x48>)
 80045da:	429c      	cmp	r4, r3
 80045dc:	d109      	bne.n	80045f2 <_fflush_r+0x2e>
 80045de:	686c      	ldr	r4, [r5, #4]
 80045e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045e4:	b17b      	cbz	r3, 8004606 <_fflush_r+0x42>
 80045e6:	4621      	mov	r1, r4
 80045e8:	4628      	mov	r0, r5
 80045ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045ee:	f7ff bf63 	b.w	80044b8 <__sflush_r>
 80045f2:	4b07      	ldr	r3, [pc, #28]	; (8004610 <_fflush_r+0x4c>)
 80045f4:	429c      	cmp	r4, r3
 80045f6:	d101      	bne.n	80045fc <_fflush_r+0x38>
 80045f8:	68ac      	ldr	r4, [r5, #8]
 80045fa:	e7f1      	b.n	80045e0 <_fflush_r+0x1c>
 80045fc:	4b05      	ldr	r3, [pc, #20]	; (8004614 <_fflush_r+0x50>)
 80045fe:	429c      	cmp	r4, r3
 8004600:	bf08      	it	eq
 8004602:	68ec      	ldreq	r4, [r5, #12]
 8004604:	e7ec      	b.n	80045e0 <_fflush_r+0x1c>
 8004606:	2000      	movs	r0, #0
 8004608:	bd38      	pop	{r3, r4, r5, pc}
 800460a:	bf00      	nop
 800460c:	080097ec 	.word	0x080097ec
 8004610:	0800980c 	.word	0x0800980c
 8004614:	080097cc 	.word	0x080097cc

08004618 <std>:
 8004618:	2300      	movs	r3, #0
 800461a:	b510      	push	{r4, lr}
 800461c:	4604      	mov	r4, r0
 800461e:	e9c0 3300 	strd	r3, r3, [r0]
 8004622:	6083      	str	r3, [r0, #8]
 8004624:	8181      	strh	r1, [r0, #12]
 8004626:	6643      	str	r3, [r0, #100]	; 0x64
 8004628:	81c2      	strh	r2, [r0, #14]
 800462a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800462e:	6183      	str	r3, [r0, #24]
 8004630:	4619      	mov	r1, r3
 8004632:	2208      	movs	r2, #8
 8004634:	305c      	adds	r0, #92	; 0x5c
 8004636:	f7ff fdfa 	bl	800422e <memset>
 800463a:	4b05      	ldr	r3, [pc, #20]	; (8004650 <std+0x38>)
 800463c:	6224      	str	r4, [r4, #32]
 800463e:	6263      	str	r3, [r4, #36]	; 0x24
 8004640:	4b04      	ldr	r3, [pc, #16]	; (8004654 <std+0x3c>)
 8004642:	62a3      	str	r3, [r4, #40]	; 0x28
 8004644:	4b04      	ldr	r3, [pc, #16]	; (8004658 <std+0x40>)
 8004646:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004648:	4b04      	ldr	r3, [pc, #16]	; (800465c <std+0x44>)
 800464a:	6323      	str	r3, [r4, #48]	; 0x30
 800464c:	bd10      	pop	{r4, pc}
 800464e:	bf00      	nop
 8004650:	08004f6d 	.word	0x08004f6d
 8004654:	08004f8f 	.word	0x08004f8f
 8004658:	08004fc7 	.word	0x08004fc7
 800465c:	08004feb 	.word	0x08004feb

08004660 <_cleanup_r>:
 8004660:	4901      	ldr	r1, [pc, #4]	; (8004668 <_cleanup_r+0x8>)
 8004662:	f000 b885 	b.w	8004770 <_fwalk_reent>
 8004666:	bf00      	nop
 8004668:	080045c5 	.word	0x080045c5

0800466c <__sfmoreglue>:
 800466c:	b570      	push	{r4, r5, r6, lr}
 800466e:	2568      	movs	r5, #104	; 0x68
 8004670:	1e4a      	subs	r2, r1, #1
 8004672:	4355      	muls	r5, r2
 8004674:	460e      	mov	r6, r1
 8004676:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800467a:	f000 f947 	bl	800490c <_malloc_r>
 800467e:	4604      	mov	r4, r0
 8004680:	b140      	cbz	r0, 8004694 <__sfmoreglue+0x28>
 8004682:	2100      	movs	r1, #0
 8004684:	e9c0 1600 	strd	r1, r6, [r0]
 8004688:	300c      	adds	r0, #12
 800468a:	60a0      	str	r0, [r4, #8]
 800468c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004690:	f7ff fdcd 	bl	800422e <memset>
 8004694:	4620      	mov	r0, r4
 8004696:	bd70      	pop	{r4, r5, r6, pc}

08004698 <__sinit>:
 8004698:	6983      	ldr	r3, [r0, #24]
 800469a:	b510      	push	{r4, lr}
 800469c:	4604      	mov	r4, r0
 800469e:	bb33      	cbnz	r3, 80046ee <__sinit+0x56>
 80046a0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80046a4:	6503      	str	r3, [r0, #80]	; 0x50
 80046a6:	4b12      	ldr	r3, [pc, #72]	; (80046f0 <__sinit+0x58>)
 80046a8:	4a12      	ldr	r2, [pc, #72]	; (80046f4 <__sinit+0x5c>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	6282      	str	r2, [r0, #40]	; 0x28
 80046ae:	4298      	cmp	r0, r3
 80046b0:	bf04      	itt	eq
 80046b2:	2301      	moveq	r3, #1
 80046b4:	6183      	streq	r3, [r0, #24]
 80046b6:	f000 f81f 	bl	80046f8 <__sfp>
 80046ba:	6060      	str	r0, [r4, #4]
 80046bc:	4620      	mov	r0, r4
 80046be:	f000 f81b 	bl	80046f8 <__sfp>
 80046c2:	60a0      	str	r0, [r4, #8]
 80046c4:	4620      	mov	r0, r4
 80046c6:	f000 f817 	bl	80046f8 <__sfp>
 80046ca:	2200      	movs	r2, #0
 80046cc:	60e0      	str	r0, [r4, #12]
 80046ce:	2104      	movs	r1, #4
 80046d0:	6860      	ldr	r0, [r4, #4]
 80046d2:	f7ff ffa1 	bl	8004618 <std>
 80046d6:	2201      	movs	r2, #1
 80046d8:	2109      	movs	r1, #9
 80046da:	68a0      	ldr	r0, [r4, #8]
 80046dc:	f7ff ff9c 	bl	8004618 <std>
 80046e0:	2202      	movs	r2, #2
 80046e2:	2112      	movs	r1, #18
 80046e4:	68e0      	ldr	r0, [r4, #12]
 80046e6:	f7ff ff97 	bl	8004618 <std>
 80046ea:	2301      	movs	r3, #1
 80046ec:	61a3      	str	r3, [r4, #24]
 80046ee:	bd10      	pop	{r4, pc}
 80046f0:	080097c8 	.word	0x080097c8
 80046f4:	08004661 	.word	0x08004661

080046f8 <__sfp>:
 80046f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046fa:	4b1b      	ldr	r3, [pc, #108]	; (8004768 <__sfp+0x70>)
 80046fc:	4607      	mov	r7, r0
 80046fe:	681e      	ldr	r6, [r3, #0]
 8004700:	69b3      	ldr	r3, [r6, #24]
 8004702:	b913      	cbnz	r3, 800470a <__sfp+0x12>
 8004704:	4630      	mov	r0, r6
 8004706:	f7ff ffc7 	bl	8004698 <__sinit>
 800470a:	3648      	adds	r6, #72	; 0x48
 800470c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004710:	3b01      	subs	r3, #1
 8004712:	d503      	bpl.n	800471c <__sfp+0x24>
 8004714:	6833      	ldr	r3, [r6, #0]
 8004716:	b133      	cbz	r3, 8004726 <__sfp+0x2e>
 8004718:	6836      	ldr	r6, [r6, #0]
 800471a:	e7f7      	b.n	800470c <__sfp+0x14>
 800471c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004720:	b16d      	cbz	r5, 800473e <__sfp+0x46>
 8004722:	3468      	adds	r4, #104	; 0x68
 8004724:	e7f4      	b.n	8004710 <__sfp+0x18>
 8004726:	2104      	movs	r1, #4
 8004728:	4638      	mov	r0, r7
 800472a:	f7ff ff9f 	bl	800466c <__sfmoreglue>
 800472e:	6030      	str	r0, [r6, #0]
 8004730:	2800      	cmp	r0, #0
 8004732:	d1f1      	bne.n	8004718 <__sfp+0x20>
 8004734:	230c      	movs	r3, #12
 8004736:	4604      	mov	r4, r0
 8004738:	603b      	str	r3, [r7, #0]
 800473a:	4620      	mov	r0, r4
 800473c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800473e:	4b0b      	ldr	r3, [pc, #44]	; (800476c <__sfp+0x74>)
 8004740:	6665      	str	r5, [r4, #100]	; 0x64
 8004742:	e9c4 5500 	strd	r5, r5, [r4]
 8004746:	60a5      	str	r5, [r4, #8]
 8004748:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800474c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004750:	2208      	movs	r2, #8
 8004752:	4629      	mov	r1, r5
 8004754:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004758:	f7ff fd69 	bl	800422e <memset>
 800475c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004760:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004764:	e7e9      	b.n	800473a <__sfp+0x42>
 8004766:	bf00      	nop
 8004768:	080097c8 	.word	0x080097c8
 800476c:	ffff0001 	.word	0xffff0001

08004770 <_fwalk_reent>:
 8004770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004774:	4680      	mov	r8, r0
 8004776:	4689      	mov	r9, r1
 8004778:	2600      	movs	r6, #0
 800477a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800477e:	b914      	cbnz	r4, 8004786 <_fwalk_reent+0x16>
 8004780:	4630      	mov	r0, r6
 8004782:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004786:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800478a:	3f01      	subs	r7, #1
 800478c:	d501      	bpl.n	8004792 <_fwalk_reent+0x22>
 800478e:	6824      	ldr	r4, [r4, #0]
 8004790:	e7f5      	b.n	800477e <_fwalk_reent+0xe>
 8004792:	89ab      	ldrh	r3, [r5, #12]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d907      	bls.n	80047a8 <_fwalk_reent+0x38>
 8004798:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800479c:	3301      	adds	r3, #1
 800479e:	d003      	beq.n	80047a8 <_fwalk_reent+0x38>
 80047a0:	4629      	mov	r1, r5
 80047a2:	4640      	mov	r0, r8
 80047a4:	47c8      	blx	r9
 80047a6:	4306      	orrs	r6, r0
 80047a8:	3568      	adds	r5, #104	; 0x68
 80047aa:	e7ee      	b.n	800478a <_fwalk_reent+0x1a>

080047ac <__swhatbuf_r>:
 80047ac:	b570      	push	{r4, r5, r6, lr}
 80047ae:	460e      	mov	r6, r1
 80047b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047b4:	b096      	sub	sp, #88	; 0x58
 80047b6:	2900      	cmp	r1, #0
 80047b8:	4614      	mov	r4, r2
 80047ba:	461d      	mov	r5, r3
 80047bc:	da07      	bge.n	80047ce <__swhatbuf_r+0x22>
 80047be:	2300      	movs	r3, #0
 80047c0:	602b      	str	r3, [r5, #0]
 80047c2:	89b3      	ldrh	r3, [r6, #12]
 80047c4:	061a      	lsls	r2, r3, #24
 80047c6:	d410      	bmi.n	80047ea <__swhatbuf_r+0x3e>
 80047c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047cc:	e00e      	b.n	80047ec <__swhatbuf_r+0x40>
 80047ce:	466a      	mov	r2, sp
 80047d0:	f000 fc32 	bl	8005038 <_fstat_r>
 80047d4:	2800      	cmp	r0, #0
 80047d6:	dbf2      	blt.n	80047be <__swhatbuf_r+0x12>
 80047d8:	9a01      	ldr	r2, [sp, #4]
 80047da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80047de:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80047e2:	425a      	negs	r2, r3
 80047e4:	415a      	adcs	r2, r3
 80047e6:	602a      	str	r2, [r5, #0]
 80047e8:	e7ee      	b.n	80047c8 <__swhatbuf_r+0x1c>
 80047ea:	2340      	movs	r3, #64	; 0x40
 80047ec:	2000      	movs	r0, #0
 80047ee:	6023      	str	r3, [r4, #0]
 80047f0:	b016      	add	sp, #88	; 0x58
 80047f2:	bd70      	pop	{r4, r5, r6, pc}

080047f4 <__smakebuf_r>:
 80047f4:	898b      	ldrh	r3, [r1, #12]
 80047f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80047f8:	079d      	lsls	r5, r3, #30
 80047fa:	4606      	mov	r6, r0
 80047fc:	460c      	mov	r4, r1
 80047fe:	d507      	bpl.n	8004810 <__smakebuf_r+0x1c>
 8004800:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004804:	6023      	str	r3, [r4, #0]
 8004806:	6123      	str	r3, [r4, #16]
 8004808:	2301      	movs	r3, #1
 800480a:	6163      	str	r3, [r4, #20]
 800480c:	b002      	add	sp, #8
 800480e:	bd70      	pop	{r4, r5, r6, pc}
 8004810:	ab01      	add	r3, sp, #4
 8004812:	466a      	mov	r2, sp
 8004814:	f7ff ffca 	bl	80047ac <__swhatbuf_r>
 8004818:	9900      	ldr	r1, [sp, #0]
 800481a:	4605      	mov	r5, r0
 800481c:	4630      	mov	r0, r6
 800481e:	f000 f875 	bl	800490c <_malloc_r>
 8004822:	b948      	cbnz	r0, 8004838 <__smakebuf_r+0x44>
 8004824:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004828:	059a      	lsls	r2, r3, #22
 800482a:	d4ef      	bmi.n	800480c <__smakebuf_r+0x18>
 800482c:	f023 0303 	bic.w	r3, r3, #3
 8004830:	f043 0302 	orr.w	r3, r3, #2
 8004834:	81a3      	strh	r3, [r4, #12]
 8004836:	e7e3      	b.n	8004800 <__smakebuf_r+0xc>
 8004838:	4b0d      	ldr	r3, [pc, #52]	; (8004870 <__smakebuf_r+0x7c>)
 800483a:	62b3      	str	r3, [r6, #40]	; 0x28
 800483c:	89a3      	ldrh	r3, [r4, #12]
 800483e:	6020      	str	r0, [r4, #0]
 8004840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004844:	81a3      	strh	r3, [r4, #12]
 8004846:	9b00      	ldr	r3, [sp, #0]
 8004848:	6120      	str	r0, [r4, #16]
 800484a:	6163      	str	r3, [r4, #20]
 800484c:	9b01      	ldr	r3, [sp, #4]
 800484e:	b15b      	cbz	r3, 8004868 <__smakebuf_r+0x74>
 8004850:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004854:	4630      	mov	r0, r6
 8004856:	f000 fc01 	bl	800505c <_isatty_r>
 800485a:	b128      	cbz	r0, 8004868 <__smakebuf_r+0x74>
 800485c:	89a3      	ldrh	r3, [r4, #12]
 800485e:	f023 0303 	bic.w	r3, r3, #3
 8004862:	f043 0301 	orr.w	r3, r3, #1
 8004866:	81a3      	strh	r3, [r4, #12]
 8004868:	89a3      	ldrh	r3, [r4, #12]
 800486a:	431d      	orrs	r5, r3
 800486c:	81a5      	strh	r5, [r4, #12]
 800486e:	e7cd      	b.n	800480c <__smakebuf_r+0x18>
 8004870:	08004661 	.word	0x08004661

08004874 <_free_r>:
 8004874:	b538      	push	{r3, r4, r5, lr}
 8004876:	4605      	mov	r5, r0
 8004878:	2900      	cmp	r1, #0
 800487a:	d043      	beq.n	8004904 <_free_r+0x90>
 800487c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004880:	1f0c      	subs	r4, r1, #4
 8004882:	2b00      	cmp	r3, #0
 8004884:	bfb8      	it	lt
 8004886:	18e4      	addlt	r4, r4, r3
 8004888:	f000 fc18 	bl	80050bc <__malloc_lock>
 800488c:	4a1e      	ldr	r2, [pc, #120]	; (8004908 <_free_r+0x94>)
 800488e:	6813      	ldr	r3, [r2, #0]
 8004890:	4610      	mov	r0, r2
 8004892:	b933      	cbnz	r3, 80048a2 <_free_r+0x2e>
 8004894:	6063      	str	r3, [r4, #4]
 8004896:	6014      	str	r4, [r2, #0]
 8004898:	4628      	mov	r0, r5
 800489a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800489e:	f000 bc0e 	b.w	80050be <__malloc_unlock>
 80048a2:	42a3      	cmp	r3, r4
 80048a4:	d90b      	bls.n	80048be <_free_r+0x4a>
 80048a6:	6821      	ldr	r1, [r4, #0]
 80048a8:	1862      	adds	r2, r4, r1
 80048aa:	4293      	cmp	r3, r2
 80048ac:	bf01      	itttt	eq
 80048ae:	681a      	ldreq	r2, [r3, #0]
 80048b0:	685b      	ldreq	r3, [r3, #4]
 80048b2:	1852      	addeq	r2, r2, r1
 80048b4:	6022      	streq	r2, [r4, #0]
 80048b6:	6063      	str	r3, [r4, #4]
 80048b8:	6004      	str	r4, [r0, #0]
 80048ba:	e7ed      	b.n	8004898 <_free_r+0x24>
 80048bc:	4613      	mov	r3, r2
 80048be:	685a      	ldr	r2, [r3, #4]
 80048c0:	b10a      	cbz	r2, 80048c6 <_free_r+0x52>
 80048c2:	42a2      	cmp	r2, r4
 80048c4:	d9fa      	bls.n	80048bc <_free_r+0x48>
 80048c6:	6819      	ldr	r1, [r3, #0]
 80048c8:	1858      	adds	r0, r3, r1
 80048ca:	42a0      	cmp	r0, r4
 80048cc:	d10b      	bne.n	80048e6 <_free_r+0x72>
 80048ce:	6820      	ldr	r0, [r4, #0]
 80048d0:	4401      	add	r1, r0
 80048d2:	1858      	adds	r0, r3, r1
 80048d4:	4282      	cmp	r2, r0
 80048d6:	6019      	str	r1, [r3, #0]
 80048d8:	d1de      	bne.n	8004898 <_free_r+0x24>
 80048da:	6810      	ldr	r0, [r2, #0]
 80048dc:	6852      	ldr	r2, [r2, #4]
 80048de:	4401      	add	r1, r0
 80048e0:	6019      	str	r1, [r3, #0]
 80048e2:	605a      	str	r2, [r3, #4]
 80048e4:	e7d8      	b.n	8004898 <_free_r+0x24>
 80048e6:	d902      	bls.n	80048ee <_free_r+0x7a>
 80048e8:	230c      	movs	r3, #12
 80048ea:	602b      	str	r3, [r5, #0]
 80048ec:	e7d4      	b.n	8004898 <_free_r+0x24>
 80048ee:	6820      	ldr	r0, [r4, #0]
 80048f0:	1821      	adds	r1, r4, r0
 80048f2:	428a      	cmp	r2, r1
 80048f4:	bf01      	itttt	eq
 80048f6:	6811      	ldreq	r1, [r2, #0]
 80048f8:	6852      	ldreq	r2, [r2, #4]
 80048fa:	1809      	addeq	r1, r1, r0
 80048fc:	6021      	streq	r1, [r4, #0]
 80048fe:	6062      	str	r2, [r4, #4]
 8004900:	605c      	str	r4, [r3, #4]
 8004902:	e7c9      	b.n	8004898 <_free_r+0x24>
 8004904:	bd38      	pop	{r3, r4, r5, pc}
 8004906:	bf00      	nop
 8004908:	200001b4 	.word	0x200001b4

0800490c <_malloc_r>:
 800490c:	b570      	push	{r4, r5, r6, lr}
 800490e:	1ccd      	adds	r5, r1, #3
 8004910:	f025 0503 	bic.w	r5, r5, #3
 8004914:	3508      	adds	r5, #8
 8004916:	2d0c      	cmp	r5, #12
 8004918:	bf38      	it	cc
 800491a:	250c      	movcc	r5, #12
 800491c:	2d00      	cmp	r5, #0
 800491e:	4606      	mov	r6, r0
 8004920:	db01      	blt.n	8004926 <_malloc_r+0x1a>
 8004922:	42a9      	cmp	r1, r5
 8004924:	d903      	bls.n	800492e <_malloc_r+0x22>
 8004926:	230c      	movs	r3, #12
 8004928:	6033      	str	r3, [r6, #0]
 800492a:	2000      	movs	r0, #0
 800492c:	bd70      	pop	{r4, r5, r6, pc}
 800492e:	f000 fbc5 	bl	80050bc <__malloc_lock>
 8004932:	4a21      	ldr	r2, [pc, #132]	; (80049b8 <_malloc_r+0xac>)
 8004934:	6814      	ldr	r4, [r2, #0]
 8004936:	4621      	mov	r1, r4
 8004938:	b991      	cbnz	r1, 8004960 <_malloc_r+0x54>
 800493a:	4c20      	ldr	r4, [pc, #128]	; (80049bc <_malloc_r+0xb0>)
 800493c:	6823      	ldr	r3, [r4, #0]
 800493e:	b91b      	cbnz	r3, 8004948 <_malloc_r+0x3c>
 8004940:	4630      	mov	r0, r6
 8004942:	f000 fb03 	bl	8004f4c <_sbrk_r>
 8004946:	6020      	str	r0, [r4, #0]
 8004948:	4629      	mov	r1, r5
 800494a:	4630      	mov	r0, r6
 800494c:	f000 fafe 	bl	8004f4c <_sbrk_r>
 8004950:	1c43      	adds	r3, r0, #1
 8004952:	d124      	bne.n	800499e <_malloc_r+0x92>
 8004954:	230c      	movs	r3, #12
 8004956:	4630      	mov	r0, r6
 8004958:	6033      	str	r3, [r6, #0]
 800495a:	f000 fbb0 	bl	80050be <__malloc_unlock>
 800495e:	e7e4      	b.n	800492a <_malloc_r+0x1e>
 8004960:	680b      	ldr	r3, [r1, #0]
 8004962:	1b5b      	subs	r3, r3, r5
 8004964:	d418      	bmi.n	8004998 <_malloc_r+0x8c>
 8004966:	2b0b      	cmp	r3, #11
 8004968:	d90f      	bls.n	800498a <_malloc_r+0x7e>
 800496a:	600b      	str	r3, [r1, #0]
 800496c:	18cc      	adds	r4, r1, r3
 800496e:	50cd      	str	r5, [r1, r3]
 8004970:	4630      	mov	r0, r6
 8004972:	f000 fba4 	bl	80050be <__malloc_unlock>
 8004976:	f104 000b 	add.w	r0, r4, #11
 800497a:	1d23      	adds	r3, r4, #4
 800497c:	f020 0007 	bic.w	r0, r0, #7
 8004980:	1ac3      	subs	r3, r0, r3
 8004982:	d0d3      	beq.n	800492c <_malloc_r+0x20>
 8004984:	425a      	negs	r2, r3
 8004986:	50e2      	str	r2, [r4, r3]
 8004988:	e7d0      	b.n	800492c <_malloc_r+0x20>
 800498a:	684b      	ldr	r3, [r1, #4]
 800498c:	428c      	cmp	r4, r1
 800498e:	bf16      	itet	ne
 8004990:	6063      	strne	r3, [r4, #4]
 8004992:	6013      	streq	r3, [r2, #0]
 8004994:	460c      	movne	r4, r1
 8004996:	e7eb      	b.n	8004970 <_malloc_r+0x64>
 8004998:	460c      	mov	r4, r1
 800499a:	6849      	ldr	r1, [r1, #4]
 800499c:	e7cc      	b.n	8004938 <_malloc_r+0x2c>
 800499e:	1cc4      	adds	r4, r0, #3
 80049a0:	f024 0403 	bic.w	r4, r4, #3
 80049a4:	42a0      	cmp	r0, r4
 80049a6:	d005      	beq.n	80049b4 <_malloc_r+0xa8>
 80049a8:	1a21      	subs	r1, r4, r0
 80049aa:	4630      	mov	r0, r6
 80049ac:	f000 face 	bl	8004f4c <_sbrk_r>
 80049b0:	3001      	adds	r0, #1
 80049b2:	d0cf      	beq.n	8004954 <_malloc_r+0x48>
 80049b4:	6025      	str	r5, [r4, #0]
 80049b6:	e7db      	b.n	8004970 <_malloc_r+0x64>
 80049b8:	200001b4 	.word	0x200001b4
 80049bc:	200001b8 	.word	0x200001b8

080049c0 <__sfputc_r>:
 80049c0:	6893      	ldr	r3, [r2, #8]
 80049c2:	b410      	push	{r4}
 80049c4:	3b01      	subs	r3, #1
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	6093      	str	r3, [r2, #8]
 80049ca:	da07      	bge.n	80049dc <__sfputc_r+0x1c>
 80049cc:	6994      	ldr	r4, [r2, #24]
 80049ce:	42a3      	cmp	r3, r4
 80049d0:	db01      	blt.n	80049d6 <__sfputc_r+0x16>
 80049d2:	290a      	cmp	r1, #10
 80049d4:	d102      	bne.n	80049dc <__sfputc_r+0x1c>
 80049d6:	bc10      	pop	{r4}
 80049d8:	f7ff bcae 	b.w	8004338 <__swbuf_r>
 80049dc:	6813      	ldr	r3, [r2, #0]
 80049de:	1c58      	adds	r0, r3, #1
 80049e0:	6010      	str	r0, [r2, #0]
 80049e2:	7019      	strb	r1, [r3, #0]
 80049e4:	4608      	mov	r0, r1
 80049e6:	bc10      	pop	{r4}
 80049e8:	4770      	bx	lr

080049ea <__sfputs_r>:
 80049ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ec:	4606      	mov	r6, r0
 80049ee:	460f      	mov	r7, r1
 80049f0:	4614      	mov	r4, r2
 80049f2:	18d5      	adds	r5, r2, r3
 80049f4:	42ac      	cmp	r4, r5
 80049f6:	d101      	bne.n	80049fc <__sfputs_r+0x12>
 80049f8:	2000      	movs	r0, #0
 80049fa:	e007      	b.n	8004a0c <__sfputs_r+0x22>
 80049fc:	463a      	mov	r2, r7
 80049fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a02:	4630      	mov	r0, r6
 8004a04:	f7ff ffdc 	bl	80049c0 <__sfputc_r>
 8004a08:	1c43      	adds	r3, r0, #1
 8004a0a:	d1f3      	bne.n	80049f4 <__sfputs_r+0xa>
 8004a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004a10 <_vfiprintf_r>:
 8004a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a14:	460c      	mov	r4, r1
 8004a16:	b09d      	sub	sp, #116	; 0x74
 8004a18:	4617      	mov	r7, r2
 8004a1a:	461d      	mov	r5, r3
 8004a1c:	4606      	mov	r6, r0
 8004a1e:	b118      	cbz	r0, 8004a28 <_vfiprintf_r+0x18>
 8004a20:	6983      	ldr	r3, [r0, #24]
 8004a22:	b90b      	cbnz	r3, 8004a28 <_vfiprintf_r+0x18>
 8004a24:	f7ff fe38 	bl	8004698 <__sinit>
 8004a28:	4b7c      	ldr	r3, [pc, #496]	; (8004c1c <_vfiprintf_r+0x20c>)
 8004a2a:	429c      	cmp	r4, r3
 8004a2c:	d158      	bne.n	8004ae0 <_vfiprintf_r+0xd0>
 8004a2e:	6874      	ldr	r4, [r6, #4]
 8004a30:	89a3      	ldrh	r3, [r4, #12]
 8004a32:	0718      	lsls	r0, r3, #28
 8004a34:	d55e      	bpl.n	8004af4 <_vfiprintf_r+0xe4>
 8004a36:	6923      	ldr	r3, [r4, #16]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d05b      	beq.n	8004af4 <_vfiprintf_r+0xe4>
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	9309      	str	r3, [sp, #36]	; 0x24
 8004a40:	2320      	movs	r3, #32
 8004a42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a46:	2330      	movs	r3, #48	; 0x30
 8004a48:	f04f 0b01 	mov.w	fp, #1
 8004a4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a50:	9503      	str	r5, [sp, #12]
 8004a52:	46b8      	mov	r8, r7
 8004a54:	4645      	mov	r5, r8
 8004a56:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004a5a:	b10b      	cbz	r3, 8004a60 <_vfiprintf_r+0x50>
 8004a5c:	2b25      	cmp	r3, #37	; 0x25
 8004a5e:	d154      	bne.n	8004b0a <_vfiprintf_r+0xfa>
 8004a60:	ebb8 0a07 	subs.w	sl, r8, r7
 8004a64:	d00b      	beq.n	8004a7e <_vfiprintf_r+0x6e>
 8004a66:	4653      	mov	r3, sl
 8004a68:	463a      	mov	r2, r7
 8004a6a:	4621      	mov	r1, r4
 8004a6c:	4630      	mov	r0, r6
 8004a6e:	f7ff ffbc 	bl	80049ea <__sfputs_r>
 8004a72:	3001      	adds	r0, #1
 8004a74:	f000 80c2 	beq.w	8004bfc <_vfiprintf_r+0x1ec>
 8004a78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a7a:	4453      	add	r3, sl
 8004a7c:	9309      	str	r3, [sp, #36]	; 0x24
 8004a7e:	f898 3000 	ldrb.w	r3, [r8]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	f000 80ba 	beq.w	8004bfc <_vfiprintf_r+0x1ec>
 8004a88:	2300      	movs	r3, #0
 8004a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a92:	9304      	str	r3, [sp, #16]
 8004a94:	9307      	str	r3, [sp, #28]
 8004a96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a9a:	931a      	str	r3, [sp, #104]	; 0x68
 8004a9c:	46a8      	mov	r8, r5
 8004a9e:	2205      	movs	r2, #5
 8004aa0:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004aa4:	485e      	ldr	r0, [pc, #376]	; (8004c20 <_vfiprintf_r+0x210>)
 8004aa6:	f000 fafb 	bl	80050a0 <memchr>
 8004aaa:	9b04      	ldr	r3, [sp, #16]
 8004aac:	bb78      	cbnz	r0, 8004b0e <_vfiprintf_r+0xfe>
 8004aae:	06d9      	lsls	r1, r3, #27
 8004ab0:	bf44      	itt	mi
 8004ab2:	2220      	movmi	r2, #32
 8004ab4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004ab8:	071a      	lsls	r2, r3, #28
 8004aba:	bf44      	itt	mi
 8004abc:	222b      	movmi	r2, #43	; 0x2b
 8004abe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004ac2:	782a      	ldrb	r2, [r5, #0]
 8004ac4:	2a2a      	cmp	r2, #42	; 0x2a
 8004ac6:	d02a      	beq.n	8004b1e <_vfiprintf_r+0x10e>
 8004ac8:	46a8      	mov	r8, r5
 8004aca:	2000      	movs	r0, #0
 8004acc:	250a      	movs	r5, #10
 8004ace:	9a07      	ldr	r2, [sp, #28]
 8004ad0:	4641      	mov	r1, r8
 8004ad2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ad6:	3b30      	subs	r3, #48	; 0x30
 8004ad8:	2b09      	cmp	r3, #9
 8004ada:	d969      	bls.n	8004bb0 <_vfiprintf_r+0x1a0>
 8004adc:	b360      	cbz	r0, 8004b38 <_vfiprintf_r+0x128>
 8004ade:	e024      	b.n	8004b2a <_vfiprintf_r+0x11a>
 8004ae0:	4b50      	ldr	r3, [pc, #320]	; (8004c24 <_vfiprintf_r+0x214>)
 8004ae2:	429c      	cmp	r4, r3
 8004ae4:	d101      	bne.n	8004aea <_vfiprintf_r+0xda>
 8004ae6:	68b4      	ldr	r4, [r6, #8]
 8004ae8:	e7a2      	b.n	8004a30 <_vfiprintf_r+0x20>
 8004aea:	4b4f      	ldr	r3, [pc, #316]	; (8004c28 <_vfiprintf_r+0x218>)
 8004aec:	429c      	cmp	r4, r3
 8004aee:	bf08      	it	eq
 8004af0:	68f4      	ldreq	r4, [r6, #12]
 8004af2:	e79d      	b.n	8004a30 <_vfiprintf_r+0x20>
 8004af4:	4621      	mov	r1, r4
 8004af6:	4630      	mov	r0, r6
 8004af8:	f7ff fc70 	bl	80043dc <__swsetup_r>
 8004afc:	2800      	cmp	r0, #0
 8004afe:	d09d      	beq.n	8004a3c <_vfiprintf_r+0x2c>
 8004b00:	f04f 30ff 	mov.w	r0, #4294967295
 8004b04:	b01d      	add	sp, #116	; 0x74
 8004b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b0a:	46a8      	mov	r8, r5
 8004b0c:	e7a2      	b.n	8004a54 <_vfiprintf_r+0x44>
 8004b0e:	4a44      	ldr	r2, [pc, #272]	; (8004c20 <_vfiprintf_r+0x210>)
 8004b10:	4645      	mov	r5, r8
 8004b12:	1a80      	subs	r0, r0, r2
 8004b14:	fa0b f000 	lsl.w	r0, fp, r0
 8004b18:	4318      	orrs	r0, r3
 8004b1a:	9004      	str	r0, [sp, #16]
 8004b1c:	e7be      	b.n	8004a9c <_vfiprintf_r+0x8c>
 8004b1e:	9a03      	ldr	r2, [sp, #12]
 8004b20:	1d11      	adds	r1, r2, #4
 8004b22:	6812      	ldr	r2, [r2, #0]
 8004b24:	9103      	str	r1, [sp, #12]
 8004b26:	2a00      	cmp	r2, #0
 8004b28:	db01      	blt.n	8004b2e <_vfiprintf_r+0x11e>
 8004b2a:	9207      	str	r2, [sp, #28]
 8004b2c:	e004      	b.n	8004b38 <_vfiprintf_r+0x128>
 8004b2e:	4252      	negs	r2, r2
 8004b30:	f043 0302 	orr.w	r3, r3, #2
 8004b34:	9207      	str	r2, [sp, #28]
 8004b36:	9304      	str	r3, [sp, #16]
 8004b38:	f898 3000 	ldrb.w	r3, [r8]
 8004b3c:	2b2e      	cmp	r3, #46	; 0x2e
 8004b3e:	d10e      	bne.n	8004b5e <_vfiprintf_r+0x14e>
 8004b40:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004b44:	2b2a      	cmp	r3, #42	; 0x2a
 8004b46:	d138      	bne.n	8004bba <_vfiprintf_r+0x1aa>
 8004b48:	9b03      	ldr	r3, [sp, #12]
 8004b4a:	f108 0802 	add.w	r8, r8, #2
 8004b4e:	1d1a      	adds	r2, r3, #4
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	9203      	str	r2, [sp, #12]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	bfb8      	it	lt
 8004b58:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b5c:	9305      	str	r3, [sp, #20]
 8004b5e:	4d33      	ldr	r5, [pc, #204]	; (8004c2c <_vfiprintf_r+0x21c>)
 8004b60:	2203      	movs	r2, #3
 8004b62:	f898 1000 	ldrb.w	r1, [r8]
 8004b66:	4628      	mov	r0, r5
 8004b68:	f000 fa9a 	bl	80050a0 <memchr>
 8004b6c:	b140      	cbz	r0, 8004b80 <_vfiprintf_r+0x170>
 8004b6e:	2340      	movs	r3, #64	; 0x40
 8004b70:	1b40      	subs	r0, r0, r5
 8004b72:	fa03 f000 	lsl.w	r0, r3, r0
 8004b76:	9b04      	ldr	r3, [sp, #16]
 8004b78:	f108 0801 	add.w	r8, r8, #1
 8004b7c:	4303      	orrs	r3, r0
 8004b7e:	9304      	str	r3, [sp, #16]
 8004b80:	f898 1000 	ldrb.w	r1, [r8]
 8004b84:	2206      	movs	r2, #6
 8004b86:	482a      	ldr	r0, [pc, #168]	; (8004c30 <_vfiprintf_r+0x220>)
 8004b88:	f108 0701 	add.w	r7, r8, #1
 8004b8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b90:	f000 fa86 	bl	80050a0 <memchr>
 8004b94:	2800      	cmp	r0, #0
 8004b96:	d037      	beq.n	8004c08 <_vfiprintf_r+0x1f8>
 8004b98:	4b26      	ldr	r3, [pc, #152]	; (8004c34 <_vfiprintf_r+0x224>)
 8004b9a:	bb1b      	cbnz	r3, 8004be4 <_vfiprintf_r+0x1d4>
 8004b9c:	9b03      	ldr	r3, [sp, #12]
 8004b9e:	3307      	adds	r3, #7
 8004ba0:	f023 0307 	bic.w	r3, r3, #7
 8004ba4:	3308      	adds	r3, #8
 8004ba6:	9303      	str	r3, [sp, #12]
 8004ba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004baa:	444b      	add	r3, r9
 8004bac:	9309      	str	r3, [sp, #36]	; 0x24
 8004bae:	e750      	b.n	8004a52 <_vfiprintf_r+0x42>
 8004bb0:	fb05 3202 	mla	r2, r5, r2, r3
 8004bb4:	2001      	movs	r0, #1
 8004bb6:	4688      	mov	r8, r1
 8004bb8:	e78a      	b.n	8004ad0 <_vfiprintf_r+0xc0>
 8004bba:	2300      	movs	r3, #0
 8004bbc:	250a      	movs	r5, #10
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	f108 0801 	add.w	r8, r8, #1
 8004bc4:	9305      	str	r3, [sp, #20]
 8004bc6:	4640      	mov	r0, r8
 8004bc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004bcc:	3a30      	subs	r2, #48	; 0x30
 8004bce:	2a09      	cmp	r2, #9
 8004bd0:	d903      	bls.n	8004bda <_vfiprintf_r+0x1ca>
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d0c3      	beq.n	8004b5e <_vfiprintf_r+0x14e>
 8004bd6:	9105      	str	r1, [sp, #20]
 8004bd8:	e7c1      	b.n	8004b5e <_vfiprintf_r+0x14e>
 8004bda:	fb05 2101 	mla	r1, r5, r1, r2
 8004bde:	2301      	movs	r3, #1
 8004be0:	4680      	mov	r8, r0
 8004be2:	e7f0      	b.n	8004bc6 <_vfiprintf_r+0x1b6>
 8004be4:	ab03      	add	r3, sp, #12
 8004be6:	9300      	str	r3, [sp, #0]
 8004be8:	4622      	mov	r2, r4
 8004bea:	4b13      	ldr	r3, [pc, #76]	; (8004c38 <_vfiprintf_r+0x228>)
 8004bec:	a904      	add	r1, sp, #16
 8004bee:	4630      	mov	r0, r6
 8004bf0:	f3af 8000 	nop.w
 8004bf4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004bf8:	4681      	mov	r9, r0
 8004bfa:	d1d5      	bne.n	8004ba8 <_vfiprintf_r+0x198>
 8004bfc:	89a3      	ldrh	r3, [r4, #12]
 8004bfe:	065b      	lsls	r3, r3, #25
 8004c00:	f53f af7e 	bmi.w	8004b00 <_vfiprintf_r+0xf0>
 8004c04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c06:	e77d      	b.n	8004b04 <_vfiprintf_r+0xf4>
 8004c08:	ab03      	add	r3, sp, #12
 8004c0a:	9300      	str	r3, [sp, #0]
 8004c0c:	4622      	mov	r2, r4
 8004c0e:	4b0a      	ldr	r3, [pc, #40]	; (8004c38 <_vfiprintf_r+0x228>)
 8004c10:	a904      	add	r1, sp, #16
 8004c12:	4630      	mov	r0, r6
 8004c14:	f000 f888 	bl	8004d28 <_printf_i>
 8004c18:	e7ec      	b.n	8004bf4 <_vfiprintf_r+0x1e4>
 8004c1a:	bf00      	nop
 8004c1c:	080097ec 	.word	0x080097ec
 8004c20:	0800982c 	.word	0x0800982c
 8004c24:	0800980c 	.word	0x0800980c
 8004c28:	080097cc 	.word	0x080097cc
 8004c2c:	08009832 	.word	0x08009832
 8004c30:	08009836 	.word	0x08009836
 8004c34:	00000000 	.word	0x00000000
 8004c38:	080049eb 	.word	0x080049eb

08004c3c <_printf_common>:
 8004c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c40:	4691      	mov	r9, r2
 8004c42:	461f      	mov	r7, r3
 8004c44:	688a      	ldr	r2, [r1, #8]
 8004c46:	690b      	ldr	r3, [r1, #16]
 8004c48:	4606      	mov	r6, r0
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	bfb8      	it	lt
 8004c4e:	4613      	movlt	r3, r2
 8004c50:	f8c9 3000 	str.w	r3, [r9]
 8004c54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c58:	460c      	mov	r4, r1
 8004c5a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c5e:	b112      	cbz	r2, 8004c66 <_printf_common+0x2a>
 8004c60:	3301      	adds	r3, #1
 8004c62:	f8c9 3000 	str.w	r3, [r9]
 8004c66:	6823      	ldr	r3, [r4, #0]
 8004c68:	0699      	lsls	r1, r3, #26
 8004c6a:	bf42      	ittt	mi
 8004c6c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004c70:	3302      	addmi	r3, #2
 8004c72:	f8c9 3000 	strmi.w	r3, [r9]
 8004c76:	6825      	ldr	r5, [r4, #0]
 8004c78:	f015 0506 	ands.w	r5, r5, #6
 8004c7c:	d107      	bne.n	8004c8e <_printf_common+0x52>
 8004c7e:	f104 0a19 	add.w	sl, r4, #25
 8004c82:	68e3      	ldr	r3, [r4, #12]
 8004c84:	f8d9 2000 	ldr.w	r2, [r9]
 8004c88:	1a9b      	subs	r3, r3, r2
 8004c8a:	42ab      	cmp	r3, r5
 8004c8c:	dc29      	bgt.n	8004ce2 <_printf_common+0xa6>
 8004c8e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004c92:	6822      	ldr	r2, [r4, #0]
 8004c94:	3300      	adds	r3, #0
 8004c96:	bf18      	it	ne
 8004c98:	2301      	movne	r3, #1
 8004c9a:	0692      	lsls	r2, r2, #26
 8004c9c:	d42e      	bmi.n	8004cfc <_printf_common+0xc0>
 8004c9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ca2:	4639      	mov	r1, r7
 8004ca4:	4630      	mov	r0, r6
 8004ca6:	47c0      	blx	r8
 8004ca8:	3001      	adds	r0, #1
 8004caa:	d021      	beq.n	8004cf0 <_printf_common+0xb4>
 8004cac:	6823      	ldr	r3, [r4, #0]
 8004cae:	68e5      	ldr	r5, [r4, #12]
 8004cb0:	f003 0306 	and.w	r3, r3, #6
 8004cb4:	2b04      	cmp	r3, #4
 8004cb6:	bf18      	it	ne
 8004cb8:	2500      	movne	r5, #0
 8004cba:	f8d9 2000 	ldr.w	r2, [r9]
 8004cbe:	f04f 0900 	mov.w	r9, #0
 8004cc2:	bf08      	it	eq
 8004cc4:	1aad      	subeq	r5, r5, r2
 8004cc6:	68a3      	ldr	r3, [r4, #8]
 8004cc8:	6922      	ldr	r2, [r4, #16]
 8004cca:	bf08      	it	eq
 8004ccc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	bfc4      	itt	gt
 8004cd4:	1a9b      	subgt	r3, r3, r2
 8004cd6:	18ed      	addgt	r5, r5, r3
 8004cd8:	341a      	adds	r4, #26
 8004cda:	454d      	cmp	r5, r9
 8004cdc:	d11a      	bne.n	8004d14 <_printf_common+0xd8>
 8004cde:	2000      	movs	r0, #0
 8004ce0:	e008      	b.n	8004cf4 <_printf_common+0xb8>
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	4652      	mov	r2, sl
 8004ce6:	4639      	mov	r1, r7
 8004ce8:	4630      	mov	r0, r6
 8004cea:	47c0      	blx	r8
 8004cec:	3001      	adds	r0, #1
 8004cee:	d103      	bne.n	8004cf8 <_printf_common+0xbc>
 8004cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8004cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cf8:	3501      	adds	r5, #1
 8004cfa:	e7c2      	b.n	8004c82 <_printf_common+0x46>
 8004cfc:	2030      	movs	r0, #48	; 0x30
 8004cfe:	18e1      	adds	r1, r4, r3
 8004d00:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d04:	1c5a      	adds	r2, r3, #1
 8004d06:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d0a:	4422      	add	r2, r4
 8004d0c:	3302      	adds	r3, #2
 8004d0e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d12:	e7c4      	b.n	8004c9e <_printf_common+0x62>
 8004d14:	2301      	movs	r3, #1
 8004d16:	4622      	mov	r2, r4
 8004d18:	4639      	mov	r1, r7
 8004d1a:	4630      	mov	r0, r6
 8004d1c:	47c0      	blx	r8
 8004d1e:	3001      	adds	r0, #1
 8004d20:	d0e6      	beq.n	8004cf0 <_printf_common+0xb4>
 8004d22:	f109 0901 	add.w	r9, r9, #1
 8004d26:	e7d8      	b.n	8004cda <_printf_common+0x9e>

08004d28 <_printf_i>:
 8004d28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d2c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004d30:	460c      	mov	r4, r1
 8004d32:	7e09      	ldrb	r1, [r1, #24]
 8004d34:	b085      	sub	sp, #20
 8004d36:	296e      	cmp	r1, #110	; 0x6e
 8004d38:	4617      	mov	r7, r2
 8004d3a:	4606      	mov	r6, r0
 8004d3c:	4698      	mov	r8, r3
 8004d3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004d40:	f000 80b3 	beq.w	8004eaa <_printf_i+0x182>
 8004d44:	d822      	bhi.n	8004d8c <_printf_i+0x64>
 8004d46:	2963      	cmp	r1, #99	; 0x63
 8004d48:	d036      	beq.n	8004db8 <_printf_i+0x90>
 8004d4a:	d80a      	bhi.n	8004d62 <_printf_i+0x3a>
 8004d4c:	2900      	cmp	r1, #0
 8004d4e:	f000 80b9 	beq.w	8004ec4 <_printf_i+0x19c>
 8004d52:	2958      	cmp	r1, #88	; 0x58
 8004d54:	f000 8083 	beq.w	8004e5e <_printf_i+0x136>
 8004d58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d5c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004d60:	e032      	b.n	8004dc8 <_printf_i+0xa0>
 8004d62:	2964      	cmp	r1, #100	; 0x64
 8004d64:	d001      	beq.n	8004d6a <_printf_i+0x42>
 8004d66:	2969      	cmp	r1, #105	; 0x69
 8004d68:	d1f6      	bne.n	8004d58 <_printf_i+0x30>
 8004d6a:	6820      	ldr	r0, [r4, #0]
 8004d6c:	6813      	ldr	r3, [r2, #0]
 8004d6e:	0605      	lsls	r5, r0, #24
 8004d70:	f103 0104 	add.w	r1, r3, #4
 8004d74:	d52a      	bpl.n	8004dcc <_printf_i+0xa4>
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	6011      	str	r1, [r2, #0]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	da03      	bge.n	8004d86 <_printf_i+0x5e>
 8004d7e:	222d      	movs	r2, #45	; 0x2d
 8004d80:	425b      	negs	r3, r3
 8004d82:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004d86:	486f      	ldr	r0, [pc, #444]	; (8004f44 <_printf_i+0x21c>)
 8004d88:	220a      	movs	r2, #10
 8004d8a:	e039      	b.n	8004e00 <_printf_i+0xd8>
 8004d8c:	2973      	cmp	r1, #115	; 0x73
 8004d8e:	f000 809d 	beq.w	8004ecc <_printf_i+0x1a4>
 8004d92:	d808      	bhi.n	8004da6 <_printf_i+0x7e>
 8004d94:	296f      	cmp	r1, #111	; 0x6f
 8004d96:	d020      	beq.n	8004dda <_printf_i+0xb2>
 8004d98:	2970      	cmp	r1, #112	; 0x70
 8004d9a:	d1dd      	bne.n	8004d58 <_printf_i+0x30>
 8004d9c:	6823      	ldr	r3, [r4, #0]
 8004d9e:	f043 0320 	orr.w	r3, r3, #32
 8004da2:	6023      	str	r3, [r4, #0]
 8004da4:	e003      	b.n	8004dae <_printf_i+0x86>
 8004da6:	2975      	cmp	r1, #117	; 0x75
 8004da8:	d017      	beq.n	8004dda <_printf_i+0xb2>
 8004daa:	2978      	cmp	r1, #120	; 0x78
 8004dac:	d1d4      	bne.n	8004d58 <_printf_i+0x30>
 8004dae:	2378      	movs	r3, #120	; 0x78
 8004db0:	4865      	ldr	r0, [pc, #404]	; (8004f48 <_printf_i+0x220>)
 8004db2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004db6:	e055      	b.n	8004e64 <_printf_i+0x13c>
 8004db8:	6813      	ldr	r3, [r2, #0]
 8004dba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004dbe:	1d19      	adds	r1, r3, #4
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	6011      	str	r1, [r2, #0]
 8004dc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e08c      	b.n	8004ee6 <_printf_i+0x1be>
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004dd2:	6011      	str	r1, [r2, #0]
 8004dd4:	bf18      	it	ne
 8004dd6:	b21b      	sxthne	r3, r3
 8004dd8:	e7cf      	b.n	8004d7a <_printf_i+0x52>
 8004dda:	6813      	ldr	r3, [r2, #0]
 8004ddc:	6825      	ldr	r5, [r4, #0]
 8004dde:	1d18      	adds	r0, r3, #4
 8004de0:	6010      	str	r0, [r2, #0]
 8004de2:	0628      	lsls	r0, r5, #24
 8004de4:	d501      	bpl.n	8004dea <_printf_i+0xc2>
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	e002      	b.n	8004df0 <_printf_i+0xc8>
 8004dea:	0668      	lsls	r0, r5, #25
 8004dec:	d5fb      	bpl.n	8004de6 <_printf_i+0xbe>
 8004dee:	881b      	ldrh	r3, [r3, #0]
 8004df0:	296f      	cmp	r1, #111	; 0x6f
 8004df2:	bf14      	ite	ne
 8004df4:	220a      	movne	r2, #10
 8004df6:	2208      	moveq	r2, #8
 8004df8:	4852      	ldr	r0, [pc, #328]	; (8004f44 <_printf_i+0x21c>)
 8004dfa:	2100      	movs	r1, #0
 8004dfc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e00:	6865      	ldr	r5, [r4, #4]
 8004e02:	2d00      	cmp	r5, #0
 8004e04:	60a5      	str	r5, [r4, #8]
 8004e06:	f2c0 8095 	blt.w	8004f34 <_printf_i+0x20c>
 8004e0a:	6821      	ldr	r1, [r4, #0]
 8004e0c:	f021 0104 	bic.w	r1, r1, #4
 8004e10:	6021      	str	r1, [r4, #0]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d13d      	bne.n	8004e92 <_printf_i+0x16a>
 8004e16:	2d00      	cmp	r5, #0
 8004e18:	f040 808e 	bne.w	8004f38 <_printf_i+0x210>
 8004e1c:	4665      	mov	r5, ip
 8004e1e:	2a08      	cmp	r2, #8
 8004e20:	d10b      	bne.n	8004e3a <_printf_i+0x112>
 8004e22:	6823      	ldr	r3, [r4, #0]
 8004e24:	07db      	lsls	r3, r3, #31
 8004e26:	d508      	bpl.n	8004e3a <_printf_i+0x112>
 8004e28:	6923      	ldr	r3, [r4, #16]
 8004e2a:	6862      	ldr	r2, [r4, #4]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	bfde      	ittt	le
 8004e30:	2330      	movle	r3, #48	; 0x30
 8004e32:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e36:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004e3a:	ebac 0305 	sub.w	r3, ip, r5
 8004e3e:	6123      	str	r3, [r4, #16]
 8004e40:	f8cd 8000 	str.w	r8, [sp]
 8004e44:	463b      	mov	r3, r7
 8004e46:	aa03      	add	r2, sp, #12
 8004e48:	4621      	mov	r1, r4
 8004e4a:	4630      	mov	r0, r6
 8004e4c:	f7ff fef6 	bl	8004c3c <_printf_common>
 8004e50:	3001      	adds	r0, #1
 8004e52:	d14d      	bne.n	8004ef0 <_printf_i+0x1c8>
 8004e54:	f04f 30ff 	mov.w	r0, #4294967295
 8004e58:	b005      	add	sp, #20
 8004e5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004e5e:	4839      	ldr	r0, [pc, #228]	; (8004f44 <_printf_i+0x21c>)
 8004e60:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004e64:	6813      	ldr	r3, [r2, #0]
 8004e66:	6821      	ldr	r1, [r4, #0]
 8004e68:	1d1d      	adds	r5, r3, #4
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	6015      	str	r5, [r2, #0]
 8004e6e:	060a      	lsls	r2, r1, #24
 8004e70:	d50b      	bpl.n	8004e8a <_printf_i+0x162>
 8004e72:	07ca      	lsls	r2, r1, #31
 8004e74:	bf44      	itt	mi
 8004e76:	f041 0120 	orrmi.w	r1, r1, #32
 8004e7a:	6021      	strmi	r1, [r4, #0]
 8004e7c:	b91b      	cbnz	r3, 8004e86 <_printf_i+0x15e>
 8004e7e:	6822      	ldr	r2, [r4, #0]
 8004e80:	f022 0220 	bic.w	r2, r2, #32
 8004e84:	6022      	str	r2, [r4, #0]
 8004e86:	2210      	movs	r2, #16
 8004e88:	e7b7      	b.n	8004dfa <_printf_i+0xd2>
 8004e8a:	064d      	lsls	r5, r1, #25
 8004e8c:	bf48      	it	mi
 8004e8e:	b29b      	uxthmi	r3, r3
 8004e90:	e7ef      	b.n	8004e72 <_printf_i+0x14a>
 8004e92:	4665      	mov	r5, ip
 8004e94:	fbb3 f1f2 	udiv	r1, r3, r2
 8004e98:	fb02 3311 	mls	r3, r2, r1, r3
 8004e9c:	5cc3      	ldrb	r3, [r0, r3]
 8004e9e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004ea2:	460b      	mov	r3, r1
 8004ea4:	2900      	cmp	r1, #0
 8004ea6:	d1f5      	bne.n	8004e94 <_printf_i+0x16c>
 8004ea8:	e7b9      	b.n	8004e1e <_printf_i+0xf6>
 8004eaa:	6813      	ldr	r3, [r2, #0]
 8004eac:	6825      	ldr	r5, [r4, #0]
 8004eae:	1d18      	adds	r0, r3, #4
 8004eb0:	6961      	ldr	r1, [r4, #20]
 8004eb2:	6010      	str	r0, [r2, #0]
 8004eb4:	0628      	lsls	r0, r5, #24
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	d501      	bpl.n	8004ebe <_printf_i+0x196>
 8004eba:	6019      	str	r1, [r3, #0]
 8004ebc:	e002      	b.n	8004ec4 <_printf_i+0x19c>
 8004ebe:	066a      	lsls	r2, r5, #25
 8004ec0:	d5fb      	bpl.n	8004eba <_printf_i+0x192>
 8004ec2:	8019      	strh	r1, [r3, #0]
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	4665      	mov	r5, ip
 8004ec8:	6123      	str	r3, [r4, #16]
 8004eca:	e7b9      	b.n	8004e40 <_printf_i+0x118>
 8004ecc:	6813      	ldr	r3, [r2, #0]
 8004ece:	1d19      	adds	r1, r3, #4
 8004ed0:	6011      	str	r1, [r2, #0]
 8004ed2:	681d      	ldr	r5, [r3, #0]
 8004ed4:	6862      	ldr	r2, [r4, #4]
 8004ed6:	2100      	movs	r1, #0
 8004ed8:	4628      	mov	r0, r5
 8004eda:	f000 f8e1 	bl	80050a0 <memchr>
 8004ede:	b108      	cbz	r0, 8004ee4 <_printf_i+0x1bc>
 8004ee0:	1b40      	subs	r0, r0, r5
 8004ee2:	6060      	str	r0, [r4, #4]
 8004ee4:	6863      	ldr	r3, [r4, #4]
 8004ee6:	6123      	str	r3, [r4, #16]
 8004ee8:	2300      	movs	r3, #0
 8004eea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004eee:	e7a7      	b.n	8004e40 <_printf_i+0x118>
 8004ef0:	6923      	ldr	r3, [r4, #16]
 8004ef2:	462a      	mov	r2, r5
 8004ef4:	4639      	mov	r1, r7
 8004ef6:	4630      	mov	r0, r6
 8004ef8:	47c0      	blx	r8
 8004efa:	3001      	adds	r0, #1
 8004efc:	d0aa      	beq.n	8004e54 <_printf_i+0x12c>
 8004efe:	6823      	ldr	r3, [r4, #0]
 8004f00:	079b      	lsls	r3, r3, #30
 8004f02:	d413      	bmi.n	8004f2c <_printf_i+0x204>
 8004f04:	68e0      	ldr	r0, [r4, #12]
 8004f06:	9b03      	ldr	r3, [sp, #12]
 8004f08:	4298      	cmp	r0, r3
 8004f0a:	bfb8      	it	lt
 8004f0c:	4618      	movlt	r0, r3
 8004f0e:	e7a3      	b.n	8004e58 <_printf_i+0x130>
 8004f10:	2301      	movs	r3, #1
 8004f12:	464a      	mov	r2, r9
 8004f14:	4639      	mov	r1, r7
 8004f16:	4630      	mov	r0, r6
 8004f18:	47c0      	blx	r8
 8004f1a:	3001      	adds	r0, #1
 8004f1c:	d09a      	beq.n	8004e54 <_printf_i+0x12c>
 8004f1e:	3501      	adds	r5, #1
 8004f20:	68e3      	ldr	r3, [r4, #12]
 8004f22:	9a03      	ldr	r2, [sp, #12]
 8004f24:	1a9b      	subs	r3, r3, r2
 8004f26:	42ab      	cmp	r3, r5
 8004f28:	dcf2      	bgt.n	8004f10 <_printf_i+0x1e8>
 8004f2a:	e7eb      	b.n	8004f04 <_printf_i+0x1dc>
 8004f2c:	2500      	movs	r5, #0
 8004f2e:	f104 0919 	add.w	r9, r4, #25
 8004f32:	e7f5      	b.n	8004f20 <_printf_i+0x1f8>
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d1ac      	bne.n	8004e92 <_printf_i+0x16a>
 8004f38:	7803      	ldrb	r3, [r0, #0]
 8004f3a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f3e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f42:	e76c      	b.n	8004e1e <_printf_i+0xf6>
 8004f44:	0800983d 	.word	0x0800983d
 8004f48:	0800984e 	.word	0x0800984e

08004f4c <_sbrk_r>:
 8004f4c:	b538      	push	{r3, r4, r5, lr}
 8004f4e:	2300      	movs	r3, #0
 8004f50:	4c05      	ldr	r4, [pc, #20]	; (8004f68 <_sbrk_r+0x1c>)
 8004f52:	4605      	mov	r5, r0
 8004f54:	4608      	mov	r0, r1
 8004f56:	6023      	str	r3, [r4, #0]
 8004f58:	f7fd fa00 	bl	800235c <_sbrk>
 8004f5c:	1c43      	adds	r3, r0, #1
 8004f5e:	d102      	bne.n	8004f66 <_sbrk_r+0x1a>
 8004f60:	6823      	ldr	r3, [r4, #0]
 8004f62:	b103      	cbz	r3, 8004f66 <_sbrk_r+0x1a>
 8004f64:	602b      	str	r3, [r5, #0]
 8004f66:	bd38      	pop	{r3, r4, r5, pc}
 8004f68:	20000248 	.word	0x20000248

08004f6c <__sread>:
 8004f6c:	b510      	push	{r4, lr}
 8004f6e:	460c      	mov	r4, r1
 8004f70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f74:	f000 f8a4 	bl	80050c0 <_read_r>
 8004f78:	2800      	cmp	r0, #0
 8004f7a:	bfab      	itete	ge
 8004f7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004f7e:	89a3      	ldrhlt	r3, [r4, #12]
 8004f80:	181b      	addge	r3, r3, r0
 8004f82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004f86:	bfac      	ite	ge
 8004f88:	6563      	strge	r3, [r4, #84]	; 0x54
 8004f8a:	81a3      	strhlt	r3, [r4, #12]
 8004f8c:	bd10      	pop	{r4, pc}

08004f8e <__swrite>:
 8004f8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f92:	461f      	mov	r7, r3
 8004f94:	898b      	ldrh	r3, [r1, #12]
 8004f96:	4605      	mov	r5, r0
 8004f98:	05db      	lsls	r3, r3, #23
 8004f9a:	460c      	mov	r4, r1
 8004f9c:	4616      	mov	r6, r2
 8004f9e:	d505      	bpl.n	8004fac <__swrite+0x1e>
 8004fa0:	2302      	movs	r3, #2
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fa8:	f000 f868 	bl	800507c <_lseek_r>
 8004fac:	89a3      	ldrh	r3, [r4, #12]
 8004fae:	4632      	mov	r2, r6
 8004fb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fb4:	81a3      	strh	r3, [r4, #12]
 8004fb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fba:	463b      	mov	r3, r7
 8004fbc:	4628      	mov	r0, r5
 8004fbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004fc2:	f000 b817 	b.w	8004ff4 <_write_r>

08004fc6 <__sseek>:
 8004fc6:	b510      	push	{r4, lr}
 8004fc8:	460c      	mov	r4, r1
 8004fca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fce:	f000 f855 	bl	800507c <_lseek_r>
 8004fd2:	1c43      	adds	r3, r0, #1
 8004fd4:	89a3      	ldrh	r3, [r4, #12]
 8004fd6:	bf15      	itete	ne
 8004fd8:	6560      	strne	r0, [r4, #84]	; 0x54
 8004fda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004fde:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004fe2:	81a3      	strheq	r3, [r4, #12]
 8004fe4:	bf18      	it	ne
 8004fe6:	81a3      	strhne	r3, [r4, #12]
 8004fe8:	bd10      	pop	{r4, pc}

08004fea <__sclose>:
 8004fea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fee:	f000 b813 	b.w	8005018 <_close_r>
	...

08004ff4 <_write_r>:
 8004ff4:	b538      	push	{r3, r4, r5, lr}
 8004ff6:	4605      	mov	r5, r0
 8004ff8:	4608      	mov	r0, r1
 8004ffa:	4611      	mov	r1, r2
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	4c05      	ldr	r4, [pc, #20]	; (8005014 <_write_r+0x20>)
 8005000:	6022      	str	r2, [r4, #0]
 8005002:	461a      	mov	r2, r3
 8005004:	f7fc fd0b 	bl	8001a1e <_write>
 8005008:	1c43      	adds	r3, r0, #1
 800500a:	d102      	bne.n	8005012 <_write_r+0x1e>
 800500c:	6823      	ldr	r3, [r4, #0]
 800500e:	b103      	cbz	r3, 8005012 <_write_r+0x1e>
 8005010:	602b      	str	r3, [r5, #0]
 8005012:	bd38      	pop	{r3, r4, r5, pc}
 8005014:	20000248 	.word	0x20000248

08005018 <_close_r>:
 8005018:	b538      	push	{r3, r4, r5, lr}
 800501a:	2300      	movs	r3, #0
 800501c:	4c05      	ldr	r4, [pc, #20]	; (8005034 <_close_r+0x1c>)
 800501e:	4605      	mov	r5, r0
 8005020:	4608      	mov	r0, r1
 8005022:	6023      	str	r3, [r4, #0]
 8005024:	f7fd f969 	bl	80022fa <_close>
 8005028:	1c43      	adds	r3, r0, #1
 800502a:	d102      	bne.n	8005032 <_close_r+0x1a>
 800502c:	6823      	ldr	r3, [r4, #0]
 800502e:	b103      	cbz	r3, 8005032 <_close_r+0x1a>
 8005030:	602b      	str	r3, [r5, #0]
 8005032:	bd38      	pop	{r3, r4, r5, pc}
 8005034:	20000248 	.word	0x20000248

08005038 <_fstat_r>:
 8005038:	b538      	push	{r3, r4, r5, lr}
 800503a:	2300      	movs	r3, #0
 800503c:	4c06      	ldr	r4, [pc, #24]	; (8005058 <_fstat_r+0x20>)
 800503e:	4605      	mov	r5, r0
 8005040:	4608      	mov	r0, r1
 8005042:	4611      	mov	r1, r2
 8005044:	6023      	str	r3, [r4, #0]
 8005046:	f7fd f963 	bl	8002310 <_fstat>
 800504a:	1c43      	adds	r3, r0, #1
 800504c:	d102      	bne.n	8005054 <_fstat_r+0x1c>
 800504e:	6823      	ldr	r3, [r4, #0]
 8005050:	b103      	cbz	r3, 8005054 <_fstat_r+0x1c>
 8005052:	602b      	str	r3, [r5, #0]
 8005054:	bd38      	pop	{r3, r4, r5, pc}
 8005056:	bf00      	nop
 8005058:	20000248 	.word	0x20000248

0800505c <_isatty_r>:
 800505c:	b538      	push	{r3, r4, r5, lr}
 800505e:	2300      	movs	r3, #0
 8005060:	4c05      	ldr	r4, [pc, #20]	; (8005078 <_isatty_r+0x1c>)
 8005062:	4605      	mov	r5, r0
 8005064:	4608      	mov	r0, r1
 8005066:	6023      	str	r3, [r4, #0]
 8005068:	f7fd f961 	bl	800232e <_isatty>
 800506c:	1c43      	adds	r3, r0, #1
 800506e:	d102      	bne.n	8005076 <_isatty_r+0x1a>
 8005070:	6823      	ldr	r3, [r4, #0]
 8005072:	b103      	cbz	r3, 8005076 <_isatty_r+0x1a>
 8005074:	602b      	str	r3, [r5, #0]
 8005076:	bd38      	pop	{r3, r4, r5, pc}
 8005078:	20000248 	.word	0x20000248

0800507c <_lseek_r>:
 800507c:	b538      	push	{r3, r4, r5, lr}
 800507e:	4605      	mov	r5, r0
 8005080:	4608      	mov	r0, r1
 8005082:	4611      	mov	r1, r2
 8005084:	2200      	movs	r2, #0
 8005086:	4c05      	ldr	r4, [pc, #20]	; (800509c <_lseek_r+0x20>)
 8005088:	6022      	str	r2, [r4, #0]
 800508a:	461a      	mov	r2, r3
 800508c:	f7fd f959 	bl	8002342 <_lseek>
 8005090:	1c43      	adds	r3, r0, #1
 8005092:	d102      	bne.n	800509a <_lseek_r+0x1e>
 8005094:	6823      	ldr	r3, [r4, #0]
 8005096:	b103      	cbz	r3, 800509a <_lseek_r+0x1e>
 8005098:	602b      	str	r3, [r5, #0]
 800509a:	bd38      	pop	{r3, r4, r5, pc}
 800509c:	20000248 	.word	0x20000248

080050a0 <memchr>:
 80050a0:	b510      	push	{r4, lr}
 80050a2:	b2c9      	uxtb	r1, r1
 80050a4:	4402      	add	r2, r0
 80050a6:	4290      	cmp	r0, r2
 80050a8:	4603      	mov	r3, r0
 80050aa:	d101      	bne.n	80050b0 <memchr+0x10>
 80050ac:	2300      	movs	r3, #0
 80050ae:	e003      	b.n	80050b8 <memchr+0x18>
 80050b0:	781c      	ldrb	r4, [r3, #0]
 80050b2:	3001      	adds	r0, #1
 80050b4:	428c      	cmp	r4, r1
 80050b6:	d1f6      	bne.n	80050a6 <memchr+0x6>
 80050b8:	4618      	mov	r0, r3
 80050ba:	bd10      	pop	{r4, pc}

080050bc <__malloc_lock>:
 80050bc:	4770      	bx	lr

080050be <__malloc_unlock>:
 80050be:	4770      	bx	lr

080050c0 <_read_r>:
 80050c0:	b538      	push	{r3, r4, r5, lr}
 80050c2:	4605      	mov	r5, r0
 80050c4:	4608      	mov	r0, r1
 80050c6:	4611      	mov	r1, r2
 80050c8:	2200      	movs	r2, #0
 80050ca:	4c05      	ldr	r4, [pc, #20]	; (80050e0 <_read_r+0x20>)
 80050cc:	6022      	str	r2, [r4, #0]
 80050ce:	461a      	mov	r2, r3
 80050d0:	f7fd f8f6 	bl	80022c0 <_read>
 80050d4:	1c43      	adds	r3, r0, #1
 80050d6:	d102      	bne.n	80050de <_read_r+0x1e>
 80050d8:	6823      	ldr	r3, [r4, #0]
 80050da:	b103      	cbz	r3, 80050de <_read_r+0x1e>
 80050dc:	602b      	str	r3, [r5, #0]
 80050de:	bd38      	pop	{r3, r4, r5, pc}
 80050e0:	20000248 	.word	0x20000248

080050e4 <pow>:
 80050e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050e8:	b08f      	sub	sp, #60	; 0x3c
 80050ea:	461d      	mov	r5, r3
 80050ec:	4680      	mov	r8, r0
 80050ee:	4689      	mov	r9, r1
 80050f0:	4614      	mov	r4, r2
 80050f2:	f000 f9a9 	bl	8005448 <__ieee754_pow>
 80050f6:	4fa1      	ldr	r7, [pc, #644]	; (800537c <pow+0x298>)
 80050f8:	e9cd 0100 	strd	r0, r1, [sp]
 80050fc:	f997 3000 	ldrsb.w	r3, [r7]
 8005100:	463e      	mov	r6, r7
 8005102:	9302      	str	r3, [sp, #8]
 8005104:	3301      	adds	r3, #1
 8005106:	d05f      	beq.n	80051c8 <pow+0xe4>
 8005108:	4622      	mov	r2, r4
 800510a:	462b      	mov	r3, r5
 800510c:	4620      	mov	r0, r4
 800510e:	4629      	mov	r1, r5
 8005110:	f7fb fc74 	bl	80009fc <__aeabi_dcmpun>
 8005114:	4682      	mov	sl, r0
 8005116:	2800      	cmp	r0, #0
 8005118:	d156      	bne.n	80051c8 <pow+0xe4>
 800511a:	4642      	mov	r2, r8
 800511c:	464b      	mov	r3, r9
 800511e:	4640      	mov	r0, r8
 8005120:	4649      	mov	r1, r9
 8005122:	f7fb fc6b 	bl	80009fc <__aeabi_dcmpun>
 8005126:	9003      	str	r0, [sp, #12]
 8005128:	b1e8      	cbz	r0, 8005166 <pow+0x82>
 800512a:	2200      	movs	r2, #0
 800512c:	2300      	movs	r3, #0
 800512e:	4620      	mov	r0, r4
 8005130:	4629      	mov	r1, r5
 8005132:	f7fb fc31 	bl	8000998 <__aeabi_dcmpeq>
 8005136:	2800      	cmp	r0, #0
 8005138:	d046      	beq.n	80051c8 <pow+0xe4>
 800513a:	2301      	movs	r3, #1
 800513c:	2200      	movs	r2, #0
 800513e:	9304      	str	r3, [sp, #16]
 8005140:	4b8f      	ldr	r3, [pc, #572]	; (8005380 <pow+0x29c>)
 8005142:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8005146:	9305      	str	r3, [sp, #20]
 8005148:	4b8e      	ldr	r3, [pc, #568]	; (8005384 <pow+0x2a0>)
 800514a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800514e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005152:	9b02      	ldr	r3, [sp, #8]
 8005154:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005158:	2b02      	cmp	r3, #2
 800515a:	d031      	beq.n	80051c0 <pow+0xdc>
 800515c:	a804      	add	r0, sp, #16
 800515e:	f000 ff33 	bl	8005fc8 <matherr>
 8005162:	bb38      	cbnz	r0, 80051b4 <pow+0xd0>
 8005164:	e058      	b.n	8005218 <pow+0x134>
 8005166:	f04f 0a00 	mov.w	sl, #0
 800516a:	f04f 0b00 	mov.w	fp, #0
 800516e:	4652      	mov	r2, sl
 8005170:	465b      	mov	r3, fp
 8005172:	4640      	mov	r0, r8
 8005174:	4649      	mov	r1, r9
 8005176:	f7fb fc0f 	bl	8000998 <__aeabi_dcmpeq>
 800517a:	2800      	cmp	r0, #0
 800517c:	d051      	beq.n	8005222 <pow+0x13e>
 800517e:	4652      	mov	r2, sl
 8005180:	465b      	mov	r3, fp
 8005182:	4620      	mov	r0, r4
 8005184:	4629      	mov	r1, r5
 8005186:	f7fb fc07 	bl	8000998 <__aeabi_dcmpeq>
 800518a:	4606      	mov	r6, r0
 800518c:	b308      	cbz	r0, 80051d2 <pow+0xee>
 800518e:	2301      	movs	r3, #1
 8005190:	9304      	str	r3, [sp, #16]
 8005192:	4b7b      	ldr	r3, [pc, #492]	; (8005380 <pow+0x29c>)
 8005194:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005198:	9305      	str	r3, [sp, #20]
 800519a:	9b03      	ldr	r3, [sp, #12]
 800519c:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80051a0:	930c      	str	r3, [sp, #48]	; 0x30
 80051a2:	9b02      	ldr	r3, [sp, #8]
 80051a4:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d0d7      	beq.n	800515c <pow+0x78>
 80051ac:	2200      	movs	r2, #0
 80051ae:	4b75      	ldr	r3, [pc, #468]	; (8005384 <pow+0x2a0>)
 80051b0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80051b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80051b6:	b11b      	cbz	r3, 80051c0 <pow+0xdc>
 80051b8:	f7ff f804 	bl	80041c4 <__errno>
 80051bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80051be:	6003      	str	r3, [r0, #0]
 80051c0:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 80051c4:	e9cd 3400 	strd	r3, r4, [sp]
 80051c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80051cc:	b00f      	add	sp, #60	; 0x3c
 80051ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051d2:	4620      	mov	r0, r4
 80051d4:	4629      	mov	r1, r5
 80051d6:	f000 fef1 	bl	8005fbc <finite>
 80051da:	2800      	cmp	r0, #0
 80051dc:	d0f4      	beq.n	80051c8 <pow+0xe4>
 80051de:	4652      	mov	r2, sl
 80051e0:	465b      	mov	r3, fp
 80051e2:	4620      	mov	r0, r4
 80051e4:	4629      	mov	r1, r5
 80051e6:	f7fb fbe1 	bl	80009ac <__aeabi_dcmplt>
 80051ea:	2800      	cmp	r0, #0
 80051ec:	d0ec      	beq.n	80051c8 <pow+0xe4>
 80051ee:	2301      	movs	r3, #1
 80051f0:	9304      	str	r3, [sp, #16]
 80051f2:	4b63      	ldr	r3, [pc, #396]	; (8005380 <pow+0x29c>)
 80051f4:	960c      	str	r6, [sp, #48]	; 0x30
 80051f6:	9305      	str	r3, [sp, #20]
 80051f8:	f997 3000 	ldrsb.w	r3, [r7]
 80051fc:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005200:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005204:	b913      	cbnz	r3, 800520c <pow+0x128>
 8005206:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800520a:	e7a7      	b.n	800515c <pow+0x78>
 800520c:	2000      	movs	r0, #0
 800520e:	495e      	ldr	r1, [pc, #376]	; (8005388 <pow+0x2a4>)
 8005210:	2b02      	cmp	r3, #2
 8005212:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005216:	d1a1      	bne.n	800515c <pow+0x78>
 8005218:	f7fe ffd4 	bl	80041c4 <__errno>
 800521c:	2321      	movs	r3, #33	; 0x21
 800521e:	6003      	str	r3, [r0, #0]
 8005220:	e7c8      	b.n	80051b4 <pow+0xd0>
 8005222:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005226:	f000 fec9 	bl	8005fbc <finite>
 800522a:	9002      	str	r0, [sp, #8]
 800522c:	2800      	cmp	r0, #0
 800522e:	d177      	bne.n	8005320 <pow+0x23c>
 8005230:	4640      	mov	r0, r8
 8005232:	4649      	mov	r1, r9
 8005234:	f000 fec2 	bl	8005fbc <finite>
 8005238:	2800      	cmp	r0, #0
 800523a:	d071      	beq.n	8005320 <pow+0x23c>
 800523c:	4620      	mov	r0, r4
 800523e:	4629      	mov	r1, r5
 8005240:	f000 febc 	bl	8005fbc <finite>
 8005244:	2800      	cmp	r0, #0
 8005246:	d06b      	beq.n	8005320 <pow+0x23c>
 8005248:	e9dd 2300 	ldrd	r2, r3, [sp]
 800524c:	4619      	mov	r1, r3
 800524e:	4610      	mov	r0, r2
 8005250:	f7fb fbd4 	bl	80009fc <__aeabi_dcmpun>
 8005254:	f997 7000 	ldrsb.w	r7, [r7]
 8005258:	4b49      	ldr	r3, [pc, #292]	; (8005380 <pow+0x29c>)
 800525a:	b1a0      	cbz	r0, 8005286 <pow+0x1a2>
 800525c:	2201      	movs	r2, #1
 800525e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005262:	9b02      	ldr	r3, [sp, #8]
 8005264:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005268:	930c      	str	r3, [sp, #48]	; 0x30
 800526a:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800526e:	2f00      	cmp	r7, #0
 8005270:	d0c9      	beq.n	8005206 <pow+0x122>
 8005272:	4652      	mov	r2, sl
 8005274:	465b      	mov	r3, fp
 8005276:	4650      	mov	r0, sl
 8005278:	4659      	mov	r1, fp
 800527a:	f7fb fa4f 	bl	800071c <__aeabi_ddiv>
 800527e:	2f02      	cmp	r7, #2
 8005280:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005284:	e7c7      	b.n	8005216 <pow+0x132>
 8005286:	2203      	movs	r2, #3
 8005288:	900c      	str	r0, [sp, #48]	; 0x30
 800528a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800528e:	4620      	mov	r0, r4
 8005290:	4629      	mov	r1, r5
 8005292:	2200      	movs	r2, #0
 8005294:	4b3d      	ldr	r3, [pc, #244]	; (800538c <pow+0x2a8>)
 8005296:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800529a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800529e:	f7fb f913 	bl	80004c8 <__aeabi_dmul>
 80052a2:	4604      	mov	r4, r0
 80052a4:	460d      	mov	r5, r1
 80052a6:	bb17      	cbnz	r7, 80052ee <pow+0x20a>
 80052a8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80052ac:	4b38      	ldr	r3, [pc, #224]	; (8005390 <pow+0x2ac>)
 80052ae:	4640      	mov	r0, r8
 80052b0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80052b4:	4649      	mov	r1, r9
 80052b6:	4652      	mov	r2, sl
 80052b8:	465b      	mov	r3, fp
 80052ba:	f7fb fb77 	bl	80009ac <__aeabi_dcmplt>
 80052be:	2800      	cmp	r0, #0
 80052c0:	d054      	beq.n	800536c <pow+0x288>
 80052c2:	4620      	mov	r0, r4
 80052c4:	4629      	mov	r1, r5
 80052c6:	f000 fe87 	bl	8005fd8 <rint>
 80052ca:	4622      	mov	r2, r4
 80052cc:	462b      	mov	r3, r5
 80052ce:	f7fb fb63 	bl	8000998 <__aeabi_dcmpeq>
 80052d2:	b920      	cbnz	r0, 80052de <pow+0x1fa>
 80052d4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80052d8:	4b2e      	ldr	r3, [pc, #184]	; (8005394 <pow+0x2b0>)
 80052da:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80052de:	f996 3000 	ldrsb.w	r3, [r6]
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d142      	bne.n	800536c <pow+0x288>
 80052e6:	f7fe ff6d 	bl	80041c4 <__errno>
 80052ea:	2322      	movs	r3, #34	; 0x22
 80052ec:	e797      	b.n	800521e <pow+0x13a>
 80052ee:	2200      	movs	r2, #0
 80052f0:	4b29      	ldr	r3, [pc, #164]	; (8005398 <pow+0x2b4>)
 80052f2:	4640      	mov	r0, r8
 80052f4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80052f8:	4649      	mov	r1, r9
 80052fa:	4652      	mov	r2, sl
 80052fc:	465b      	mov	r3, fp
 80052fe:	f7fb fb55 	bl	80009ac <__aeabi_dcmplt>
 8005302:	2800      	cmp	r0, #0
 8005304:	d0eb      	beq.n	80052de <pow+0x1fa>
 8005306:	4620      	mov	r0, r4
 8005308:	4629      	mov	r1, r5
 800530a:	f000 fe65 	bl	8005fd8 <rint>
 800530e:	4622      	mov	r2, r4
 8005310:	462b      	mov	r3, r5
 8005312:	f7fb fb41 	bl	8000998 <__aeabi_dcmpeq>
 8005316:	2800      	cmp	r0, #0
 8005318:	d1e1      	bne.n	80052de <pow+0x1fa>
 800531a:	2200      	movs	r2, #0
 800531c:	4b1a      	ldr	r3, [pc, #104]	; (8005388 <pow+0x2a4>)
 800531e:	e7dc      	b.n	80052da <pow+0x1f6>
 8005320:	2200      	movs	r2, #0
 8005322:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005326:	2300      	movs	r3, #0
 8005328:	f7fb fb36 	bl	8000998 <__aeabi_dcmpeq>
 800532c:	2800      	cmp	r0, #0
 800532e:	f43f af4b 	beq.w	80051c8 <pow+0xe4>
 8005332:	4640      	mov	r0, r8
 8005334:	4649      	mov	r1, r9
 8005336:	f000 fe41 	bl	8005fbc <finite>
 800533a:	2800      	cmp	r0, #0
 800533c:	f43f af44 	beq.w	80051c8 <pow+0xe4>
 8005340:	4620      	mov	r0, r4
 8005342:	4629      	mov	r1, r5
 8005344:	f000 fe3a 	bl	8005fbc <finite>
 8005348:	2800      	cmp	r0, #0
 800534a:	f43f af3d 	beq.w	80051c8 <pow+0xe4>
 800534e:	2304      	movs	r3, #4
 8005350:	9304      	str	r3, [sp, #16]
 8005352:	4b0b      	ldr	r3, [pc, #44]	; (8005380 <pow+0x29c>)
 8005354:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005358:	9305      	str	r3, [sp, #20]
 800535a:	2300      	movs	r3, #0
 800535c:	2400      	movs	r4, #0
 800535e:	930c      	str	r3, [sp, #48]	; 0x30
 8005360:	2300      	movs	r3, #0
 8005362:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005366:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 800536a:	e7b8      	b.n	80052de <pow+0x1fa>
 800536c:	a804      	add	r0, sp, #16
 800536e:	f000 fe2b 	bl	8005fc8 <matherr>
 8005372:	2800      	cmp	r0, #0
 8005374:	f47f af1e 	bne.w	80051b4 <pow+0xd0>
 8005378:	e7b5      	b.n	80052e6 <pow+0x202>
 800537a:	bf00      	nop
 800537c:	200000ec 	.word	0x200000ec
 8005380:	0800985f 	.word	0x0800985f
 8005384:	3ff00000 	.word	0x3ff00000
 8005388:	fff00000 	.word	0xfff00000
 800538c:	3fe00000 	.word	0x3fe00000
 8005390:	47efffff 	.word	0x47efffff
 8005394:	c7efffff 	.word	0xc7efffff
 8005398:	7ff00000 	.word	0x7ff00000

0800539c <sqrt>:
 800539c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053a0:	b08b      	sub	sp, #44	; 0x2c
 80053a2:	4604      	mov	r4, r0
 80053a4:	460d      	mov	r5, r1
 80053a6:	f000 fd59 	bl	8005e5c <__ieee754_sqrt>
 80053aa:	4b24      	ldr	r3, [pc, #144]	; (800543c <sqrt+0xa0>)
 80053ac:	4680      	mov	r8, r0
 80053ae:	f993 a000 	ldrsb.w	sl, [r3]
 80053b2:	4689      	mov	r9, r1
 80053b4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80053b8:	d02b      	beq.n	8005412 <sqrt+0x76>
 80053ba:	4622      	mov	r2, r4
 80053bc:	462b      	mov	r3, r5
 80053be:	4620      	mov	r0, r4
 80053c0:	4629      	mov	r1, r5
 80053c2:	f7fb fb1b 	bl	80009fc <__aeabi_dcmpun>
 80053c6:	4683      	mov	fp, r0
 80053c8:	bb18      	cbnz	r0, 8005412 <sqrt+0x76>
 80053ca:	2600      	movs	r6, #0
 80053cc:	2700      	movs	r7, #0
 80053ce:	4632      	mov	r2, r6
 80053d0:	463b      	mov	r3, r7
 80053d2:	4620      	mov	r0, r4
 80053d4:	4629      	mov	r1, r5
 80053d6:	f7fb fae9 	bl	80009ac <__aeabi_dcmplt>
 80053da:	b1d0      	cbz	r0, 8005412 <sqrt+0x76>
 80053dc:	2301      	movs	r3, #1
 80053de:	9300      	str	r3, [sp, #0]
 80053e0:	4b17      	ldr	r3, [pc, #92]	; (8005440 <sqrt+0xa4>)
 80053e2:	f8cd b020 	str.w	fp, [sp, #32]
 80053e6:	9301      	str	r3, [sp, #4]
 80053e8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80053ec:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80053f0:	f1ba 0f00 	cmp.w	sl, #0
 80053f4:	d112      	bne.n	800541c <sqrt+0x80>
 80053f6:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80053fa:	4668      	mov	r0, sp
 80053fc:	f000 fde4 	bl	8005fc8 <matherr>
 8005400:	b1b8      	cbz	r0, 8005432 <sqrt+0x96>
 8005402:	9b08      	ldr	r3, [sp, #32]
 8005404:	b11b      	cbz	r3, 800540e <sqrt+0x72>
 8005406:	f7fe fedd 	bl	80041c4 <__errno>
 800540a:	9b08      	ldr	r3, [sp, #32]
 800540c:	6003      	str	r3, [r0, #0]
 800540e:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8005412:	4640      	mov	r0, r8
 8005414:	4649      	mov	r1, r9
 8005416:	b00b      	add	sp, #44	; 0x2c
 8005418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800541c:	4632      	mov	r2, r6
 800541e:	463b      	mov	r3, r7
 8005420:	4630      	mov	r0, r6
 8005422:	4639      	mov	r1, r7
 8005424:	f7fb f97a 	bl	800071c <__aeabi_ddiv>
 8005428:	f1ba 0f02 	cmp.w	sl, #2
 800542c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005430:	d1e3      	bne.n	80053fa <sqrt+0x5e>
 8005432:	f7fe fec7 	bl	80041c4 <__errno>
 8005436:	2321      	movs	r3, #33	; 0x21
 8005438:	6003      	str	r3, [r0, #0]
 800543a:	e7e2      	b.n	8005402 <sqrt+0x66>
 800543c:	200000ec 	.word	0x200000ec
 8005440:	08009863 	.word	0x08009863
 8005444:	00000000 	.word	0x00000000

08005448 <__ieee754_pow>:
 8005448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800544c:	b091      	sub	sp, #68	; 0x44
 800544e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005452:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 8005456:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800545a:	ea55 0302 	orrs.w	r3, r5, r2
 800545e:	4607      	mov	r7, r0
 8005460:	4688      	mov	r8, r1
 8005462:	f000 84b7 	beq.w	8005dd4 <__ieee754_pow+0x98c>
 8005466:	4b80      	ldr	r3, [pc, #512]	; (8005668 <__ieee754_pow+0x220>)
 8005468:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800546c:	429c      	cmp	r4, r3
 800546e:	4689      	mov	r9, r1
 8005470:	4682      	mov	sl, r0
 8005472:	dc09      	bgt.n	8005488 <__ieee754_pow+0x40>
 8005474:	d103      	bne.n	800547e <__ieee754_pow+0x36>
 8005476:	b938      	cbnz	r0, 8005488 <__ieee754_pow+0x40>
 8005478:	42a5      	cmp	r5, r4
 800547a:	dc0d      	bgt.n	8005498 <__ieee754_pow+0x50>
 800547c:	e001      	b.n	8005482 <__ieee754_pow+0x3a>
 800547e:	429d      	cmp	r5, r3
 8005480:	dc02      	bgt.n	8005488 <__ieee754_pow+0x40>
 8005482:	429d      	cmp	r5, r3
 8005484:	d10e      	bne.n	80054a4 <__ieee754_pow+0x5c>
 8005486:	b16a      	cbz	r2, 80054a4 <__ieee754_pow+0x5c>
 8005488:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800548c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005490:	ea54 030a 	orrs.w	r3, r4, sl
 8005494:	f000 849e 	beq.w	8005dd4 <__ieee754_pow+0x98c>
 8005498:	4874      	ldr	r0, [pc, #464]	; (800566c <__ieee754_pow+0x224>)
 800549a:	b011      	add	sp, #68	; 0x44
 800549c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054a0:	f000 bd94 	b.w	8005fcc <nan>
 80054a4:	f1b9 0f00 	cmp.w	r9, #0
 80054a8:	da53      	bge.n	8005552 <__ieee754_pow+0x10a>
 80054aa:	4b71      	ldr	r3, [pc, #452]	; (8005670 <__ieee754_pow+0x228>)
 80054ac:	429d      	cmp	r5, r3
 80054ae:	dc4e      	bgt.n	800554e <__ieee754_pow+0x106>
 80054b0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80054b4:	429d      	cmp	r5, r3
 80054b6:	dd4c      	ble.n	8005552 <__ieee754_pow+0x10a>
 80054b8:	152b      	asrs	r3, r5, #20
 80054ba:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80054be:	2b14      	cmp	r3, #20
 80054c0:	dd28      	ble.n	8005514 <__ieee754_pow+0xcc>
 80054c2:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80054c6:	fa22 f103 	lsr.w	r1, r2, r3
 80054ca:	fa01 f303 	lsl.w	r3, r1, r3
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d13f      	bne.n	8005552 <__ieee754_pow+0x10a>
 80054d2:	f001 0101 	and.w	r1, r1, #1
 80054d6:	f1c1 0302 	rsb	r3, r1, #2
 80054da:	9300      	str	r3, [sp, #0]
 80054dc:	2a00      	cmp	r2, #0
 80054de:	d15c      	bne.n	800559a <__ieee754_pow+0x152>
 80054e0:	4b61      	ldr	r3, [pc, #388]	; (8005668 <__ieee754_pow+0x220>)
 80054e2:	429d      	cmp	r5, r3
 80054e4:	d126      	bne.n	8005534 <__ieee754_pow+0xec>
 80054e6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80054ea:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80054ee:	ea53 030a 	orrs.w	r3, r3, sl
 80054f2:	f000 846f 	beq.w	8005dd4 <__ieee754_pow+0x98c>
 80054f6:	4b5f      	ldr	r3, [pc, #380]	; (8005674 <__ieee754_pow+0x22c>)
 80054f8:	429c      	cmp	r4, r3
 80054fa:	dd2c      	ble.n	8005556 <__ieee754_pow+0x10e>
 80054fc:	2e00      	cmp	r6, #0
 80054fe:	f280 846f 	bge.w	8005de0 <__ieee754_pow+0x998>
 8005502:	f04f 0b00 	mov.w	fp, #0
 8005506:	f04f 0c00 	mov.w	ip, #0
 800550a:	4658      	mov	r0, fp
 800550c:	4661      	mov	r1, ip
 800550e:	b011      	add	sp, #68	; 0x44
 8005510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005514:	2a00      	cmp	r2, #0
 8005516:	d13e      	bne.n	8005596 <__ieee754_pow+0x14e>
 8005518:	f1c3 0314 	rsb	r3, r3, #20
 800551c:	fa45 f103 	asr.w	r1, r5, r3
 8005520:	fa01 f303 	lsl.w	r3, r1, r3
 8005524:	42ab      	cmp	r3, r5
 8005526:	f040 8463 	bne.w	8005df0 <__ieee754_pow+0x9a8>
 800552a:	f001 0101 	and.w	r1, r1, #1
 800552e:	f1c1 0302 	rsb	r3, r1, #2
 8005532:	9300      	str	r3, [sp, #0]
 8005534:	4b50      	ldr	r3, [pc, #320]	; (8005678 <__ieee754_pow+0x230>)
 8005536:	429d      	cmp	r5, r3
 8005538:	d114      	bne.n	8005564 <__ieee754_pow+0x11c>
 800553a:	2e00      	cmp	r6, #0
 800553c:	f280 8454 	bge.w	8005de8 <__ieee754_pow+0x9a0>
 8005540:	463a      	mov	r2, r7
 8005542:	4643      	mov	r3, r8
 8005544:	2000      	movs	r0, #0
 8005546:	494c      	ldr	r1, [pc, #304]	; (8005678 <__ieee754_pow+0x230>)
 8005548:	f7fb f8e8 	bl	800071c <__aeabi_ddiv>
 800554c:	e013      	b.n	8005576 <__ieee754_pow+0x12e>
 800554e:	2302      	movs	r3, #2
 8005550:	e7c3      	b.n	80054da <__ieee754_pow+0x92>
 8005552:	2300      	movs	r3, #0
 8005554:	e7c1      	b.n	80054da <__ieee754_pow+0x92>
 8005556:	2e00      	cmp	r6, #0
 8005558:	dad3      	bge.n	8005502 <__ieee754_pow+0xba>
 800555a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800555e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8005562:	e7d2      	b.n	800550a <__ieee754_pow+0xc2>
 8005564:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8005568:	d108      	bne.n	800557c <__ieee754_pow+0x134>
 800556a:	463a      	mov	r2, r7
 800556c:	4643      	mov	r3, r8
 800556e:	4638      	mov	r0, r7
 8005570:	4641      	mov	r1, r8
 8005572:	f7fa ffa9 	bl	80004c8 <__aeabi_dmul>
 8005576:	4683      	mov	fp, r0
 8005578:	468c      	mov	ip, r1
 800557a:	e7c6      	b.n	800550a <__ieee754_pow+0xc2>
 800557c:	4b3f      	ldr	r3, [pc, #252]	; (800567c <__ieee754_pow+0x234>)
 800557e:	429e      	cmp	r6, r3
 8005580:	d10b      	bne.n	800559a <__ieee754_pow+0x152>
 8005582:	f1b9 0f00 	cmp.w	r9, #0
 8005586:	db08      	blt.n	800559a <__ieee754_pow+0x152>
 8005588:	4638      	mov	r0, r7
 800558a:	4641      	mov	r1, r8
 800558c:	b011      	add	sp, #68	; 0x44
 800558e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005592:	f000 bc63 	b.w	8005e5c <__ieee754_sqrt>
 8005596:	2300      	movs	r3, #0
 8005598:	9300      	str	r3, [sp, #0]
 800559a:	4638      	mov	r0, r7
 800559c:	4641      	mov	r1, r8
 800559e:	f000 fd09 	bl	8005fb4 <fabs>
 80055a2:	4683      	mov	fp, r0
 80055a4:	468c      	mov	ip, r1
 80055a6:	f1ba 0f00 	cmp.w	sl, #0
 80055aa:	d12b      	bne.n	8005604 <__ieee754_pow+0x1bc>
 80055ac:	b124      	cbz	r4, 80055b8 <__ieee754_pow+0x170>
 80055ae:	4b32      	ldr	r3, [pc, #200]	; (8005678 <__ieee754_pow+0x230>)
 80055b0:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d125      	bne.n	8005604 <__ieee754_pow+0x1bc>
 80055b8:	2e00      	cmp	r6, #0
 80055ba:	da07      	bge.n	80055cc <__ieee754_pow+0x184>
 80055bc:	465a      	mov	r2, fp
 80055be:	4663      	mov	r3, ip
 80055c0:	2000      	movs	r0, #0
 80055c2:	492d      	ldr	r1, [pc, #180]	; (8005678 <__ieee754_pow+0x230>)
 80055c4:	f7fb f8aa 	bl	800071c <__aeabi_ddiv>
 80055c8:	4683      	mov	fp, r0
 80055ca:	468c      	mov	ip, r1
 80055cc:	f1b9 0f00 	cmp.w	r9, #0
 80055d0:	da9b      	bge.n	800550a <__ieee754_pow+0xc2>
 80055d2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80055d6:	9b00      	ldr	r3, [sp, #0]
 80055d8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80055dc:	4323      	orrs	r3, r4
 80055de:	d108      	bne.n	80055f2 <__ieee754_pow+0x1aa>
 80055e0:	465a      	mov	r2, fp
 80055e2:	4663      	mov	r3, ip
 80055e4:	4658      	mov	r0, fp
 80055e6:	4661      	mov	r1, ip
 80055e8:	f7fa fdb6 	bl	8000158 <__aeabi_dsub>
 80055ec:	4602      	mov	r2, r0
 80055ee:	460b      	mov	r3, r1
 80055f0:	e7aa      	b.n	8005548 <__ieee754_pow+0x100>
 80055f2:	9b00      	ldr	r3, [sp, #0]
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d188      	bne.n	800550a <__ieee754_pow+0xc2>
 80055f8:	4658      	mov	r0, fp
 80055fa:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 80055fe:	4683      	mov	fp, r0
 8005600:	469c      	mov	ip, r3
 8005602:	e782      	b.n	800550a <__ieee754_pow+0xc2>
 8005604:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8005608:	f109 33ff 	add.w	r3, r9, #4294967295
 800560c:	930d      	str	r3, [sp, #52]	; 0x34
 800560e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005610:	9b00      	ldr	r3, [sp, #0]
 8005612:	4313      	orrs	r3, r2
 8005614:	d104      	bne.n	8005620 <__ieee754_pow+0x1d8>
 8005616:	463a      	mov	r2, r7
 8005618:	4643      	mov	r3, r8
 800561a:	4638      	mov	r0, r7
 800561c:	4641      	mov	r1, r8
 800561e:	e7e3      	b.n	80055e8 <__ieee754_pow+0x1a0>
 8005620:	4b17      	ldr	r3, [pc, #92]	; (8005680 <__ieee754_pow+0x238>)
 8005622:	429d      	cmp	r5, r3
 8005624:	f340 80fe 	ble.w	8005824 <__ieee754_pow+0x3dc>
 8005628:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800562c:	429d      	cmp	r5, r3
 800562e:	dd0b      	ble.n	8005648 <__ieee754_pow+0x200>
 8005630:	4b10      	ldr	r3, [pc, #64]	; (8005674 <__ieee754_pow+0x22c>)
 8005632:	429c      	cmp	r4, r3
 8005634:	dc0e      	bgt.n	8005654 <__ieee754_pow+0x20c>
 8005636:	2e00      	cmp	r6, #0
 8005638:	f6bf af63 	bge.w	8005502 <__ieee754_pow+0xba>
 800563c:	a308      	add	r3, pc, #32	; (adr r3, 8005660 <__ieee754_pow+0x218>)
 800563e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005642:	4610      	mov	r0, r2
 8005644:	4619      	mov	r1, r3
 8005646:	e794      	b.n	8005572 <__ieee754_pow+0x12a>
 8005648:	4b0e      	ldr	r3, [pc, #56]	; (8005684 <__ieee754_pow+0x23c>)
 800564a:	429c      	cmp	r4, r3
 800564c:	ddf3      	ble.n	8005636 <__ieee754_pow+0x1ee>
 800564e:	4b0a      	ldr	r3, [pc, #40]	; (8005678 <__ieee754_pow+0x230>)
 8005650:	429c      	cmp	r4, r3
 8005652:	dd19      	ble.n	8005688 <__ieee754_pow+0x240>
 8005654:	2e00      	cmp	r6, #0
 8005656:	dcf1      	bgt.n	800563c <__ieee754_pow+0x1f4>
 8005658:	e753      	b.n	8005502 <__ieee754_pow+0xba>
 800565a:	bf00      	nop
 800565c:	f3af 8000 	nop.w
 8005660:	8800759c 	.word	0x8800759c
 8005664:	7e37e43c 	.word	0x7e37e43c
 8005668:	7ff00000 	.word	0x7ff00000
 800566c:	08009831 	.word	0x08009831
 8005670:	433fffff 	.word	0x433fffff
 8005674:	3fefffff 	.word	0x3fefffff
 8005678:	3ff00000 	.word	0x3ff00000
 800567c:	3fe00000 	.word	0x3fe00000
 8005680:	41e00000 	.word	0x41e00000
 8005684:	3feffffe 	.word	0x3feffffe
 8005688:	4661      	mov	r1, ip
 800568a:	2200      	movs	r2, #0
 800568c:	4b60      	ldr	r3, [pc, #384]	; (8005810 <__ieee754_pow+0x3c8>)
 800568e:	4658      	mov	r0, fp
 8005690:	f7fa fd62 	bl	8000158 <__aeabi_dsub>
 8005694:	a354      	add	r3, pc, #336	; (adr r3, 80057e8 <__ieee754_pow+0x3a0>)
 8005696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800569a:	4604      	mov	r4, r0
 800569c:	460d      	mov	r5, r1
 800569e:	f7fa ff13 	bl	80004c8 <__aeabi_dmul>
 80056a2:	a353      	add	r3, pc, #332	; (adr r3, 80057f0 <__ieee754_pow+0x3a8>)
 80056a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a8:	4606      	mov	r6, r0
 80056aa:	460f      	mov	r7, r1
 80056ac:	4620      	mov	r0, r4
 80056ae:	4629      	mov	r1, r5
 80056b0:	f7fa ff0a 	bl	80004c8 <__aeabi_dmul>
 80056b4:	2200      	movs	r2, #0
 80056b6:	4682      	mov	sl, r0
 80056b8:	468b      	mov	fp, r1
 80056ba:	4b56      	ldr	r3, [pc, #344]	; (8005814 <__ieee754_pow+0x3cc>)
 80056bc:	4620      	mov	r0, r4
 80056be:	4629      	mov	r1, r5
 80056c0:	f7fa ff02 	bl	80004c8 <__aeabi_dmul>
 80056c4:	4602      	mov	r2, r0
 80056c6:	460b      	mov	r3, r1
 80056c8:	a14b      	add	r1, pc, #300	; (adr r1, 80057f8 <__ieee754_pow+0x3b0>)
 80056ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80056ce:	f7fa fd43 	bl	8000158 <__aeabi_dsub>
 80056d2:	4622      	mov	r2, r4
 80056d4:	462b      	mov	r3, r5
 80056d6:	f7fa fef7 	bl	80004c8 <__aeabi_dmul>
 80056da:	4602      	mov	r2, r0
 80056dc:	460b      	mov	r3, r1
 80056de:	2000      	movs	r0, #0
 80056e0:	494d      	ldr	r1, [pc, #308]	; (8005818 <__ieee754_pow+0x3d0>)
 80056e2:	f7fa fd39 	bl	8000158 <__aeabi_dsub>
 80056e6:	4622      	mov	r2, r4
 80056e8:	462b      	mov	r3, r5
 80056ea:	4680      	mov	r8, r0
 80056ec:	4689      	mov	r9, r1
 80056ee:	4620      	mov	r0, r4
 80056f0:	4629      	mov	r1, r5
 80056f2:	f7fa fee9 	bl	80004c8 <__aeabi_dmul>
 80056f6:	4602      	mov	r2, r0
 80056f8:	460b      	mov	r3, r1
 80056fa:	4640      	mov	r0, r8
 80056fc:	4649      	mov	r1, r9
 80056fe:	f7fa fee3 	bl	80004c8 <__aeabi_dmul>
 8005702:	a33f      	add	r3, pc, #252	; (adr r3, 8005800 <__ieee754_pow+0x3b8>)
 8005704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005708:	f7fa fede 	bl	80004c8 <__aeabi_dmul>
 800570c:	4602      	mov	r2, r0
 800570e:	460b      	mov	r3, r1
 8005710:	4650      	mov	r0, sl
 8005712:	4659      	mov	r1, fp
 8005714:	f7fa fd20 	bl	8000158 <__aeabi_dsub>
 8005718:	4602      	mov	r2, r0
 800571a:	460b      	mov	r3, r1
 800571c:	4604      	mov	r4, r0
 800571e:	460d      	mov	r5, r1
 8005720:	4630      	mov	r0, r6
 8005722:	4639      	mov	r1, r7
 8005724:	f7fa fd1a 	bl	800015c <__adddf3>
 8005728:	2000      	movs	r0, #0
 800572a:	468b      	mov	fp, r1
 800572c:	4682      	mov	sl, r0
 800572e:	4632      	mov	r2, r6
 8005730:	463b      	mov	r3, r7
 8005732:	f7fa fd11 	bl	8000158 <__aeabi_dsub>
 8005736:	4602      	mov	r2, r0
 8005738:	460b      	mov	r3, r1
 800573a:	4620      	mov	r0, r4
 800573c:	4629      	mov	r1, r5
 800573e:	f7fa fd0b 	bl	8000158 <__aeabi_dsub>
 8005742:	9b00      	ldr	r3, [sp, #0]
 8005744:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005746:	3b01      	subs	r3, #1
 8005748:	4313      	orrs	r3, r2
 800574a:	f04f 0300 	mov.w	r3, #0
 800574e:	bf0c      	ite	eq
 8005750:	4c32      	ldreq	r4, [pc, #200]	; (800581c <__ieee754_pow+0x3d4>)
 8005752:	4c2f      	ldrne	r4, [pc, #188]	; (8005810 <__ieee754_pow+0x3c8>)
 8005754:	4606      	mov	r6, r0
 8005756:	e9cd 3400 	strd	r3, r4, [sp]
 800575a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800575e:	2400      	movs	r4, #0
 8005760:	460f      	mov	r7, r1
 8005762:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005766:	4622      	mov	r2, r4
 8005768:	462b      	mov	r3, r5
 800576a:	f7fa fcf5 	bl	8000158 <__aeabi_dsub>
 800576e:	4652      	mov	r2, sl
 8005770:	465b      	mov	r3, fp
 8005772:	f7fa fea9 	bl	80004c8 <__aeabi_dmul>
 8005776:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800577a:	4680      	mov	r8, r0
 800577c:	4689      	mov	r9, r1
 800577e:	4630      	mov	r0, r6
 8005780:	4639      	mov	r1, r7
 8005782:	f7fa fea1 	bl	80004c8 <__aeabi_dmul>
 8005786:	4602      	mov	r2, r0
 8005788:	460b      	mov	r3, r1
 800578a:	4640      	mov	r0, r8
 800578c:	4649      	mov	r1, r9
 800578e:	f7fa fce5 	bl	800015c <__adddf3>
 8005792:	4622      	mov	r2, r4
 8005794:	462b      	mov	r3, r5
 8005796:	4680      	mov	r8, r0
 8005798:	4689      	mov	r9, r1
 800579a:	4650      	mov	r0, sl
 800579c:	4659      	mov	r1, fp
 800579e:	f7fa fe93 	bl	80004c8 <__aeabi_dmul>
 80057a2:	4604      	mov	r4, r0
 80057a4:	460d      	mov	r5, r1
 80057a6:	460b      	mov	r3, r1
 80057a8:	4602      	mov	r2, r0
 80057aa:	4649      	mov	r1, r9
 80057ac:	4640      	mov	r0, r8
 80057ae:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80057b2:	f7fa fcd3 	bl	800015c <__adddf3>
 80057b6:	4b1a      	ldr	r3, [pc, #104]	; (8005820 <__ieee754_pow+0x3d8>)
 80057b8:	4682      	mov	sl, r0
 80057ba:	4299      	cmp	r1, r3
 80057bc:	460f      	mov	r7, r1
 80057be:	460e      	mov	r6, r1
 80057c0:	f340 82e1 	ble.w	8005d86 <__ieee754_pow+0x93e>
 80057c4:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80057c8:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80057cc:	4303      	orrs	r3, r0
 80057ce:	f000 81db 	beq.w	8005b88 <__ieee754_pow+0x740>
 80057d2:	a30d      	add	r3, pc, #52	; (adr r3, 8005808 <__ieee754_pow+0x3c0>)
 80057d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80057dc:	f7fa fe74 	bl	80004c8 <__aeabi_dmul>
 80057e0:	a309      	add	r3, pc, #36	; (adr r3, 8005808 <__ieee754_pow+0x3c0>)
 80057e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e6:	e6c4      	b.n	8005572 <__ieee754_pow+0x12a>
 80057e8:	60000000 	.word	0x60000000
 80057ec:	3ff71547 	.word	0x3ff71547
 80057f0:	f85ddf44 	.word	0xf85ddf44
 80057f4:	3e54ae0b 	.word	0x3e54ae0b
 80057f8:	55555555 	.word	0x55555555
 80057fc:	3fd55555 	.word	0x3fd55555
 8005800:	652b82fe 	.word	0x652b82fe
 8005804:	3ff71547 	.word	0x3ff71547
 8005808:	8800759c 	.word	0x8800759c
 800580c:	7e37e43c 	.word	0x7e37e43c
 8005810:	3ff00000 	.word	0x3ff00000
 8005814:	3fd00000 	.word	0x3fd00000
 8005818:	3fe00000 	.word	0x3fe00000
 800581c:	bff00000 	.word	0xbff00000
 8005820:	408fffff 	.word	0x408fffff
 8005824:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8005828:	f04f 0200 	mov.w	r2, #0
 800582c:	da08      	bge.n	8005840 <__ieee754_pow+0x3f8>
 800582e:	4658      	mov	r0, fp
 8005830:	4bcd      	ldr	r3, [pc, #820]	; (8005b68 <__ieee754_pow+0x720>)
 8005832:	4661      	mov	r1, ip
 8005834:	f7fa fe48 	bl	80004c8 <__aeabi_dmul>
 8005838:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800583c:	4683      	mov	fp, r0
 800583e:	460c      	mov	r4, r1
 8005840:	1523      	asrs	r3, r4, #20
 8005842:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005846:	4413      	add	r3, r2
 8005848:	930c      	str	r3, [sp, #48]	; 0x30
 800584a:	4bc8      	ldr	r3, [pc, #800]	; (8005b6c <__ieee754_pow+0x724>)
 800584c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005850:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005854:	429c      	cmp	r4, r3
 8005856:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800585a:	dd08      	ble.n	800586e <__ieee754_pow+0x426>
 800585c:	4bc4      	ldr	r3, [pc, #784]	; (8005b70 <__ieee754_pow+0x728>)
 800585e:	429c      	cmp	r4, r3
 8005860:	f340 815b 	ble.w	8005b1a <__ieee754_pow+0x6d2>
 8005864:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005866:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800586a:	3301      	adds	r3, #1
 800586c:	930c      	str	r3, [sp, #48]	; 0x30
 800586e:	f04f 0800 	mov.w	r8, #0
 8005872:	4658      	mov	r0, fp
 8005874:	4629      	mov	r1, r5
 8005876:	4bbf      	ldr	r3, [pc, #764]	; (8005b74 <__ieee754_pow+0x72c>)
 8005878:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 800587c:	444b      	add	r3, r9
 800587e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005882:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8005886:	461a      	mov	r2, r3
 8005888:	4623      	mov	r3, r4
 800588a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800588e:	f7fa fc63 	bl	8000158 <__aeabi_dsub>
 8005892:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005896:	4606      	mov	r6, r0
 8005898:	460f      	mov	r7, r1
 800589a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800589e:	f7fa fc5d 	bl	800015c <__adddf3>
 80058a2:	4602      	mov	r2, r0
 80058a4:	460b      	mov	r3, r1
 80058a6:	2000      	movs	r0, #0
 80058a8:	49b3      	ldr	r1, [pc, #716]	; (8005b78 <__ieee754_pow+0x730>)
 80058aa:	f7fa ff37 	bl	800071c <__aeabi_ddiv>
 80058ae:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80058b2:	4602      	mov	r2, r0
 80058b4:	460b      	mov	r3, r1
 80058b6:	4630      	mov	r0, r6
 80058b8:	4639      	mov	r1, r7
 80058ba:	f7fa fe05 	bl	80004c8 <__aeabi_dmul>
 80058be:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80058c2:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80058c6:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80058ca:	2300      	movs	r3, #0
 80058cc:	2200      	movs	r2, #0
 80058ce:	106d      	asrs	r5, r5, #1
 80058d0:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80058d4:	9304      	str	r3, [sp, #16]
 80058d6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80058da:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80058de:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 80058e2:	4650      	mov	r0, sl
 80058e4:	4659      	mov	r1, fp
 80058e6:	4614      	mov	r4, r2
 80058e8:	461d      	mov	r5, r3
 80058ea:	f7fa fded 	bl	80004c8 <__aeabi_dmul>
 80058ee:	4602      	mov	r2, r0
 80058f0:	460b      	mov	r3, r1
 80058f2:	4630      	mov	r0, r6
 80058f4:	4639      	mov	r1, r7
 80058f6:	f7fa fc2f 	bl	8000158 <__aeabi_dsub>
 80058fa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80058fe:	4606      	mov	r6, r0
 8005900:	460f      	mov	r7, r1
 8005902:	4620      	mov	r0, r4
 8005904:	4629      	mov	r1, r5
 8005906:	f7fa fc27 	bl	8000158 <__aeabi_dsub>
 800590a:	4602      	mov	r2, r0
 800590c:	460b      	mov	r3, r1
 800590e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005912:	f7fa fc21 	bl	8000158 <__aeabi_dsub>
 8005916:	4652      	mov	r2, sl
 8005918:	465b      	mov	r3, fp
 800591a:	f7fa fdd5 	bl	80004c8 <__aeabi_dmul>
 800591e:	4602      	mov	r2, r0
 8005920:	460b      	mov	r3, r1
 8005922:	4630      	mov	r0, r6
 8005924:	4639      	mov	r1, r7
 8005926:	f7fa fc17 	bl	8000158 <__aeabi_dsub>
 800592a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800592e:	f7fa fdcb 	bl	80004c8 <__aeabi_dmul>
 8005932:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005936:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800593a:	4610      	mov	r0, r2
 800593c:	4619      	mov	r1, r3
 800593e:	f7fa fdc3 	bl	80004c8 <__aeabi_dmul>
 8005942:	a377      	add	r3, pc, #476	; (adr r3, 8005b20 <__ieee754_pow+0x6d8>)
 8005944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005948:	4604      	mov	r4, r0
 800594a:	460d      	mov	r5, r1
 800594c:	f7fa fdbc 	bl	80004c8 <__aeabi_dmul>
 8005950:	a375      	add	r3, pc, #468	; (adr r3, 8005b28 <__ieee754_pow+0x6e0>)
 8005952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005956:	f7fa fc01 	bl	800015c <__adddf3>
 800595a:	4622      	mov	r2, r4
 800595c:	462b      	mov	r3, r5
 800595e:	f7fa fdb3 	bl	80004c8 <__aeabi_dmul>
 8005962:	a373      	add	r3, pc, #460	; (adr r3, 8005b30 <__ieee754_pow+0x6e8>)
 8005964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005968:	f7fa fbf8 	bl	800015c <__adddf3>
 800596c:	4622      	mov	r2, r4
 800596e:	462b      	mov	r3, r5
 8005970:	f7fa fdaa 	bl	80004c8 <__aeabi_dmul>
 8005974:	a370      	add	r3, pc, #448	; (adr r3, 8005b38 <__ieee754_pow+0x6f0>)
 8005976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800597a:	f7fa fbef 	bl	800015c <__adddf3>
 800597e:	4622      	mov	r2, r4
 8005980:	462b      	mov	r3, r5
 8005982:	f7fa fda1 	bl	80004c8 <__aeabi_dmul>
 8005986:	a36e      	add	r3, pc, #440	; (adr r3, 8005b40 <__ieee754_pow+0x6f8>)
 8005988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800598c:	f7fa fbe6 	bl	800015c <__adddf3>
 8005990:	4622      	mov	r2, r4
 8005992:	462b      	mov	r3, r5
 8005994:	f7fa fd98 	bl	80004c8 <__aeabi_dmul>
 8005998:	a36b      	add	r3, pc, #428	; (adr r3, 8005b48 <__ieee754_pow+0x700>)
 800599a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800599e:	f7fa fbdd 	bl	800015c <__adddf3>
 80059a2:	4622      	mov	r2, r4
 80059a4:	4606      	mov	r6, r0
 80059a6:	460f      	mov	r7, r1
 80059a8:	462b      	mov	r3, r5
 80059aa:	4620      	mov	r0, r4
 80059ac:	4629      	mov	r1, r5
 80059ae:	f7fa fd8b 	bl	80004c8 <__aeabi_dmul>
 80059b2:	4602      	mov	r2, r0
 80059b4:	460b      	mov	r3, r1
 80059b6:	4630      	mov	r0, r6
 80059b8:	4639      	mov	r1, r7
 80059ba:	f7fa fd85 	bl	80004c8 <__aeabi_dmul>
 80059be:	4604      	mov	r4, r0
 80059c0:	460d      	mov	r5, r1
 80059c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059c6:	4652      	mov	r2, sl
 80059c8:	465b      	mov	r3, fp
 80059ca:	f7fa fbc7 	bl	800015c <__adddf3>
 80059ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80059d2:	f7fa fd79 	bl	80004c8 <__aeabi_dmul>
 80059d6:	4622      	mov	r2, r4
 80059d8:	462b      	mov	r3, r5
 80059da:	f7fa fbbf 	bl	800015c <__adddf3>
 80059de:	4652      	mov	r2, sl
 80059e0:	4606      	mov	r6, r0
 80059e2:	460f      	mov	r7, r1
 80059e4:	465b      	mov	r3, fp
 80059e6:	4650      	mov	r0, sl
 80059e8:	4659      	mov	r1, fp
 80059ea:	f7fa fd6d 	bl	80004c8 <__aeabi_dmul>
 80059ee:	2200      	movs	r2, #0
 80059f0:	4b62      	ldr	r3, [pc, #392]	; (8005b7c <__ieee754_pow+0x734>)
 80059f2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80059f6:	f7fa fbb1 	bl	800015c <__adddf3>
 80059fa:	4632      	mov	r2, r6
 80059fc:	463b      	mov	r3, r7
 80059fe:	f7fa fbad 	bl	800015c <__adddf3>
 8005a02:	9804      	ldr	r0, [sp, #16]
 8005a04:	460d      	mov	r5, r1
 8005a06:	4604      	mov	r4, r0
 8005a08:	4602      	mov	r2, r0
 8005a0a:	460b      	mov	r3, r1
 8005a0c:	4650      	mov	r0, sl
 8005a0e:	4659      	mov	r1, fp
 8005a10:	f7fa fd5a 	bl	80004c8 <__aeabi_dmul>
 8005a14:	2200      	movs	r2, #0
 8005a16:	4682      	mov	sl, r0
 8005a18:	468b      	mov	fp, r1
 8005a1a:	4b58      	ldr	r3, [pc, #352]	; (8005b7c <__ieee754_pow+0x734>)
 8005a1c:	4620      	mov	r0, r4
 8005a1e:	4629      	mov	r1, r5
 8005a20:	f7fa fb9a 	bl	8000158 <__aeabi_dsub>
 8005a24:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005a28:	f7fa fb96 	bl	8000158 <__aeabi_dsub>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	460b      	mov	r3, r1
 8005a30:	4630      	mov	r0, r6
 8005a32:	4639      	mov	r1, r7
 8005a34:	f7fa fb90 	bl	8000158 <__aeabi_dsub>
 8005a38:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005a3c:	f7fa fd44 	bl	80004c8 <__aeabi_dmul>
 8005a40:	4622      	mov	r2, r4
 8005a42:	4606      	mov	r6, r0
 8005a44:	460f      	mov	r7, r1
 8005a46:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005a4a:	462b      	mov	r3, r5
 8005a4c:	f7fa fd3c 	bl	80004c8 <__aeabi_dmul>
 8005a50:	4602      	mov	r2, r0
 8005a52:	460b      	mov	r3, r1
 8005a54:	4630      	mov	r0, r6
 8005a56:	4639      	mov	r1, r7
 8005a58:	f7fa fb80 	bl	800015c <__adddf3>
 8005a5c:	4606      	mov	r6, r0
 8005a5e:	460f      	mov	r7, r1
 8005a60:	4602      	mov	r2, r0
 8005a62:	460b      	mov	r3, r1
 8005a64:	4650      	mov	r0, sl
 8005a66:	4659      	mov	r1, fp
 8005a68:	f7fa fb78 	bl	800015c <__adddf3>
 8005a6c:	a338      	add	r3, pc, #224	; (adr r3, 8005b50 <__ieee754_pow+0x708>)
 8005a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a72:	9804      	ldr	r0, [sp, #16]
 8005a74:	460d      	mov	r5, r1
 8005a76:	4604      	mov	r4, r0
 8005a78:	f7fa fd26 	bl	80004c8 <__aeabi_dmul>
 8005a7c:	4652      	mov	r2, sl
 8005a7e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005a82:	465b      	mov	r3, fp
 8005a84:	4620      	mov	r0, r4
 8005a86:	4629      	mov	r1, r5
 8005a88:	f7fa fb66 	bl	8000158 <__aeabi_dsub>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	460b      	mov	r3, r1
 8005a90:	4630      	mov	r0, r6
 8005a92:	4639      	mov	r1, r7
 8005a94:	f7fa fb60 	bl	8000158 <__aeabi_dsub>
 8005a98:	a32f      	add	r3, pc, #188	; (adr r3, 8005b58 <__ieee754_pow+0x710>)
 8005a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a9e:	f7fa fd13 	bl	80004c8 <__aeabi_dmul>
 8005aa2:	a32f      	add	r3, pc, #188	; (adr r3, 8005b60 <__ieee754_pow+0x718>)
 8005aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa8:	4606      	mov	r6, r0
 8005aaa:	460f      	mov	r7, r1
 8005aac:	4620      	mov	r0, r4
 8005aae:	4629      	mov	r1, r5
 8005ab0:	f7fa fd0a 	bl	80004c8 <__aeabi_dmul>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	460b      	mov	r3, r1
 8005ab8:	4630      	mov	r0, r6
 8005aba:	4639      	mov	r1, r7
 8005abc:	f7fa fb4e 	bl	800015c <__adddf3>
 8005ac0:	4b2f      	ldr	r3, [pc, #188]	; (8005b80 <__ieee754_pow+0x738>)
 8005ac2:	444b      	add	r3, r9
 8005ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac8:	f7fa fb48 	bl	800015c <__adddf3>
 8005acc:	4604      	mov	r4, r0
 8005ace:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005ad0:	460d      	mov	r5, r1
 8005ad2:	f7fa fc8f 	bl	80003f4 <__aeabi_i2d>
 8005ad6:	4606      	mov	r6, r0
 8005ad8:	460f      	mov	r7, r1
 8005ada:	4b2a      	ldr	r3, [pc, #168]	; (8005b84 <__ieee754_pow+0x73c>)
 8005adc:	4622      	mov	r2, r4
 8005ade:	444b      	add	r3, r9
 8005ae0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005ae4:	462b      	mov	r3, r5
 8005ae6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005aea:	f7fa fb37 	bl	800015c <__adddf3>
 8005aee:	4642      	mov	r2, r8
 8005af0:	464b      	mov	r3, r9
 8005af2:	f7fa fb33 	bl	800015c <__adddf3>
 8005af6:	4632      	mov	r2, r6
 8005af8:	463b      	mov	r3, r7
 8005afa:	f7fa fb2f 	bl	800015c <__adddf3>
 8005afe:	9804      	ldr	r0, [sp, #16]
 8005b00:	4632      	mov	r2, r6
 8005b02:	463b      	mov	r3, r7
 8005b04:	4682      	mov	sl, r0
 8005b06:	468b      	mov	fp, r1
 8005b08:	f7fa fb26 	bl	8000158 <__aeabi_dsub>
 8005b0c:	4642      	mov	r2, r8
 8005b0e:	464b      	mov	r3, r9
 8005b10:	f7fa fb22 	bl	8000158 <__aeabi_dsub>
 8005b14:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005b18:	e60b      	b.n	8005732 <__ieee754_pow+0x2ea>
 8005b1a:	f04f 0801 	mov.w	r8, #1
 8005b1e:	e6a8      	b.n	8005872 <__ieee754_pow+0x42a>
 8005b20:	4a454eef 	.word	0x4a454eef
 8005b24:	3fca7e28 	.word	0x3fca7e28
 8005b28:	93c9db65 	.word	0x93c9db65
 8005b2c:	3fcd864a 	.word	0x3fcd864a
 8005b30:	a91d4101 	.word	0xa91d4101
 8005b34:	3fd17460 	.word	0x3fd17460
 8005b38:	518f264d 	.word	0x518f264d
 8005b3c:	3fd55555 	.word	0x3fd55555
 8005b40:	db6fabff 	.word	0xdb6fabff
 8005b44:	3fdb6db6 	.word	0x3fdb6db6
 8005b48:	33333303 	.word	0x33333303
 8005b4c:	3fe33333 	.word	0x3fe33333
 8005b50:	e0000000 	.word	0xe0000000
 8005b54:	3feec709 	.word	0x3feec709
 8005b58:	dc3a03fd 	.word	0xdc3a03fd
 8005b5c:	3feec709 	.word	0x3feec709
 8005b60:	145b01f5 	.word	0x145b01f5
 8005b64:	be3e2fe0 	.word	0xbe3e2fe0
 8005b68:	43400000 	.word	0x43400000
 8005b6c:	0003988e 	.word	0x0003988e
 8005b70:	000bb679 	.word	0x000bb679
 8005b74:	08009868 	.word	0x08009868
 8005b78:	3ff00000 	.word	0x3ff00000
 8005b7c:	40080000 	.word	0x40080000
 8005b80:	08009888 	.word	0x08009888
 8005b84:	08009878 	.word	0x08009878
 8005b88:	a39b      	add	r3, pc, #620	; (adr r3, 8005df8 <__ieee754_pow+0x9b0>)
 8005b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b8e:	4640      	mov	r0, r8
 8005b90:	4649      	mov	r1, r9
 8005b92:	f7fa fae3 	bl	800015c <__adddf3>
 8005b96:	4622      	mov	r2, r4
 8005b98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b9c:	462b      	mov	r3, r5
 8005b9e:	4650      	mov	r0, sl
 8005ba0:	4639      	mov	r1, r7
 8005ba2:	f7fa fad9 	bl	8000158 <__aeabi_dsub>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	460b      	mov	r3, r1
 8005baa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005bae:	f7fa ff1b 	bl	80009e8 <__aeabi_dcmpgt>
 8005bb2:	2800      	cmp	r0, #0
 8005bb4:	f47f ae0d 	bne.w	80057d2 <__ieee754_pow+0x38a>
 8005bb8:	4aa3      	ldr	r2, [pc, #652]	; (8005e48 <__ieee754_pow+0xa00>)
 8005bba:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	f340 8103 	ble.w	8005dca <__ieee754_pow+0x982>
 8005bc4:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005bc8:	2000      	movs	r0, #0
 8005bca:	151b      	asrs	r3, r3, #20
 8005bcc:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005bd0:	fa4a f303 	asr.w	r3, sl, r3
 8005bd4:	4433      	add	r3, r6
 8005bd6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8005bda:	4f9c      	ldr	r7, [pc, #624]	; (8005e4c <__ieee754_pow+0xa04>)
 8005bdc:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8005be0:	4117      	asrs	r7, r2
 8005be2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8005be6:	ea23 0107 	bic.w	r1, r3, r7
 8005bea:	f1c2 0214 	rsb	r2, r2, #20
 8005bee:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8005bf2:	fa4a fa02 	asr.w	sl, sl, r2
 8005bf6:	2e00      	cmp	r6, #0
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	460b      	mov	r3, r1
 8005bfc:	4620      	mov	r0, r4
 8005bfe:	4629      	mov	r1, r5
 8005c00:	bfb8      	it	lt
 8005c02:	f1ca 0a00 	rsblt	sl, sl, #0
 8005c06:	f7fa faa7 	bl	8000158 <__aeabi_dsub>
 8005c0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c12:	4642      	mov	r2, r8
 8005c14:	464b      	mov	r3, r9
 8005c16:	f7fa faa1 	bl	800015c <__adddf3>
 8005c1a:	a379      	add	r3, pc, #484	; (adr r3, 8005e00 <__ieee754_pow+0x9b8>)
 8005c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c20:	2000      	movs	r0, #0
 8005c22:	460d      	mov	r5, r1
 8005c24:	4604      	mov	r4, r0
 8005c26:	f7fa fc4f 	bl	80004c8 <__aeabi_dmul>
 8005c2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c2e:	4606      	mov	r6, r0
 8005c30:	460f      	mov	r7, r1
 8005c32:	4620      	mov	r0, r4
 8005c34:	4629      	mov	r1, r5
 8005c36:	f7fa fa8f 	bl	8000158 <__aeabi_dsub>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	4640      	mov	r0, r8
 8005c40:	4649      	mov	r1, r9
 8005c42:	f7fa fa89 	bl	8000158 <__aeabi_dsub>
 8005c46:	a370      	add	r3, pc, #448	; (adr r3, 8005e08 <__ieee754_pow+0x9c0>)
 8005c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c4c:	f7fa fc3c 	bl	80004c8 <__aeabi_dmul>
 8005c50:	a36f      	add	r3, pc, #444	; (adr r3, 8005e10 <__ieee754_pow+0x9c8>)
 8005c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c56:	4680      	mov	r8, r0
 8005c58:	4689      	mov	r9, r1
 8005c5a:	4620      	mov	r0, r4
 8005c5c:	4629      	mov	r1, r5
 8005c5e:	f7fa fc33 	bl	80004c8 <__aeabi_dmul>
 8005c62:	4602      	mov	r2, r0
 8005c64:	460b      	mov	r3, r1
 8005c66:	4640      	mov	r0, r8
 8005c68:	4649      	mov	r1, r9
 8005c6a:	f7fa fa77 	bl	800015c <__adddf3>
 8005c6e:	4604      	mov	r4, r0
 8005c70:	460d      	mov	r5, r1
 8005c72:	4602      	mov	r2, r0
 8005c74:	460b      	mov	r3, r1
 8005c76:	4630      	mov	r0, r6
 8005c78:	4639      	mov	r1, r7
 8005c7a:	f7fa fa6f 	bl	800015c <__adddf3>
 8005c7e:	4632      	mov	r2, r6
 8005c80:	463b      	mov	r3, r7
 8005c82:	4680      	mov	r8, r0
 8005c84:	4689      	mov	r9, r1
 8005c86:	f7fa fa67 	bl	8000158 <__aeabi_dsub>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	460b      	mov	r3, r1
 8005c8e:	4620      	mov	r0, r4
 8005c90:	4629      	mov	r1, r5
 8005c92:	f7fa fa61 	bl	8000158 <__aeabi_dsub>
 8005c96:	4642      	mov	r2, r8
 8005c98:	4606      	mov	r6, r0
 8005c9a:	460f      	mov	r7, r1
 8005c9c:	464b      	mov	r3, r9
 8005c9e:	4640      	mov	r0, r8
 8005ca0:	4649      	mov	r1, r9
 8005ca2:	f7fa fc11 	bl	80004c8 <__aeabi_dmul>
 8005ca6:	a35c      	add	r3, pc, #368	; (adr r3, 8005e18 <__ieee754_pow+0x9d0>)
 8005ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cac:	4604      	mov	r4, r0
 8005cae:	460d      	mov	r5, r1
 8005cb0:	f7fa fc0a 	bl	80004c8 <__aeabi_dmul>
 8005cb4:	a35a      	add	r3, pc, #360	; (adr r3, 8005e20 <__ieee754_pow+0x9d8>)
 8005cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cba:	f7fa fa4d 	bl	8000158 <__aeabi_dsub>
 8005cbe:	4622      	mov	r2, r4
 8005cc0:	462b      	mov	r3, r5
 8005cc2:	f7fa fc01 	bl	80004c8 <__aeabi_dmul>
 8005cc6:	a358      	add	r3, pc, #352	; (adr r3, 8005e28 <__ieee754_pow+0x9e0>)
 8005cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ccc:	f7fa fa46 	bl	800015c <__adddf3>
 8005cd0:	4622      	mov	r2, r4
 8005cd2:	462b      	mov	r3, r5
 8005cd4:	f7fa fbf8 	bl	80004c8 <__aeabi_dmul>
 8005cd8:	a355      	add	r3, pc, #340	; (adr r3, 8005e30 <__ieee754_pow+0x9e8>)
 8005cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cde:	f7fa fa3b 	bl	8000158 <__aeabi_dsub>
 8005ce2:	4622      	mov	r2, r4
 8005ce4:	462b      	mov	r3, r5
 8005ce6:	f7fa fbef 	bl	80004c8 <__aeabi_dmul>
 8005cea:	a353      	add	r3, pc, #332	; (adr r3, 8005e38 <__ieee754_pow+0x9f0>)
 8005cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf0:	f7fa fa34 	bl	800015c <__adddf3>
 8005cf4:	4622      	mov	r2, r4
 8005cf6:	462b      	mov	r3, r5
 8005cf8:	f7fa fbe6 	bl	80004c8 <__aeabi_dmul>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	460b      	mov	r3, r1
 8005d00:	4640      	mov	r0, r8
 8005d02:	4649      	mov	r1, r9
 8005d04:	f7fa fa28 	bl	8000158 <__aeabi_dsub>
 8005d08:	4604      	mov	r4, r0
 8005d0a:	460d      	mov	r5, r1
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	460b      	mov	r3, r1
 8005d10:	4640      	mov	r0, r8
 8005d12:	4649      	mov	r1, r9
 8005d14:	f7fa fbd8 	bl	80004c8 <__aeabi_dmul>
 8005d18:	2200      	movs	r2, #0
 8005d1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005d22:	4620      	mov	r0, r4
 8005d24:	4629      	mov	r1, r5
 8005d26:	f7fa fa17 	bl	8000158 <__aeabi_dsub>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d32:	f7fa fcf3 	bl	800071c <__aeabi_ddiv>
 8005d36:	4632      	mov	r2, r6
 8005d38:	4604      	mov	r4, r0
 8005d3a:	460d      	mov	r5, r1
 8005d3c:	463b      	mov	r3, r7
 8005d3e:	4640      	mov	r0, r8
 8005d40:	4649      	mov	r1, r9
 8005d42:	f7fa fbc1 	bl	80004c8 <__aeabi_dmul>
 8005d46:	4632      	mov	r2, r6
 8005d48:	463b      	mov	r3, r7
 8005d4a:	f7fa fa07 	bl	800015c <__adddf3>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	460b      	mov	r3, r1
 8005d52:	4620      	mov	r0, r4
 8005d54:	4629      	mov	r1, r5
 8005d56:	f7fa f9ff 	bl	8000158 <__aeabi_dsub>
 8005d5a:	4642      	mov	r2, r8
 8005d5c:	464b      	mov	r3, r9
 8005d5e:	f7fa f9fb 	bl	8000158 <__aeabi_dsub>
 8005d62:	4602      	mov	r2, r0
 8005d64:	460b      	mov	r3, r1
 8005d66:	2000      	movs	r0, #0
 8005d68:	4939      	ldr	r1, [pc, #228]	; (8005e50 <__ieee754_pow+0xa08>)
 8005d6a:	f7fa f9f5 	bl	8000158 <__aeabi_dsub>
 8005d6e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8005d72:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8005d76:	da2b      	bge.n	8005dd0 <__ieee754_pow+0x988>
 8005d78:	4652      	mov	r2, sl
 8005d7a:	f000 f9b9 	bl	80060f0 <scalbn>
 8005d7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d82:	f7ff bbf6 	b.w	8005572 <__ieee754_pow+0x12a>
 8005d86:	4b33      	ldr	r3, [pc, #204]	; (8005e54 <__ieee754_pow+0xa0c>)
 8005d88:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8005d8c:	429f      	cmp	r7, r3
 8005d8e:	f77f af13 	ble.w	8005bb8 <__ieee754_pow+0x770>
 8005d92:	4b31      	ldr	r3, [pc, #196]	; (8005e58 <__ieee754_pow+0xa10>)
 8005d94:	440b      	add	r3, r1
 8005d96:	4303      	orrs	r3, r0
 8005d98:	d00b      	beq.n	8005db2 <__ieee754_pow+0x96a>
 8005d9a:	a329      	add	r3, pc, #164	; (adr r3, 8005e40 <__ieee754_pow+0x9f8>)
 8005d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005da4:	f7fa fb90 	bl	80004c8 <__aeabi_dmul>
 8005da8:	a325      	add	r3, pc, #148	; (adr r3, 8005e40 <__ieee754_pow+0x9f8>)
 8005daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dae:	f7ff bbe0 	b.w	8005572 <__ieee754_pow+0x12a>
 8005db2:	4622      	mov	r2, r4
 8005db4:	462b      	mov	r3, r5
 8005db6:	f7fa f9cf 	bl	8000158 <__aeabi_dsub>
 8005dba:	4642      	mov	r2, r8
 8005dbc:	464b      	mov	r3, r9
 8005dbe:	f7fa fe09 	bl	80009d4 <__aeabi_dcmpge>
 8005dc2:	2800      	cmp	r0, #0
 8005dc4:	f43f aef8 	beq.w	8005bb8 <__ieee754_pow+0x770>
 8005dc8:	e7e7      	b.n	8005d9a <__ieee754_pow+0x952>
 8005dca:	f04f 0a00 	mov.w	sl, #0
 8005dce:	e71e      	b.n	8005c0e <__ieee754_pow+0x7c6>
 8005dd0:	4621      	mov	r1, r4
 8005dd2:	e7d4      	b.n	8005d7e <__ieee754_pow+0x936>
 8005dd4:	f04f 0b00 	mov.w	fp, #0
 8005dd8:	f8df c074 	ldr.w	ip, [pc, #116]	; 8005e50 <__ieee754_pow+0xa08>
 8005ddc:	f7ff bb95 	b.w	800550a <__ieee754_pow+0xc2>
 8005de0:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8005de4:	f7ff bb91 	b.w	800550a <__ieee754_pow+0xc2>
 8005de8:	4638      	mov	r0, r7
 8005dea:	4641      	mov	r1, r8
 8005dec:	f7ff bbc3 	b.w	8005576 <__ieee754_pow+0x12e>
 8005df0:	9200      	str	r2, [sp, #0]
 8005df2:	f7ff bb9f 	b.w	8005534 <__ieee754_pow+0xec>
 8005df6:	bf00      	nop
 8005df8:	652b82fe 	.word	0x652b82fe
 8005dfc:	3c971547 	.word	0x3c971547
 8005e00:	00000000 	.word	0x00000000
 8005e04:	3fe62e43 	.word	0x3fe62e43
 8005e08:	fefa39ef 	.word	0xfefa39ef
 8005e0c:	3fe62e42 	.word	0x3fe62e42
 8005e10:	0ca86c39 	.word	0x0ca86c39
 8005e14:	be205c61 	.word	0xbe205c61
 8005e18:	72bea4d0 	.word	0x72bea4d0
 8005e1c:	3e663769 	.word	0x3e663769
 8005e20:	c5d26bf1 	.word	0xc5d26bf1
 8005e24:	3ebbbd41 	.word	0x3ebbbd41
 8005e28:	af25de2c 	.word	0xaf25de2c
 8005e2c:	3f11566a 	.word	0x3f11566a
 8005e30:	16bebd93 	.word	0x16bebd93
 8005e34:	3f66c16c 	.word	0x3f66c16c
 8005e38:	5555553e 	.word	0x5555553e
 8005e3c:	3fc55555 	.word	0x3fc55555
 8005e40:	c2f8f359 	.word	0xc2f8f359
 8005e44:	01a56e1f 	.word	0x01a56e1f
 8005e48:	3fe00000 	.word	0x3fe00000
 8005e4c:	000fffff 	.word	0x000fffff
 8005e50:	3ff00000 	.word	0x3ff00000
 8005e54:	4090cbff 	.word	0x4090cbff
 8005e58:	3f6f3400 	.word	0x3f6f3400

08005e5c <__ieee754_sqrt>:
 8005e5c:	4b54      	ldr	r3, [pc, #336]	; (8005fb0 <__ieee754_sqrt+0x154>)
 8005e5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e62:	438b      	bics	r3, r1
 8005e64:	4606      	mov	r6, r0
 8005e66:	460d      	mov	r5, r1
 8005e68:	460a      	mov	r2, r1
 8005e6a:	460c      	mov	r4, r1
 8005e6c:	d10f      	bne.n	8005e8e <__ieee754_sqrt+0x32>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	460b      	mov	r3, r1
 8005e72:	f7fa fb29 	bl	80004c8 <__aeabi_dmul>
 8005e76:	4602      	mov	r2, r0
 8005e78:	460b      	mov	r3, r1
 8005e7a:	4630      	mov	r0, r6
 8005e7c:	4629      	mov	r1, r5
 8005e7e:	f7fa f96d 	bl	800015c <__adddf3>
 8005e82:	4606      	mov	r6, r0
 8005e84:	460d      	mov	r5, r1
 8005e86:	4630      	mov	r0, r6
 8005e88:	4629      	mov	r1, r5
 8005e8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e8e:	2900      	cmp	r1, #0
 8005e90:	4607      	mov	r7, r0
 8005e92:	4603      	mov	r3, r0
 8005e94:	dc0e      	bgt.n	8005eb4 <__ieee754_sqrt+0x58>
 8005e96:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8005e9a:	ea5c 0707 	orrs.w	r7, ip, r7
 8005e9e:	d0f2      	beq.n	8005e86 <__ieee754_sqrt+0x2a>
 8005ea0:	b141      	cbz	r1, 8005eb4 <__ieee754_sqrt+0x58>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	f7fa f957 	bl	8000158 <__aeabi_dsub>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	460b      	mov	r3, r1
 8005eae:	f7fa fc35 	bl	800071c <__aeabi_ddiv>
 8005eb2:	e7e6      	b.n	8005e82 <__ieee754_sqrt+0x26>
 8005eb4:	1512      	asrs	r2, r2, #20
 8005eb6:	d074      	beq.n	8005fa2 <__ieee754_sqrt+0x146>
 8005eb8:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8005ebc:	07d5      	lsls	r5, r2, #31
 8005ebe:	f04f 0500 	mov.w	r5, #0
 8005ec2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005ec6:	bf48      	it	mi
 8005ec8:	0fd9      	lsrmi	r1, r3, #31
 8005eca:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8005ece:	bf44      	itt	mi
 8005ed0:	005b      	lslmi	r3, r3, #1
 8005ed2:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 8005ed6:	1051      	asrs	r1, r2, #1
 8005ed8:	0fda      	lsrs	r2, r3, #31
 8005eda:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8005ede:	4628      	mov	r0, r5
 8005ee0:	2216      	movs	r2, #22
 8005ee2:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8005ee6:	005b      	lsls	r3, r3, #1
 8005ee8:	1987      	adds	r7, r0, r6
 8005eea:	42a7      	cmp	r7, r4
 8005eec:	bfde      	ittt	le
 8005eee:	19b8      	addle	r0, r7, r6
 8005ef0:	1be4      	suble	r4, r4, r7
 8005ef2:	19ad      	addle	r5, r5, r6
 8005ef4:	0fdf      	lsrs	r7, r3, #31
 8005ef6:	3a01      	subs	r2, #1
 8005ef8:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8005efc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005f00:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005f04:	d1f0      	bne.n	8005ee8 <__ieee754_sqrt+0x8c>
 8005f06:	f04f 0c20 	mov.w	ip, #32
 8005f0a:	4696      	mov	lr, r2
 8005f0c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005f10:	4284      	cmp	r4, r0
 8005f12:	eb06 070e 	add.w	r7, r6, lr
 8005f16:	dc02      	bgt.n	8005f1e <__ieee754_sqrt+0xc2>
 8005f18:	d112      	bne.n	8005f40 <__ieee754_sqrt+0xe4>
 8005f1a:	429f      	cmp	r7, r3
 8005f1c:	d810      	bhi.n	8005f40 <__ieee754_sqrt+0xe4>
 8005f1e:	2f00      	cmp	r7, #0
 8005f20:	eb07 0e06 	add.w	lr, r7, r6
 8005f24:	da42      	bge.n	8005fac <__ieee754_sqrt+0x150>
 8005f26:	f1be 0f00 	cmp.w	lr, #0
 8005f2a:	db3f      	blt.n	8005fac <__ieee754_sqrt+0x150>
 8005f2c:	f100 0801 	add.w	r8, r0, #1
 8005f30:	1a24      	subs	r4, r4, r0
 8005f32:	4640      	mov	r0, r8
 8005f34:	429f      	cmp	r7, r3
 8005f36:	bf88      	it	hi
 8005f38:	f104 34ff 	addhi.w	r4, r4, #4294967295
 8005f3c:	1bdb      	subs	r3, r3, r7
 8005f3e:	4432      	add	r2, r6
 8005f40:	0064      	lsls	r4, r4, #1
 8005f42:	f1bc 0c01 	subs.w	ip, ip, #1
 8005f46:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 8005f4a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005f4e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005f52:	d1dd      	bne.n	8005f10 <__ieee754_sqrt+0xb4>
 8005f54:	4323      	orrs	r3, r4
 8005f56:	d006      	beq.n	8005f66 <__ieee754_sqrt+0x10a>
 8005f58:	1c54      	adds	r4, r2, #1
 8005f5a:	bf0b      	itete	eq
 8005f5c:	4662      	moveq	r2, ip
 8005f5e:	3201      	addne	r2, #1
 8005f60:	3501      	addeq	r5, #1
 8005f62:	f022 0201 	bicne.w	r2, r2, #1
 8005f66:	106b      	asrs	r3, r5, #1
 8005f68:	0852      	lsrs	r2, r2, #1
 8005f6a:	07e8      	lsls	r0, r5, #31
 8005f6c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005f70:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005f74:	bf48      	it	mi
 8005f76:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8005f7a:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 8005f7e:	4616      	mov	r6, r2
 8005f80:	e781      	b.n	8005e86 <__ieee754_sqrt+0x2a>
 8005f82:	0adc      	lsrs	r4, r3, #11
 8005f84:	3915      	subs	r1, #21
 8005f86:	055b      	lsls	r3, r3, #21
 8005f88:	2c00      	cmp	r4, #0
 8005f8a:	d0fa      	beq.n	8005f82 <__ieee754_sqrt+0x126>
 8005f8c:	02e6      	lsls	r6, r4, #11
 8005f8e:	d50a      	bpl.n	8005fa6 <__ieee754_sqrt+0x14a>
 8005f90:	f1c2 0020 	rsb	r0, r2, #32
 8005f94:	fa23 f000 	lsr.w	r0, r3, r0
 8005f98:	1e55      	subs	r5, r2, #1
 8005f9a:	4093      	lsls	r3, r2
 8005f9c:	4304      	orrs	r4, r0
 8005f9e:	1b4a      	subs	r2, r1, r5
 8005fa0:	e78a      	b.n	8005eb8 <__ieee754_sqrt+0x5c>
 8005fa2:	4611      	mov	r1, r2
 8005fa4:	e7f0      	b.n	8005f88 <__ieee754_sqrt+0x12c>
 8005fa6:	0064      	lsls	r4, r4, #1
 8005fa8:	3201      	adds	r2, #1
 8005faa:	e7ef      	b.n	8005f8c <__ieee754_sqrt+0x130>
 8005fac:	4680      	mov	r8, r0
 8005fae:	e7bf      	b.n	8005f30 <__ieee754_sqrt+0xd4>
 8005fb0:	7ff00000 	.word	0x7ff00000

08005fb4 <fabs>:
 8005fb4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005fb8:	4619      	mov	r1, r3
 8005fba:	4770      	bx	lr

08005fbc <finite>:
 8005fbc:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8005fc0:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 8005fc4:	0fc0      	lsrs	r0, r0, #31
 8005fc6:	4770      	bx	lr

08005fc8 <matherr>:
 8005fc8:	2000      	movs	r0, #0
 8005fca:	4770      	bx	lr

08005fcc <nan>:
 8005fcc:	2000      	movs	r0, #0
 8005fce:	4901      	ldr	r1, [pc, #4]	; (8005fd4 <nan+0x8>)
 8005fd0:	4770      	bx	lr
 8005fd2:	bf00      	nop
 8005fd4:	7ff80000 	.word	0x7ff80000

08005fd8 <rint>:
 8005fd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005fda:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005fde:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 8005fe2:	f1bc 0f13 	cmp.w	ip, #19
 8005fe6:	4604      	mov	r4, r0
 8005fe8:	460d      	mov	r5, r1
 8005fea:	460b      	mov	r3, r1
 8005fec:	4606      	mov	r6, r0
 8005fee:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 8005ff2:	dc5a      	bgt.n	80060aa <rint+0xd2>
 8005ff4:	f1bc 0f00 	cmp.w	ip, #0
 8005ff8:	da2b      	bge.n	8006052 <rint+0x7a>
 8005ffa:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8005ffe:	4302      	orrs	r2, r0
 8006000:	d023      	beq.n	800604a <rint+0x72>
 8006002:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8006006:	4302      	orrs	r2, r0
 8006008:	4256      	negs	r6, r2
 800600a:	4316      	orrs	r6, r2
 800600c:	0c4b      	lsrs	r3, r1, #17
 800600e:	0b36      	lsrs	r6, r6, #12
 8006010:	4934      	ldr	r1, [pc, #208]	; (80060e4 <rint+0x10c>)
 8006012:	045b      	lsls	r3, r3, #17
 8006014:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 8006018:	ea46 0503 	orr.w	r5, r6, r3
 800601c:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8006020:	4602      	mov	r2, r0
 8006022:	462b      	mov	r3, r5
 8006024:	e9d1 4500 	ldrd	r4, r5, [r1]
 8006028:	4620      	mov	r0, r4
 800602a:	4629      	mov	r1, r5
 800602c:	f7fa f896 	bl	800015c <__adddf3>
 8006030:	e9cd 0100 	strd	r0, r1, [sp]
 8006034:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006038:	462b      	mov	r3, r5
 800603a:	4622      	mov	r2, r4
 800603c:	f7fa f88c 	bl	8000158 <__aeabi_dsub>
 8006040:	4604      	mov	r4, r0
 8006042:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006046:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 800604a:	4620      	mov	r0, r4
 800604c:	4629      	mov	r1, r5
 800604e:	b003      	add	sp, #12
 8006050:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006052:	4a25      	ldr	r2, [pc, #148]	; (80060e8 <rint+0x110>)
 8006054:	fa42 f20c 	asr.w	r2, r2, ip
 8006058:	4011      	ands	r1, r2
 800605a:	4301      	orrs	r1, r0
 800605c:	d0f5      	beq.n	800604a <rint+0x72>
 800605e:	0852      	lsrs	r2, r2, #1
 8006060:	ea05 0102 	and.w	r1, r5, r2
 8006064:	ea50 0601 	orrs.w	r6, r0, r1
 8006068:	d00c      	beq.n	8006084 <rint+0xac>
 800606a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800606e:	f1bc 0f13 	cmp.w	ip, #19
 8006072:	bf0c      	ite	eq
 8006074:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 8006078:	2600      	movne	r6, #0
 800607a:	ea25 0202 	bic.w	r2, r5, r2
 800607e:	fa43 f30c 	asr.w	r3, r3, ip
 8006082:	4313      	orrs	r3, r2
 8006084:	4917      	ldr	r1, [pc, #92]	; (80060e4 <rint+0x10c>)
 8006086:	4632      	mov	r2, r6
 8006088:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 800608c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006090:	4620      	mov	r0, r4
 8006092:	4629      	mov	r1, r5
 8006094:	f7fa f862 	bl	800015c <__adddf3>
 8006098:	e9cd 0100 	strd	r0, r1, [sp]
 800609c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80060a0:	4622      	mov	r2, r4
 80060a2:	462b      	mov	r3, r5
 80060a4:	f7fa f858 	bl	8000158 <__aeabi_dsub>
 80060a8:	e008      	b.n	80060bc <rint+0xe4>
 80060aa:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 80060ae:	dd08      	ble.n	80060c2 <rint+0xea>
 80060b0:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 80060b4:	d1c9      	bne.n	800604a <rint+0x72>
 80060b6:	4602      	mov	r2, r0
 80060b8:	f7fa f850 	bl	800015c <__adddf3>
 80060bc:	4604      	mov	r4, r0
 80060be:	460d      	mov	r5, r1
 80060c0:	e7c3      	b.n	800604a <rint+0x72>
 80060c2:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 80060c6:	f04f 32ff 	mov.w	r2, #4294967295
 80060ca:	40ca      	lsrs	r2, r1
 80060cc:	4210      	tst	r0, r2
 80060ce:	d0bc      	beq.n	800604a <rint+0x72>
 80060d0:	0852      	lsrs	r2, r2, #1
 80060d2:	4210      	tst	r0, r2
 80060d4:	bf1f      	itttt	ne
 80060d6:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 80060da:	ea20 0202 	bicne.w	r2, r0, r2
 80060de:	410e      	asrne	r6, r1
 80060e0:	4316      	orrne	r6, r2
 80060e2:	e7cf      	b.n	8006084 <rint+0xac>
 80060e4:	08009898 	.word	0x08009898
 80060e8:	000fffff 	.word	0x000fffff
 80060ec:	00000000 	.word	0x00000000

080060f0 <scalbn>:
 80060f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060f2:	4616      	mov	r6, r2
 80060f4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80060f8:	4604      	mov	r4, r0
 80060fa:	460d      	mov	r5, r1
 80060fc:	460b      	mov	r3, r1
 80060fe:	b982      	cbnz	r2, 8006122 <scalbn+0x32>
 8006100:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006104:	4303      	orrs	r3, r0
 8006106:	d034      	beq.n	8006172 <scalbn+0x82>
 8006108:	4b2d      	ldr	r3, [pc, #180]	; (80061c0 <scalbn+0xd0>)
 800610a:	2200      	movs	r2, #0
 800610c:	f7fa f9dc 	bl	80004c8 <__aeabi_dmul>
 8006110:	4b2c      	ldr	r3, [pc, #176]	; (80061c4 <scalbn+0xd4>)
 8006112:	4604      	mov	r4, r0
 8006114:	429e      	cmp	r6, r3
 8006116:	460d      	mov	r5, r1
 8006118:	da0d      	bge.n	8006136 <scalbn+0x46>
 800611a:	a325      	add	r3, pc, #148	; (adr r3, 80061b0 <scalbn+0xc0>)
 800611c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006120:	e01c      	b.n	800615c <scalbn+0x6c>
 8006122:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8006126:	42ba      	cmp	r2, r7
 8006128:	d109      	bne.n	800613e <scalbn+0x4e>
 800612a:	4602      	mov	r2, r0
 800612c:	f7fa f816 	bl	800015c <__adddf3>
 8006130:	4604      	mov	r4, r0
 8006132:	460d      	mov	r5, r1
 8006134:	e01d      	b.n	8006172 <scalbn+0x82>
 8006136:	460b      	mov	r3, r1
 8006138:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800613c:	3a36      	subs	r2, #54	; 0x36
 800613e:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006142:	4432      	add	r2, r6
 8006144:	428a      	cmp	r2, r1
 8006146:	dd0c      	ble.n	8006162 <scalbn+0x72>
 8006148:	4622      	mov	r2, r4
 800614a:	462b      	mov	r3, r5
 800614c:	a11a      	add	r1, pc, #104	; (adr r1, 80061b8 <scalbn+0xc8>)
 800614e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006152:	f000 f83b 	bl	80061cc <copysign>
 8006156:	a318      	add	r3, pc, #96	; (adr r3, 80061b8 <scalbn+0xc8>)
 8006158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800615c:	f7fa f9b4 	bl	80004c8 <__aeabi_dmul>
 8006160:	e7e6      	b.n	8006130 <scalbn+0x40>
 8006162:	2a00      	cmp	r2, #0
 8006164:	dd08      	ble.n	8006178 <scalbn+0x88>
 8006166:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800616a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800616e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006172:	4620      	mov	r0, r4
 8006174:	4629      	mov	r1, r5
 8006176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006178:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800617c:	da0b      	bge.n	8006196 <scalbn+0xa6>
 800617e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006182:	429e      	cmp	r6, r3
 8006184:	4622      	mov	r2, r4
 8006186:	462b      	mov	r3, r5
 8006188:	dce0      	bgt.n	800614c <scalbn+0x5c>
 800618a:	a109      	add	r1, pc, #36	; (adr r1, 80061b0 <scalbn+0xc0>)
 800618c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006190:	f000 f81c 	bl	80061cc <copysign>
 8006194:	e7c1      	b.n	800611a <scalbn+0x2a>
 8006196:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800619a:	3236      	adds	r2, #54	; 0x36
 800619c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80061a0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80061a4:	4620      	mov	r0, r4
 80061a6:	4629      	mov	r1, r5
 80061a8:	2200      	movs	r2, #0
 80061aa:	4b07      	ldr	r3, [pc, #28]	; (80061c8 <scalbn+0xd8>)
 80061ac:	e7d6      	b.n	800615c <scalbn+0x6c>
 80061ae:	bf00      	nop
 80061b0:	c2f8f359 	.word	0xc2f8f359
 80061b4:	01a56e1f 	.word	0x01a56e1f
 80061b8:	8800759c 	.word	0x8800759c
 80061bc:	7e37e43c 	.word	0x7e37e43c
 80061c0:	43500000 	.word	0x43500000
 80061c4:	ffff3cb0 	.word	0xffff3cb0
 80061c8:	3c900000 	.word	0x3c900000

080061cc <copysign>:
 80061cc:	b530      	push	{r4, r5, lr}
 80061ce:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80061d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061d6:	ea42 0503 	orr.w	r5, r2, r3
 80061da:	4629      	mov	r1, r5
 80061dc:	bd30      	pop	{r4, r5, pc}
	...

080061e0 <_init>:
 80061e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061e2:	bf00      	nop
 80061e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061e6:	bc08      	pop	{r3}
 80061e8:	469e      	mov	lr, r3
 80061ea:	4770      	bx	lr

080061ec <_fini>:
 80061ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ee:	bf00      	nop
 80061f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061f2:	bc08      	pop	{r3}
 80061f4:	469e      	mov	lr, r3
 80061f6:	4770      	bx	lr
