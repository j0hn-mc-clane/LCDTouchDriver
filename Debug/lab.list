
lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002eb8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002fc4  08002fc4  00012fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003004  08003004  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  08003004  08003004  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003004  08003004  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003004  08003004  00013004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003008  08003008  00013008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  0800300c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  20000028  08003034  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  08003034  00020170  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000986a  00000000  00000000  00020051  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000019a4  00000000  00000000  000298bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000810  00000000  00000000  0002b260  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000738  00000000  00000000  0002ba70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00004916  00000000  00000000  0002c1a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000028d0  00000000  00000000  00030abe  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  0003338e  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001f78  00000000  00000000  0003340c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000028 	.word	0x20000028
 8000128:	00000000 	.word	0x00000000
 800012c:	08002fac 	.word	0x08002fac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000002c 	.word	0x2000002c
 8000148:	08002fac 	.word	0x08002fac

0800014c <LCD_SendCommand>:


//***** Functions prototypes *****//

//1. Write Command to LCD
void LCD_SendCommand(uint8_t com) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60000000) = com;
	uint8_t tmpCmd = com;
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	73fb      	strb	r3, [r7, #15]
	//Set DC HIGH for COMMAND mode
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_RESET);
 800015a:	4b11      	ldr	r3, [pc, #68]	; (80001a0 <LCD_SendCommand+0x54>)
 800015c:	6818      	ldr	r0, [r3, #0]
 800015e:	4b11      	ldr	r3, [pc, #68]	; (80001a4 <LCD_SendCommand+0x58>)
 8000160:	881b      	ldrh	r3, [r3, #0]
 8000162:	2200      	movs	r2, #0
 8000164:	4619      	mov	r1, r3
 8000166:	f001 ff39 	bl	8001fdc <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 800016a:	4b0f      	ldr	r3, [pc, #60]	; (80001a8 <LCD_SendCommand+0x5c>)
 800016c:	6818      	ldr	r0, [r3, #0]
 800016e:	4b0f      	ldr	r3, [pc, #60]	; (80001ac <LCD_SendCommand+0x60>)
 8000170:	881b      	ldrh	r3, [r3, #0]
 8000172:	2200      	movs	r2, #0
 8000174:	4619      	mov	r1, r3
 8000176:	f001 ff31 	bl	8001fdc <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpCmd, 1, 5);
 800017a:	f107 010f 	add.w	r1, r7, #15
 800017e:	2305      	movs	r3, #5
 8000180:	2201      	movs	r2, #1
 8000182:	480b      	ldr	r0, [pc, #44]	; (80001b0 <LCD_SendCommand+0x64>)
 8000184:	f002 fd1d 	bl	8002bc2 <HAL_SPI_Transmit>
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 8000188:	4b07      	ldr	r3, [pc, #28]	; (80001a8 <LCD_SendCommand+0x5c>)
 800018a:	6818      	ldr	r0, [r3, #0]
 800018c:	4b07      	ldr	r3, [pc, #28]	; (80001ac <LCD_SendCommand+0x60>)
 800018e:	881b      	ldrh	r3, [r3, #0]
 8000190:	2201      	movs	r2, #1
 8000192:	4619      	mov	r1, r3
 8000194:	f001 ff22 	bl	8001fdc <HAL_GPIO_WritePin>
}
 8000198:	bf00      	nop
 800019a:	3710      	adds	r7, #16
 800019c:	46bd      	mov	sp, r7
 800019e:	bd80      	pop	{r7, pc}
 80001a0:	200000a4 	.word	0x200000a4
 80001a4:	200000a8 	.word	0x200000a8
 80001a8:	2000009c 	.word	0x2000009c
 80001ac:	200000a0 	.word	0x200000a0
 80001b0:	20000044 	.word	0x20000044

080001b4 <LCD_SendData>:

//2. Write data to LCD
void LCD_SendData(uint8_t data) {
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b084      	sub	sp, #16
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	4603      	mov	r3, r0
 80001bc:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60040000) = data;
	uint8_t tmpCmd = data;
 80001be:	79fb      	ldrb	r3, [r7, #7]
 80001c0:	73fb      	strb	r3, [r7, #15]
	//Set DC LOW for DATA mode
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
 80001c2:	4b11      	ldr	r3, [pc, #68]	; (8000208 <LCD_SendData+0x54>)
 80001c4:	6818      	ldr	r0, [r3, #0]
 80001c6:	4b11      	ldr	r3, [pc, #68]	; (800020c <LCD_SendData+0x58>)
 80001c8:	881b      	ldrh	r3, [r3, #0]
 80001ca:	2201      	movs	r2, #1
 80001cc:	4619      	mov	r1, r3
 80001ce:	f001 ff05 	bl	8001fdc <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 80001d2:	4b0f      	ldr	r3, [pc, #60]	; (8000210 <LCD_SendData+0x5c>)
 80001d4:	6818      	ldr	r0, [r3, #0]
 80001d6:	4b0f      	ldr	r3, [pc, #60]	; (8000214 <LCD_SendData+0x60>)
 80001d8:	881b      	ldrh	r3, [r3, #0]
 80001da:	2200      	movs	r2, #0
 80001dc:	4619      	mov	r1, r3
 80001de:	f001 fefd 	bl	8001fdc <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpCmd, 1, 5);
 80001e2:	f107 010f 	add.w	r1, r7, #15
 80001e6:	2305      	movs	r3, #5
 80001e8:	2201      	movs	r2, #1
 80001ea:	480b      	ldr	r0, [pc, #44]	; (8000218 <LCD_SendData+0x64>)
 80001ec:	f002 fce9 	bl	8002bc2 <HAL_SPI_Transmit>
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 80001f0:	4b07      	ldr	r3, [pc, #28]	; (8000210 <LCD_SendData+0x5c>)
 80001f2:	6818      	ldr	r0, [r3, #0]
 80001f4:	4b07      	ldr	r3, [pc, #28]	; (8000214 <LCD_SendData+0x60>)
 80001f6:	881b      	ldrh	r3, [r3, #0]
 80001f8:	2201      	movs	r2, #1
 80001fa:	4619      	mov	r1, r3
 80001fc:	f001 feee 	bl	8001fdc <HAL_GPIO_WritePin>
}
 8000200:	bf00      	nop
 8000202:	3710      	adds	r7, #16
 8000204:	46bd      	mov	sp, r7
 8000206:	bd80      	pop	{r7, pc}
 8000208:	200000a4 	.word	0x200000a4
 800020c:	200000a8 	.word	0x200000a8
 8000210:	2000009c 	.word	0x2000009c
 8000214:	200000a0 	.word	0x200000a0
 8000218:	20000044 	.word	0x20000044

0800021c <LCD_SendDataMulti>:
//2.2 Write multiple/DMA
void LCD_SendDataMulti(uint16_t Colordata, uint32_t size) {
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	4603      	mov	r3, r0
 8000224:	6039      	str	r1, [r7, #0]
 8000226:	80fb      	strh	r3, [r7, #6]
	uint8_t colorL, colorH;

	//Set DC LOW for DATA mode
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
 8000228:	4b11      	ldr	r3, [pc, #68]	; (8000270 <LCD_SendDataMulti+0x54>)
 800022a:	6818      	ldr	r0, [r3, #0]
 800022c:	4b11      	ldr	r3, [pc, #68]	; (8000274 <LCD_SendDataMulti+0x58>)
 800022e:	881b      	ldrh	r3, [r3, #0]
 8000230:	2201      	movs	r2, #1
 8000232:	4619      	mov	r1, r3
 8000234:	f001 fed2 	bl	8001fdc <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 8000238:	4b0f      	ldr	r3, [pc, #60]	; (8000278 <LCD_SendDataMulti+0x5c>)
 800023a:	6818      	ldr	r0, [r3, #0]
 800023c:	4b0f      	ldr	r3, [pc, #60]	; (800027c <LCD_SendDataMulti+0x60>)
 800023e:	881b      	ldrh	r3, [r3, #0]
 8000240:	2200      	movs	r2, #0
 8000242:	4619      	mov	r1, r3
 8000244:	f001 feca 	bl	8001fdc <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&lcdSPIhandle, (uint8_t*) &Colordata, size, 1000);
 8000248:	683b      	ldr	r3, [r7, #0]
 800024a:	b29a      	uxth	r2, r3
 800024c:	1db9      	adds	r1, r7, #6
 800024e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000252:	480b      	ldr	r0, [pc, #44]	; (8000280 <LCD_SendDataMulti+0x64>)
 8000254:	f002 fcb5 	bl	8002bc2 <HAL_SPI_Transmit>
	//Wait for end of DMA transfer
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 8000258:	4b07      	ldr	r3, [pc, #28]	; (8000278 <LCD_SendDataMulti+0x5c>)
 800025a:	6818      	ldr	r0, [r3, #0]
 800025c:	4b07      	ldr	r3, [pc, #28]	; (800027c <LCD_SendDataMulti+0x60>)
 800025e:	881b      	ldrh	r3, [r3, #0]
 8000260:	2201      	movs	r2, #1
 8000262:	4619      	mov	r1, r3
 8000264:	f001 feba 	bl	8001fdc <HAL_GPIO_WritePin>
}
 8000268:	bf00      	nop
 800026a:	3708      	adds	r7, #8
 800026c:	46bd      	mov	sp, r7
 800026e:	bd80      	pop	{r7, pc}
 8000270:	200000a4 	.word	0x200000a4
 8000274:	200000a8 	.word	0x200000a8
 8000278:	2000009c 	.word	0x2000009c
 800027c:	200000a0 	.word	0x200000a0
 8000280:	20000044 	.word	0x20000044

08000284 <LCD_SetCursorPosition>:

//3. Set cursor position
void LCD_SetCursorPosition(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8000284:	b590      	push	{r4, r7, lr}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0
 800028a:	4604      	mov	r4, r0
 800028c:	4608      	mov	r0, r1
 800028e:	4611      	mov	r1, r2
 8000290:	461a      	mov	r2, r3
 8000292:	4623      	mov	r3, r4
 8000294:	80fb      	strh	r3, [r7, #6]
 8000296:	4603      	mov	r3, r0
 8000298:	80bb      	strh	r3, [r7, #4]
 800029a:	460b      	mov	r3, r1
 800029c:	807b      	strh	r3, [r7, #2]
 800029e:	4613      	mov	r3, r2
 80002a0:	803b      	strh	r3, [r7, #0]

	LCD_SendCommand(HX8357_CASET);
 80002a2:	202a      	movs	r0, #42	; 0x2a
 80002a4:	f7ff ff52 	bl	800014c <LCD_SendCommand>
	LCD_SendData(x1 >> 8);
 80002a8:	88fb      	ldrh	r3, [r7, #6]
 80002aa:	0a1b      	lsrs	r3, r3, #8
 80002ac:	b29b      	uxth	r3, r3
 80002ae:	b2db      	uxtb	r3, r3
 80002b0:	4618      	mov	r0, r3
 80002b2:	f7ff ff7f 	bl	80001b4 <LCD_SendData>
	LCD_SendData(x1 & 0xFF);
 80002b6:	88fb      	ldrh	r3, [r7, #6]
 80002b8:	b2db      	uxtb	r3, r3
 80002ba:	4618      	mov	r0, r3
 80002bc:	f7ff ff7a 	bl	80001b4 <LCD_SendData>
	LCD_SendData(x2 >> 8);
 80002c0:	887b      	ldrh	r3, [r7, #2]
 80002c2:	0a1b      	lsrs	r3, r3, #8
 80002c4:	b29b      	uxth	r3, r3
 80002c6:	b2db      	uxtb	r3, r3
 80002c8:	4618      	mov	r0, r3
 80002ca:	f7ff ff73 	bl	80001b4 <LCD_SendData>
	LCD_SendData(x2 & 0xFF);
 80002ce:	887b      	ldrh	r3, [r7, #2]
 80002d0:	b2db      	uxtb	r3, r3
 80002d2:	4618      	mov	r0, r3
 80002d4:	f7ff ff6e 	bl	80001b4 <LCD_SendData>

	LCD_SendCommand(HX8357_PASET);
 80002d8:	202b      	movs	r0, #43	; 0x2b
 80002da:	f7ff ff37 	bl	800014c <LCD_SendCommand>
	LCD_SendData(y1 >> 8);
 80002de:	88bb      	ldrh	r3, [r7, #4]
 80002e0:	0a1b      	lsrs	r3, r3, #8
 80002e2:	b29b      	uxth	r3, r3
 80002e4:	b2db      	uxtb	r3, r3
 80002e6:	4618      	mov	r0, r3
 80002e8:	f7ff ff64 	bl	80001b4 <LCD_SendData>
	LCD_SendData(y1 & 0xFF);
 80002ec:	88bb      	ldrh	r3, [r7, #4]
 80002ee:	b2db      	uxtb	r3, r3
 80002f0:	4618      	mov	r0, r3
 80002f2:	f7ff ff5f 	bl	80001b4 <LCD_SendData>
	LCD_SendData(y2 >> 8);
 80002f6:	883b      	ldrh	r3, [r7, #0]
 80002f8:	0a1b      	lsrs	r3, r3, #8
 80002fa:	b29b      	uxth	r3, r3
 80002fc:	b2db      	uxtb	r3, r3
 80002fe:	4618      	mov	r0, r3
 8000300:	f7ff ff58 	bl	80001b4 <LCD_SendData>
	LCD_SendData(y2 & 0xFF);
 8000304:	883b      	ldrh	r3, [r7, #0]
 8000306:	b2db      	uxtb	r3, r3
 8000308:	4618      	mov	r0, r3
 800030a:	f7ff ff53 	bl	80001b4 <LCD_SendData>
	LCD_SendCommand(HX8357_RAMWR);
 800030e:	202c      	movs	r0, #44	; 0x2c
 8000310:	f7ff ff1c 	bl	800014c <LCD_SendCommand>
}
 8000314:	bf00      	nop
 8000316:	370c      	adds	r7, #12
 8000318:	46bd      	mov	sp, r7
 800031a:	bd90      	pop	{r4, r7, pc}

0800031c <LCD_Init>:
//4. Initialise function
void LCD_Init(SPI_HandleTypeDef *spiLcdHandle, GPIO_TypeDef *csPORT,
		uint16_t csPIN, GPIO_TypeDef *dcPORT, uint16_t dcPIN,
		GPIO_TypeDef *resetPORT, uint16_t resetPIN) {
 800031c:	b580      	push	{r7, lr}
 800031e:	b084      	sub	sp, #16
 8000320:	af00      	add	r7, sp, #0
 8000322:	60f8      	str	r0, [r7, #12]
 8000324:	60b9      	str	r1, [r7, #8]
 8000326:	603b      	str	r3, [r7, #0]
 8000328:	4613      	mov	r3, r2
 800032a:	80fb      	strh	r3, [r7, #6]
	//Copy SPI settings
	memcpy(&lcdSPIhandle, spiLcdHandle, sizeof(*spiLcdHandle));
 800032c:	2258      	movs	r2, #88	; 0x58
 800032e:	68f9      	ldr	r1, [r7, #12]
 8000330:	489e      	ldr	r0, [pc, #632]	; (80005ac <LCD_Init+0x290>)
 8000332:	f002 fe27 	bl	8002f84 <memcpy>
	//CS pin
	tftCS_GPIO = csPORT;
 8000336:	4a9e      	ldr	r2, [pc, #632]	; (80005b0 <LCD_Init+0x294>)
 8000338:	68bb      	ldr	r3, [r7, #8]
 800033a:	6013      	str	r3, [r2, #0]
	tftCS_PIN = csPIN;
 800033c:	4a9d      	ldr	r2, [pc, #628]	; (80005b4 <LCD_Init+0x298>)
 800033e:	88fb      	ldrh	r3, [r7, #6]
 8000340:	8013      	strh	r3, [r2, #0]
	//DC pin
	tftDC_GPIO = dcPORT;
 8000342:	4a9d      	ldr	r2, [pc, #628]	; (80005b8 <LCD_Init+0x29c>)
 8000344:	683b      	ldr	r3, [r7, #0]
 8000346:	6013      	str	r3, [r2, #0]
	tftDC_PIN = dcPIN;
 8000348:	4a9c      	ldr	r2, [pc, #624]	; (80005bc <LCD_Init+0x2a0>)
 800034a:	8b3b      	ldrh	r3, [r7, #24]
 800034c:	8013      	strh	r3, [r2, #0]
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 800034e:	4b98      	ldr	r3, [pc, #608]	; (80005b0 <LCD_Init+0x294>)
 8000350:	6818      	ldr	r0, [r3, #0]
 8000352:	4b98      	ldr	r3, [pc, #608]	; (80005b4 <LCD_Init+0x298>)
 8000354:	881b      	ldrh	r3, [r3, #0]
 8000356:	2201      	movs	r2, #1
 8000358:	4619      	mov	r1, r3
 800035a:	f001 fe3f 	bl	8001fdc <HAL_GPIO_WritePin>
	//RESET pin
	tftRESET_GPIO = resetPORT;
 800035e:	4a98      	ldr	r2, [pc, #608]	; (80005c0 <LCD_Init+0x2a4>)
 8000360:	69fb      	ldr	r3, [r7, #28]
 8000362:	6013      	str	r3, [r2, #0]
	tftRESET_PIN = resetPIN;
 8000364:	4a97      	ldr	r2, [pc, #604]	; (80005c4 <LCD_Init+0x2a8>)
 8000366:	8c3b      	ldrh	r3, [r7, #32]
 8000368:	8013      	strh	r3, [r2, #0]
	HAL_GPIO_WritePin(resetPORT, resetPIN, GPIO_PIN_SET);  //Turn LCD ON
 800036a:	8c3b      	ldrh	r3, [r7, #32]
 800036c:	2201      	movs	r2, #1
 800036e:	4619      	mov	r1, r3
 8000370:	69f8      	ldr	r0, [r7, #28]
 8000372:	f001 fe33 	bl	8001fdc <HAL_GPIO_WritePin>

	LCD_SendCommand(HX8357_SWRESET);
 8000376:	2001      	movs	r0, #1
 8000378:	f7ff fee8 	bl	800014c <LCD_SendCommand>
	LCD_SendCommand(0x80);
 800037c:	2080      	movs	r0, #128	; 0x80
 800037e:	f7ff fee5 	bl	800014c <LCD_SendCommand>
	HAL_Delay(10);
 8000382:	200a      	movs	r0, #10
 8000384:	f000 ff8e 	bl	80012a4 <HAL_Delay>
	LCD_SendCommand(HX8357D_SETC);
 8000388:	20b9      	movs	r0, #185	; 0xb9
 800038a:	f7ff fedf 	bl	800014c <LCD_SendCommand>
	LCD_SendData(0xFF);
 800038e:	20ff      	movs	r0, #255	; 0xff
 8000390:	f7ff ff10 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x83);
 8000394:	2083      	movs	r0, #131	; 0x83
 8000396:	f7ff ff0d 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x57);
 800039a:	2057      	movs	r0, #87	; 0x57
 800039c:	f7ff ff0a 	bl	80001b4 <LCD_SendData>
	LCD_SendCommand(0xFF);
 80003a0:	20ff      	movs	r0, #255	; 0xff
 80003a2:	f7ff fed3 	bl	800014c <LCD_SendCommand>
	LCD_SendCommand(0x80);
 80003a6:	2080      	movs	r0, #128	; 0x80
 80003a8:	f7ff fed0 	bl	800014c <LCD_SendCommand>
	HAL_Delay(300);
 80003ac:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80003b0:	f000 ff78 	bl	80012a4 <HAL_Delay>
	LCD_SendCommand(HX8357_SETRGB);
 80003b4:	20b3      	movs	r0, #179	; 0xb3
 80003b6:	f7ff fec9 	bl	800014c <LCD_SendCommand>
	LCD_SendData(0x80);
 80003ba:	2080      	movs	r0, #128	; 0x80
 80003bc:	f7ff fefa 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x00);
 80003c0:	2000      	movs	r0, #0
 80003c2:	f7ff fef7 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x06);
 80003c6:	2006      	movs	r0, #6
 80003c8:	f7ff fef4 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x06);
 80003cc:	2006      	movs	r0, #6
 80003ce:	f7ff fef1 	bl	80001b4 <LCD_SendData>
	LCD_SendCommand(HX8357D_SETCOM);
 80003d2:	20b6      	movs	r0, #182	; 0xb6
 80003d4:	f7ff feba 	bl	800014c <LCD_SendCommand>
	LCD_SendData(0x25);
 80003d8:	2025      	movs	r0, #37	; 0x25
 80003da:	f7ff feeb 	bl	80001b4 <LCD_SendData>
	LCD_SendCommand(HX8357_SETOSC);
 80003de:	20b0      	movs	r0, #176	; 0xb0
 80003e0:	f7ff feb4 	bl	800014c <LCD_SendCommand>
	LCD_SendData(0x68);
 80003e4:	2068      	movs	r0, #104	; 0x68
 80003e6:	f7ff fee5 	bl	80001b4 <LCD_SendData>
	LCD_SendCommand(HX8357_SETPANEL);
 80003ea:	20cc      	movs	r0, #204	; 0xcc
 80003ec:	f7ff feae 	bl	800014c <LCD_SendCommand>
	LCD_SendData(0x05);
 80003f0:	2005      	movs	r0, #5
 80003f2:	f7ff fedf 	bl	80001b4 <LCD_SendData>
	LCD_SendCommand(HX8357_SETPWR1);
 80003f6:	20b1      	movs	r0, #177	; 0xb1
 80003f8:	f7ff fea8 	bl	800014c <LCD_SendCommand>
	LCD_SendData(0x00);
 80003fc:	2000      	movs	r0, #0
 80003fe:	f7ff fed9 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x15);
 8000402:	2015      	movs	r0, #21
 8000404:	f7ff fed6 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x1C);
 8000408:	201c      	movs	r0, #28
 800040a:	f7ff fed3 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x1C);
 800040e:	201c      	movs	r0, #28
 8000410:	f7ff fed0 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x83);
 8000414:	2083      	movs	r0, #131	; 0x83
 8000416:	f7ff fecd 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0xAA);
 800041a:	20aa      	movs	r0, #170	; 0xaa
 800041c:	f7ff feca 	bl	80001b4 <LCD_SendData>
	LCD_SendCommand(HX8357D_SETSTBA);
 8000420:	20c0      	movs	r0, #192	; 0xc0
 8000422:	f7ff fe93 	bl	800014c <LCD_SendCommand>
	LCD_SendData(0x50);
 8000426:	2050      	movs	r0, #80	; 0x50
 8000428:	f7ff fec4 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x50);
 800042c:	2050      	movs	r0, #80	; 0x50
 800042e:	f7ff fec1 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x01);
 8000432:	2001      	movs	r0, #1
 8000434:	f7ff febe 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x3C);
 8000438:	203c      	movs	r0, #60	; 0x3c
 800043a:	f7ff febb 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x1E);
 800043e:	201e      	movs	r0, #30
 8000440:	f7ff feb8 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x08);
 8000444:	2008      	movs	r0, #8
 8000446:	f7ff feb5 	bl	80001b4 <LCD_SendData>
	LCD_SendCommand(HX8357D_SETCYC);
 800044a:	20b4      	movs	r0, #180	; 0xb4
 800044c:	f7ff fe7e 	bl	800014c <LCD_SendCommand>
	LCD_SendData(0x02);
 8000450:	2002      	movs	r0, #2
 8000452:	f7ff feaf 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x40);
 8000456:	2040      	movs	r0, #64	; 0x40
 8000458:	f7ff feac 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x00);
 800045c:	2000      	movs	r0, #0
 800045e:	f7ff fea9 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x2A);
 8000462:	202a      	movs	r0, #42	; 0x2a
 8000464:	f7ff fea6 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x2A);
 8000468:	202a      	movs	r0, #42	; 0x2a
 800046a:	f7ff fea3 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x0D);
 800046e:	200d      	movs	r0, #13
 8000470:	f7ff fea0 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x78);
 8000474:	2078      	movs	r0, #120	; 0x78
 8000476:	f7ff fe9d 	bl	80001b4 <LCD_SendData>
	LCD_SendCommand(HX8357D_SETGAMMA);
 800047a:	20e0      	movs	r0, #224	; 0xe0
 800047c:	f7ff fe66 	bl	800014c <LCD_SendCommand>

	LCD_SendData(0x02);
 8000480:	2002      	movs	r0, #2
 8000482:	f7ff fe97 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x0A);
 8000486:	200a      	movs	r0, #10
 8000488:	f7ff fe94 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x11);
 800048c:	2011      	movs	r0, #17
 800048e:	f7ff fe91 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x1D);
 8000492:	201d      	movs	r0, #29
 8000494:	f7ff fe8e 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x23);
 8000498:	2023      	movs	r0, #35	; 0x23
 800049a:	f7ff fe8b 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x35);
 800049e:	2035      	movs	r0, #53	; 0x35
 80004a0:	f7ff fe88 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x41);
 80004a4:	2041      	movs	r0, #65	; 0x41
 80004a6:	f7ff fe85 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x4b);
 80004aa:	204b      	movs	r0, #75	; 0x4b
 80004ac:	f7ff fe82 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x4b);
 80004b0:	204b      	movs	r0, #75	; 0x4b
 80004b2:	f7ff fe7f 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x42);
 80004b6:	2042      	movs	r0, #66	; 0x42
 80004b8:	f7ff fe7c 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x3A);
 80004bc:	203a      	movs	r0, #58	; 0x3a
 80004be:	f7ff fe79 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x27);
 80004c2:	2027      	movs	r0, #39	; 0x27
 80004c4:	f7ff fe76 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x1B);
 80004c8:	201b      	movs	r0, #27
 80004ca:	f7ff fe73 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x08);
 80004ce:	2008      	movs	r0, #8
 80004d0:	f7ff fe70 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x09);
 80004d4:	2009      	movs	r0, #9
 80004d6:	f7ff fe6d 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x03);
 80004da:	2003      	movs	r0, #3
 80004dc:	f7ff fe6a 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x02);
 80004e0:	2002      	movs	r0, #2
 80004e2:	f7ff fe67 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x0A);
 80004e6:	200a      	movs	r0, #10
 80004e8:	f7ff fe64 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x11);
 80004ec:	2011      	movs	r0, #17
 80004ee:	f7ff fe61 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x1d);
 80004f2:	201d      	movs	r0, #29
 80004f4:	f7ff fe5e 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x23);
 80004f8:	2023      	movs	r0, #35	; 0x23
 80004fa:	f7ff fe5b 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x35);
 80004fe:	2035      	movs	r0, #53	; 0x35
 8000500:	f7ff fe58 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x41);
 8000504:	2041      	movs	r0, #65	; 0x41
 8000506:	f7ff fe55 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x4b);
 800050a:	204b      	movs	r0, #75	; 0x4b
 800050c:	f7ff fe52 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x4b);
 8000510:	204b      	movs	r0, #75	; 0x4b
 8000512:	f7ff fe4f 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x42);
 8000516:	2042      	movs	r0, #66	; 0x42
 8000518:	f7ff fe4c 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x3A);
 800051c:	203a      	movs	r0, #58	; 0x3a
 800051e:	f7ff fe49 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x27);
 8000522:	2027      	movs	r0, #39	; 0x27
 8000524:	f7ff fe46 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x1B);
 8000528:	201b      	movs	r0, #27
 800052a:	f7ff fe43 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x08);
 800052e:	2008      	movs	r0, #8
 8000530:	f7ff fe40 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x09);
 8000534:	2009      	movs	r0, #9
 8000536:	f7ff fe3d 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x03);
 800053a:	2003      	movs	r0, #3
 800053c:	f7ff fe3a 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x00);
 8000540:	2000      	movs	r0, #0
 8000542:	f7ff fe37 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x01);
 8000546:	2001      	movs	r0, #1
 8000548:	f7ff fe34 	bl	80001b4 <LCD_SendData>

	LCD_SendCommand(HX8357_COLMOD);
 800054c:	203a      	movs	r0, #58	; 0x3a
 800054e:	f7ff fdfd 	bl	800014c <LCD_SendCommand>
	LCD_SendData(0x55);
 8000552:	2055      	movs	r0, #85	; 0x55
 8000554:	f7ff fe2e 	bl	80001b4 <LCD_SendData>
	LCD_SendCommand(HX8357_MADCTL);
 8000558:	2036      	movs	r0, #54	; 0x36
 800055a:	f7ff fdf7 	bl	800014c <LCD_SendCommand>
	LCD_SendData(0xC0);
 800055e:	20c0      	movs	r0, #192	; 0xc0
 8000560:	f7ff fe28 	bl	80001b4 <LCD_SendData>
	LCD_SendCommand(HX8357_TEON);
 8000564:	2035      	movs	r0, #53	; 0x35
 8000566:	f7ff fdf1 	bl	800014c <LCD_SendCommand>
	LCD_SendData(0x00);
 800056a:	2000      	movs	r0, #0
 800056c:	f7ff fe22 	bl	80001b4 <LCD_SendData>
	LCD_SendCommand(HX8357_TEARLINE);
 8000570:	2044      	movs	r0, #68	; 0x44
 8000572:	f7ff fdeb 	bl	800014c <LCD_SendCommand>
	LCD_SendDataMulti(0x00, 0x02);
 8000576:	2102      	movs	r1, #2
 8000578:	2000      	movs	r0, #0
 800057a:	f7ff fe4f 	bl	800021c <LCD_SendDataMulti>
	LCD_SendCommand(HX8357_SLPOUT);
 800057e:	2011      	movs	r0, #17
 8000580:	f7ff fde4 	bl	800014c <LCD_SendCommand>
	LCD_SendCommand(0x80);
 8000584:	2080      	movs	r0, #128	; 0x80
 8000586:	f7ff fde1 	bl	800014c <LCD_SendCommand>
	HAL_Delay(150);
 800058a:	2096      	movs	r0, #150	; 0x96
 800058c:	f000 fe8a 	bl	80012a4 <HAL_Delay>
	LCD_SendCommand(HX8357_DISPON);
 8000590:	2029      	movs	r0, #41	; 0x29
 8000592:	f7ff fddb 	bl	800014c <LCD_SendCommand>
	LCD_SendCommand(0x80);
 8000596:	2080      	movs	r0, #128	; 0x80
 8000598:	f7ff fdd8 	bl	800014c <LCD_SendCommand>
	HAL_Delay(50);
 800059c:	2032      	movs	r0, #50	; 0x32
 800059e:	f000 fe81 	bl	80012a4 <HAL_Delay>
}
 80005a2:	bf00      	nop
 80005a4:	3710      	adds	r7, #16
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	20000044 	.word	0x20000044
 80005b0:	2000009c 	.word	0x2000009c
 80005b4:	200000a0 	.word	0x200000a0
 80005b8:	200000a4 	.word	0x200000a4
 80005bc:	200000a8 	.word	0x200000a8
 80005c0:	200000ac 	.word	0x200000ac
 80005c4:	200000b0 	.word	0x200000b0

080005c8 <LCD_DrawPixel>:

//5. Write data to a single pixel
void LCD_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	80fb      	strh	r3, [r7, #6]
 80005d2:	460b      	mov	r3, r1
 80005d4:	80bb      	strh	r3, [r7, #4]
 80005d6:	4613      	mov	r3, r2
 80005d8:	807b      	strh	r3, [r7, #2]
	LCD_SetCursorPosition(x, y, x, y);
 80005da:	88bb      	ldrh	r3, [r7, #4]
 80005dc:	88fa      	ldrh	r2, [r7, #6]
 80005de:	88b9      	ldrh	r1, [r7, #4]
 80005e0:	88f8      	ldrh	r0, [r7, #6]
 80005e2:	f7ff fe4f 	bl	8000284 <LCD_SetCursorPosition>
	LCD_SendData(color >> 8);
 80005e6:	887b      	ldrh	r3, [r7, #2]
 80005e8:	0a1b      	lsrs	r3, r3, #8
 80005ea:	b29b      	uxth	r3, r3
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	4618      	mov	r0, r3
 80005f0:	f7ff fde0 	bl	80001b4 <LCD_SendData>
	LCD_SendData(color & 0xFF);
 80005f4:	887b      	ldrh	r3, [r7, #2]
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	4618      	mov	r0, r3
 80005fa:	f7ff fddb 	bl	80001b4 <LCD_SendData>
}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
	...

08000608 <LCD_Fill>:
//6. Fill the entire screen with a background color
void LCD_Fill(uint16_t color) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	80fb      	strh	r3, [r7, #6]
	uint32_t n = LCD_PIXEL_COUNT;
 8000612:	f44f 3316 	mov.w	r3, #153600	; 0x25800
 8000616:	60fb      	str	r3, [r7, #12]
	uint16_t myColor = 0xFF;
 8000618:	23ff      	movs	r3, #255	; 0xff
 800061a:	817b      	strh	r3, [r7, #10]

	if (rotationNum == 1 || rotationNum == 3) {
 800061c:	4b1b      	ldr	r3, [pc, #108]	; (800068c <LCD_Fill+0x84>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b01      	cmp	r3, #1
 8000622:	d003      	beq.n	800062c <LCD_Fill+0x24>
 8000624:	4b19      	ldr	r3, [pc, #100]	; (800068c <LCD_Fill+0x84>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	2b03      	cmp	r3, #3
 800062a:	d108      	bne.n	800063e <LCD_Fill+0x36>
		LCD_SetCursorPosition(0, 0, HX8357_TFTWIDTH - 1, HX8357_TFTHEIGHT - 1);
 800062c:	f240 13df 	movw	r3, #479	; 0x1df
 8000630:	f240 123f 	movw	r2, #319	; 0x13f
 8000634:	2100      	movs	r1, #0
 8000636:	2000      	movs	r0, #0
 8000638:	f7ff fe24 	bl	8000284 <LCD_SetCursorPosition>
 800063c:	e00f      	b.n	800065e <LCD_Fill+0x56>
	} else if (rotationNum == 2 || rotationNum == 4) {
 800063e:	4b13      	ldr	r3, [pc, #76]	; (800068c <LCD_Fill+0x84>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	2b02      	cmp	r3, #2
 8000644:	d003      	beq.n	800064e <LCD_Fill+0x46>
 8000646:	4b11      	ldr	r3, [pc, #68]	; (800068c <LCD_Fill+0x84>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	2b04      	cmp	r3, #4
 800064c:	d117      	bne.n	800067e <LCD_Fill+0x76>
		LCD_SetCursorPosition(0, 0, HX8357_TFTHEIGHT - 1, HX8357_TFTWIDTH - 1);
 800064e:	f240 133f 	movw	r3, #319	; 0x13f
 8000652:	f240 12df 	movw	r2, #479	; 0x1df
 8000656:	2100      	movs	r1, #0
 8000658:	2000      	movs	r0, #0
 800065a:	f7ff fe13 	bl	8000284 <LCD_SetCursorPosition>
	}

	while (n) {
 800065e:	e00e      	b.n	800067e <LCD_Fill+0x76>
		n--;
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	3b01      	subs	r3, #1
 8000664:	60fb      	str	r3, [r7, #12]
		LCD_SendData(color >> 8);
 8000666:	88fb      	ldrh	r3, [r7, #6]
 8000668:	0a1b      	lsrs	r3, r3, #8
 800066a:	b29b      	uxth	r3, r3
 800066c:	b2db      	uxtb	r3, r3
 800066e:	4618      	mov	r0, r3
 8000670:	f7ff fda0 	bl	80001b4 <LCD_SendData>
		LCD_SendData(color & 0xff);
 8000674:	88fb      	ldrh	r3, [r7, #6]
 8000676:	b2db      	uxtb	r3, r3
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff fd9b 	bl	80001b4 <LCD_SendData>
	while (n) {
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d1ed      	bne.n	8000660 <LCD_Fill+0x58>
	}
}
 8000684:	bf00      	nop
 8000686:	3710      	adds	r7, #16
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	20000000 	.word	0x20000000

08000690 <LCD_drawCircle>:
		LCD_SendData(color & 0xff);
	}
}

//8. Circle drawing functions
void LCD_drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 8000690:	b590      	push	{r4, r7, lr}
 8000692:	b087      	sub	sp, #28
 8000694:	af00      	add	r7, sp, #0
 8000696:	4604      	mov	r4, r0
 8000698:	4608      	mov	r0, r1
 800069a:	4611      	mov	r1, r2
 800069c:	461a      	mov	r2, r3
 800069e:	4623      	mov	r3, r4
 80006a0:	80fb      	strh	r3, [r7, #6]
 80006a2:	4603      	mov	r3, r0
 80006a4:	80bb      	strh	r3, [r7, #4]
 80006a6:	460b      	mov	r3, r1
 80006a8:	807b      	strh	r3, [r7, #2]
 80006aa:	4613      	mov	r3, r2
 80006ac:	803b      	strh	r3, [r7, #0]
	int16_t f = 1 - r;
 80006ae:	887b      	ldrh	r3, [r7, #2]
 80006b0:	f1c3 0301 	rsb	r3, r3, #1
 80006b4:	b29b      	uxth	r3, r3
 80006b6:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 80006b8:	2301      	movs	r3, #1
 80006ba:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 80006bc:	887b      	ldrh	r3, [r7, #2]
 80006be:	461a      	mov	r2, r3
 80006c0:	03d2      	lsls	r2, r2, #15
 80006c2:	1ad3      	subs	r3, r2, r3
 80006c4:	005b      	lsls	r3, r3, #1
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 80006ce:	887b      	ldrh	r3, [r7, #2]
 80006d0:	81fb      	strh	r3, [r7, #14]

	LCD_DrawPixel(x0, y0 + r, color);
 80006d2:	88f8      	ldrh	r0, [r7, #6]
 80006d4:	88ba      	ldrh	r2, [r7, #4]
 80006d6:	887b      	ldrh	r3, [r7, #2]
 80006d8:	4413      	add	r3, r2
 80006da:	b29b      	uxth	r3, r3
 80006dc:	883a      	ldrh	r2, [r7, #0]
 80006de:	4619      	mov	r1, r3
 80006e0:	f7ff ff72 	bl	80005c8 <LCD_DrawPixel>
	LCD_DrawPixel(x0, y0 - r, color);
 80006e4:	88f8      	ldrh	r0, [r7, #6]
 80006e6:	88ba      	ldrh	r2, [r7, #4]
 80006e8:	887b      	ldrh	r3, [r7, #2]
 80006ea:	1ad3      	subs	r3, r2, r3
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	883a      	ldrh	r2, [r7, #0]
 80006f0:	4619      	mov	r1, r3
 80006f2:	f7ff ff69 	bl	80005c8 <LCD_DrawPixel>
	LCD_DrawPixel(x0 + r, y0, color);
 80006f6:	88fa      	ldrh	r2, [r7, #6]
 80006f8:	887b      	ldrh	r3, [r7, #2]
 80006fa:	4413      	add	r3, r2
 80006fc:	b29b      	uxth	r3, r3
 80006fe:	88b9      	ldrh	r1, [r7, #4]
 8000700:	883a      	ldrh	r2, [r7, #0]
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff ff60 	bl	80005c8 <LCD_DrawPixel>
	LCD_DrawPixel(x0 - r, y0, color);
 8000708:	88fa      	ldrh	r2, [r7, #6]
 800070a:	887b      	ldrh	r3, [r7, #2]
 800070c:	1ad3      	subs	r3, r2, r3
 800070e:	b29b      	uxth	r3, r3
 8000710:	88b9      	ldrh	r1, [r7, #4]
 8000712:	883a      	ldrh	r2, [r7, #0]
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff ff57 	bl	80005c8 <LCD_DrawPixel>

	while (x < y) {
 800071a:	e081      	b.n	8000820 <LCD_drawCircle+0x190>
		if (f >= 0) {
 800071c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000720:	2b00      	cmp	r3, #0
 8000722:	db0e      	blt.n	8000742 <LCD_drawCircle+0xb2>
			y--;
 8000724:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000728:	b29b      	uxth	r3, r3
 800072a:	3b01      	subs	r3, #1
 800072c:	b29b      	uxth	r3, r3
 800072e:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8000730:	8a7b      	ldrh	r3, [r7, #18]
 8000732:	3302      	adds	r3, #2
 8000734:	b29b      	uxth	r3, r3
 8000736:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8000738:	8afa      	ldrh	r2, [r7, #22]
 800073a:	8a7b      	ldrh	r3, [r7, #18]
 800073c:	4413      	add	r3, r2
 800073e:	b29b      	uxth	r3, r3
 8000740:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8000742:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000746:	b29b      	uxth	r3, r3
 8000748:	3301      	adds	r3, #1
 800074a:	b29b      	uxth	r3, r3
 800074c:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 800074e:	8abb      	ldrh	r3, [r7, #20]
 8000750:	3302      	adds	r3, #2
 8000752:	b29b      	uxth	r3, r3
 8000754:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8000756:	8afa      	ldrh	r2, [r7, #22]
 8000758:	8abb      	ldrh	r3, [r7, #20]
 800075a:	4413      	add	r3, r2
 800075c:	b29b      	uxth	r3, r3
 800075e:	82fb      	strh	r3, [r7, #22]

		LCD_DrawPixel(x0 + x, y0 + y, color);
 8000760:	88fa      	ldrh	r2, [r7, #6]
 8000762:	8a3b      	ldrh	r3, [r7, #16]
 8000764:	4413      	add	r3, r2
 8000766:	b298      	uxth	r0, r3
 8000768:	88ba      	ldrh	r2, [r7, #4]
 800076a:	89fb      	ldrh	r3, [r7, #14]
 800076c:	4413      	add	r3, r2
 800076e:	b29b      	uxth	r3, r3
 8000770:	883a      	ldrh	r2, [r7, #0]
 8000772:	4619      	mov	r1, r3
 8000774:	f7ff ff28 	bl	80005c8 <LCD_DrawPixel>
		LCD_DrawPixel(x0 - x, y0 + y, color);
 8000778:	88fa      	ldrh	r2, [r7, #6]
 800077a:	8a3b      	ldrh	r3, [r7, #16]
 800077c:	1ad3      	subs	r3, r2, r3
 800077e:	b298      	uxth	r0, r3
 8000780:	88ba      	ldrh	r2, [r7, #4]
 8000782:	89fb      	ldrh	r3, [r7, #14]
 8000784:	4413      	add	r3, r2
 8000786:	b29b      	uxth	r3, r3
 8000788:	883a      	ldrh	r2, [r7, #0]
 800078a:	4619      	mov	r1, r3
 800078c:	f7ff ff1c 	bl	80005c8 <LCD_DrawPixel>
		LCD_DrawPixel(x0 + x, y0 - y, color);
 8000790:	88fa      	ldrh	r2, [r7, #6]
 8000792:	8a3b      	ldrh	r3, [r7, #16]
 8000794:	4413      	add	r3, r2
 8000796:	b298      	uxth	r0, r3
 8000798:	88ba      	ldrh	r2, [r7, #4]
 800079a:	89fb      	ldrh	r3, [r7, #14]
 800079c:	1ad3      	subs	r3, r2, r3
 800079e:	b29b      	uxth	r3, r3
 80007a0:	883a      	ldrh	r2, [r7, #0]
 80007a2:	4619      	mov	r1, r3
 80007a4:	f7ff ff10 	bl	80005c8 <LCD_DrawPixel>
		LCD_DrawPixel(x0 - x, y0 - y, color);
 80007a8:	88fa      	ldrh	r2, [r7, #6]
 80007aa:	8a3b      	ldrh	r3, [r7, #16]
 80007ac:	1ad3      	subs	r3, r2, r3
 80007ae:	b298      	uxth	r0, r3
 80007b0:	88ba      	ldrh	r2, [r7, #4]
 80007b2:	89fb      	ldrh	r3, [r7, #14]
 80007b4:	1ad3      	subs	r3, r2, r3
 80007b6:	b29b      	uxth	r3, r3
 80007b8:	883a      	ldrh	r2, [r7, #0]
 80007ba:	4619      	mov	r1, r3
 80007bc:	f7ff ff04 	bl	80005c8 <LCD_DrawPixel>
		LCD_DrawPixel(x0 + y, y0 + x, color);
 80007c0:	88fa      	ldrh	r2, [r7, #6]
 80007c2:	89fb      	ldrh	r3, [r7, #14]
 80007c4:	4413      	add	r3, r2
 80007c6:	b298      	uxth	r0, r3
 80007c8:	88ba      	ldrh	r2, [r7, #4]
 80007ca:	8a3b      	ldrh	r3, [r7, #16]
 80007cc:	4413      	add	r3, r2
 80007ce:	b29b      	uxth	r3, r3
 80007d0:	883a      	ldrh	r2, [r7, #0]
 80007d2:	4619      	mov	r1, r3
 80007d4:	f7ff fef8 	bl	80005c8 <LCD_DrawPixel>
		LCD_DrawPixel(x0 - y, y0 + x, color);
 80007d8:	88fa      	ldrh	r2, [r7, #6]
 80007da:	89fb      	ldrh	r3, [r7, #14]
 80007dc:	1ad3      	subs	r3, r2, r3
 80007de:	b298      	uxth	r0, r3
 80007e0:	88ba      	ldrh	r2, [r7, #4]
 80007e2:	8a3b      	ldrh	r3, [r7, #16]
 80007e4:	4413      	add	r3, r2
 80007e6:	b29b      	uxth	r3, r3
 80007e8:	883a      	ldrh	r2, [r7, #0]
 80007ea:	4619      	mov	r1, r3
 80007ec:	f7ff feec 	bl	80005c8 <LCD_DrawPixel>
		LCD_DrawPixel(x0 + y, y0 - x, color);
 80007f0:	88fa      	ldrh	r2, [r7, #6]
 80007f2:	89fb      	ldrh	r3, [r7, #14]
 80007f4:	4413      	add	r3, r2
 80007f6:	b298      	uxth	r0, r3
 80007f8:	88ba      	ldrh	r2, [r7, #4]
 80007fa:	8a3b      	ldrh	r3, [r7, #16]
 80007fc:	1ad3      	subs	r3, r2, r3
 80007fe:	b29b      	uxth	r3, r3
 8000800:	883a      	ldrh	r2, [r7, #0]
 8000802:	4619      	mov	r1, r3
 8000804:	f7ff fee0 	bl	80005c8 <LCD_DrawPixel>
		LCD_DrawPixel(x0 - y, y0 - x, color);
 8000808:	88fa      	ldrh	r2, [r7, #6]
 800080a:	89fb      	ldrh	r3, [r7, #14]
 800080c:	1ad3      	subs	r3, r2, r3
 800080e:	b298      	uxth	r0, r3
 8000810:	88ba      	ldrh	r2, [r7, #4]
 8000812:	8a3b      	ldrh	r3, [r7, #16]
 8000814:	1ad3      	subs	r3, r2, r3
 8000816:	b29b      	uxth	r3, r3
 8000818:	883a      	ldrh	r2, [r7, #0]
 800081a:	4619      	mov	r1, r3
 800081c:	f7ff fed4 	bl	80005c8 <LCD_DrawPixel>
	while (x < y) {
 8000820:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000824:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000828:	429a      	cmp	r2, r3
 800082a:	f6ff af77 	blt.w	800071c <LCD_drawCircle+0x8c>
	}
}
 800082e:	bf00      	nop
 8000830:	371c      	adds	r7, #28
 8000832:	46bd      	mov	sp, r7
 8000834:	bd90      	pop	{r4, r7, pc}
	...

08000838 <LCD_setRotation>:

	LCD_SendData(data[size-1] & 0xFF);
}

//13. Set screen rotation
void LCD_setRotation(uint8_t rotate) {
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	71fb      	strb	r3, [r7, #7]
	switch (rotate) {
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	3b01      	subs	r3, #1
 8000846:	2b03      	cmp	r3, #3
 8000848:	d832      	bhi.n	80008b0 <LCD_setRotation+0x78>
 800084a:	a201      	add	r2, pc, #4	; (adr r2, 8000850 <LCD_setRotation+0x18>)
 800084c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000850:	08000861 	.word	0x08000861
 8000854:	08000875 	.word	0x08000875
 8000858:	08000889 	.word	0x08000889
 800085c:	0800089d 	.word	0x0800089d
	case 1:
		rotationNum = 1;
 8000860:	4b1a      	ldr	r3, [pc, #104]	; (80008cc <LCD_setRotation+0x94>)
 8000862:	2201      	movs	r2, #1
 8000864:	701a      	strb	r2, [r3, #0]
		LCD_SendCommand(HX8357_MADCTL);
 8000866:	2036      	movs	r0, #54	; 0x36
 8000868:	f7ff fc70 	bl	800014c <LCD_SendCommand>
		LCD_SendData(MADCTL_MX | MADCTL_MY | MADCTL_RGB);
 800086c:	20c0      	movs	r0, #192	; 0xc0
 800086e:	f7ff fca1 	bl	80001b4 <LCD_SendData>
		break;
 8000872:	e027      	b.n	80008c4 <LCD_setRotation+0x8c>
	case 2:
		rotationNum = 2;
 8000874:	4b15      	ldr	r3, [pc, #84]	; (80008cc <LCD_setRotation+0x94>)
 8000876:	2202      	movs	r2, #2
 8000878:	701a      	strb	r2, [r3, #0]
		LCD_SendCommand(HX8357_MADCTL);
 800087a:	2036      	movs	r0, #54	; 0x36
 800087c:	f7ff fc66 	bl	800014c <LCD_SendCommand>
		LCD_SendData(MADCTL_MV | MADCTL_MY | MADCTL_RGB);
 8000880:	20a0      	movs	r0, #160	; 0xa0
 8000882:	f7ff fc97 	bl	80001b4 <LCD_SendData>
		break;
 8000886:	e01d      	b.n	80008c4 <LCD_setRotation+0x8c>
	case 3:
		rotationNum = 3;
 8000888:	4b10      	ldr	r3, [pc, #64]	; (80008cc <LCD_setRotation+0x94>)
 800088a:	2203      	movs	r2, #3
 800088c:	701a      	strb	r2, [r3, #0]
		LCD_SendCommand(HX8357_MADCTL);
 800088e:	2036      	movs	r0, #54	; 0x36
 8000890:	f7ff fc5c 	bl	800014c <LCD_SendCommand>
		LCD_SendData(MADCTL_RGB);
 8000894:	2000      	movs	r0, #0
 8000896:	f7ff fc8d 	bl	80001b4 <LCD_SendData>
		break;
 800089a:	e013      	b.n	80008c4 <LCD_setRotation+0x8c>
	case 4:
		rotationNum = 4;
 800089c:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <LCD_setRotation+0x94>)
 800089e:	2204      	movs	r2, #4
 80008a0:	701a      	strb	r2, [r3, #0]
		LCD_SendCommand(HX8357_MADCTL);
 80008a2:	2036      	movs	r0, #54	; 0x36
 80008a4:	f7ff fc52 	bl	800014c <LCD_SendCommand>
		LCD_SendData(MADCTL_MX | MADCTL_MV | MADCTL_RGB);
 80008a8:	2060      	movs	r0, #96	; 0x60
 80008aa:	f7ff fc83 	bl	80001b4 <LCD_SendData>
		break;
 80008ae:	e009      	b.n	80008c4 <LCD_setRotation+0x8c>
	default:
		rotationNum = 1;
 80008b0:	4b06      	ldr	r3, [pc, #24]	; (80008cc <LCD_setRotation+0x94>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	701a      	strb	r2, [r3, #0]
		LCD_SendCommand(HX8357_MADCTL);
 80008b6:	2036      	movs	r0, #54	; 0x36
 80008b8:	f7ff fc48 	bl	800014c <LCD_SendCommand>
		LCD_SendData(MADCTL_MY | MADCTL_BGR);
 80008bc:	2088      	movs	r0, #136	; 0x88
 80008be:	f7ff fc79 	bl	80001b4 <LCD_SendData>
		break;
 80008c2:	bf00      	nop
	}
}
 80008c4:	bf00      	nop
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20000000 	.word	0x20000000

080008d0 <map>:
static uint16_t ym_PIN = YMIN_Pin;
static uint16_t xm_PIN = XMIN_Pin;
static uint16_t yp_PIN = YPLUS_Pin;
static uint16_t xp_PIN = XPLUS_Pin;

int map(int x, int in_min, int in_max, int out_min, int out_max) {
 80008d0:	b480      	push	{r7}
 80008d2:	b085      	sub	sp, #20
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	60b9      	str	r1, [r7, #8]
 80008da:	607a      	str	r2, [r7, #4]
 80008dc:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80008de:	68fa      	ldr	r2, [r7, #12]
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	1ad3      	subs	r3, r2, r3
 80008e4:	69b9      	ldr	r1, [r7, #24]
 80008e6:	683a      	ldr	r2, [r7, #0]
 80008e8:	1a8a      	subs	r2, r1, r2
 80008ea:	fb02 f203 	mul.w	r2, r2, r3
 80008ee:	6879      	ldr	r1, [r7, #4]
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	1acb      	subs	r3, r1, r3
 80008f4:	fb92 f2f3 	sdiv	r2, r2, r3
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	4413      	add	r3, r2
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3714      	adds	r7, #20
 8000900:	46bd      	mov	sp, r7
 8000902:	bc80      	pop	{r7}
 8000904:	4770      	bx	lr
	...

08000908 <Touch_Init>:

void Touch_Init(ADC_HandleTypeDef *adc) {
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
	memcpy(&adcHandle, adc, sizeof(*adc));
 8000910:	2230      	movs	r2, #48	; 0x30
 8000912:	6879      	ldr	r1, [r7, #4]
 8000914:	4803      	ldr	r0, [pc, #12]	; (8000924 <Touch_Init+0x1c>)
 8000916:	f002 fb35 	bl	8002f84 <memcpy>
}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	200000b4 	.word	0x200000b4

08000928 <setupForReadY>:

bool isTouch();
uint16_t getPressure();

void setupForReadY() {
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.Pin = yp_PIN;
 800092e:	4b2c      	ldr	r3, [pc, #176]	; (80009e0 <setupForReadY+0xb8>)
 8000930:	881b      	ldrh	r3, [r3, #0]
 8000932:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000934:	2301      	movs	r3, #1
 8000936:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 8000938:	2301      	movs	r3, #1
 800093a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800093c:	2303      	movs	r3, #3
 800093e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init( yp , &GPIO_InitStructure );
 8000940:	4b28      	ldr	r3, [pc, #160]	; (80009e4 <setupForReadY+0xbc>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	463a      	mov	r2, r7
 8000946:	4611      	mov	r1, r2
 8000948:	4618      	mov	r0, r3
 800094a:	f001 f9ed 	bl	8001d28 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(yp, yp_PIN, GPIO_PIN_SET);
 800094e:	4b25      	ldr	r3, [pc, #148]	; (80009e4 <setupForReadY+0xbc>)
 8000950:	6818      	ldr	r0, [r3, #0]
 8000952:	4b23      	ldr	r3, [pc, #140]	; (80009e0 <setupForReadY+0xb8>)
 8000954:	881b      	ldrh	r3, [r3, #0]
 8000956:	2201      	movs	r2, #1
 8000958:	4619      	mov	r1, r3
 800095a:	f001 fb3f 	bl	8001fdc <HAL_GPIO_WritePin>

	GPIO_InitStructure.Pin = ym_PIN;
 800095e:	4b22      	ldr	r3, [pc, #136]	; (80009e8 <setupForReadY+0xc0>)
 8000960:	881b      	ldrh	r3, [r3, #0]
 8000962:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000964:	2301      	movs	r3, #1
 8000966:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 8000968:	2302      	movs	r3, #2
 800096a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800096c:	2303      	movs	r3, #3
 800096e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init( ym , &GPIO_InitStructure );
 8000970:	4b1e      	ldr	r3, [pc, #120]	; (80009ec <setupForReadY+0xc4>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	463a      	mov	r2, r7
 8000976:	4611      	mov	r1, r2
 8000978:	4618      	mov	r0, r3
 800097a:	f001 f9d5 	bl	8001d28 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(ym, ym_PIN, GPIO_PIN_RESET);
 800097e:	4b1b      	ldr	r3, [pc, #108]	; (80009ec <setupForReadY+0xc4>)
 8000980:	6818      	ldr	r0, [r3, #0]
 8000982:	4b19      	ldr	r3, [pc, #100]	; (80009e8 <setupForReadY+0xc0>)
 8000984:	881b      	ldrh	r3, [r3, #0]
 8000986:	2200      	movs	r2, #0
 8000988:	4619      	mov	r1, r3
 800098a:	f001 fb27 	bl	8001fdc <HAL_GPIO_WritePin>

	GPIO_InitStructure.Pin = xp_PIN;
 800098e:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <setupForReadY+0xc8>)
 8000990:	881b      	ldrh	r3, [r3, #0]
 8000992:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8000994:	2300      	movs	r3, #0
 8000996:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 8000998:	2302      	movs	r3, #2
 800099a:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init( xp , &GPIO_InitStructure );
 800099c:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <setupForReadY+0xcc>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	463a      	mov	r2, r7
 80009a2:	4611      	mov	r1, r2
 80009a4:	4618      	mov	r0, r3
 80009a6:	f001 f9bf 	bl	8001d28 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(xp, xp_PIN, GPIO_PIN_RESET);
 80009aa:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <setupForReadY+0xcc>)
 80009ac:	6818      	ldr	r0, [r3, #0]
 80009ae:	4b10      	ldr	r3, [pc, #64]	; (80009f0 <setupForReadY+0xc8>)
 80009b0:	881b      	ldrh	r3, [r3, #0]
 80009b2:	2200      	movs	r2, #0
 80009b4:	4619      	mov	r1, r3
 80009b6:	f001 fb11 	bl	8001fdc <HAL_GPIO_WritePin>

	GPIO_InitStructure.Pin = xm_PIN;
 80009ba:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <setupForReadY+0xd0>)
 80009bc:	881b      	ldrh	r3, [r3, #0]
 80009be:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 80009c0:	2303      	movs	r3, #3
 80009c2:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init( xm , &GPIO_InitStructure );
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <setupForReadY+0xd4>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	463a      	mov	r2, r7
 80009ce:	4611      	mov	r1, r2
 80009d0:	4618      	mov	r0, r3
 80009d2:	f001 f9a9 	bl	8001d28 <HAL_GPIO_Init>
}
 80009d6:	bf00      	nop
 80009d8:	3710      	adds	r7, #16
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000018 	.word	0x20000018
 80009e4:	2000000c 	.word	0x2000000c
 80009e8:	20000014 	.word	0x20000014
 80009ec:	20000004 	.word	0x20000004
 80009f0:	2000001a 	.word	0x2000001a
 80009f4:	20000010 	.word	0x20000010
 80009f8:	20000016 	.word	0x20000016
 80009fc:	20000008 	.word	0x20000008

08000a00 <setupForReadX>:

void setupForReadX() {
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.Pin = xp_PIN;
 8000a06:	4b2c      	ldr	r3, [pc, #176]	; (8000ab8 <setupForReadX+0xb8>)
 8000a08:	881b      	ldrh	r3, [r3, #0]
 8000a0a:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 8000a10:	2301      	movs	r3, #1
 8000a12:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a14:	2303      	movs	r3, #3
 8000a16:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init( xp , &GPIO_InitStructure );
 8000a18:	4b28      	ldr	r3, [pc, #160]	; (8000abc <setupForReadX+0xbc>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	463a      	mov	r2, r7
 8000a1e:	4611      	mov	r1, r2
 8000a20:	4618      	mov	r0, r3
 8000a22:	f001 f981 	bl	8001d28 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(xp, xp_PIN, GPIO_PIN_SET);
 8000a26:	4b25      	ldr	r3, [pc, #148]	; (8000abc <setupForReadX+0xbc>)
 8000a28:	6818      	ldr	r0, [r3, #0]
 8000a2a:	4b23      	ldr	r3, [pc, #140]	; (8000ab8 <setupForReadX+0xb8>)
 8000a2c:	881b      	ldrh	r3, [r3, #0]
 8000a2e:	2201      	movs	r2, #1
 8000a30:	4619      	mov	r1, r3
 8000a32:	f001 fad3 	bl	8001fdc <HAL_GPIO_WritePin>

	GPIO_InitStructure.Pin = xm_PIN;
 8000a36:	4b22      	ldr	r3, [pc, #136]	; (8000ac0 <setupForReadX+0xc0>)
 8000a38:	881b      	ldrh	r3, [r3, #0]
 8000a3a:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 8000a40:	2302      	movs	r3, #2
 8000a42:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a44:	2303      	movs	r3, #3
 8000a46:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init( xm , &GPIO_InitStructure );
 8000a48:	4b1e      	ldr	r3, [pc, #120]	; (8000ac4 <setupForReadX+0xc4>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	463a      	mov	r2, r7
 8000a4e:	4611      	mov	r1, r2
 8000a50:	4618      	mov	r0, r3
 8000a52:	f001 f969 	bl	8001d28 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(xm, xm_PIN, GPIO_PIN_RESET);
 8000a56:	4b1b      	ldr	r3, [pc, #108]	; (8000ac4 <setupForReadX+0xc4>)
 8000a58:	6818      	ldr	r0, [r3, #0]
 8000a5a:	4b19      	ldr	r3, [pc, #100]	; (8000ac0 <setupForReadX+0xc0>)
 8000a5c:	881b      	ldrh	r3, [r3, #0]
 8000a5e:	2200      	movs	r2, #0
 8000a60:	4619      	mov	r1, r3
 8000a62:	f001 fabb 	bl	8001fdc <HAL_GPIO_WritePin>

	GPIO_InitStructure.Pin = ym_PIN;
 8000a66:	4b18      	ldr	r3, [pc, #96]	; (8000ac8 <setupForReadX+0xc8>)
 8000a68:	881b      	ldrh	r3, [r3, #0]
 8000a6a:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 8000a70:	2302      	movs	r3, #2
 8000a72:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init( ym , &GPIO_InitStructure );
 8000a74:	4b15      	ldr	r3, [pc, #84]	; (8000acc <setupForReadX+0xcc>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	463a      	mov	r2, r7
 8000a7a:	4611      	mov	r1, r2
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f001 f953 	bl	8001d28 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(ym, ym_PIN, GPIO_PIN_RESET);
 8000a82:	4b12      	ldr	r3, [pc, #72]	; (8000acc <setupForReadX+0xcc>)
 8000a84:	6818      	ldr	r0, [r3, #0]
 8000a86:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <setupForReadX+0xc8>)
 8000a88:	881b      	ldrh	r3, [r3, #0]
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	f001 faa5 	bl	8001fdc <HAL_GPIO_WritePin>

	GPIO_InitStructure.Pin = yp_PIN;
 8000a92:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <setupForReadX+0xd0>)
 8000a94:	881b      	ldrh	r3, [r3, #0]
 8000a96:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init( yp , &GPIO_InitStructure );
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <setupForReadX+0xd4>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	463a      	mov	r2, r7
 8000aa6:	4611      	mov	r1, r2
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f001 f93d 	bl	8001d28 <HAL_GPIO_Init>
}
 8000aae:	bf00      	nop
 8000ab0:	3710      	adds	r7, #16
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	2000001a 	.word	0x2000001a
 8000abc:	20000010 	.word	0x20000010
 8000ac0:	20000016 	.word	0x20000016
 8000ac4:	20000008 	.word	0x20000008
 8000ac8:	20000014 	.word	0x20000014
 8000acc:	20000004 	.word	0x20000004
 8000ad0:	20000018 	.word	0x20000018
 8000ad4:	2000000c 	.word	0x2000000c

08000ad8 <readChannelXMin>:

int readChannelXMin() {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b086      	sub	sp, #24
 8000adc:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig;
	sConfig.Channel = ADC_CHANNEL_13;
 8000ade:	230d      	movs	r3, #13
 8000ae0:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60fb      	str	r3, [r7, #12]
	int config = HAL_ADC_ConfigChannel(&adcHandle, &sConfig);
 8000aea:	1d3b      	adds	r3, r7, #4
 8000aec:	4619      	mov	r1, r3
 8000aee:	480f      	ldr	r0, [pc, #60]	; (8000b2c <readChannelXMin+0x54>)
 8000af0:	f000 feb2 	bl	8001858 <HAL_ADC_ConfigChannel>
 8000af4:	4603      	mov	r3, r0
 8000af6:	613b      	str	r3, [r7, #16]
	if (config != HAL_OK)
	{
		//
	}
	HAL_Delay(10);
 8000af8:	200a      	movs	r0, #10
 8000afa:	f000 fbd3 	bl	80012a4 <HAL_Delay>
	HAL_ADC_Start(&adcHandle);
 8000afe:	480b      	ldr	r0, [pc, #44]	; (8000b2c <readChannelXMin+0x54>)
 8000b00:	f000 fcca 	bl	8001498 <HAL_ADC_Start>
	uint32_t ADCValue;
	if(HAL_ADC_PollForConversion(&adcHandle, 5) == HAL_OK) {
 8000b04:	2105      	movs	r1, #5
 8000b06:	4809      	ldr	r0, [pc, #36]	; (8000b2c <readChannelXMin+0x54>)
 8000b08:	f000 fda0 	bl	800164c <HAL_ADC_PollForConversion>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d103      	bne.n	8000b1a <readChannelXMin+0x42>
		ADCValue = HAL_ADC_GetValue(&adcHandle);
 8000b12:	4806      	ldr	r0, [pc, #24]	; (8000b2c <readChannelXMin+0x54>)
 8000b14:	f000 fe94 	bl	8001840 <HAL_ADC_GetValue>
 8000b18:	6178      	str	r0, [r7, #20]
	}
	HAL_ADC_Stop(&adcHandle);
 8000b1a:	4804      	ldr	r0, [pc, #16]	; (8000b2c <readChannelXMin+0x54>)
 8000b1c:	f000 fd6a 	bl	80015f4 <HAL_ADC_Stop>
	return ADCValue;
 8000b20:	697b      	ldr	r3, [r7, #20]
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3718      	adds	r7, #24
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	200000b4 	.word	0x200000b4

08000b30 <readTouchY>:

int readTouchY() {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af02      	add	r7, sp, #8
	setupForReadY();
 8000b36:	f7ff fef7 	bl	8000928 <setupForReadY>
	//return readChannelXMin();
	return map(readChannelXMin(), TS_MINY, TS_MAXY, 0, 480);
 8000b3a:	f7ff ffcd 	bl	8000ad8 <readChannelXMin>
 8000b3e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000b42:	9300      	str	r3, [sp, #0]
 8000b44:	2300      	movs	r3, #0
 8000b46:	f640 629c 	movw	r2, #3740	; 0xe9c
 8000b4a:	f240 1127 	movw	r1, #295	; 0x127
 8000b4e:	f7ff febf 	bl	80008d0 <map>
 8000b52:	4603      	mov	r3, r0
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
	...

08000b5c <readChannelYPlus>:

int readChannelYPlus() {
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig;
	sConfig.Channel = ADC_CHANNEL_12;
 8000b62:	230c      	movs	r3, #12
 8000b64:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b66:	2301      	movs	r3, #1
 8000b68:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
	int config = HAL_ADC_ConfigChannel(&adcHandle, &sConfig);
 8000b6e:	1d3b      	adds	r3, r7, #4
 8000b70:	4619      	mov	r1, r3
 8000b72:	480f      	ldr	r0, [pc, #60]	; (8000bb0 <readChannelYPlus+0x54>)
 8000b74:	f000 fe70 	bl	8001858 <HAL_ADC_ConfigChannel>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	613b      	str	r3, [r7, #16]
	if (config != HAL_OK)
	{
		//
	}
	HAL_Delay(10);
 8000b7c:	200a      	movs	r0, #10
 8000b7e:	f000 fb91 	bl	80012a4 <HAL_Delay>
	HAL_ADC_Start(&adcHandle);
 8000b82:	480b      	ldr	r0, [pc, #44]	; (8000bb0 <readChannelYPlus+0x54>)
 8000b84:	f000 fc88 	bl	8001498 <HAL_ADC_Start>
	uint32_t ADCValue;
	if(HAL_ADC_PollForConversion(&adcHandle, 5) == HAL_OK) {
 8000b88:	2105      	movs	r1, #5
 8000b8a:	4809      	ldr	r0, [pc, #36]	; (8000bb0 <readChannelYPlus+0x54>)
 8000b8c:	f000 fd5e 	bl	800164c <HAL_ADC_PollForConversion>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d103      	bne.n	8000b9e <readChannelYPlus+0x42>
		ADCValue = HAL_ADC_GetValue(&adcHandle);
 8000b96:	4806      	ldr	r0, [pc, #24]	; (8000bb0 <readChannelYPlus+0x54>)
 8000b98:	f000 fe52 	bl	8001840 <HAL_ADC_GetValue>
 8000b9c:	6178      	str	r0, [r7, #20]
	}
	HAL_ADC_Stop(&adcHandle);
 8000b9e:	4804      	ldr	r0, [pc, #16]	; (8000bb0 <readChannelYPlus+0x54>)
 8000ba0:	f000 fd28 	bl	80015f4 <HAL_ADC_Stop>
	return ADCValue;
 8000ba4:	697b      	ldr	r3, [r7, #20]
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3718      	adds	r7, #24
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	200000b4 	.word	0x200000b4

08000bb4 <readTouchX>:

int readTouchX() {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af02      	add	r7, sp, #8
	setupForReadX();
 8000bba:	f7ff ff21 	bl	8000a00 <setupForReadX>
	//return readChannelYPlus();
	return map(readChannelYPlus(), TS_MINX, TS_MAXX, 0, 320);
 8000bbe:	f7ff ffcd 	bl	8000b5c <readChannelYPlus>
 8000bc2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000bc6:	9300      	str	r3, [sp, #0]
 8000bc8:	2300      	movs	r3, #0
 8000bca:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000bce:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8000bd2:	f7ff fe7d 	bl	80008d0 <map>
 8000bd6:	4603      	mov	r3, r0
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
	...

08000be0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af04      	add	r7, sp, #16
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000be6:	f000 fafb 	bl	80011e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bea:	f000 f83f 	bl	8000c6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bee:	f000 f90d 	bl	8000e0c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000bf2:	f000 f897 	bl	8000d24 <MX_ADC1_Init>
  MX_SPI1_Init();
 8000bf6:	f000 f8d3 	bl	8000da0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	Touch_Init(&hadc1);
 8000bfa:	4817      	ldr	r0, [pc, #92]	; (8000c58 <main+0x78>)
 8000bfc:	f7ff fe84 	bl	8000908 <Touch_Init>
	LCD_Init(&hspi1, LCD_CS_GPIO_Port, LCD_CS_Pin, LCD_DC_GPIO_Port, LCD_DC_Pin, LCD_RST_GPIO_Port, LCD_RST_Pin);
 8000c00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c04:	9302      	str	r3, [sp, #8]
 8000c06:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <main+0x7c>)
 8000c08:	9301      	str	r3, [sp, #4]
 8000c0a:	2380      	movs	r3, #128	; 0x80
 8000c0c:	9300      	str	r3, [sp, #0]
 8000c0e:	4b14      	ldr	r3, [pc, #80]	; (8000c60 <main+0x80>)
 8000c10:	2240      	movs	r2, #64	; 0x40
 8000c12:	4914      	ldr	r1, [pc, #80]	; (8000c64 <main+0x84>)
 8000c14:	4814      	ldr	r0, [pc, #80]	; (8000c68 <main+0x88>)
 8000c16:	f7ff fb81 	bl	800031c <LCD_Init>
	LCD_setRotation(3);
 8000c1a:	2003      	movs	r0, #3
 8000c1c:	f7ff fe0c 	bl	8000838 <LCD_setRotation>
	LCD_Fill(HX8357_BLACK);
 8000c20:	2000      	movs	r0, #0
 8000c22:	f7ff fcf1 	bl	8000608 <LCD_Fill>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		int x_coor = readTouchX();
 8000c26:	f7ff ffc5 	bl	8000bb4 <readTouchX>
 8000c2a:	6078      	str	r0, [r7, #4]
		int y_coor = readTouchY();
 8000c2c:	f7ff ff80 	bl	8000b30 <readTouchY>
 8000c30:	6038      	str	r0, [r7, #0]
		if(x_coor > 0 && y_coor > 0) {
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	dd0b      	ble.n	8000c50 <main+0x70>
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	dd08      	ble.n	8000c50 <main+0x70>
			LCD_drawCircle(x_coor, y_coor, 1, HX8357_WHITE);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	b218      	sxth	r0, r3
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	b219      	sxth	r1, r3
 8000c46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	f7ff fd20 	bl	8000690 <LCD_drawCircle>
		}
		HAL_Delay(10);
 8000c50:	200a      	movs	r0, #10
 8000c52:	f000 fb27 	bl	80012a4 <HAL_Delay>
	while (1) {
 8000c56:	e7e6      	b.n	8000c26 <main+0x46>
 8000c58:	200000e4 	.word	0x200000e4
 8000c5c:	40010800 	.word	0x40010800
 8000c60:	40011000 	.word	0x40011000
 8000c64:	40010c00 	.word	0x40010c00
 8000c68:	20000114 	.word	0x20000114

08000c6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b094      	sub	sp, #80	; 0x50
 8000c70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c76:	2228      	movs	r2, #40	; 0x28
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f002 f98d 	bl	8002f9a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c90:	1d3b      	adds	r3, r7, #4
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
 8000c9a:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ca0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000caa:	2301      	movs	r3, #1
 8000cac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cb2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cb6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000cb8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000cbc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f001 f9a2 	bl	800200c <HAL_RCC_OscConfig>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000cce:	f000 f945 	bl	8000f5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cd2:	230f      	movs	r3, #15
 8000cd4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ce2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	2102      	movs	r1, #2
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f001 fc0c 	bl	800250c <HAL_RCC_ClockConfig>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000cfa:	f000 f92f 	bl	8000f5c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000d02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d06:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d08:	1d3b      	adds	r3, r7, #4
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f001 fd86 	bl	800281c <HAL_RCCEx_PeriphCLKConfig>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000d16:	f000 f921 	bl	8000f5c <Error_Handler>
  }
}
 8000d1a:	bf00      	nop
 8000d1c:	3750      	adds	r7, #80	; 0x50
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
	...

08000d24 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d2a:	1d3b      	adds	r3, r7, #4
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000d34:	4b18      	ldr	r3, [pc, #96]	; (8000d98 <MX_ADC1_Init+0x74>)
 8000d36:	4a19      	ldr	r2, [pc, #100]	; (8000d9c <MX_ADC1_Init+0x78>)
 8000d38:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d3a:	4b17      	ldr	r3, [pc, #92]	; (8000d98 <MX_ADC1_Init+0x74>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d40:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <MX_ADC1_Init+0x74>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d46:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <MX_ADC1_Init+0x74>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d4c:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <MX_ADC1_Init+0x74>)
 8000d4e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000d52:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d54:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <MX_ADC1_Init+0x74>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000d5a:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <MX_ADC1_Init+0x74>)
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d60:	480d      	ldr	r0, [pc, #52]	; (8000d98 <MX_ADC1_Init+0x74>)
 8000d62:	f000 fac1 	bl	80012e8 <HAL_ADC_Init>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000d6c:	f000 f8f6 	bl	8000f5c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000d70:	230c      	movs	r3, #12
 8000d72:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d74:	2301      	movs	r3, #1
 8000d76:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4805      	ldr	r0, [pc, #20]	; (8000d98 <MX_ADC1_Init+0x74>)
 8000d82:	f000 fd69 	bl	8001858 <HAL_ADC_ConfigChannel>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000d8c:	f000 f8e6 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d90:	bf00      	nop
 8000d92:	3710      	adds	r7, #16
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	200000e4 	.word	0x200000e4
 8000d9c:	40012400 	.word	0x40012400

08000da0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000da4:	4b17      	ldr	r3, [pc, #92]	; (8000e04 <MX_SPI1_Init+0x64>)
 8000da6:	4a18      	ldr	r2, [pc, #96]	; (8000e08 <MX_SPI1_Init+0x68>)
 8000da8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000daa:	4b16      	ldr	r3, [pc, #88]	; (8000e04 <MX_SPI1_Init+0x64>)
 8000dac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000db0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000db2:	4b14      	ldr	r3, [pc, #80]	; (8000e04 <MX_SPI1_Init+0x64>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000db8:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <MX_SPI1_Init+0x64>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dbe:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <MX_SPI1_Init+0x64>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dc4:	4b0f      	ldr	r3, [pc, #60]	; (8000e04 <MX_SPI1_Init+0x64>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000dca:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <MX_SPI1_Init+0x64>)
 8000dcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dd0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000dd2:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <MX_SPI1_Init+0x64>)
 8000dd4:	2208      	movs	r2, #8
 8000dd6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dd8:	4b0a      	ldr	r3, [pc, #40]	; (8000e04 <MX_SPI1_Init+0x64>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dde:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <MX_SPI1_Init+0x64>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000de4:	4b07      	ldr	r3, [pc, #28]	; (8000e04 <MX_SPI1_Init+0x64>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000dea:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <MX_SPI1_Init+0x64>)
 8000dec:	220a      	movs	r2, #10
 8000dee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000df0:	4804      	ldr	r0, [pc, #16]	; (8000e04 <MX_SPI1_Init+0x64>)
 8000df2:	f001 fe85 	bl	8002b00 <HAL_SPI_Init>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000dfc:	f000 f8ae 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20000114 	.word	0x20000114
 8000e08:	40013000 	.word	0x40013000

08000e0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b088      	sub	sp, #32
 8000e10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e12:	f107 0310 	add.w	r3, r7, #16
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]
 8000e1c:	609a      	str	r2, [r3, #8]
 8000e1e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e20:	4b4a      	ldr	r3, [pc, #296]	; (8000f4c <MX_GPIO_Init+0x140>)
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	4a49      	ldr	r2, [pc, #292]	; (8000f4c <MX_GPIO_Init+0x140>)
 8000e26:	f043 0320 	orr.w	r3, r3, #32
 8000e2a:	6193      	str	r3, [r2, #24]
 8000e2c:	4b47      	ldr	r3, [pc, #284]	; (8000f4c <MX_GPIO_Init+0x140>)
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	f003 0320 	and.w	r3, r3, #32
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e38:	4b44      	ldr	r3, [pc, #272]	; (8000f4c <MX_GPIO_Init+0x140>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	4a43      	ldr	r2, [pc, #268]	; (8000f4c <MX_GPIO_Init+0x140>)
 8000e3e:	f043 0310 	orr.w	r3, r3, #16
 8000e42:	6193      	str	r3, [r2, #24]
 8000e44:	4b41      	ldr	r3, [pc, #260]	; (8000f4c <MX_GPIO_Init+0x140>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	f003 0310 	and.w	r3, r3, #16
 8000e4c:	60bb      	str	r3, [r7, #8]
 8000e4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e50:	4b3e      	ldr	r3, [pc, #248]	; (8000f4c <MX_GPIO_Init+0x140>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	4a3d      	ldr	r2, [pc, #244]	; (8000f4c <MX_GPIO_Init+0x140>)
 8000e56:	f043 0304 	orr.w	r3, r3, #4
 8000e5a:	6193      	str	r3, [r2, #24]
 8000e5c:	4b3b      	ldr	r3, [pc, #236]	; (8000f4c <MX_GPIO_Init+0x140>)
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	f003 0304 	and.w	r3, r3, #4
 8000e64:	607b      	str	r3, [r7, #4]
 8000e66:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e68:	4b38      	ldr	r3, [pc, #224]	; (8000f4c <MX_GPIO_Init+0x140>)
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	4a37      	ldr	r2, [pc, #220]	; (8000f4c <MX_GPIO_Init+0x140>)
 8000e6e:	f043 0308 	orr.w	r3, r3, #8
 8000e72:	6193      	str	r3, [r2, #24]
 8000e74:	4b35      	ldr	r3, [pc, #212]	; (8000f4c <MX_GPIO_Init+0x140>)
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	f003 0308 	and.w	r3, r3, #8
 8000e7c:	603b      	str	r3, [r7, #0]
 8000e7e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8000e80:	2200      	movs	r2, #0
 8000e82:	2180      	movs	r1, #128	; 0x80
 8000e84:	4832      	ldr	r0, [pc, #200]	; (8000f50 <MX_GPIO_Init+0x144>)
 8000e86:	f001 f8a9 	bl	8001fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RST_Pin|YMIN_Pin, GPIO_PIN_RESET);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000e90:	4830      	ldr	r0, [pc, #192]	; (8000f54 <MX_GPIO_Init+0x148>)
 8000e92:	f001 f8a3 	bl	8001fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2140      	movs	r1, #64	; 0x40
 8000e9a:	482f      	ldr	r0, [pc, #188]	; (8000f58 <MX_GPIO_Init+0x14c>)
 8000e9c:	f001 f89e 	bl	8001fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : XMIN_Pin */
  GPIO_InitStruct.Pin = XMIN_Pin;
 8000ea0:	2308      	movs	r3, #8
 8000ea2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(XMIN_GPIO_Port, &GPIO_InitStruct);
 8000eac:	f107 0310 	add.w	r3, r7, #16
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4827      	ldr	r0, [pc, #156]	; (8000f50 <MX_GPIO_Init+0x144>)
 8000eb4:	f000 ff38 	bl	8001d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 8000eb8:	2380      	movs	r3, #128	; 0x80
 8000eba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 8000ec8:	f107 0310 	add.w	r3, r7, #16
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4820      	ldr	r0, [pc, #128]	; (8000f50 <MX_GPIO_Init+0x144>)
 8000ed0:	f000 ff2a 	bl	8001d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8000ed4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ed8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eda:	2301      	movs	r3, #1
 8000edc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8000ee6:	f107 0310 	add.w	r3, r7, #16
 8000eea:	4619      	mov	r1, r3
 8000eec:	4819      	ldr	r0, [pc, #100]	; (8000f54 <MX_GPIO_Init+0x148>)
 8000eee:	f000 ff1b 	bl	8001d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : YMIN_Pin */
  GPIO_InitStruct.Pin = YMIN_Pin;
 8000ef2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ef6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000efc:	2302      	movs	r3, #2
 8000efe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f00:	2303      	movs	r3, #3
 8000f02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(YMIN_GPIO_Port, &GPIO_InitStruct);
 8000f04:	f107 0310 	add.w	r3, r7, #16
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4812      	ldr	r0, [pc, #72]	; (8000f54 <MX_GPIO_Init+0x148>)
 8000f0c:	f000 ff0c 	bl	8001d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : XPLUS_Pin */
  GPIO_InitStruct.Pin = XPLUS_Pin;
 8000f10:	2320      	movs	r3, #32
 8000f12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(XPLUS_GPIO_Port, &GPIO_InitStruct);
 8000f1c:	f107 0310 	add.w	r3, r7, #16
 8000f20:	4619      	mov	r1, r3
 8000f22:	480d      	ldr	r0, [pc, #52]	; (8000f58 <MX_GPIO_Init+0x14c>)
 8000f24:	f000 ff00 	bl	8001d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8000f28:	2340      	movs	r3, #64	; 0x40
 8000f2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f34:	2302      	movs	r3, #2
 8000f36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8000f38:	f107 0310 	add.w	r3, r7, #16
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4806      	ldr	r0, [pc, #24]	; (8000f58 <MX_GPIO_Init+0x14c>)
 8000f40:	f000 fef2 	bl	8001d28 <HAL_GPIO_Init>

}
 8000f44:	bf00      	nop
 8000f46:	3720      	adds	r7, #32
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	40011000 	.word	0x40011000
 8000f54:	40010800 	.word	0x40010800
 8000f58:	40010c00 	.word	0x40010c00

08000f5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr

08000f68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f6e:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <HAL_MspInit+0x5c>)
 8000f70:	699b      	ldr	r3, [r3, #24]
 8000f72:	4a14      	ldr	r2, [pc, #80]	; (8000fc4 <HAL_MspInit+0x5c>)
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	6193      	str	r3, [r2, #24]
 8000f7a:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <HAL_MspInit+0x5c>)
 8000f7c:	699b      	ldr	r3, [r3, #24]
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	60bb      	str	r3, [r7, #8]
 8000f84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f86:	4b0f      	ldr	r3, [pc, #60]	; (8000fc4 <HAL_MspInit+0x5c>)
 8000f88:	69db      	ldr	r3, [r3, #28]
 8000f8a:	4a0e      	ldr	r2, [pc, #56]	; (8000fc4 <HAL_MspInit+0x5c>)
 8000f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f90:	61d3      	str	r3, [r2, #28]
 8000f92:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <HAL_MspInit+0x5c>)
 8000f94:	69db      	ldr	r3, [r3, #28]
 8000f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9a:	607b      	str	r3, [r7, #4]
 8000f9c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f9e:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <HAL_MspInit+0x60>)
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	4a04      	ldr	r2, [pc, #16]	; (8000fc8 <HAL_MspInit+0x60>)
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	3714      	adds	r7, #20
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	40010000 	.word	0x40010000

08000fcc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b088      	sub	sp, #32
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	f107 0310 	add.w	r3, r7, #16
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a14      	ldr	r2, [pc, #80]	; (8001038 <HAL_ADC_MspInit+0x6c>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d121      	bne.n	8001030 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fec:	4b13      	ldr	r3, [pc, #76]	; (800103c <HAL_ADC_MspInit+0x70>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	4a12      	ldr	r2, [pc, #72]	; (800103c <HAL_ADC_MspInit+0x70>)
 8000ff2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ff6:	6193      	str	r3, [r2, #24]
 8000ff8:	4b10      	ldr	r3, [pc, #64]	; (800103c <HAL_ADC_MspInit+0x70>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001004:	4b0d      	ldr	r3, [pc, #52]	; (800103c <HAL_ADC_MspInit+0x70>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	4a0c      	ldr	r2, [pc, #48]	; (800103c <HAL_ADC_MspInit+0x70>)
 800100a:	f043 0310 	orr.w	r3, r3, #16
 800100e:	6193      	str	r3, [r2, #24]
 8001010:	4b0a      	ldr	r3, [pc, #40]	; (800103c <HAL_ADC_MspInit+0x70>)
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	f003 0310 	and.w	r3, r3, #16
 8001018:	60bb      	str	r3, [r7, #8]
 800101a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PC2     ------> ADC1_IN12 
    */
    GPIO_InitStruct.Pin = YPLUS_Pin;
 800101c:	2304      	movs	r3, #4
 800101e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001020:	2303      	movs	r3, #3
 8001022:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(YPLUS_GPIO_Port, &GPIO_InitStruct);
 8001024:	f107 0310 	add.w	r3, r7, #16
 8001028:	4619      	mov	r1, r3
 800102a:	4805      	ldr	r0, [pc, #20]	; (8001040 <HAL_ADC_MspInit+0x74>)
 800102c:	f000 fe7c 	bl	8001d28 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001030:	bf00      	nop
 8001032:	3720      	adds	r7, #32
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40012400 	.word	0x40012400
 800103c:	40021000 	.word	0x40021000
 8001040:	40011000 	.word	0x40011000

08001044 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b088      	sub	sp, #32
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	f107 0310 	add.w	r3, r7, #16
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a1b      	ldr	r2, [pc, #108]	; (80010cc <HAL_SPI_MspInit+0x88>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d12f      	bne.n	80010c4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001064:	4b1a      	ldr	r3, [pc, #104]	; (80010d0 <HAL_SPI_MspInit+0x8c>)
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	4a19      	ldr	r2, [pc, #100]	; (80010d0 <HAL_SPI_MspInit+0x8c>)
 800106a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800106e:	6193      	str	r3, [r2, #24]
 8001070:	4b17      	ldr	r3, [pc, #92]	; (80010d0 <HAL_SPI_MspInit+0x8c>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107c:	4b14      	ldr	r3, [pc, #80]	; (80010d0 <HAL_SPI_MspInit+0x8c>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	4a13      	ldr	r2, [pc, #76]	; (80010d0 <HAL_SPI_MspInit+0x8c>)
 8001082:	f043 0304 	orr.w	r3, r3, #4
 8001086:	6193      	str	r3, [r2, #24]
 8001088:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <HAL_SPI_MspInit+0x8c>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	f003 0304 	and.w	r3, r3, #4
 8001090:	60bb      	str	r3, [r7, #8]
 8001092:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001094:	23a0      	movs	r3, #160	; 0xa0
 8001096:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001098:	2302      	movs	r3, #2
 800109a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800109c:	2303      	movs	r3, #3
 800109e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a0:	f107 0310 	add.w	r3, r7, #16
 80010a4:	4619      	mov	r1, r3
 80010a6:	480b      	ldr	r0, [pc, #44]	; (80010d4 <HAL_SPI_MspInit+0x90>)
 80010a8:	f000 fe3e 	bl	8001d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010ac:	2340      	movs	r3, #64	; 0x40
 80010ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b8:	f107 0310 	add.w	r3, r7, #16
 80010bc:	4619      	mov	r1, r3
 80010be:	4805      	ldr	r0, [pc, #20]	; (80010d4 <HAL_SPI_MspInit+0x90>)
 80010c0:	f000 fe32 	bl	8001d28 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80010c4:	bf00      	nop
 80010c6:	3720      	adds	r7, #32
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40013000 	.word	0x40013000
 80010d0:	40021000 	.word	0x40021000
 80010d4:	40010800 	.word	0x40010800

080010d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr

080010e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <HardFault_Handler+0x4>

080010ea <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010ee:	e7fe      	b.n	80010ee <MemManage_Handler+0x4>

080010f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010f4:	e7fe      	b.n	80010f4 <BusFault_Handler+0x4>

080010f6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010fa:	e7fe      	b.n	80010fa <UsageFault_Handler+0x4>

080010fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr

08001108 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr

08001114 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	bc80      	pop	{r7}
 800111e:	4770      	bx	lr

08001120 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001124:	f000 f8a2 	bl	800126c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}

0800112c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001130:	4b15      	ldr	r3, [pc, #84]	; (8001188 <SystemInit+0x5c>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a14      	ldr	r2, [pc, #80]	; (8001188 <SystemInit+0x5c>)
 8001136:	f043 0301 	orr.w	r3, r3, #1
 800113a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800113c:	4b12      	ldr	r3, [pc, #72]	; (8001188 <SystemInit+0x5c>)
 800113e:	685a      	ldr	r2, [r3, #4]
 8001140:	4911      	ldr	r1, [pc, #68]	; (8001188 <SystemInit+0x5c>)
 8001142:	4b12      	ldr	r3, [pc, #72]	; (800118c <SystemInit+0x60>)
 8001144:	4013      	ands	r3, r2
 8001146:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001148:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <SystemInit+0x5c>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a0e      	ldr	r2, [pc, #56]	; (8001188 <SystemInit+0x5c>)
 800114e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001152:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001156:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001158:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <SystemInit+0x5c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a0a      	ldr	r2, [pc, #40]	; (8001188 <SystemInit+0x5c>)
 800115e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001162:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001164:	4b08      	ldr	r3, [pc, #32]	; (8001188 <SystemInit+0x5c>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	4a07      	ldr	r2, [pc, #28]	; (8001188 <SystemInit+0x5c>)
 800116a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800116e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001170:	4b05      	ldr	r3, [pc, #20]	; (8001188 <SystemInit+0x5c>)
 8001172:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001176:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001178:	4b05      	ldr	r3, [pc, #20]	; (8001190 <SystemInit+0x64>)
 800117a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800117e:	609a      	str	r2, [r3, #8]
#endif 
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	bc80      	pop	{r7}
 8001186:	4770      	bx	lr
 8001188:	40021000 	.word	0x40021000
 800118c:	f8ff0000 	.word	0xf8ff0000
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001194:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001196:	e003      	b.n	80011a0 <LoopCopyDataInit>

08001198 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001198:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800119a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800119c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800119e:	3104      	adds	r1, #4

080011a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80011a0:	480a      	ldr	r0, [pc, #40]	; (80011cc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80011a2:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80011a4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80011a6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80011a8:	d3f6      	bcc.n	8001198 <CopyDataInit>
  ldr r2, =_sbss
 80011aa:	4a0a      	ldr	r2, [pc, #40]	; (80011d4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80011ac:	e002      	b.n	80011b4 <LoopFillZerobss>

080011ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80011ae:	2300      	movs	r3, #0
  str r3, [r2], #4
 80011b0:	f842 3b04 	str.w	r3, [r2], #4

080011b4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80011b4:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80011b6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80011b8:	d3f9      	bcc.n	80011ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011ba:	f7ff ffb7 	bl	800112c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011be:	f001 febd 	bl	8002f3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011c2:	f7ff fd0d 	bl	8000be0 <main>
  bx lr
 80011c6:	4770      	bx	lr
  ldr r3, =_sidata
 80011c8:	0800300c 	.word	0x0800300c
  ldr r0, =_sdata
 80011cc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80011d0:	20000028 	.word	0x20000028
  ldr r2, =_sbss
 80011d4:	20000028 	.word	0x20000028
  ldr r3, = _ebss
 80011d8:	20000170 	.word	0x20000170

080011dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011dc:	e7fe      	b.n	80011dc <ADC1_2_IRQHandler>
	...

080011e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011e4:	4b08      	ldr	r3, [pc, #32]	; (8001208 <HAL_Init+0x28>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a07      	ldr	r2, [pc, #28]	; (8001208 <HAL_Init+0x28>)
 80011ea:	f043 0310 	orr.w	r3, r3, #16
 80011ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011f0:	2003      	movs	r0, #3
 80011f2:	f000 fd65 	bl	8001cc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011f6:	2000      	movs	r0, #0
 80011f8:	f000 f808 	bl	800120c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011fc:	f7ff feb4 	bl	8000f68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40022000 	.word	0x40022000

0800120c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001214:	4b12      	ldr	r3, [pc, #72]	; (8001260 <HAL_InitTick+0x54>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	4b12      	ldr	r3, [pc, #72]	; (8001264 <HAL_InitTick+0x58>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	4619      	mov	r1, r3
 800121e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001222:	fbb3 f3f1 	udiv	r3, r3, r1
 8001226:	fbb2 f3f3 	udiv	r3, r2, r3
 800122a:	4618      	mov	r0, r3
 800122c:	f000 fd6f 	bl	8001d0e <HAL_SYSTICK_Config>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e00e      	b.n	8001258 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2b0f      	cmp	r3, #15
 800123e:	d80a      	bhi.n	8001256 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001240:	2200      	movs	r2, #0
 8001242:	6879      	ldr	r1, [r7, #4]
 8001244:	f04f 30ff 	mov.w	r0, #4294967295
 8001248:	f000 fd45 	bl	8001cd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800124c:	4a06      	ldr	r2, [pc, #24]	; (8001268 <HAL_InitTick+0x5c>)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001252:	2300      	movs	r3, #0
 8001254:	e000      	b.n	8001258 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
}
 8001258:	4618      	mov	r0, r3
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	2000001c 	.word	0x2000001c
 8001264:	20000024 	.word	0x20000024
 8001268:	20000020 	.word	0x20000020

0800126c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001270:	4b05      	ldr	r3, [pc, #20]	; (8001288 <HAL_IncTick+0x1c>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	461a      	mov	r2, r3
 8001276:	4b05      	ldr	r3, [pc, #20]	; (800128c <HAL_IncTick+0x20>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4413      	add	r3, r2
 800127c:	4a03      	ldr	r2, [pc, #12]	; (800128c <HAL_IncTick+0x20>)
 800127e:	6013      	str	r3, [r2, #0]
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	bc80      	pop	{r7}
 8001286:	4770      	bx	lr
 8001288:	20000024 	.word	0x20000024
 800128c:	2000016c 	.word	0x2000016c

08001290 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  return uwTick;
 8001294:	4b02      	ldr	r3, [pc, #8]	; (80012a0 <HAL_GetTick+0x10>)
 8001296:	681b      	ldr	r3, [r3, #0]
}
 8001298:	4618      	mov	r0, r3
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr
 80012a0:	2000016c 	.word	0x2000016c

080012a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012ac:	f7ff fff0 	bl	8001290 <HAL_GetTick>
 80012b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012bc:	d005      	beq.n	80012ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012be:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <HAL_Delay+0x40>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	461a      	mov	r2, r3
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	4413      	add	r3, r2
 80012c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012ca:	bf00      	nop
 80012cc:	f7ff ffe0 	bl	8001290 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d8f7      	bhi.n	80012cc <HAL_Delay+0x28>
  {
  }
}
 80012dc:	bf00      	nop
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000024 	.word	0x20000024

080012e8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012f0:	2300      	movs	r3, #0
 80012f2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80012f4:	2300      	movs	r3, #0
 80012f6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80012f8:	2300      	movs	r3, #0
 80012fa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80012fc:	2300      	movs	r3, #0
 80012fe:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d101      	bne.n	800130a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e0be      	b.n	8001488 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001314:	2b00      	cmp	r3, #0
 8001316:	d109      	bne.n	800132c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2200      	movs	r2, #0
 8001322:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff fe50 	bl	8000fcc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f000 fbdd 	bl	8001aec <ADC_ConversionStop_Disable>
 8001332:	4603      	mov	r3, r0
 8001334:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800133a:	f003 0310 	and.w	r3, r3, #16
 800133e:	2b00      	cmp	r3, #0
 8001340:	f040 8099 	bne.w	8001476 <HAL_ADC_Init+0x18e>
 8001344:	7dfb      	ldrb	r3, [r7, #23]
 8001346:	2b00      	cmp	r3, #0
 8001348:	f040 8095 	bne.w	8001476 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001350:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001354:	f023 0302 	bic.w	r3, r3, #2
 8001358:	f043 0202 	orr.w	r2, r3, #2
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001368:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	7b1b      	ldrb	r3, [r3, #12]
 800136e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001370:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001372:	68ba      	ldr	r2, [r7, #8]
 8001374:	4313      	orrs	r3, r2
 8001376:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001380:	d003      	beq.n	800138a <HAL_ADC_Init+0xa2>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d102      	bne.n	8001390 <HAL_ADC_Init+0xa8>
 800138a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800138e:	e000      	b.n	8001392 <HAL_ADC_Init+0xaa>
 8001390:	2300      	movs	r3, #0
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	4313      	orrs	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	7d1b      	ldrb	r3, [r3, #20]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d119      	bne.n	80013d4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	7b1b      	ldrb	r3, [r3, #12]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d109      	bne.n	80013bc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	3b01      	subs	r3, #1
 80013ae:	035a      	lsls	r2, r3, #13
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013b8:	613b      	str	r3, [r7, #16]
 80013ba:	e00b      	b.n	80013d4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c0:	f043 0220 	orr.w	r2, r3, #32
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013cc:	f043 0201 	orr.w	r2, r3, #1
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	430a      	orrs	r2, r1
 80013e6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	689a      	ldr	r2, [r3, #8]
 80013ee:	4b28      	ldr	r3, [pc, #160]	; (8001490 <HAL_ADC_Init+0x1a8>)
 80013f0:	4013      	ands	r3, r2
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	6812      	ldr	r2, [r2, #0]
 80013f6:	68b9      	ldr	r1, [r7, #8]
 80013f8:	430b      	orrs	r3, r1
 80013fa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001404:	d003      	beq.n	800140e <HAL_ADC_Init+0x126>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d104      	bne.n	8001418 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	691b      	ldr	r3, [r3, #16]
 8001412:	3b01      	subs	r3, #1
 8001414:	051b      	lsls	r3, r3, #20
 8001416:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800141e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	68fa      	ldr	r2, [r7, #12]
 8001428:	430a      	orrs	r2, r1
 800142a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	689a      	ldr	r2, [r3, #8]
 8001432:	4b18      	ldr	r3, [pc, #96]	; (8001494 <HAL_ADC_Init+0x1ac>)
 8001434:	4013      	ands	r3, r2
 8001436:	68ba      	ldr	r2, [r7, #8]
 8001438:	429a      	cmp	r2, r3
 800143a:	d10b      	bne.n	8001454 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001446:	f023 0303 	bic.w	r3, r3, #3
 800144a:	f043 0201 	orr.w	r2, r3, #1
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001452:	e018      	b.n	8001486 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001458:	f023 0312 	bic.w	r3, r3, #18
 800145c:	f043 0210 	orr.w	r2, r3, #16
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001468:	f043 0201 	orr.w	r2, r3, #1
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001474:	e007      	b.n	8001486 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800147a:	f043 0210 	orr.w	r2, r3, #16
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001486:	7dfb      	ldrb	r3, [r7, #23]
}
 8001488:	4618      	mov	r0, r3
 800148a:	3718      	adds	r7, #24
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	ffe1f7fd 	.word	0xffe1f7fd
 8001494:	ff1f0efe 	.word	0xff1f0efe

08001498 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014a0:	2300      	movs	r3, #0
 80014a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d101      	bne.n	80014b2 <HAL_ADC_Start+0x1a>
 80014ae:	2302      	movs	r3, #2
 80014b0:	e098      	b.n	80015e4 <HAL_ADC_Start+0x14c>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2201      	movs	r2, #1
 80014b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f000 fac4 	bl	8001a48 <ADC_Enable>
 80014c0:	4603      	mov	r3, r0
 80014c2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	f040 8087 	bne.w	80015da <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80014d4:	f023 0301 	bic.w	r3, r3, #1
 80014d8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a41      	ldr	r2, [pc, #260]	; (80015ec <HAL_ADC_Start+0x154>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d105      	bne.n	80014f6 <HAL_ADC_Start+0x5e>
 80014ea:	4b41      	ldr	r3, [pc, #260]	; (80015f0 <HAL_ADC_Start+0x158>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d115      	bne.n	8001522 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014fa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800150c:	2b00      	cmp	r3, #0
 800150e:	d026      	beq.n	800155e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001514:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001518:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001520:	e01d      	b.n	800155e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001526:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a2f      	ldr	r2, [pc, #188]	; (80015f0 <HAL_ADC_Start+0x158>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d004      	beq.n	8001542 <HAL_ADC_Start+0xaa>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a2b      	ldr	r2, [pc, #172]	; (80015ec <HAL_ADC_Start+0x154>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d10d      	bne.n	800155e <HAL_ADC_Start+0xc6>
 8001542:	4b2b      	ldr	r3, [pc, #172]	; (80015f0 <HAL_ADC_Start+0x158>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800154a:	2b00      	cmp	r3, #0
 800154c:	d007      	beq.n	800155e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001552:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001556:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001562:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d006      	beq.n	8001578 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800156e:	f023 0206 	bic.w	r2, r3, #6
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	62da      	str	r2, [r3, #44]	; 0x2c
 8001576:	e002      	b.n	800157e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f06f 0202 	mvn.w	r2, #2
 800158e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800159a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800159e:	d113      	bne.n	80015c8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80015a4:	4a11      	ldr	r2, [pc, #68]	; (80015ec <HAL_ADC_Start+0x154>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d105      	bne.n	80015b6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80015aa:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <HAL_ADC_Start+0x158>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d108      	bne.n	80015c8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	689a      	ldr	r2, [r3, #8]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80015c4:	609a      	str	r2, [r3, #8]
 80015c6:	e00c      	b.n	80015e2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	689a      	ldr	r2, [r3, #8]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	e003      	b.n	80015e2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80015e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40012800 	.word	0x40012800
 80015f0:	40012400 	.word	0x40012400

080015f4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015fc:	2300      	movs	r3, #0
 80015fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001606:	2b01      	cmp	r3, #1
 8001608:	d101      	bne.n	800160e <HAL_ADC_Stop+0x1a>
 800160a:	2302      	movs	r3, #2
 800160c:	e01a      	b.n	8001644 <HAL_ADC_Stop+0x50>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2201      	movs	r2, #1
 8001612:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f000 fa68 	bl	8001aec <ADC_ConversionStop_Disable>
 800161c:	4603      	mov	r3, r0
 800161e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001620:	7bfb      	ldrb	r3, [r7, #15]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d109      	bne.n	800163a <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800162e:	f023 0301 	bic.w	r3, r3, #1
 8001632:	f043 0201 	orr.w	r2, r3, #1
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001642:	7bfb      	ldrb	r3, [r7, #15]
}
 8001644:	4618      	mov	r0, r3
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800164c:	b590      	push	{r4, r7, lr}
 800164e:	b087      	sub	sp, #28
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001656:	2300      	movs	r3, #0
 8001658:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800165a:	2300      	movs	r3, #0
 800165c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800165e:	2300      	movs	r3, #0
 8001660:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001662:	f7ff fe15 	bl	8001290 <HAL_GetTick>
 8001666:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001672:	2b00      	cmp	r3, #0
 8001674:	d00b      	beq.n	800168e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167a:	f043 0220 	orr.w	r2, r3, #32
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e0c8      	b.n	8001820 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001698:	2b00      	cmp	r3, #0
 800169a:	d12a      	bne.n	80016f2 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d123      	bne.n	80016f2 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80016aa:	e01a      	b.n	80016e2 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016b2:	d016      	beq.n	80016e2 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d007      	beq.n	80016ca <HAL_ADC_PollForConversion+0x7e>
 80016ba:	f7ff fde9 	bl	8001290 <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	683a      	ldr	r2, [r7, #0]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d20b      	bcs.n	80016e2 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ce:	f043 0204 	orr.w	r2, r3, #4
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e09e      	b.n	8001820 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d0dd      	beq.n	80016ac <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80016f0:	e06c      	b.n	80017cc <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80016f2:	4b4d      	ldr	r3, [pc, #308]	; (8001828 <HAL_ADC_PollForConversion+0x1dc>)
 80016f4:	681c      	ldr	r4, [r3, #0]
 80016f6:	2002      	movs	r0, #2
 80016f8:	f001 f946 	bl	8002988 <HAL_RCCEx_GetPeriphCLKFreq>
 80016fc:	4603      	mov	r3, r0
 80016fe:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	6919      	ldr	r1, [r3, #16]
 8001708:	4b48      	ldr	r3, [pc, #288]	; (800182c <HAL_ADC_PollForConversion+0x1e0>)
 800170a:	400b      	ands	r3, r1
 800170c:	2b00      	cmp	r3, #0
 800170e:	d118      	bne.n	8001742 <HAL_ADC_PollForConversion+0xf6>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	68d9      	ldr	r1, [r3, #12]
 8001716:	4b46      	ldr	r3, [pc, #280]	; (8001830 <HAL_ADC_PollForConversion+0x1e4>)
 8001718:	400b      	ands	r3, r1
 800171a:	2b00      	cmp	r3, #0
 800171c:	d111      	bne.n	8001742 <HAL_ADC_PollForConversion+0xf6>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	6919      	ldr	r1, [r3, #16]
 8001724:	4b43      	ldr	r3, [pc, #268]	; (8001834 <HAL_ADC_PollForConversion+0x1e8>)
 8001726:	400b      	ands	r3, r1
 8001728:	2b00      	cmp	r3, #0
 800172a:	d108      	bne.n	800173e <HAL_ADC_PollForConversion+0xf2>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	68d9      	ldr	r1, [r3, #12]
 8001732:	4b41      	ldr	r3, [pc, #260]	; (8001838 <HAL_ADC_PollForConversion+0x1ec>)
 8001734:	400b      	ands	r3, r1
 8001736:	2b00      	cmp	r3, #0
 8001738:	d101      	bne.n	800173e <HAL_ADC_PollForConversion+0xf2>
 800173a:	2314      	movs	r3, #20
 800173c:	e020      	b.n	8001780 <HAL_ADC_PollForConversion+0x134>
 800173e:	2329      	movs	r3, #41	; 0x29
 8001740:	e01e      	b.n	8001780 <HAL_ADC_PollForConversion+0x134>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6919      	ldr	r1, [r3, #16]
 8001748:	4b3a      	ldr	r3, [pc, #232]	; (8001834 <HAL_ADC_PollForConversion+0x1e8>)
 800174a:	400b      	ands	r3, r1
 800174c:	2b00      	cmp	r3, #0
 800174e:	d106      	bne.n	800175e <HAL_ADC_PollForConversion+0x112>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	68d9      	ldr	r1, [r3, #12]
 8001756:	4b38      	ldr	r3, [pc, #224]	; (8001838 <HAL_ADC_PollForConversion+0x1ec>)
 8001758:	400b      	ands	r3, r1
 800175a:	2b00      	cmp	r3, #0
 800175c:	d00d      	beq.n	800177a <HAL_ADC_PollForConversion+0x12e>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	6919      	ldr	r1, [r3, #16]
 8001764:	4b35      	ldr	r3, [pc, #212]	; (800183c <HAL_ADC_PollForConversion+0x1f0>)
 8001766:	400b      	ands	r3, r1
 8001768:	2b00      	cmp	r3, #0
 800176a:	d108      	bne.n	800177e <HAL_ADC_PollForConversion+0x132>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	68d9      	ldr	r1, [r3, #12]
 8001772:	4b32      	ldr	r3, [pc, #200]	; (800183c <HAL_ADC_PollForConversion+0x1f0>)
 8001774:	400b      	ands	r3, r1
 8001776:	2b00      	cmp	r3, #0
 8001778:	d101      	bne.n	800177e <HAL_ADC_PollForConversion+0x132>
 800177a:	2354      	movs	r3, #84	; 0x54
 800177c:	e000      	b.n	8001780 <HAL_ADC_PollForConversion+0x134>
 800177e:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001780:	fb02 f303 	mul.w	r3, r2, r3
 8001784:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001786:	e01d      	b.n	80017c4 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800178e:	d016      	beq.n	80017be <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d007      	beq.n	80017a6 <HAL_ADC_PollForConversion+0x15a>
 8001796:	f7ff fd7b 	bl	8001290 <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d20b      	bcs.n	80017be <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017aa:	f043 0204 	orr.w	r2, r3, #4
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e030      	b.n	8001820 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	3301      	adds	r3, #1
 80017c2:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d8dd      	bhi.n	8001788 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f06f 0212 	mvn.w	r2, #18
 80017d4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017da:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80017ec:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80017f0:	d115      	bne.n	800181e <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d111      	bne.n	800181e <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d105      	bne.n	800181e <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001816:	f043 0201 	orr.w	r2, r3, #1
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800181e:	2300      	movs	r3, #0
}
 8001820:	4618      	mov	r0, r3
 8001822:	371c      	adds	r7, #28
 8001824:	46bd      	mov	sp, r7
 8001826:	bd90      	pop	{r4, r7, pc}
 8001828:	2000001c 	.word	0x2000001c
 800182c:	24924924 	.word	0x24924924
 8001830:	00924924 	.word	0x00924924
 8001834:	12492492 	.word	0x12492492
 8001838:	00492492 	.word	0x00492492
 800183c:	00249249 	.word	0x00249249

08001840 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800184e:	4618      	mov	r0, r3
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr

08001858 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001862:	2300      	movs	r3, #0
 8001864:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001866:	2300      	movs	r3, #0
 8001868:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001870:	2b01      	cmp	r3, #1
 8001872:	d101      	bne.n	8001878 <HAL_ADC_ConfigChannel+0x20>
 8001874:	2302      	movs	r3, #2
 8001876:	e0dc      	b.n	8001a32 <HAL_ADC_ConfigChannel+0x1da>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2201      	movs	r2, #1
 800187c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	2b06      	cmp	r3, #6
 8001886:	d81c      	bhi.n	80018c2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685a      	ldr	r2, [r3, #4]
 8001892:	4613      	mov	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4413      	add	r3, r2
 8001898:	3b05      	subs	r3, #5
 800189a:	221f      	movs	r2, #31
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	43db      	mvns	r3, r3
 80018a2:	4019      	ands	r1, r3
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	6818      	ldr	r0, [r3, #0]
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685a      	ldr	r2, [r3, #4]
 80018ac:	4613      	mov	r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	4413      	add	r3, r2
 80018b2:	3b05      	subs	r3, #5
 80018b4:	fa00 f203 	lsl.w	r2, r0, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	430a      	orrs	r2, r1
 80018be:	635a      	str	r2, [r3, #52]	; 0x34
 80018c0:	e03c      	b.n	800193c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	2b0c      	cmp	r3, #12
 80018c8:	d81c      	bhi.n	8001904 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685a      	ldr	r2, [r3, #4]
 80018d4:	4613      	mov	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	4413      	add	r3, r2
 80018da:	3b23      	subs	r3, #35	; 0x23
 80018dc:	221f      	movs	r2, #31
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43db      	mvns	r3, r3
 80018e4:	4019      	ands	r1, r3
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	6818      	ldr	r0, [r3, #0]
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685a      	ldr	r2, [r3, #4]
 80018ee:	4613      	mov	r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	4413      	add	r3, r2
 80018f4:	3b23      	subs	r3, #35	; 0x23
 80018f6:	fa00 f203 	lsl.w	r2, r0, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	430a      	orrs	r2, r1
 8001900:	631a      	str	r2, [r3, #48]	; 0x30
 8001902:	e01b      	b.n	800193c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685a      	ldr	r2, [r3, #4]
 800190e:	4613      	mov	r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	4413      	add	r3, r2
 8001914:	3b41      	subs	r3, #65	; 0x41
 8001916:	221f      	movs	r2, #31
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	4019      	ands	r1, r3
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	6818      	ldr	r0, [r3, #0]
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685a      	ldr	r2, [r3, #4]
 8001928:	4613      	mov	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	4413      	add	r3, r2
 800192e:	3b41      	subs	r3, #65	; 0x41
 8001930:	fa00 f203 	lsl.w	r2, r0, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	430a      	orrs	r2, r1
 800193a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b09      	cmp	r3, #9
 8001942:	d91c      	bls.n	800197e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	68d9      	ldr	r1, [r3, #12]
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	4613      	mov	r3, r2
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	4413      	add	r3, r2
 8001954:	3b1e      	subs	r3, #30
 8001956:	2207      	movs	r2, #7
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	4019      	ands	r1, r3
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	6898      	ldr	r0, [r3, #8]
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	4613      	mov	r3, r2
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	4413      	add	r3, r2
 800196e:	3b1e      	subs	r3, #30
 8001970:	fa00 f203 	lsl.w	r2, r0, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	430a      	orrs	r2, r1
 800197a:	60da      	str	r2, [r3, #12]
 800197c:	e019      	b.n	80019b2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	6919      	ldr	r1, [r3, #16]
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	4613      	mov	r3, r2
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	4413      	add	r3, r2
 800198e:	2207      	movs	r2, #7
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	4019      	ands	r1, r3
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	6898      	ldr	r0, [r3, #8]
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	4613      	mov	r3, r2
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	4413      	add	r3, r2
 80019a6:	fa00 f203 	lsl.w	r2, r0, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	430a      	orrs	r2, r1
 80019b0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2b10      	cmp	r3, #16
 80019b8:	d003      	beq.n	80019c2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80019be:	2b11      	cmp	r3, #17
 80019c0:	d132      	bne.n	8001a28 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a1d      	ldr	r2, [pc, #116]	; (8001a3c <HAL_ADC_ConfigChannel+0x1e4>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d125      	bne.n	8001a18 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d126      	bne.n	8001a28 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	689a      	ldr	r2, [r3, #8]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80019e8:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2b10      	cmp	r3, #16
 80019f0:	d11a      	bne.n	8001a28 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019f2:	4b13      	ldr	r3, [pc, #76]	; (8001a40 <HAL_ADC_ConfigChannel+0x1e8>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a13      	ldr	r2, [pc, #76]	; (8001a44 <HAL_ADC_ConfigChannel+0x1ec>)
 80019f8:	fba2 2303 	umull	r2, r3, r2, r3
 80019fc:	0c9a      	lsrs	r2, r3, #18
 80019fe:	4613      	mov	r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4413      	add	r3, r2
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a08:	e002      	b.n	8001a10 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1f9      	bne.n	8001a0a <HAL_ADC_ConfigChannel+0x1b2>
 8001a16:	e007      	b.n	8001a28 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1c:	f043 0220 	orr.w	r2, r3, #32
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3714      	adds	r7, #20
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr
 8001a3c:	40012400 	.word	0x40012400
 8001a40:	2000001c 	.word	0x2000001c
 8001a44:	431bde83 	.word	0x431bde83

08001a48 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a50:	2300      	movs	r3, #0
 8001a52:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001a54:	2300      	movs	r3, #0
 8001a56:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d039      	beq.n	8001ada <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	689a      	ldr	r2, [r3, #8]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f042 0201 	orr.w	r2, r2, #1
 8001a74:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a76:	4b1b      	ldr	r3, [pc, #108]	; (8001ae4 <ADC_Enable+0x9c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a1b      	ldr	r2, [pc, #108]	; (8001ae8 <ADC_Enable+0xa0>)
 8001a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a80:	0c9b      	lsrs	r3, r3, #18
 8001a82:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a84:	e002      	b.n	8001a8c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1f9      	bne.n	8001a86 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a92:	f7ff fbfd 	bl	8001290 <HAL_GetTick>
 8001a96:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a98:	e018      	b.n	8001acc <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a9a:	f7ff fbf9 	bl	8001290 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d911      	bls.n	8001acc <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aac:	f043 0210 	orr.w	r2, r3, #16
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab8:	f043 0201 	orr.w	r2, r3, #1
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e007      	b.n	8001adc <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d1df      	bne.n	8001a9a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3710      	adds	r7, #16
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	2000001c 	.word	0x2000001c
 8001ae8:	431bde83 	.word	0x431bde83

08001aec <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001af4:	2300      	movs	r3, #0
 8001af6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d127      	bne.n	8001b56 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f022 0201 	bic.w	r2, r2, #1
 8001b14:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b16:	f7ff fbbb 	bl	8001290 <HAL_GetTick>
 8001b1a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b1c:	e014      	b.n	8001b48 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b1e:	f7ff fbb7 	bl	8001290 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d90d      	bls.n	8001b48 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b30:	f043 0210 	orr.w	r2, r3, #16
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b3c:	f043 0201 	orr.w	r2, r3, #1
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e007      	b.n	8001b58 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d0e3      	beq.n	8001b1e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b70:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b76:	68ba      	ldr	r2, [r7, #8]
 8001b78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b92:	4a04      	ldr	r2, [pc, #16]	; (8001ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	60d3      	str	r3, [r2, #12]
}
 8001b98:	bf00      	nop
 8001b9a:	3714      	adds	r7, #20
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bc80      	pop	{r7}
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	e000ed00 	.word	0xe000ed00

08001ba8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bac:	4b04      	ldr	r3, [pc, #16]	; (8001bc0 <__NVIC_GetPriorityGrouping+0x18>)
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	0a1b      	lsrs	r3, r3, #8
 8001bb2:	f003 0307 	and.w	r3, r3, #7
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bc80      	pop	{r7}
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	6039      	str	r1, [r7, #0]
 8001bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	db0a      	blt.n	8001bee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	b2da      	uxtb	r2, r3
 8001bdc:	490c      	ldr	r1, [pc, #48]	; (8001c10 <__NVIC_SetPriority+0x4c>)
 8001bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be2:	0112      	lsls	r2, r2, #4
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	440b      	add	r3, r1
 8001be8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bec:	e00a      	b.n	8001c04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	4908      	ldr	r1, [pc, #32]	; (8001c14 <__NVIC_SetPriority+0x50>)
 8001bf4:	79fb      	ldrb	r3, [r7, #7]
 8001bf6:	f003 030f 	and.w	r3, r3, #15
 8001bfa:	3b04      	subs	r3, #4
 8001bfc:	0112      	lsls	r2, r2, #4
 8001bfe:	b2d2      	uxtb	r2, r2
 8001c00:	440b      	add	r3, r1
 8001c02:	761a      	strb	r2, [r3, #24]
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	e000e100 	.word	0xe000e100
 8001c14:	e000ed00 	.word	0xe000ed00

08001c18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b089      	sub	sp, #36	; 0x24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f1c3 0307 	rsb	r3, r3, #7
 8001c32:	2b04      	cmp	r3, #4
 8001c34:	bf28      	it	cs
 8001c36:	2304      	movcs	r3, #4
 8001c38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	2b06      	cmp	r3, #6
 8001c40:	d902      	bls.n	8001c48 <NVIC_EncodePriority+0x30>
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	3b03      	subs	r3, #3
 8001c46:	e000      	b.n	8001c4a <NVIC_EncodePriority+0x32>
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	43da      	mvns	r2, r3
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	401a      	ands	r2, r3
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c60:	f04f 31ff 	mov.w	r1, #4294967295
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6a:	43d9      	mvns	r1, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c70:	4313      	orrs	r3, r2
         );
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3724      	adds	r7, #36	; 0x24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr

08001c7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c8c:	d301      	bcc.n	8001c92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e00f      	b.n	8001cb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c92:	4a0a      	ldr	r2, [pc, #40]	; (8001cbc <SysTick_Config+0x40>)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3b01      	subs	r3, #1
 8001c98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c9a:	210f      	movs	r1, #15
 8001c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca0:	f7ff ff90 	bl	8001bc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ca4:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <SysTick_Config+0x40>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001caa:	4b04      	ldr	r3, [pc, #16]	; (8001cbc <SysTick_Config+0x40>)
 8001cac:	2207      	movs	r2, #7
 8001cae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	e000e010 	.word	0xe000e010

08001cc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f7ff ff49 	bl	8001b60 <__NVIC_SetPriorityGrouping>
}
 8001cce:	bf00      	nop
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b086      	sub	sp, #24
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	4603      	mov	r3, r0
 8001cde:	60b9      	str	r1, [r7, #8]
 8001ce0:	607a      	str	r2, [r7, #4]
 8001ce2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ce8:	f7ff ff5e 	bl	8001ba8 <__NVIC_GetPriorityGrouping>
 8001cec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	68b9      	ldr	r1, [r7, #8]
 8001cf2:	6978      	ldr	r0, [r7, #20]
 8001cf4:	f7ff ff90 	bl	8001c18 <NVIC_EncodePriority>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cfe:	4611      	mov	r1, r2
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff ff5f 	bl	8001bc4 <__NVIC_SetPriority>
}
 8001d06:	bf00      	nop
 8001d08:	3718      	adds	r7, #24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b082      	sub	sp, #8
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f7ff ffb0 	bl	8001c7c <SysTick_Config>
 8001d1c:	4603      	mov	r3, r0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
	...

08001d28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b08b      	sub	sp, #44	; 0x2c
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d32:	2300      	movs	r3, #0
 8001d34:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d36:	2300      	movs	r3, #0
 8001d38:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d3a:	e127      	b.n	8001f8c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	69fa      	ldr	r2, [r7, #28]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	f040 8116 	bne.w	8001f86 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	2b12      	cmp	r3, #18
 8001d60:	d034      	beq.n	8001dcc <HAL_GPIO_Init+0xa4>
 8001d62:	2b12      	cmp	r3, #18
 8001d64:	d80d      	bhi.n	8001d82 <HAL_GPIO_Init+0x5a>
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d02b      	beq.n	8001dc2 <HAL_GPIO_Init+0x9a>
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d804      	bhi.n	8001d78 <HAL_GPIO_Init+0x50>
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d031      	beq.n	8001dd6 <HAL_GPIO_Init+0xae>
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d01c      	beq.n	8001db0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d76:	e048      	b.n	8001e0a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001d78:	2b03      	cmp	r3, #3
 8001d7a:	d043      	beq.n	8001e04 <HAL_GPIO_Init+0xdc>
 8001d7c:	2b11      	cmp	r3, #17
 8001d7e:	d01b      	beq.n	8001db8 <HAL_GPIO_Init+0x90>
          break;
 8001d80:	e043      	b.n	8001e0a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001d82:	4a89      	ldr	r2, [pc, #548]	; (8001fa8 <HAL_GPIO_Init+0x280>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d026      	beq.n	8001dd6 <HAL_GPIO_Init+0xae>
 8001d88:	4a87      	ldr	r2, [pc, #540]	; (8001fa8 <HAL_GPIO_Init+0x280>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d806      	bhi.n	8001d9c <HAL_GPIO_Init+0x74>
 8001d8e:	4a87      	ldr	r2, [pc, #540]	; (8001fac <HAL_GPIO_Init+0x284>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d020      	beq.n	8001dd6 <HAL_GPIO_Init+0xae>
 8001d94:	4a86      	ldr	r2, [pc, #536]	; (8001fb0 <HAL_GPIO_Init+0x288>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d01d      	beq.n	8001dd6 <HAL_GPIO_Init+0xae>
          break;
 8001d9a:	e036      	b.n	8001e0a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001d9c:	4a85      	ldr	r2, [pc, #532]	; (8001fb4 <HAL_GPIO_Init+0x28c>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d019      	beq.n	8001dd6 <HAL_GPIO_Init+0xae>
 8001da2:	4a85      	ldr	r2, [pc, #532]	; (8001fb8 <HAL_GPIO_Init+0x290>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d016      	beq.n	8001dd6 <HAL_GPIO_Init+0xae>
 8001da8:	4a84      	ldr	r2, [pc, #528]	; (8001fbc <HAL_GPIO_Init+0x294>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d013      	beq.n	8001dd6 <HAL_GPIO_Init+0xae>
          break;
 8001dae:	e02c      	b.n	8001e0a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	623b      	str	r3, [r7, #32]
          break;
 8001db6:	e028      	b.n	8001e0a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	623b      	str	r3, [r7, #32]
          break;
 8001dc0:	e023      	b.n	8001e0a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	3308      	adds	r3, #8
 8001dc8:	623b      	str	r3, [r7, #32]
          break;
 8001dca:	e01e      	b.n	8001e0a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	330c      	adds	r3, #12
 8001dd2:	623b      	str	r3, [r7, #32]
          break;
 8001dd4:	e019      	b.n	8001e0a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d102      	bne.n	8001de4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001dde:	2304      	movs	r3, #4
 8001de0:	623b      	str	r3, [r7, #32]
          break;
 8001de2:	e012      	b.n	8001e0a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d105      	bne.n	8001df8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dec:	2308      	movs	r3, #8
 8001dee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	69fa      	ldr	r2, [r7, #28]
 8001df4:	611a      	str	r2, [r3, #16]
          break;
 8001df6:	e008      	b.n	8001e0a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001df8:	2308      	movs	r3, #8
 8001dfa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	69fa      	ldr	r2, [r7, #28]
 8001e00:	615a      	str	r2, [r3, #20]
          break;
 8001e02:	e002      	b.n	8001e0a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e04:	2300      	movs	r3, #0
 8001e06:	623b      	str	r3, [r7, #32]
          break;
 8001e08:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	2bff      	cmp	r3, #255	; 0xff
 8001e0e:	d801      	bhi.n	8001e14 <HAL_GPIO_Init+0xec>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	e001      	b.n	8001e18 <HAL_GPIO_Init+0xf0>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	3304      	adds	r3, #4
 8001e18:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	2bff      	cmp	r3, #255	; 0xff
 8001e1e:	d802      	bhi.n	8001e26 <HAL_GPIO_Init+0xfe>
 8001e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	e002      	b.n	8001e2c <HAL_GPIO_Init+0x104>
 8001e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e28:	3b08      	subs	r3, #8
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	210f      	movs	r1, #15
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	401a      	ands	r2, r3
 8001e3e:	6a39      	ldr	r1, [r7, #32]
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	fa01 f303 	lsl.w	r3, r1, r3
 8001e46:	431a      	orrs	r2, r3
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f000 8096 	beq.w	8001f86 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e5a:	4b59      	ldr	r3, [pc, #356]	; (8001fc0 <HAL_GPIO_Init+0x298>)
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	4a58      	ldr	r2, [pc, #352]	; (8001fc0 <HAL_GPIO_Init+0x298>)
 8001e60:	f043 0301 	orr.w	r3, r3, #1
 8001e64:	6193      	str	r3, [r2, #24]
 8001e66:	4b56      	ldr	r3, [pc, #344]	; (8001fc0 <HAL_GPIO_Init+0x298>)
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	60bb      	str	r3, [r7, #8]
 8001e70:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e72:	4a54      	ldr	r2, [pc, #336]	; (8001fc4 <HAL_GPIO_Init+0x29c>)
 8001e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e76:	089b      	lsrs	r3, r3, #2
 8001e78:	3302      	adds	r3, #2
 8001e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e7e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e82:	f003 0303 	and.w	r3, r3, #3
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	220f      	movs	r2, #15
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	68fa      	ldr	r2, [r7, #12]
 8001e92:	4013      	ands	r3, r2
 8001e94:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a4b      	ldr	r2, [pc, #300]	; (8001fc8 <HAL_GPIO_Init+0x2a0>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d013      	beq.n	8001ec6 <HAL_GPIO_Init+0x19e>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a4a      	ldr	r2, [pc, #296]	; (8001fcc <HAL_GPIO_Init+0x2a4>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d00d      	beq.n	8001ec2 <HAL_GPIO_Init+0x19a>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a49      	ldr	r2, [pc, #292]	; (8001fd0 <HAL_GPIO_Init+0x2a8>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d007      	beq.n	8001ebe <HAL_GPIO_Init+0x196>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a48      	ldr	r2, [pc, #288]	; (8001fd4 <HAL_GPIO_Init+0x2ac>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d101      	bne.n	8001eba <HAL_GPIO_Init+0x192>
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e006      	b.n	8001ec8 <HAL_GPIO_Init+0x1a0>
 8001eba:	2304      	movs	r3, #4
 8001ebc:	e004      	b.n	8001ec8 <HAL_GPIO_Init+0x1a0>
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	e002      	b.n	8001ec8 <HAL_GPIO_Init+0x1a0>
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e000      	b.n	8001ec8 <HAL_GPIO_Init+0x1a0>
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eca:	f002 0203 	and.w	r2, r2, #3
 8001ece:	0092      	lsls	r2, r2, #2
 8001ed0:	4093      	lsls	r3, r2
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ed8:	493a      	ldr	r1, [pc, #232]	; (8001fc4 <HAL_GPIO_Init+0x29c>)
 8001eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001edc:	089b      	lsrs	r3, r3, #2
 8001ede:	3302      	adds	r3, #2
 8001ee0:	68fa      	ldr	r2, [r7, #12]
 8001ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d006      	beq.n	8001f00 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ef2:	4b39      	ldr	r3, [pc, #228]	; (8001fd8 <HAL_GPIO_Init+0x2b0>)
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	4938      	ldr	r1, [pc, #224]	; (8001fd8 <HAL_GPIO_Init+0x2b0>)
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	600b      	str	r3, [r1, #0]
 8001efe:	e006      	b.n	8001f0e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f00:	4b35      	ldr	r3, [pc, #212]	; (8001fd8 <HAL_GPIO_Init+0x2b0>)
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	43db      	mvns	r3, r3
 8001f08:	4933      	ldr	r1, [pc, #204]	; (8001fd8 <HAL_GPIO_Init+0x2b0>)
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d006      	beq.n	8001f28 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f1a:	4b2f      	ldr	r3, [pc, #188]	; (8001fd8 <HAL_GPIO_Init+0x2b0>)
 8001f1c:	685a      	ldr	r2, [r3, #4]
 8001f1e:	492e      	ldr	r1, [pc, #184]	; (8001fd8 <HAL_GPIO_Init+0x2b0>)
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	604b      	str	r3, [r1, #4]
 8001f26:	e006      	b.n	8001f36 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f28:	4b2b      	ldr	r3, [pc, #172]	; (8001fd8 <HAL_GPIO_Init+0x2b0>)
 8001f2a:	685a      	ldr	r2, [r3, #4]
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	4929      	ldr	r1, [pc, #164]	; (8001fd8 <HAL_GPIO_Init+0x2b0>)
 8001f32:	4013      	ands	r3, r2
 8001f34:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d006      	beq.n	8001f50 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f42:	4b25      	ldr	r3, [pc, #148]	; (8001fd8 <HAL_GPIO_Init+0x2b0>)
 8001f44:	689a      	ldr	r2, [r3, #8]
 8001f46:	4924      	ldr	r1, [pc, #144]	; (8001fd8 <HAL_GPIO_Init+0x2b0>)
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	608b      	str	r3, [r1, #8]
 8001f4e:	e006      	b.n	8001f5e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f50:	4b21      	ldr	r3, [pc, #132]	; (8001fd8 <HAL_GPIO_Init+0x2b0>)
 8001f52:	689a      	ldr	r2, [r3, #8]
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	43db      	mvns	r3, r3
 8001f58:	491f      	ldr	r1, [pc, #124]	; (8001fd8 <HAL_GPIO_Init+0x2b0>)
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d006      	beq.n	8001f78 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f6a:	4b1b      	ldr	r3, [pc, #108]	; (8001fd8 <HAL_GPIO_Init+0x2b0>)
 8001f6c:	68da      	ldr	r2, [r3, #12]
 8001f6e:	491a      	ldr	r1, [pc, #104]	; (8001fd8 <HAL_GPIO_Init+0x2b0>)
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	60cb      	str	r3, [r1, #12]
 8001f76:	e006      	b.n	8001f86 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f78:	4b17      	ldr	r3, [pc, #92]	; (8001fd8 <HAL_GPIO_Init+0x2b0>)
 8001f7a:	68da      	ldr	r2, [r3, #12]
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	4915      	ldr	r1, [pc, #84]	; (8001fd8 <HAL_GPIO_Init+0x2b0>)
 8001f82:	4013      	ands	r3, r2
 8001f84:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f88:	3301      	adds	r3, #1
 8001f8a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f92:	fa22 f303 	lsr.w	r3, r2, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f47f aed0 	bne.w	8001d3c <HAL_GPIO_Init+0x14>
  }
}
 8001f9c:	bf00      	nop
 8001f9e:	372c      	adds	r7, #44	; 0x2c
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bc80      	pop	{r7}
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	10210000 	.word	0x10210000
 8001fac:	10110000 	.word	0x10110000
 8001fb0:	10120000 	.word	0x10120000
 8001fb4:	10310000 	.word	0x10310000
 8001fb8:	10320000 	.word	0x10320000
 8001fbc:	10220000 	.word	0x10220000
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	40010000 	.word	0x40010000
 8001fc8:	40010800 	.word	0x40010800
 8001fcc:	40010c00 	.word	0x40010c00
 8001fd0:	40011000 	.word	0x40011000
 8001fd4:	40011400 	.word	0x40011400
 8001fd8:	40010400 	.word	0x40010400

08001fdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	807b      	strh	r3, [r7, #2]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fec:	787b      	ldrb	r3, [r7, #1]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ff2:	887a      	ldrh	r2, [r7, #2]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ff8:	e003      	b.n	8002002 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ffa:	887b      	ldrh	r3, [r7, #2]
 8001ffc:	041a      	lsls	r2, r3, #16
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	611a      	str	r2, [r3, #16]
}
 8002002:	bf00      	nop
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	bc80      	pop	{r7}
 800200a:	4770      	bx	lr

0800200c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e26c      	b.n	80024f8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	2b00      	cmp	r3, #0
 8002028:	f000 8087 	beq.w	800213a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800202c:	4b92      	ldr	r3, [pc, #584]	; (8002278 <HAL_RCC_OscConfig+0x26c>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f003 030c 	and.w	r3, r3, #12
 8002034:	2b04      	cmp	r3, #4
 8002036:	d00c      	beq.n	8002052 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002038:	4b8f      	ldr	r3, [pc, #572]	; (8002278 <HAL_RCC_OscConfig+0x26c>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f003 030c 	and.w	r3, r3, #12
 8002040:	2b08      	cmp	r3, #8
 8002042:	d112      	bne.n	800206a <HAL_RCC_OscConfig+0x5e>
 8002044:	4b8c      	ldr	r3, [pc, #560]	; (8002278 <HAL_RCC_OscConfig+0x26c>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800204c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002050:	d10b      	bne.n	800206a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002052:	4b89      	ldr	r3, [pc, #548]	; (8002278 <HAL_RCC_OscConfig+0x26c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d06c      	beq.n	8002138 <HAL_RCC_OscConfig+0x12c>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d168      	bne.n	8002138 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e246      	b.n	80024f8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002072:	d106      	bne.n	8002082 <HAL_RCC_OscConfig+0x76>
 8002074:	4b80      	ldr	r3, [pc, #512]	; (8002278 <HAL_RCC_OscConfig+0x26c>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a7f      	ldr	r2, [pc, #508]	; (8002278 <HAL_RCC_OscConfig+0x26c>)
 800207a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800207e:	6013      	str	r3, [r2, #0]
 8002080:	e02e      	b.n	80020e0 <HAL_RCC_OscConfig+0xd4>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d10c      	bne.n	80020a4 <HAL_RCC_OscConfig+0x98>
 800208a:	4b7b      	ldr	r3, [pc, #492]	; (8002278 <HAL_RCC_OscConfig+0x26c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a7a      	ldr	r2, [pc, #488]	; (8002278 <HAL_RCC_OscConfig+0x26c>)
 8002090:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002094:	6013      	str	r3, [r2, #0]
 8002096:	4b78      	ldr	r3, [pc, #480]	; (8002278 <HAL_RCC_OscConfig+0x26c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a77      	ldr	r2, [pc, #476]	; (8002278 <HAL_RCC_OscConfig+0x26c>)
 800209c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020a0:	6013      	str	r3, [r2, #0]
 80020a2:	e01d      	b.n	80020e0 <HAL_RCC_OscConfig+0xd4>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020ac:	d10c      	bne.n	80020c8 <HAL_RCC_OscConfig+0xbc>
 80020ae:	4b72      	ldr	r3, [pc, #456]	; (8002278 <HAL_RCC_OscConfig+0x26c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a71      	ldr	r2, [pc, #452]	; (8002278 <HAL_RCC_OscConfig+0x26c>)
 80020b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020b8:	6013      	str	r3, [r2, #0]
 80020ba:	4b6f      	ldr	r3, [pc, #444]	; (8002278 <HAL_RCC_OscConfig+0x26c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a6e      	ldr	r2, [pc, #440]	; (8002278 <HAL_RCC_OscConfig+0x26c>)
 80020c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020c4:	6013      	str	r3, [r2, #0]
 80020c6:	e00b      	b.n	80020e0 <HAL_RCC_OscConfig+0xd4>
 80020c8:	4b6b      	ldr	r3, [pc, #428]	; (8002278 <HAL_RCC_OscConfig+0x26c>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a6a      	ldr	r2, [pc, #424]	; (8002278 <HAL_RCC_OscConfig+0x26c>)
 80020ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020d2:	6013      	str	r3, [r2, #0]
 80020d4:	4b68      	ldr	r3, [pc, #416]	; (8002278 <HAL_RCC_OscConfig+0x26c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a67      	ldr	r2, [pc, #412]	; (8002278 <HAL_RCC_OscConfig+0x26c>)
 80020da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d013      	beq.n	8002110 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e8:	f7ff f8d2 	bl	8001290 <HAL_GetTick>
 80020ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ee:	e008      	b.n	8002102 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020f0:	f7ff f8ce 	bl	8001290 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b64      	cmp	r3, #100	; 0x64
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e1fa      	b.n	80024f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002102:	4b5d      	ldr	r3, [pc, #372]	; (8002278 <HAL_RCC_OscConfig+0x26c>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d0f0      	beq.n	80020f0 <HAL_RCC_OscConfig+0xe4>
 800210e:	e014      	b.n	800213a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002110:	f7ff f8be 	bl	8001290 <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002118:	f7ff f8ba 	bl	8001290 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b64      	cmp	r3, #100	; 0x64
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e1e6      	b.n	80024f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800212a:	4b53      	ldr	r3, [pc, #332]	; (8002278 <HAL_RCC_OscConfig+0x26c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1f0      	bne.n	8002118 <HAL_RCC_OscConfig+0x10c>
 8002136:	e000      	b.n	800213a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002138:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d063      	beq.n	800220e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002146:	4b4c      	ldr	r3, [pc, #304]	; (8002278 <HAL_RCC_OscConfig+0x26c>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f003 030c 	and.w	r3, r3, #12
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00b      	beq.n	800216a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002152:	4b49      	ldr	r3, [pc, #292]	; (8002278 <HAL_RCC_OscConfig+0x26c>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f003 030c 	and.w	r3, r3, #12
 800215a:	2b08      	cmp	r3, #8
 800215c:	d11c      	bne.n	8002198 <HAL_RCC_OscConfig+0x18c>
 800215e:	4b46      	ldr	r3, [pc, #280]	; (8002278 <HAL_RCC_OscConfig+0x26c>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d116      	bne.n	8002198 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800216a:	4b43      	ldr	r3, [pc, #268]	; (8002278 <HAL_RCC_OscConfig+0x26c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d005      	beq.n	8002182 <HAL_RCC_OscConfig+0x176>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d001      	beq.n	8002182 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e1ba      	b.n	80024f8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002182:	4b3d      	ldr	r3, [pc, #244]	; (8002278 <HAL_RCC_OscConfig+0x26c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	4939      	ldr	r1, [pc, #228]	; (8002278 <HAL_RCC_OscConfig+0x26c>)
 8002192:	4313      	orrs	r3, r2
 8002194:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002196:	e03a      	b.n	800220e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d020      	beq.n	80021e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021a0:	4b36      	ldr	r3, [pc, #216]	; (800227c <HAL_RCC_OscConfig+0x270>)
 80021a2:	2201      	movs	r2, #1
 80021a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a6:	f7ff f873 	bl	8001290 <HAL_GetTick>
 80021aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ac:	e008      	b.n	80021c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ae:	f7ff f86f 	bl	8001290 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e19b      	b.n	80024f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c0:	4b2d      	ldr	r3, [pc, #180]	; (8002278 <HAL_RCC_OscConfig+0x26c>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d0f0      	beq.n	80021ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021cc:	4b2a      	ldr	r3, [pc, #168]	; (8002278 <HAL_RCC_OscConfig+0x26c>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	695b      	ldr	r3, [r3, #20]
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	4927      	ldr	r1, [pc, #156]	; (8002278 <HAL_RCC_OscConfig+0x26c>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	600b      	str	r3, [r1, #0]
 80021e0:	e015      	b.n	800220e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021e2:	4b26      	ldr	r3, [pc, #152]	; (800227c <HAL_RCC_OscConfig+0x270>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e8:	f7ff f852 	bl	8001290 <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021f0:	f7ff f84e 	bl	8001290 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e17a      	b.n	80024f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002202:	4b1d      	ldr	r3, [pc, #116]	; (8002278 <HAL_RCC_OscConfig+0x26c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f0      	bne.n	80021f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0308 	and.w	r3, r3, #8
 8002216:	2b00      	cmp	r3, #0
 8002218:	d03a      	beq.n	8002290 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d019      	beq.n	8002256 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002222:	4b17      	ldr	r3, [pc, #92]	; (8002280 <HAL_RCC_OscConfig+0x274>)
 8002224:	2201      	movs	r2, #1
 8002226:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002228:	f7ff f832 	bl	8001290 <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002230:	f7ff f82e 	bl	8001290 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e15a      	b.n	80024f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002242:	4b0d      	ldr	r3, [pc, #52]	; (8002278 <HAL_RCC_OscConfig+0x26c>)
 8002244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d0f0      	beq.n	8002230 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800224e:	2001      	movs	r0, #1
 8002250:	f000 fac6 	bl	80027e0 <RCC_Delay>
 8002254:	e01c      	b.n	8002290 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002256:	4b0a      	ldr	r3, [pc, #40]	; (8002280 <HAL_RCC_OscConfig+0x274>)
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800225c:	f7ff f818 	bl	8001290 <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002262:	e00f      	b.n	8002284 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002264:	f7ff f814 	bl	8001290 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d908      	bls.n	8002284 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e140      	b.n	80024f8 <HAL_RCC_OscConfig+0x4ec>
 8002276:	bf00      	nop
 8002278:	40021000 	.word	0x40021000
 800227c:	42420000 	.word	0x42420000
 8002280:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002284:	4b9e      	ldr	r3, [pc, #632]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 8002286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d1e9      	bne.n	8002264 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	2b00      	cmp	r3, #0
 800229a:	f000 80a6 	beq.w	80023ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800229e:	2300      	movs	r3, #0
 80022a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022a2:	4b97      	ldr	r3, [pc, #604]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10d      	bne.n	80022ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022ae:	4b94      	ldr	r3, [pc, #592]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 80022b0:	69db      	ldr	r3, [r3, #28]
 80022b2:	4a93      	ldr	r2, [pc, #588]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 80022b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022b8:	61d3      	str	r3, [r2, #28]
 80022ba:	4b91      	ldr	r3, [pc, #580]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 80022bc:	69db      	ldr	r3, [r3, #28]
 80022be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c2:	60bb      	str	r3, [r7, #8]
 80022c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022c6:	2301      	movs	r3, #1
 80022c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ca:	4b8e      	ldr	r3, [pc, #568]	; (8002504 <HAL_RCC_OscConfig+0x4f8>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d118      	bne.n	8002308 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022d6:	4b8b      	ldr	r3, [pc, #556]	; (8002504 <HAL_RCC_OscConfig+0x4f8>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a8a      	ldr	r2, [pc, #552]	; (8002504 <HAL_RCC_OscConfig+0x4f8>)
 80022dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022e2:	f7fe ffd5 	bl	8001290 <HAL_GetTick>
 80022e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e8:	e008      	b.n	80022fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ea:	f7fe ffd1 	bl	8001290 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b64      	cmp	r3, #100	; 0x64
 80022f6:	d901      	bls.n	80022fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e0fd      	b.n	80024f8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022fc:	4b81      	ldr	r3, [pc, #516]	; (8002504 <HAL_RCC_OscConfig+0x4f8>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002304:	2b00      	cmp	r3, #0
 8002306:	d0f0      	beq.n	80022ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d106      	bne.n	800231e <HAL_RCC_OscConfig+0x312>
 8002310:	4b7b      	ldr	r3, [pc, #492]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 8002312:	6a1b      	ldr	r3, [r3, #32]
 8002314:	4a7a      	ldr	r2, [pc, #488]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 8002316:	f043 0301 	orr.w	r3, r3, #1
 800231a:	6213      	str	r3, [r2, #32]
 800231c:	e02d      	b.n	800237a <HAL_RCC_OscConfig+0x36e>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d10c      	bne.n	8002340 <HAL_RCC_OscConfig+0x334>
 8002326:	4b76      	ldr	r3, [pc, #472]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	4a75      	ldr	r2, [pc, #468]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 800232c:	f023 0301 	bic.w	r3, r3, #1
 8002330:	6213      	str	r3, [r2, #32]
 8002332:	4b73      	ldr	r3, [pc, #460]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 8002334:	6a1b      	ldr	r3, [r3, #32]
 8002336:	4a72      	ldr	r2, [pc, #456]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 8002338:	f023 0304 	bic.w	r3, r3, #4
 800233c:	6213      	str	r3, [r2, #32]
 800233e:	e01c      	b.n	800237a <HAL_RCC_OscConfig+0x36e>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	2b05      	cmp	r3, #5
 8002346:	d10c      	bne.n	8002362 <HAL_RCC_OscConfig+0x356>
 8002348:	4b6d      	ldr	r3, [pc, #436]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	4a6c      	ldr	r2, [pc, #432]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 800234e:	f043 0304 	orr.w	r3, r3, #4
 8002352:	6213      	str	r3, [r2, #32]
 8002354:	4b6a      	ldr	r3, [pc, #424]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	4a69      	ldr	r2, [pc, #420]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 800235a:	f043 0301 	orr.w	r3, r3, #1
 800235e:	6213      	str	r3, [r2, #32]
 8002360:	e00b      	b.n	800237a <HAL_RCC_OscConfig+0x36e>
 8002362:	4b67      	ldr	r3, [pc, #412]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 8002364:	6a1b      	ldr	r3, [r3, #32]
 8002366:	4a66      	ldr	r2, [pc, #408]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 8002368:	f023 0301 	bic.w	r3, r3, #1
 800236c:	6213      	str	r3, [r2, #32]
 800236e:	4b64      	ldr	r3, [pc, #400]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 8002370:	6a1b      	ldr	r3, [r3, #32]
 8002372:	4a63      	ldr	r2, [pc, #396]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 8002374:	f023 0304 	bic.w	r3, r3, #4
 8002378:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d015      	beq.n	80023ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002382:	f7fe ff85 	bl	8001290 <HAL_GetTick>
 8002386:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002388:	e00a      	b.n	80023a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800238a:	f7fe ff81 	bl	8001290 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	f241 3288 	movw	r2, #5000	; 0x1388
 8002398:	4293      	cmp	r3, r2
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e0ab      	b.n	80024f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023a0:	4b57      	ldr	r3, [pc, #348]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 80023a2:	6a1b      	ldr	r3, [r3, #32]
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d0ee      	beq.n	800238a <HAL_RCC_OscConfig+0x37e>
 80023ac:	e014      	b.n	80023d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ae:	f7fe ff6f 	bl	8001290 <HAL_GetTick>
 80023b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023b4:	e00a      	b.n	80023cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023b6:	f7fe ff6b 	bl	8001290 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e095      	b.n	80024f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023cc:	4b4c      	ldr	r3, [pc, #304]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 80023ce:	6a1b      	ldr	r3, [r3, #32]
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d1ee      	bne.n	80023b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023d8:	7dfb      	ldrb	r3, [r7, #23]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d105      	bne.n	80023ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023de:	4b48      	ldr	r3, [pc, #288]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 80023e0:	69db      	ldr	r3, [r3, #28]
 80023e2:	4a47      	ldr	r2, [pc, #284]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 80023e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	69db      	ldr	r3, [r3, #28]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f000 8081 	beq.w	80024f6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023f4:	4b42      	ldr	r3, [pc, #264]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f003 030c 	and.w	r3, r3, #12
 80023fc:	2b08      	cmp	r3, #8
 80023fe:	d061      	beq.n	80024c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	69db      	ldr	r3, [r3, #28]
 8002404:	2b02      	cmp	r3, #2
 8002406:	d146      	bne.n	8002496 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002408:	4b3f      	ldr	r3, [pc, #252]	; (8002508 <HAL_RCC_OscConfig+0x4fc>)
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240e:	f7fe ff3f 	bl	8001290 <HAL_GetTick>
 8002412:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002414:	e008      	b.n	8002428 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002416:	f7fe ff3b 	bl	8001290 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e067      	b.n	80024f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002428:	4b35      	ldr	r3, [pc, #212]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d1f0      	bne.n	8002416 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800243c:	d108      	bne.n	8002450 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800243e:	4b30      	ldr	r3, [pc, #192]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	492d      	ldr	r1, [pc, #180]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 800244c:	4313      	orrs	r3, r2
 800244e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002450:	4b2b      	ldr	r3, [pc, #172]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a19      	ldr	r1, [r3, #32]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002460:	430b      	orrs	r3, r1
 8002462:	4927      	ldr	r1, [pc, #156]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 8002464:	4313      	orrs	r3, r2
 8002466:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002468:	4b27      	ldr	r3, [pc, #156]	; (8002508 <HAL_RCC_OscConfig+0x4fc>)
 800246a:	2201      	movs	r2, #1
 800246c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246e:	f7fe ff0f 	bl	8001290 <HAL_GetTick>
 8002472:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002474:	e008      	b.n	8002488 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002476:	f7fe ff0b 	bl	8001290 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e037      	b.n	80024f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002488:	4b1d      	ldr	r3, [pc, #116]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d0f0      	beq.n	8002476 <HAL_RCC_OscConfig+0x46a>
 8002494:	e02f      	b.n	80024f6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002496:	4b1c      	ldr	r3, [pc, #112]	; (8002508 <HAL_RCC_OscConfig+0x4fc>)
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249c:	f7fe fef8 	bl	8001290 <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024a4:	f7fe fef4 	bl	8001290 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e020      	b.n	80024f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024b6:	4b12      	ldr	r3, [pc, #72]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1f0      	bne.n	80024a4 <HAL_RCC_OscConfig+0x498>
 80024c2:	e018      	b.n	80024f6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	69db      	ldr	r3, [r3, #28]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d101      	bne.n	80024d0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e013      	b.n	80024f8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024d0:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d106      	bne.n	80024f2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d001      	beq.n	80024f6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e000      	b.n	80024f8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3718      	adds	r7, #24
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	40021000 	.word	0x40021000
 8002504:	40007000 	.word	0x40007000
 8002508:	42420060 	.word	0x42420060

0800250c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e0d0      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002520:	4b6a      	ldr	r3, [pc, #424]	; (80026cc <HAL_RCC_ClockConfig+0x1c0>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0307 	and.w	r3, r3, #7
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	429a      	cmp	r2, r3
 800252c:	d910      	bls.n	8002550 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800252e:	4b67      	ldr	r3, [pc, #412]	; (80026cc <HAL_RCC_ClockConfig+0x1c0>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f023 0207 	bic.w	r2, r3, #7
 8002536:	4965      	ldr	r1, [pc, #404]	; (80026cc <HAL_RCC_ClockConfig+0x1c0>)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	4313      	orrs	r3, r2
 800253c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800253e:	4b63      	ldr	r3, [pc, #396]	; (80026cc <HAL_RCC_ClockConfig+0x1c0>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	429a      	cmp	r2, r3
 800254a:	d001      	beq.n	8002550 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e0b8      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d020      	beq.n	800259e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0304 	and.w	r3, r3, #4
 8002564:	2b00      	cmp	r3, #0
 8002566:	d005      	beq.n	8002574 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002568:	4b59      	ldr	r3, [pc, #356]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	4a58      	ldr	r2, [pc, #352]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 800256e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002572:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0308 	and.w	r3, r3, #8
 800257c:	2b00      	cmp	r3, #0
 800257e:	d005      	beq.n	800258c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002580:	4b53      	ldr	r3, [pc, #332]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	4a52      	ldr	r2, [pc, #328]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002586:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800258a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800258c:	4b50      	ldr	r3, [pc, #320]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	494d      	ldr	r1, [pc, #308]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 800259a:	4313      	orrs	r3, r2
 800259c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d040      	beq.n	800262c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d107      	bne.n	80025c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b2:	4b47      	ldr	r3, [pc, #284]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d115      	bne.n	80025ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e07f      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d107      	bne.n	80025da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ca:	4b41      	ldr	r3, [pc, #260]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d109      	bne.n	80025ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e073      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025da:	4b3d      	ldr	r3, [pc, #244]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e06b      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025ea:	4b39      	ldr	r3, [pc, #228]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f023 0203 	bic.w	r2, r3, #3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	4936      	ldr	r1, [pc, #216]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025fc:	f7fe fe48 	bl	8001290 <HAL_GetTick>
 8002600:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002602:	e00a      	b.n	800261a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002604:	f7fe fe44 	bl	8001290 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002612:	4293      	cmp	r3, r2
 8002614:	d901      	bls.n	800261a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e053      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800261a:	4b2d      	ldr	r3, [pc, #180]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f003 020c 	and.w	r2, r3, #12
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	429a      	cmp	r2, r3
 800262a:	d1eb      	bne.n	8002604 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800262c:	4b27      	ldr	r3, [pc, #156]	; (80026cc <HAL_RCC_ClockConfig+0x1c0>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0307 	and.w	r3, r3, #7
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	429a      	cmp	r2, r3
 8002638:	d210      	bcs.n	800265c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800263a:	4b24      	ldr	r3, [pc, #144]	; (80026cc <HAL_RCC_ClockConfig+0x1c0>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f023 0207 	bic.w	r2, r3, #7
 8002642:	4922      	ldr	r1, [pc, #136]	; (80026cc <HAL_RCC_ClockConfig+0x1c0>)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	4313      	orrs	r3, r2
 8002648:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800264a:	4b20      	ldr	r3, [pc, #128]	; (80026cc <HAL_RCC_ClockConfig+0x1c0>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	429a      	cmp	r2, r3
 8002656:	d001      	beq.n	800265c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e032      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	2b00      	cmp	r3, #0
 8002666:	d008      	beq.n	800267a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002668:	4b19      	ldr	r3, [pc, #100]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	4916      	ldr	r1, [pc, #88]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002676:	4313      	orrs	r3, r2
 8002678:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0308 	and.w	r3, r3, #8
 8002682:	2b00      	cmp	r3, #0
 8002684:	d009      	beq.n	800269a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002686:	4b12      	ldr	r3, [pc, #72]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	490e      	ldr	r1, [pc, #56]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002696:	4313      	orrs	r3, r2
 8002698:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800269a:	f000 f821 	bl	80026e0 <HAL_RCC_GetSysClockFreq>
 800269e:	4601      	mov	r1, r0
 80026a0:	4b0b      	ldr	r3, [pc, #44]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	091b      	lsrs	r3, r3, #4
 80026a6:	f003 030f 	and.w	r3, r3, #15
 80026aa:	4a0a      	ldr	r2, [pc, #40]	; (80026d4 <HAL_RCC_ClockConfig+0x1c8>)
 80026ac:	5cd3      	ldrb	r3, [r2, r3]
 80026ae:	fa21 f303 	lsr.w	r3, r1, r3
 80026b2:	4a09      	ldr	r2, [pc, #36]	; (80026d8 <HAL_RCC_ClockConfig+0x1cc>)
 80026b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026b6:	4b09      	ldr	r3, [pc, #36]	; (80026dc <HAL_RCC_ClockConfig+0x1d0>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7fe fda6 	bl	800120c <HAL_InitTick>

  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40022000 	.word	0x40022000
 80026d0:	40021000 	.word	0x40021000
 80026d4:	08002fec 	.word	0x08002fec
 80026d8:	2000001c 	.word	0x2000001c
 80026dc:	20000020 	.word	0x20000020

080026e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026e0:	b490      	push	{r4, r7}
 80026e2:	b08a      	sub	sp, #40	; 0x28
 80026e4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80026e6:	4b2a      	ldr	r3, [pc, #168]	; (8002790 <HAL_RCC_GetSysClockFreq+0xb0>)
 80026e8:	1d3c      	adds	r4, r7, #4
 80026ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80026f0:	4b28      	ldr	r3, [pc, #160]	; (8002794 <HAL_RCC_GetSysClockFreq+0xb4>)
 80026f2:	881b      	ldrh	r3, [r3, #0]
 80026f4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026f6:	2300      	movs	r3, #0
 80026f8:	61fb      	str	r3, [r7, #28]
 80026fa:	2300      	movs	r3, #0
 80026fc:	61bb      	str	r3, [r7, #24]
 80026fe:	2300      	movs	r3, #0
 8002700:	627b      	str	r3, [r7, #36]	; 0x24
 8002702:	2300      	movs	r3, #0
 8002704:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002706:	2300      	movs	r3, #0
 8002708:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800270a:	4b23      	ldr	r3, [pc, #140]	; (8002798 <HAL_RCC_GetSysClockFreq+0xb8>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	f003 030c 	and.w	r3, r3, #12
 8002716:	2b04      	cmp	r3, #4
 8002718:	d002      	beq.n	8002720 <HAL_RCC_GetSysClockFreq+0x40>
 800271a:	2b08      	cmp	r3, #8
 800271c:	d003      	beq.n	8002726 <HAL_RCC_GetSysClockFreq+0x46>
 800271e:	e02d      	b.n	800277c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002720:	4b1e      	ldr	r3, [pc, #120]	; (800279c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002722:	623b      	str	r3, [r7, #32]
      break;
 8002724:	e02d      	b.n	8002782 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	0c9b      	lsrs	r3, r3, #18
 800272a:	f003 030f 	and.w	r3, r3, #15
 800272e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002732:	4413      	add	r3, r2
 8002734:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002738:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d013      	beq.n	800276c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002744:	4b14      	ldr	r3, [pc, #80]	; (8002798 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	0c5b      	lsrs	r3, r3, #17
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002752:	4413      	add	r3, r2
 8002754:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002758:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	4a0f      	ldr	r2, [pc, #60]	; (800279c <HAL_RCC_GetSysClockFreq+0xbc>)
 800275e:	fb02 f203 	mul.w	r2, r2, r3
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	fbb2 f3f3 	udiv	r3, r2, r3
 8002768:	627b      	str	r3, [r7, #36]	; 0x24
 800276a:	e004      	b.n	8002776 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	4a0c      	ldr	r2, [pc, #48]	; (80027a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002770:	fb02 f303 	mul.w	r3, r2, r3
 8002774:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002778:	623b      	str	r3, [r7, #32]
      break;
 800277a:	e002      	b.n	8002782 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800277c:	4b07      	ldr	r3, [pc, #28]	; (800279c <HAL_RCC_GetSysClockFreq+0xbc>)
 800277e:	623b      	str	r3, [r7, #32]
      break;
 8002780:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002782:	6a3b      	ldr	r3, [r7, #32]
}
 8002784:	4618      	mov	r0, r3
 8002786:	3728      	adds	r7, #40	; 0x28
 8002788:	46bd      	mov	sp, r7
 800278a:	bc90      	pop	{r4, r7}
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	08002fc4 	.word	0x08002fc4
 8002794:	08002fd4 	.word	0x08002fd4
 8002798:	40021000 	.word	0x40021000
 800279c:	007a1200 	.word	0x007a1200
 80027a0:	003d0900 	.word	0x003d0900

080027a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027a8:	4b02      	ldr	r3, [pc, #8]	; (80027b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80027aa:	681b      	ldr	r3, [r3, #0]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr
 80027b4:	2000001c 	.word	0x2000001c

080027b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027bc:	f7ff fff2 	bl	80027a4 <HAL_RCC_GetHCLKFreq>
 80027c0:	4601      	mov	r1, r0
 80027c2:	4b05      	ldr	r3, [pc, #20]	; (80027d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	0adb      	lsrs	r3, r3, #11
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	4a03      	ldr	r2, [pc, #12]	; (80027dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80027ce:	5cd3      	ldrb	r3, [r2, r3]
 80027d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	40021000 	.word	0x40021000
 80027dc:	08002ffc 	.word	0x08002ffc

080027e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027e8:	4b0a      	ldr	r3, [pc, #40]	; (8002814 <RCC_Delay+0x34>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a0a      	ldr	r2, [pc, #40]	; (8002818 <RCC_Delay+0x38>)
 80027ee:	fba2 2303 	umull	r2, r3, r2, r3
 80027f2:	0a5b      	lsrs	r3, r3, #9
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	fb02 f303 	mul.w	r3, r2, r3
 80027fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80027fc:	bf00      	nop
  }
  while (Delay --);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	1e5a      	subs	r2, r3, #1
 8002802:	60fa      	str	r2, [r7, #12]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1f9      	bne.n	80027fc <RCC_Delay+0x1c>
}
 8002808:	bf00      	nop
 800280a:	3714      	adds	r7, #20
 800280c:	46bd      	mov	sp, r7
 800280e:	bc80      	pop	{r7}
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	2000001c 	.word	0x2000001c
 8002818:	10624dd3 	.word	0x10624dd3

0800281c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002824:	2300      	movs	r3, #0
 8002826:	613b      	str	r3, [r7, #16]
 8002828:	2300      	movs	r3, #0
 800282a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0301 	and.w	r3, r3, #1
 8002834:	2b00      	cmp	r3, #0
 8002836:	d07d      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002838:	2300      	movs	r3, #0
 800283a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800283c:	4b4f      	ldr	r3, [pc, #316]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800283e:	69db      	ldr	r3, [r3, #28]
 8002840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d10d      	bne.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002848:	4b4c      	ldr	r3, [pc, #304]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800284a:	69db      	ldr	r3, [r3, #28]
 800284c:	4a4b      	ldr	r2, [pc, #300]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800284e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002852:	61d3      	str	r3, [r2, #28]
 8002854:	4b49      	ldr	r3, [pc, #292]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002856:	69db      	ldr	r3, [r3, #28]
 8002858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285c:	60bb      	str	r3, [r7, #8]
 800285e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002860:	2301      	movs	r3, #1
 8002862:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002864:	4b46      	ldr	r3, [pc, #280]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286c:	2b00      	cmp	r3, #0
 800286e:	d118      	bne.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002870:	4b43      	ldr	r3, [pc, #268]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a42      	ldr	r2, [pc, #264]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002876:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800287a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800287c:	f7fe fd08 	bl	8001290 <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002882:	e008      	b.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002884:	f7fe fd04 	bl	8001290 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b64      	cmp	r3, #100	; 0x64
 8002890:	d901      	bls.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e06d      	b.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002896:	4b3a      	ldr	r3, [pc, #232]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d0f0      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028a2:	4b36      	ldr	r3, [pc, #216]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028aa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d02e      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d027      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028c0:	4b2e      	ldr	r3, [pc, #184]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028c8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028ca:	4b2e      	ldr	r3, [pc, #184]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80028cc:	2201      	movs	r2, #1
 80028ce:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028d0:	4b2c      	ldr	r3, [pc, #176]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80028d6:	4a29      	ldr	r2, [pc, #164]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d014      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e6:	f7fe fcd3 	bl	8001290 <HAL_GetTick>
 80028ea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ec:	e00a      	b.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ee:	f7fe fccf 	bl	8001290 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d901      	bls.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e036      	b.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002904:	4b1d      	ldr	r3, [pc, #116]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d0ee      	beq.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002910:	4b1a      	ldr	r3, [pc, #104]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	4917      	ldr	r1, [pc, #92]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800291e:	4313      	orrs	r3, r2
 8002920:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002922:	7dfb      	ldrb	r3, [r7, #23]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d105      	bne.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002928:	4b14      	ldr	r3, [pc, #80]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800292a:	69db      	ldr	r3, [r3, #28]
 800292c:	4a13      	ldr	r2, [pc, #76]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800292e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002932:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d008      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002940:	4b0e      	ldr	r3, [pc, #56]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	490b      	ldr	r1, [pc, #44]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800294e:	4313      	orrs	r3, r2
 8002950:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0310 	and.w	r3, r3, #16
 800295a:	2b00      	cmp	r3, #0
 800295c:	d008      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800295e:	4b07      	ldr	r3, [pc, #28]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	4904      	ldr	r1, [pc, #16]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800296c:	4313      	orrs	r3, r2
 800296e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3718      	adds	r7, #24
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	40021000 	.word	0x40021000
 8002980:	40007000 	.word	0x40007000
 8002984:	42420440 	.word	0x42420440

08002988 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002988:	b590      	push	{r4, r7, lr}
 800298a:	b08d      	sub	sp, #52	; 0x34
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002990:	4b55      	ldr	r3, [pc, #340]	; (8002ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002992:	f107 040c 	add.w	r4, r7, #12
 8002996:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002998:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800299c:	4b53      	ldr	r3, [pc, #332]	; (8002aec <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800299e:	881b      	ldrh	r3, [r3, #0]
 80029a0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80029a2:	2300      	movs	r3, #0
 80029a4:	627b      	str	r3, [r7, #36]	; 0x24
 80029a6:	2300      	movs	r3, #0
 80029a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029aa:	2300      	movs	r3, #0
 80029ac:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80029ae:	2300      	movs	r3, #0
 80029b0:	61fb      	str	r3, [r7, #28]
 80029b2:	2300      	movs	r3, #0
 80029b4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d07f      	beq.n	8002abc <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80029bc:	2b10      	cmp	r3, #16
 80029be:	d002      	beq.n	80029c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d048      	beq.n	8002a56 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80029c4:	e08b      	b.n	8002ade <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 80029c6:	4b4a      	ldr	r3, [pc, #296]	; (8002af0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80029cc:	4b48      	ldr	r3, [pc, #288]	; (8002af0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d07f      	beq.n	8002ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	0c9b      	lsrs	r3, r3, #18
 80029dc:	f003 030f 	and.w	r3, r3, #15
 80029e0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80029e4:	4413      	add	r3, r2
 80029e6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80029ea:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d018      	beq.n	8002a28 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029f6:	4b3e      	ldr	r3, [pc, #248]	; (8002af0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	0c5b      	lsrs	r3, r3, #17
 80029fc:	f003 0301 	and.w	r3, r3, #1
 8002a00:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002a04:	4413      	add	r3, r2
 8002a06:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002a0a:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00d      	beq.n	8002a32 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002a16:	4a37      	ldr	r2, [pc, #220]	; (8002af4 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8002a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a1e:	6a3b      	ldr	r3, [r7, #32]
 8002a20:	fb02 f303 	mul.w	r3, r2, r3
 8002a24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a26:	e004      	b.n	8002a32 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a28:	6a3b      	ldr	r3, [r7, #32]
 8002a2a:	4a33      	ldr	r2, [pc, #204]	; (8002af8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002a2c:	fb02 f303 	mul.w	r3, r2, r3
 8002a30:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002a32:	4b2f      	ldr	r3, [pc, #188]	; (8002af0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a3e:	d102      	bne.n	8002a46 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8002a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a42:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002a44:	e048      	b.n	8002ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8002a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	4a2c      	ldr	r2, [pc, #176]	; (8002afc <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a50:	085b      	lsrs	r3, r3, #1
 8002a52:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002a54:	e040      	b.n	8002ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8002a56:	4b26      	ldr	r3, [pc, #152]	; (8002af0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a66:	d108      	bne.n	8002a7a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d003      	beq.n	8002a7a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8002a72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a76:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a78:	e01f      	b.n	8002aba <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a84:	d109      	bne.n	8002a9a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8002a86:	4b1a      	ldr	r3, [pc, #104]	; (8002af0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8002a92:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002a96:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a98:	e00f      	b.n	8002aba <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aa0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002aa4:	d11a      	bne.n	8002adc <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8002aa6:	4b12      	ldr	r3, [pc, #72]	; (8002af0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d014      	beq.n	8002adc <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8002ab2:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002ab6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002ab8:	e010      	b.n	8002adc <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8002aba:	e00f      	b.n	8002adc <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002abc:	f7ff fe7c 	bl	80027b8 <HAL_RCC_GetPCLK2Freq>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	4b0b      	ldr	r3, [pc, #44]	; (8002af0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	0b9b      	lsrs	r3, r3, #14
 8002ac8:	f003 0303 	and.w	r3, r3, #3
 8002acc:	3301      	adds	r3, #1
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002ad6:	e002      	b.n	8002ade <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002ad8:	bf00      	nop
 8002ada:	e000      	b.n	8002ade <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002adc:	bf00      	nop
    }
  }
  return (frequency);
 8002ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3734      	adds	r7, #52	; 0x34
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd90      	pop	{r4, r7, pc}
 8002ae8:	08002fd8 	.word	0x08002fd8
 8002aec:	08002fe8 	.word	0x08002fe8
 8002af0:	40021000 	.word	0x40021000
 8002af4:	007a1200 	.word	0x007a1200
 8002af8:	003d0900 	.word	0x003d0900
 8002afc:	aaaaaaab 	.word	0xaaaaaaab

08002b00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e053      	b.n	8002bba <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d106      	bne.n	8002b32 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f7fe fa89 	bl	8001044 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2202      	movs	r2, #2
 8002b36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b48:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685a      	ldr	r2, [r3, #4]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	431a      	orrs	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	431a      	orrs	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	69db      	ldr	r3, [r3, #28]
 8002b74:	431a      	orrs	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a1b      	ldr	r3, [r3, #32]
 8002b7a:	ea42 0103 	orr.w	r1, r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	430a      	orrs	r2, r1
 8002b88:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	0c1a      	lsrs	r2, r3, #16
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f002 0204 	and.w	r2, r2, #4
 8002b98:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	69da      	ldr	r2, [r3, #28]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ba8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b088      	sub	sp, #32
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	60f8      	str	r0, [r7, #12]
 8002bca:	60b9      	str	r1, [r7, #8]
 8002bcc:	603b      	str	r3, [r7, #0]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d101      	bne.n	8002be4 <HAL_SPI_Transmit+0x22>
 8002be0:	2302      	movs	r3, #2
 8002be2:	e11e      	b.n	8002e22 <HAL_SPI_Transmit+0x260>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002bec:	f7fe fb50 	bl	8001290 <HAL_GetTick>
 8002bf0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002bf2:	88fb      	ldrh	r3, [r7, #6]
 8002bf4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d002      	beq.n	8002c08 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002c02:	2302      	movs	r3, #2
 8002c04:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c06:	e103      	b.n	8002e10 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d002      	beq.n	8002c14 <HAL_SPI_Transmit+0x52>
 8002c0e:	88fb      	ldrh	r3, [r7, #6]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d102      	bne.n	8002c1a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c18:	e0fa      	b.n	8002e10 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2203      	movs	r2, #3
 8002c1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	68ba      	ldr	r2, [r7, #8]
 8002c2c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	88fa      	ldrh	r2, [r7, #6]
 8002c32:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	88fa      	ldrh	r2, [r7, #6]
 8002c38:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2200      	movs	r2, #0
 8002c56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c60:	d107      	bne.n	8002c72 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c70:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c7c:	2b40      	cmp	r3, #64	; 0x40
 8002c7e:	d007      	beq.n	8002c90 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c98:	d14b      	bne.n	8002d32 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d002      	beq.n	8002ca8 <HAL_SPI_Transmit+0xe6>
 8002ca2:	8afb      	ldrh	r3, [r7, #22]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d13e      	bne.n	8002d26 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cac:	881a      	ldrh	r2, [r3, #0]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb8:	1c9a      	adds	r2, r3, #2
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002ccc:	e02b      	b.n	8002d26 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d112      	bne.n	8002d02 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce0:	881a      	ldrh	r2, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cec:	1c9a      	adds	r2, r3, #2
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d00:	e011      	b.n	8002d26 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d02:	f7fe fac5 	bl	8001290 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d803      	bhi.n	8002d1a <HAL_SPI_Transmit+0x158>
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d18:	d102      	bne.n	8002d20 <HAL_SPI_Transmit+0x15e>
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d102      	bne.n	8002d26 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002d24:	e074      	b.n	8002e10 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1ce      	bne.n	8002cce <HAL_SPI_Transmit+0x10c>
 8002d30:	e04c      	b.n	8002dcc <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d002      	beq.n	8002d40 <HAL_SPI_Transmit+0x17e>
 8002d3a:	8afb      	ldrh	r3, [r7, #22]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d140      	bne.n	8002dc2 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	330c      	adds	r3, #12
 8002d4a:	7812      	ldrb	r2, [r2, #0]
 8002d4c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	1c5a      	adds	r2, r3, #1
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002d66:	e02c      	b.n	8002dc2 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d113      	bne.n	8002d9e <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	330c      	adds	r3, #12
 8002d80:	7812      	ldrb	r2, [r2, #0]
 8002d82:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d88:	1c5a      	adds	r2, r3, #1
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	3b01      	subs	r3, #1
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d9c:	e011      	b.n	8002dc2 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d9e:	f7fe fa77 	bl	8001290 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d803      	bhi.n	8002db6 <HAL_SPI_Transmit+0x1f4>
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db4:	d102      	bne.n	8002dbc <HAL_SPI_Transmit+0x1fa>
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d102      	bne.n	8002dc2 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002dc0:	e026      	b.n	8002e10 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1cd      	bne.n	8002d68 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	6839      	ldr	r1, [r7, #0]
 8002dd0:	68f8      	ldr	r0, [r7, #12]
 8002dd2:	f000 f894 	bl	8002efe <SPI_EndRxTxTransaction>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d002      	beq.n	8002de2 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2220      	movs	r2, #32
 8002de0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10a      	bne.n	8002e00 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002dea:	2300      	movs	r3, #0
 8002dec:	613b      	str	r3, [r7, #16]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	613b      	str	r3, [r7, #16]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	613b      	str	r3, [r7, #16]
 8002dfe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d002      	beq.n	8002e0e <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	77fb      	strb	r3, [r7, #31]
 8002e0c:	e000      	b.n	8002e10 <HAL_SPI_Transmit+0x24e>
  }

error:
 8002e0e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e20:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3720      	adds	r7, #32
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b084      	sub	sp, #16
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	60f8      	str	r0, [r7, #12]
 8002e32:	60b9      	str	r1, [r7, #8]
 8002e34:	603b      	str	r3, [r7, #0]
 8002e36:	4613      	mov	r3, r2
 8002e38:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e3a:	e04c      	b.n	8002ed6 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e42:	d048      	beq.n	8002ed6 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002e44:	f7fe fa24 	bl	8001290 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	683a      	ldr	r2, [r7, #0]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d902      	bls.n	8002e5a <SPI_WaitFlagStateUntilTimeout+0x30>
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d13d      	bne.n	8002ed6 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	685a      	ldr	r2, [r3, #4]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002e68:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e72:	d111      	bne.n	8002e98 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e7c:	d004      	beq.n	8002e88 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e86:	d107      	bne.n	8002e98 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e96:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ea0:	d10f      	bne.n	8002ec2 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002eb0:	601a      	str	r2, [r3, #0]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ec0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e00f      	b.n	8002ef6 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	689a      	ldr	r2, [r3, #8]
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	68ba      	ldr	r2, [r7, #8]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	bf0c      	ite	eq
 8002ee6:	2301      	moveq	r3, #1
 8002ee8:	2300      	movne	r3, #0
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	461a      	mov	r2, r3
 8002eee:	79fb      	ldrb	r3, [r7, #7]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d1a3      	bne.n	8002e3c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b086      	sub	sp, #24
 8002f02:	af02      	add	r7, sp, #8
 8002f04:	60f8      	str	r0, [r7, #12]
 8002f06:	60b9      	str	r1, [r7, #8]
 8002f08:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	9300      	str	r3, [sp, #0]
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	2200      	movs	r2, #0
 8002f12:	2180      	movs	r1, #128	; 0x80
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f7ff ff88 	bl	8002e2a <SPI_WaitFlagStateUntilTimeout>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d007      	beq.n	8002f30 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f24:	f043 0220 	orr.w	r2, r3, #32
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e000      	b.n	8002f32 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
	...

08002f3c <__libc_init_array>:
 8002f3c:	b570      	push	{r4, r5, r6, lr}
 8002f3e:	2500      	movs	r5, #0
 8002f40:	4e0c      	ldr	r6, [pc, #48]	; (8002f74 <__libc_init_array+0x38>)
 8002f42:	4c0d      	ldr	r4, [pc, #52]	; (8002f78 <__libc_init_array+0x3c>)
 8002f44:	1ba4      	subs	r4, r4, r6
 8002f46:	10a4      	asrs	r4, r4, #2
 8002f48:	42a5      	cmp	r5, r4
 8002f4a:	d109      	bne.n	8002f60 <__libc_init_array+0x24>
 8002f4c:	f000 f82e 	bl	8002fac <_init>
 8002f50:	2500      	movs	r5, #0
 8002f52:	4e0a      	ldr	r6, [pc, #40]	; (8002f7c <__libc_init_array+0x40>)
 8002f54:	4c0a      	ldr	r4, [pc, #40]	; (8002f80 <__libc_init_array+0x44>)
 8002f56:	1ba4      	subs	r4, r4, r6
 8002f58:	10a4      	asrs	r4, r4, #2
 8002f5a:	42a5      	cmp	r5, r4
 8002f5c:	d105      	bne.n	8002f6a <__libc_init_array+0x2e>
 8002f5e:	bd70      	pop	{r4, r5, r6, pc}
 8002f60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f64:	4798      	blx	r3
 8002f66:	3501      	adds	r5, #1
 8002f68:	e7ee      	b.n	8002f48 <__libc_init_array+0xc>
 8002f6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f6e:	4798      	blx	r3
 8002f70:	3501      	adds	r5, #1
 8002f72:	e7f2      	b.n	8002f5a <__libc_init_array+0x1e>
 8002f74:	08003004 	.word	0x08003004
 8002f78:	08003004 	.word	0x08003004
 8002f7c:	08003004 	.word	0x08003004
 8002f80:	08003008 	.word	0x08003008

08002f84 <memcpy>:
 8002f84:	b510      	push	{r4, lr}
 8002f86:	1e43      	subs	r3, r0, #1
 8002f88:	440a      	add	r2, r1
 8002f8a:	4291      	cmp	r1, r2
 8002f8c:	d100      	bne.n	8002f90 <memcpy+0xc>
 8002f8e:	bd10      	pop	{r4, pc}
 8002f90:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f98:	e7f7      	b.n	8002f8a <memcpy+0x6>

08002f9a <memset>:
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	4402      	add	r2, r0
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d100      	bne.n	8002fa4 <memset+0xa>
 8002fa2:	4770      	bx	lr
 8002fa4:	f803 1b01 	strb.w	r1, [r3], #1
 8002fa8:	e7f9      	b.n	8002f9e <memset+0x4>
	...

08002fac <_init>:
 8002fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fae:	bf00      	nop
 8002fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fb2:	bc08      	pop	{r3}
 8002fb4:	469e      	mov	lr, r3
 8002fb6:	4770      	bx	lr

08002fb8 <_fini>:
 8002fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fba:	bf00      	nop
 8002fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fbe:	bc08      	pop	{r3}
 8002fc0:	469e      	mov	lr, r3
 8002fc2:	4770      	bx	lr
