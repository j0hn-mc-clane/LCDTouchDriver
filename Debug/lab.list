
lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d50  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  08005e60  08005e60  00015e60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006000  08006000  000200e0  2**0
                  CONTENTS
  4 .ARM          00000000  08006000  08006000  000200e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006000  08006000  000200e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006000  08006000  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006004  08006004  00016004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  08006008  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  200000e0  080060e8  000200e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  080060e8  00020238  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b1fe  00000000  00000000  00020109  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001df7  00000000  00000000  0002b307  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008f0  00000000  00000000  0002d100  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007f8  00000000  00000000  0002d9f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000050bc  00000000  00000000  0002e1e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00002c45  00000000  00000000  000332a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  00035ee9  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002e38  00000000  00000000  00035f64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000e0 	.word	0x200000e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08005e48 	.word	0x08005e48

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000e4 	.word	0x200000e4
 800014c:	08005e48 	.word	0x08005e48

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <LCD_SendCommand>:


//***** Functions prototypes *****//

//1. Write Command to LCD
void LCD_SendCommand(uint8_t com) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60000000) = com;
	uint8_t tmpCmd = com;
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	73fb      	strb	r3, [r7, #15]
	//Set DC HIGH for COMMAND mode
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_RESET);
 8000a86:	4b11      	ldr	r3, [pc, #68]	; (8000acc <LCD_SendCommand+0x54>)
 8000a88:	6818      	ldr	r0, [r3, #0]
 8000a8a:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <LCD_SendCommand+0x58>)
 8000a8c:	881b      	ldrh	r3, [r3, #0]
 8000a8e:	2200      	movs	r2, #0
 8000a90:	4619      	mov	r1, r3
 8000a92:	f002 fa1d 	bl	8002ed0 <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 8000a96:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <LCD_SendCommand+0x5c>)
 8000a98:	6818      	ldr	r0, [r3, #0]
 8000a9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <LCD_SendCommand+0x60>)
 8000a9c:	881b      	ldrh	r3, [r3, #0]
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	f002 fa15 	bl	8002ed0 <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpCmd, 1, 5);
 8000aa6:	f107 010f 	add.w	r1, r7, #15
 8000aaa:	2305      	movs	r3, #5
 8000aac:	2201      	movs	r2, #1
 8000aae:	480b      	ldr	r0, [pc, #44]	; (8000adc <LCD_SendCommand+0x64>)
 8000ab0:	f003 f801 	bl	8003ab6 <HAL_SPI_Transmit>
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 8000ab4:	4b07      	ldr	r3, [pc, #28]	; (8000ad4 <LCD_SendCommand+0x5c>)
 8000ab6:	6818      	ldr	r0, [r3, #0]
 8000ab8:	4b07      	ldr	r3, [pc, #28]	; (8000ad8 <LCD_SendCommand+0x60>)
 8000aba:	881b      	ldrh	r3, [r3, #0]
 8000abc:	2201      	movs	r2, #1
 8000abe:	4619      	mov	r1, r3
 8000ac0:	f002 fa06 	bl	8002ed0 <HAL_GPIO_WritePin>
}
 8000ac4:	bf00      	nop
 8000ac6:	3710      	adds	r7, #16
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	2000015c 	.word	0x2000015c
 8000ad0:	20000160 	.word	0x20000160
 8000ad4:	20000154 	.word	0x20000154
 8000ad8:	20000158 	.word	0x20000158
 8000adc:	200000fc 	.word	0x200000fc

08000ae0 <LCD_SendData>:

//2. Write data to LCD
void LCD_SendData(uint8_t data) {
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60040000) = data;
	uint8_t tmpCmd = data;
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	73fb      	strb	r3, [r7, #15]
	//Set DC LOW for DATA mode
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
 8000aee:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <LCD_SendData+0x54>)
 8000af0:	6818      	ldr	r0, [r3, #0]
 8000af2:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <LCD_SendData+0x58>)
 8000af4:	881b      	ldrh	r3, [r3, #0]
 8000af6:	2201      	movs	r2, #1
 8000af8:	4619      	mov	r1, r3
 8000afa:	f002 f9e9 	bl	8002ed0 <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 8000afe:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <LCD_SendData+0x5c>)
 8000b00:	6818      	ldr	r0, [r3, #0]
 8000b02:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <LCD_SendData+0x60>)
 8000b04:	881b      	ldrh	r3, [r3, #0]
 8000b06:	2200      	movs	r2, #0
 8000b08:	4619      	mov	r1, r3
 8000b0a:	f002 f9e1 	bl	8002ed0 <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpCmd, 1, 5);
 8000b0e:	f107 010f 	add.w	r1, r7, #15
 8000b12:	2305      	movs	r3, #5
 8000b14:	2201      	movs	r2, #1
 8000b16:	480b      	ldr	r0, [pc, #44]	; (8000b44 <LCD_SendData+0x64>)
 8000b18:	f002 ffcd 	bl	8003ab6 <HAL_SPI_Transmit>
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 8000b1c:	4b07      	ldr	r3, [pc, #28]	; (8000b3c <LCD_SendData+0x5c>)
 8000b1e:	6818      	ldr	r0, [r3, #0]
 8000b20:	4b07      	ldr	r3, [pc, #28]	; (8000b40 <LCD_SendData+0x60>)
 8000b22:	881b      	ldrh	r3, [r3, #0]
 8000b24:	2201      	movs	r2, #1
 8000b26:	4619      	mov	r1, r3
 8000b28:	f002 f9d2 	bl	8002ed0 <HAL_GPIO_WritePin>
}
 8000b2c:	bf00      	nop
 8000b2e:	3710      	adds	r7, #16
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	2000015c 	.word	0x2000015c
 8000b38:	20000160 	.word	0x20000160
 8000b3c:	20000154 	.word	0x20000154
 8000b40:	20000158 	.word	0x20000158
 8000b44:	200000fc 	.word	0x200000fc

08000b48 <LCD_SendDataMulti>:
//2.2 Write multiple/DMA
void LCD_SendDataMulti(uint16_t Colordata, uint32_t size) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	6039      	str	r1, [r7, #0]
 8000b52:	80fb      	strh	r3, [r7, #6]
	uint8_t colorL, colorH;

	//Set DC LOW for DATA mode
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
 8000b54:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <LCD_SendDataMulti+0x54>)
 8000b56:	6818      	ldr	r0, [r3, #0]
 8000b58:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <LCD_SendDataMulti+0x58>)
 8000b5a:	881b      	ldrh	r3, [r3, #0]
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	4619      	mov	r1, r3
 8000b60:	f002 f9b6 	bl	8002ed0 <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 8000b64:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <LCD_SendDataMulti+0x5c>)
 8000b66:	6818      	ldr	r0, [r3, #0]
 8000b68:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <LCD_SendDataMulti+0x60>)
 8000b6a:	881b      	ldrh	r3, [r3, #0]
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	4619      	mov	r1, r3
 8000b70:	f002 f9ae 	bl	8002ed0 <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&lcdSPIhandle, (uint8_t*) &Colordata, size, 1000);
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	b29a      	uxth	r2, r3
 8000b78:	1db9      	adds	r1, r7, #6
 8000b7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b7e:	480b      	ldr	r0, [pc, #44]	; (8000bac <LCD_SendDataMulti+0x64>)
 8000b80:	f002 ff99 	bl	8003ab6 <HAL_SPI_Transmit>
	//Wait for end of DMA transfer
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 8000b84:	4b07      	ldr	r3, [pc, #28]	; (8000ba4 <LCD_SendDataMulti+0x5c>)
 8000b86:	6818      	ldr	r0, [r3, #0]
 8000b88:	4b07      	ldr	r3, [pc, #28]	; (8000ba8 <LCD_SendDataMulti+0x60>)
 8000b8a:	881b      	ldrh	r3, [r3, #0]
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	4619      	mov	r1, r3
 8000b90:	f002 f99e 	bl	8002ed0 <HAL_GPIO_WritePin>
}
 8000b94:	bf00      	nop
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	2000015c 	.word	0x2000015c
 8000ba0:	20000160 	.word	0x20000160
 8000ba4:	20000154 	.word	0x20000154
 8000ba8:	20000158 	.word	0x20000158
 8000bac:	200000fc 	.word	0x200000fc

08000bb0 <LCD_SetCursorPosition>:

//3. Set cursor position
void LCD_SetCursorPosition(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8000bb0:	b590      	push	{r4, r7, lr}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4604      	mov	r4, r0
 8000bb8:	4608      	mov	r0, r1
 8000bba:	4611      	mov	r1, r2
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	4623      	mov	r3, r4
 8000bc0:	80fb      	strh	r3, [r7, #6]
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	80bb      	strh	r3, [r7, #4]
 8000bc6:	460b      	mov	r3, r1
 8000bc8:	807b      	strh	r3, [r7, #2]
 8000bca:	4613      	mov	r3, r2
 8000bcc:	803b      	strh	r3, [r7, #0]

	LCD_SendCommand(HX8357_CASET);
 8000bce:	202a      	movs	r0, #42	; 0x2a
 8000bd0:	f7ff ff52 	bl	8000a78 <LCD_SendCommand>
	LCD_SendData(x1 >> 8);
 8000bd4:	88fb      	ldrh	r3, [r7, #6]
 8000bd6:	0a1b      	lsrs	r3, r3, #8
 8000bd8:	b29b      	uxth	r3, r3
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff ff7f 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(x1 & 0xFF);
 8000be2:	88fb      	ldrh	r3, [r7, #6]
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff ff7a 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(x2 >> 8);
 8000bec:	887b      	ldrh	r3, [r7, #2]
 8000bee:	0a1b      	lsrs	r3, r3, #8
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff ff73 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(x2 & 0xFF);
 8000bfa:	887b      	ldrh	r3, [r7, #2]
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff ff6e 	bl	8000ae0 <LCD_SendData>

	LCD_SendCommand(HX8357_PASET);
 8000c04:	202b      	movs	r0, #43	; 0x2b
 8000c06:	f7ff ff37 	bl	8000a78 <LCD_SendCommand>
	LCD_SendData(y1 >> 8);
 8000c0a:	88bb      	ldrh	r3, [r7, #4]
 8000c0c:	0a1b      	lsrs	r3, r3, #8
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff ff64 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(y1 & 0xFF);
 8000c18:	88bb      	ldrh	r3, [r7, #4]
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff ff5f 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(y2 >> 8);
 8000c22:	883b      	ldrh	r3, [r7, #0]
 8000c24:	0a1b      	lsrs	r3, r3, #8
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff ff58 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(y2 & 0xFF);
 8000c30:	883b      	ldrh	r3, [r7, #0]
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff ff53 	bl	8000ae0 <LCD_SendData>
	LCD_SendCommand(HX8357_RAMWR);
 8000c3a:	202c      	movs	r0, #44	; 0x2c
 8000c3c:	f7ff ff1c 	bl	8000a78 <LCD_SendCommand>
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd90      	pop	{r4, r7, pc}

08000c48 <LCD_Init>:
//4. Initialise function
void LCD_Init(SPI_HandleTypeDef *spiLcdHandle, GPIO_TypeDef *csPORT,
		uint16_t csPIN, GPIO_TypeDef *dcPORT, uint16_t dcPIN,
		GPIO_TypeDef *resetPORT, uint16_t resetPIN) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	603b      	str	r3, [r7, #0]
 8000c54:	4613      	mov	r3, r2
 8000c56:	80fb      	strh	r3, [r7, #6]
	//Copy SPI settings
	memcpy(&lcdSPIhandle, spiLcdHandle, sizeof(*spiLcdHandle));
 8000c58:	2258      	movs	r2, #88	; 0x58
 8000c5a:	68f9      	ldr	r1, [r7, #12]
 8000c5c:	489e      	ldr	r0, [pc, #632]	; (8000ed8 <LCD_Init+0x290>)
 8000c5e:	f003 f911 	bl	8003e84 <memcpy>
	//CS pin
	tftCS_GPIO = csPORT;
 8000c62:	4a9e      	ldr	r2, [pc, #632]	; (8000edc <LCD_Init+0x294>)
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	6013      	str	r3, [r2, #0]
	tftCS_PIN = csPIN;
 8000c68:	4a9d      	ldr	r2, [pc, #628]	; (8000ee0 <LCD_Init+0x298>)
 8000c6a:	88fb      	ldrh	r3, [r7, #6]
 8000c6c:	8013      	strh	r3, [r2, #0]
	//DC pin
	tftDC_GPIO = dcPORT;
 8000c6e:	4a9d      	ldr	r2, [pc, #628]	; (8000ee4 <LCD_Init+0x29c>)
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	6013      	str	r3, [r2, #0]
	tftDC_PIN = dcPIN;
 8000c74:	4a9c      	ldr	r2, [pc, #624]	; (8000ee8 <LCD_Init+0x2a0>)
 8000c76:	8b3b      	ldrh	r3, [r7, #24]
 8000c78:	8013      	strh	r3, [r2, #0]
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 8000c7a:	4b98      	ldr	r3, [pc, #608]	; (8000edc <LCD_Init+0x294>)
 8000c7c:	6818      	ldr	r0, [r3, #0]
 8000c7e:	4b98      	ldr	r3, [pc, #608]	; (8000ee0 <LCD_Init+0x298>)
 8000c80:	881b      	ldrh	r3, [r3, #0]
 8000c82:	2201      	movs	r2, #1
 8000c84:	4619      	mov	r1, r3
 8000c86:	f002 f923 	bl	8002ed0 <HAL_GPIO_WritePin>
	//RESET pin
	tftRESET_GPIO = resetPORT;
 8000c8a:	4a98      	ldr	r2, [pc, #608]	; (8000eec <LCD_Init+0x2a4>)
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	6013      	str	r3, [r2, #0]
	tftRESET_PIN = resetPIN;
 8000c90:	4a97      	ldr	r2, [pc, #604]	; (8000ef0 <LCD_Init+0x2a8>)
 8000c92:	8c3b      	ldrh	r3, [r7, #32]
 8000c94:	8013      	strh	r3, [r2, #0]
	HAL_GPIO_WritePin(resetPORT, resetPIN, GPIO_PIN_SET);  //Turn LCD ON
 8000c96:	8c3b      	ldrh	r3, [r7, #32]
 8000c98:	2201      	movs	r2, #1
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	69f8      	ldr	r0, [r7, #28]
 8000c9e:	f002 f917 	bl	8002ed0 <HAL_GPIO_WritePin>

	LCD_SendCommand(HX8357_SWRESET);
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	f7ff fee8 	bl	8000a78 <LCD_SendCommand>
	LCD_SendCommand(0x80);
 8000ca8:	2080      	movs	r0, #128	; 0x80
 8000caa:	f7ff fee5 	bl	8000a78 <LCD_SendCommand>
	HAL_Delay(10);
 8000cae:	200a      	movs	r0, #10
 8000cb0:	f001 fa72 	bl	8002198 <HAL_Delay>
	LCD_SendCommand(HX8357D_SETC);
 8000cb4:	20b9      	movs	r0, #185	; 0xb9
 8000cb6:	f7ff fedf 	bl	8000a78 <LCD_SendCommand>
	LCD_SendData(0xFF);
 8000cba:	20ff      	movs	r0, #255	; 0xff
 8000cbc:	f7ff ff10 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x83);
 8000cc0:	2083      	movs	r0, #131	; 0x83
 8000cc2:	f7ff ff0d 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x57);
 8000cc6:	2057      	movs	r0, #87	; 0x57
 8000cc8:	f7ff ff0a 	bl	8000ae0 <LCD_SendData>
	LCD_SendCommand(0xFF);
 8000ccc:	20ff      	movs	r0, #255	; 0xff
 8000cce:	f7ff fed3 	bl	8000a78 <LCD_SendCommand>
	LCD_SendCommand(0x80);
 8000cd2:	2080      	movs	r0, #128	; 0x80
 8000cd4:	f7ff fed0 	bl	8000a78 <LCD_SendCommand>
	HAL_Delay(300);
 8000cd8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000cdc:	f001 fa5c 	bl	8002198 <HAL_Delay>
	LCD_SendCommand(HX8357_SETRGB);
 8000ce0:	20b3      	movs	r0, #179	; 0xb3
 8000ce2:	f7ff fec9 	bl	8000a78 <LCD_SendCommand>
	LCD_SendData(0x80);
 8000ce6:	2080      	movs	r0, #128	; 0x80
 8000ce8:	f7ff fefa 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x00);
 8000cec:	2000      	movs	r0, #0
 8000cee:	f7ff fef7 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x06);
 8000cf2:	2006      	movs	r0, #6
 8000cf4:	f7ff fef4 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x06);
 8000cf8:	2006      	movs	r0, #6
 8000cfa:	f7ff fef1 	bl	8000ae0 <LCD_SendData>
	LCD_SendCommand(HX8357D_SETCOM);
 8000cfe:	20b6      	movs	r0, #182	; 0xb6
 8000d00:	f7ff feba 	bl	8000a78 <LCD_SendCommand>
	LCD_SendData(0x25);
 8000d04:	2025      	movs	r0, #37	; 0x25
 8000d06:	f7ff feeb 	bl	8000ae0 <LCD_SendData>
	LCD_SendCommand(HX8357_SETOSC);
 8000d0a:	20b0      	movs	r0, #176	; 0xb0
 8000d0c:	f7ff feb4 	bl	8000a78 <LCD_SendCommand>
	LCD_SendData(0x68);
 8000d10:	2068      	movs	r0, #104	; 0x68
 8000d12:	f7ff fee5 	bl	8000ae0 <LCD_SendData>
	LCD_SendCommand(HX8357_SETPANEL);
 8000d16:	20cc      	movs	r0, #204	; 0xcc
 8000d18:	f7ff feae 	bl	8000a78 <LCD_SendCommand>
	LCD_SendData(0x05);
 8000d1c:	2005      	movs	r0, #5
 8000d1e:	f7ff fedf 	bl	8000ae0 <LCD_SendData>
	LCD_SendCommand(HX8357_SETPWR1);
 8000d22:	20b1      	movs	r0, #177	; 0xb1
 8000d24:	f7ff fea8 	bl	8000a78 <LCD_SendCommand>
	LCD_SendData(0x00);
 8000d28:	2000      	movs	r0, #0
 8000d2a:	f7ff fed9 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x15);
 8000d2e:	2015      	movs	r0, #21
 8000d30:	f7ff fed6 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x1C);
 8000d34:	201c      	movs	r0, #28
 8000d36:	f7ff fed3 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x1C);
 8000d3a:	201c      	movs	r0, #28
 8000d3c:	f7ff fed0 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x83);
 8000d40:	2083      	movs	r0, #131	; 0x83
 8000d42:	f7ff fecd 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0xAA);
 8000d46:	20aa      	movs	r0, #170	; 0xaa
 8000d48:	f7ff feca 	bl	8000ae0 <LCD_SendData>
	LCD_SendCommand(HX8357D_SETSTBA);
 8000d4c:	20c0      	movs	r0, #192	; 0xc0
 8000d4e:	f7ff fe93 	bl	8000a78 <LCD_SendCommand>
	LCD_SendData(0x50);
 8000d52:	2050      	movs	r0, #80	; 0x50
 8000d54:	f7ff fec4 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x50);
 8000d58:	2050      	movs	r0, #80	; 0x50
 8000d5a:	f7ff fec1 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x01);
 8000d5e:	2001      	movs	r0, #1
 8000d60:	f7ff febe 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x3C);
 8000d64:	203c      	movs	r0, #60	; 0x3c
 8000d66:	f7ff febb 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x1E);
 8000d6a:	201e      	movs	r0, #30
 8000d6c:	f7ff feb8 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x08);
 8000d70:	2008      	movs	r0, #8
 8000d72:	f7ff feb5 	bl	8000ae0 <LCD_SendData>
	LCD_SendCommand(HX8357D_SETCYC);
 8000d76:	20b4      	movs	r0, #180	; 0xb4
 8000d78:	f7ff fe7e 	bl	8000a78 <LCD_SendCommand>
	LCD_SendData(0x02);
 8000d7c:	2002      	movs	r0, #2
 8000d7e:	f7ff feaf 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x40);
 8000d82:	2040      	movs	r0, #64	; 0x40
 8000d84:	f7ff feac 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x00);
 8000d88:	2000      	movs	r0, #0
 8000d8a:	f7ff fea9 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x2A);
 8000d8e:	202a      	movs	r0, #42	; 0x2a
 8000d90:	f7ff fea6 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x2A);
 8000d94:	202a      	movs	r0, #42	; 0x2a
 8000d96:	f7ff fea3 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x0D);
 8000d9a:	200d      	movs	r0, #13
 8000d9c:	f7ff fea0 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x78);
 8000da0:	2078      	movs	r0, #120	; 0x78
 8000da2:	f7ff fe9d 	bl	8000ae0 <LCD_SendData>
	LCD_SendCommand(HX8357D_SETGAMMA);
 8000da6:	20e0      	movs	r0, #224	; 0xe0
 8000da8:	f7ff fe66 	bl	8000a78 <LCD_SendCommand>

	LCD_SendData(0x02);
 8000dac:	2002      	movs	r0, #2
 8000dae:	f7ff fe97 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x0A);
 8000db2:	200a      	movs	r0, #10
 8000db4:	f7ff fe94 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x11);
 8000db8:	2011      	movs	r0, #17
 8000dba:	f7ff fe91 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x1D);
 8000dbe:	201d      	movs	r0, #29
 8000dc0:	f7ff fe8e 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x23);
 8000dc4:	2023      	movs	r0, #35	; 0x23
 8000dc6:	f7ff fe8b 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x35);
 8000dca:	2035      	movs	r0, #53	; 0x35
 8000dcc:	f7ff fe88 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x41);
 8000dd0:	2041      	movs	r0, #65	; 0x41
 8000dd2:	f7ff fe85 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x4b);
 8000dd6:	204b      	movs	r0, #75	; 0x4b
 8000dd8:	f7ff fe82 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x4b);
 8000ddc:	204b      	movs	r0, #75	; 0x4b
 8000dde:	f7ff fe7f 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x42);
 8000de2:	2042      	movs	r0, #66	; 0x42
 8000de4:	f7ff fe7c 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x3A);
 8000de8:	203a      	movs	r0, #58	; 0x3a
 8000dea:	f7ff fe79 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x27);
 8000dee:	2027      	movs	r0, #39	; 0x27
 8000df0:	f7ff fe76 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x1B);
 8000df4:	201b      	movs	r0, #27
 8000df6:	f7ff fe73 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x08);
 8000dfa:	2008      	movs	r0, #8
 8000dfc:	f7ff fe70 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x09);
 8000e00:	2009      	movs	r0, #9
 8000e02:	f7ff fe6d 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x03);
 8000e06:	2003      	movs	r0, #3
 8000e08:	f7ff fe6a 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x02);
 8000e0c:	2002      	movs	r0, #2
 8000e0e:	f7ff fe67 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x0A);
 8000e12:	200a      	movs	r0, #10
 8000e14:	f7ff fe64 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x11);
 8000e18:	2011      	movs	r0, #17
 8000e1a:	f7ff fe61 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x1d);
 8000e1e:	201d      	movs	r0, #29
 8000e20:	f7ff fe5e 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x23);
 8000e24:	2023      	movs	r0, #35	; 0x23
 8000e26:	f7ff fe5b 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x35);
 8000e2a:	2035      	movs	r0, #53	; 0x35
 8000e2c:	f7ff fe58 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x41);
 8000e30:	2041      	movs	r0, #65	; 0x41
 8000e32:	f7ff fe55 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x4b);
 8000e36:	204b      	movs	r0, #75	; 0x4b
 8000e38:	f7ff fe52 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x4b);
 8000e3c:	204b      	movs	r0, #75	; 0x4b
 8000e3e:	f7ff fe4f 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x42);
 8000e42:	2042      	movs	r0, #66	; 0x42
 8000e44:	f7ff fe4c 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x3A);
 8000e48:	203a      	movs	r0, #58	; 0x3a
 8000e4a:	f7ff fe49 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x27);
 8000e4e:	2027      	movs	r0, #39	; 0x27
 8000e50:	f7ff fe46 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x1B);
 8000e54:	201b      	movs	r0, #27
 8000e56:	f7ff fe43 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x08);
 8000e5a:	2008      	movs	r0, #8
 8000e5c:	f7ff fe40 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x09);
 8000e60:	2009      	movs	r0, #9
 8000e62:	f7ff fe3d 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x03);
 8000e66:	2003      	movs	r0, #3
 8000e68:	f7ff fe3a 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x00);
 8000e6c:	2000      	movs	r0, #0
 8000e6e:	f7ff fe37 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x01);
 8000e72:	2001      	movs	r0, #1
 8000e74:	f7ff fe34 	bl	8000ae0 <LCD_SendData>

	LCD_SendCommand(HX8357_COLMOD);
 8000e78:	203a      	movs	r0, #58	; 0x3a
 8000e7a:	f7ff fdfd 	bl	8000a78 <LCD_SendCommand>
	LCD_SendData(0x55);
 8000e7e:	2055      	movs	r0, #85	; 0x55
 8000e80:	f7ff fe2e 	bl	8000ae0 <LCD_SendData>
	LCD_SendCommand(HX8357_MADCTL);
 8000e84:	2036      	movs	r0, #54	; 0x36
 8000e86:	f7ff fdf7 	bl	8000a78 <LCD_SendCommand>
	LCD_SendData(0xC0);
 8000e8a:	20c0      	movs	r0, #192	; 0xc0
 8000e8c:	f7ff fe28 	bl	8000ae0 <LCD_SendData>
	LCD_SendCommand(HX8357_TEON);
 8000e90:	2035      	movs	r0, #53	; 0x35
 8000e92:	f7ff fdf1 	bl	8000a78 <LCD_SendCommand>
	LCD_SendData(0x00);
 8000e96:	2000      	movs	r0, #0
 8000e98:	f7ff fe22 	bl	8000ae0 <LCD_SendData>
	LCD_SendCommand(HX8357_TEARLINE);
 8000e9c:	2044      	movs	r0, #68	; 0x44
 8000e9e:	f7ff fdeb 	bl	8000a78 <LCD_SendCommand>
	LCD_SendDataMulti(0x00, 0x02);
 8000ea2:	2102      	movs	r1, #2
 8000ea4:	2000      	movs	r0, #0
 8000ea6:	f7ff fe4f 	bl	8000b48 <LCD_SendDataMulti>
	LCD_SendCommand(HX8357_SLPOUT);
 8000eaa:	2011      	movs	r0, #17
 8000eac:	f7ff fde4 	bl	8000a78 <LCD_SendCommand>
	LCD_SendCommand(0x80);
 8000eb0:	2080      	movs	r0, #128	; 0x80
 8000eb2:	f7ff fde1 	bl	8000a78 <LCD_SendCommand>
	HAL_Delay(150);
 8000eb6:	2096      	movs	r0, #150	; 0x96
 8000eb8:	f001 f96e 	bl	8002198 <HAL_Delay>
	LCD_SendCommand(HX8357_DISPON);
 8000ebc:	2029      	movs	r0, #41	; 0x29
 8000ebe:	f7ff fddb 	bl	8000a78 <LCD_SendCommand>
	LCD_SendCommand(0x80);
 8000ec2:	2080      	movs	r0, #128	; 0x80
 8000ec4:	f7ff fdd8 	bl	8000a78 <LCD_SendCommand>
	HAL_Delay(50);
 8000ec8:	2032      	movs	r0, #50	; 0x32
 8000eca:	f001 f965 	bl	8002198 <HAL_Delay>
}
 8000ece:	bf00      	nop
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	200000fc 	.word	0x200000fc
 8000edc:	20000154 	.word	0x20000154
 8000ee0:	20000158 	.word	0x20000158
 8000ee4:	2000015c 	.word	0x2000015c
 8000ee8:	20000160 	.word	0x20000160
 8000eec:	20000164 	.word	0x20000164
 8000ef0:	20000168 	.word	0x20000168

08000ef4 <LCD_DrawPixel>:

//5. Write data to a single pixel
void LCD_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	80fb      	strh	r3, [r7, #6]
 8000efe:	460b      	mov	r3, r1
 8000f00:	80bb      	strh	r3, [r7, #4]
 8000f02:	4613      	mov	r3, r2
 8000f04:	807b      	strh	r3, [r7, #2]
	LCD_SetCursorPosition(x, y, x, y);
 8000f06:	88bb      	ldrh	r3, [r7, #4]
 8000f08:	88fa      	ldrh	r2, [r7, #6]
 8000f0a:	88b9      	ldrh	r1, [r7, #4]
 8000f0c:	88f8      	ldrh	r0, [r7, #6]
 8000f0e:	f7ff fe4f 	bl	8000bb0 <LCD_SetCursorPosition>
	LCD_SendData(color >> 8);
 8000f12:	887b      	ldrh	r3, [r7, #2]
 8000f14:	0a1b      	lsrs	r3, r3, #8
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff fde0 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(color & 0xFF);
 8000f20:	887b      	ldrh	r3, [r7, #2]
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff fddb 	bl	8000ae0 <LCD_SendData>
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <LCD_Fill>:
//6. Fill the entire screen with a background color
void LCD_Fill(uint16_t color) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	80fb      	strh	r3, [r7, #6]
	uint32_t n = LCD_PIXEL_COUNT;
 8000f3e:	f44f 3316 	mov.w	r3, #153600	; 0x25800
 8000f42:	60fb      	str	r3, [r7, #12]
	uint16_t myColor = 0xFF;
 8000f44:	23ff      	movs	r3, #255	; 0xff
 8000f46:	817b      	strh	r3, [r7, #10]

	if (rotationNum == 1 || rotationNum == 3) {
 8000f48:	4b1b      	ldr	r3, [pc, #108]	; (8000fb8 <LCD_Fill+0x84>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d003      	beq.n	8000f58 <LCD_Fill+0x24>
 8000f50:	4b19      	ldr	r3, [pc, #100]	; (8000fb8 <LCD_Fill+0x84>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	2b03      	cmp	r3, #3
 8000f56:	d108      	bne.n	8000f6a <LCD_Fill+0x36>
		LCD_SetCursorPosition(0, 0, HX8357_TFTWIDTH - 1, HX8357_TFTHEIGHT - 1);
 8000f58:	f240 13df 	movw	r3, #479	; 0x1df
 8000f5c:	f240 123f 	movw	r2, #319	; 0x13f
 8000f60:	2100      	movs	r1, #0
 8000f62:	2000      	movs	r0, #0
 8000f64:	f7ff fe24 	bl	8000bb0 <LCD_SetCursorPosition>
 8000f68:	e00f      	b.n	8000f8a <LCD_Fill+0x56>
	} else if (rotationNum == 2 || rotationNum == 4) {
 8000f6a:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <LCD_Fill+0x84>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	d003      	beq.n	8000f7a <LCD_Fill+0x46>
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <LCD_Fill+0x84>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	2b04      	cmp	r3, #4
 8000f78:	d117      	bne.n	8000faa <LCD_Fill+0x76>
		LCD_SetCursorPosition(0, 0, HX8357_TFTHEIGHT - 1, HX8357_TFTWIDTH - 1);
 8000f7a:	f240 133f 	movw	r3, #319	; 0x13f
 8000f7e:	f240 12df 	movw	r2, #479	; 0x1df
 8000f82:	2100      	movs	r1, #0
 8000f84:	2000      	movs	r0, #0
 8000f86:	f7ff fe13 	bl	8000bb0 <LCD_SetCursorPosition>
	}

	while (n) {
 8000f8a:	e00e      	b.n	8000faa <LCD_Fill+0x76>
		n--;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	60fb      	str	r3, [r7, #12]
		LCD_SendData(color >> 8);
 8000f92:	88fb      	ldrh	r3, [r7, #6]
 8000f94:	0a1b      	lsrs	r3, r3, #8
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff fda0 	bl	8000ae0 <LCD_SendData>
		LCD_SendData(color & 0xff);
 8000fa0:	88fb      	ldrh	r3, [r7, #6]
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fd9b 	bl	8000ae0 <LCD_SendData>
	while (n) {
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d1ed      	bne.n	8000f8c <LCD_Fill+0x58>
	}
}
 8000fb0:	bf00      	nop
 8000fb2:	3710      	adds	r7, #16
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000000 	.word	0x20000000

08000fbc <LCD_Fill_Rect>:
//7. Rectangle drawing functions
void LCD_Fill_Rect(unsigned int x0, unsigned int y0, unsigned int x1,
		unsigned int y1, uint16_t color) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
 8000fc8:	603b      	str	r3, [r7, #0]
	uint32_t n = ((x1 + 1) - x0) * ((y1 + 1) - y0);
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	6839      	ldr	r1, [r7, #0]
 8000fd4:	68ba      	ldr	r2, [r7, #8]
 8000fd6:	1a8a      	subs	r2, r1, r2
 8000fd8:	3201      	adds	r2, #1
 8000fda:	fb02 f303 	mul.w	r3, r2, r3
 8000fde:	617b      	str	r3, [r7, #20]
	if (n > LCD_PIXEL_COUNT)
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	f5b3 3f16 	cmp.w	r3, #153600	; 0x25800
 8000fe6:	d902      	bls.n	8000fee <LCD_Fill_Rect+0x32>
		n = LCD_PIXEL_COUNT;
 8000fe8:	f44f 3316 	mov.w	r3, #153600	; 0x25800
 8000fec:	617b      	str	r3, [r7, #20]
	LCD_SetCursorPosition(x0, y0, x1, y1);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	b298      	uxth	r0, r3
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	b299      	uxth	r1, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	b29a      	uxth	r2, r3
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	f7ff fdd7 	bl	8000bb0 <LCD_SetCursorPosition>
	while (n) {
 8001002:	e00e      	b.n	8001022 <LCD_Fill_Rect+0x66>
		n--;
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	3b01      	subs	r3, #1
 8001008:	617b      	str	r3, [r7, #20]
		LCD_SendData(color >> 8);
 800100a:	8c3b      	ldrh	r3, [r7, #32]
 800100c:	0a1b      	lsrs	r3, r3, #8
 800100e:	b29b      	uxth	r3, r3
 8001010:	b2db      	uxtb	r3, r3
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff fd64 	bl	8000ae0 <LCD_SendData>
		LCD_SendData(color & 0xff);
 8001018:	8c3b      	ldrh	r3, [r7, #32]
 800101a:	b2db      	uxtb	r3, r3
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff fd5f 	bl	8000ae0 <LCD_SendData>
	while (n) {
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d1ed      	bne.n	8001004 <LCD_Fill_Rect+0x48>
	}
}
 8001028:	bf00      	nop
 800102a:	3718      	adds	r7, #24
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <LCD_drawCircle>:

//8. Circle drawing functions
void LCD_drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 8001030:	b590      	push	{r4, r7, lr}
 8001032:	b087      	sub	sp, #28
 8001034:	af00      	add	r7, sp, #0
 8001036:	4604      	mov	r4, r0
 8001038:	4608      	mov	r0, r1
 800103a:	4611      	mov	r1, r2
 800103c:	461a      	mov	r2, r3
 800103e:	4623      	mov	r3, r4
 8001040:	80fb      	strh	r3, [r7, #6]
 8001042:	4603      	mov	r3, r0
 8001044:	80bb      	strh	r3, [r7, #4]
 8001046:	460b      	mov	r3, r1
 8001048:	807b      	strh	r3, [r7, #2]
 800104a:	4613      	mov	r3, r2
 800104c:	803b      	strh	r3, [r7, #0]
	int16_t f = 1 - r;
 800104e:	887b      	ldrh	r3, [r7, #2]
 8001050:	f1c3 0301 	rsb	r3, r3, #1
 8001054:	b29b      	uxth	r3, r3
 8001056:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8001058:	2301      	movs	r3, #1
 800105a:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 800105c:	887b      	ldrh	r3, [r7, #2]
 800105e:	461a      	mov	r2, r3
 8001060:	03d2      	lsls	r2, r2, #15
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	b29b      	uxth	r3, r3
 8001068:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 800106e:	887b      	ldrh	r3, [r7, #2]
 8001070:	81fb      	strh	r3, [r7, #14]

	LCD_DrawPixel(x0, y0 + r, color);
 8001072:	88f8      	ldrh	r0, [r7, #6]
 8001074:	88ba      	ldrh	r2, [r7, #4]
 8001076:	887b      	ldrh	r3, [r7, #2]
 8001078:	4413      	add	r3, r2
 800107a:	b29b      	uxth	r3, r3
 800107c:	883a      	ldrh	r2, [r7, #0]
 800107e:	4619      	mov	r1, r3
 8001080:	f7ff ff38 	bl	8000ef4 <LCD_DrawPixel>
	LCD_DrawPixel(x0, y0 - r, color);
 8001084:	88f8      	ldrh	r0, [r7, #6]
 8001086:	88ba      	ldrh	r2, [r7, #4]
 8001088:	887b      	ldrh	r3, [r7, #2]
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	b29b      	uxth	r3, r3
 800108e:	883a      	ldrh	r2, [r7, #0]
 8001090:	4619      	mov	r1, r3
 8001092:	f7ff ff2f 	bl	8000ef4 <LCD_DrawPixel>
	LCD_DrawPixel(x0 + r, y0, color);
 8001096:	88fa      	ldrh	r2, [r7, #6]
 8001098:	887b      	ldrh	r3, [r7, #2]
 800109a:	4413      	add	r3, r2
 800109c:	b29b      	uxth	r3, r3
 800109e:	88b9      	ldrh	r1, [r7, #4]
 80010a0:	883a      	ldrh	r2, [r7, #0]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff ff26 	bl	8000ef4 <LCD_DrawPixel>
	LCD_DrawPixel(x0 - r, y0, color);
 80010a8:	88fa      	ldrh	r2, [r7, #6]
 80010aa:	887b      	ldrh	r3, [r7, #2]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	88b9      	ldrh	r1, [r7, #4]
 80010b2:	883a      	ldrh	r2, [r7, #0]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff1d 	bl	8000ef4 <LCD_DrawPixel>

	while (x < y) {
 80010ba:	e081      	b.n	80011c0 <LCD_drawCircle+0x190>
		if (f >= 0) {
 80010bc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	db0e      	blt.n	80010e2 <LCD_drawCircle+0xb2>
			y--;
 80010c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	3b01      	subs	r3, #1
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 80010d0:	8a7b      	ldrh	r3, [r7, #18]
 80010d2:	3302      	adds	r3, #2
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 80010d8:	8afa      	ldrh	r2, [r7, #22]
 80010da:	8a7b      	ldrh	r3, [r7, #18]
 80010dc:	4413      	add	r3, r2
 80010de:	b29b      	uxth	r3, r3
 80010e0:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 80010e2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80010e6:	b29b      	uxth	r3, r3
 80010e8:	3301      	adds	r3, #1
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 80010ee:	8abb      	ldrh	r3, [r7, #20]
 80010f0:	3302      	adds	r3, #2
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 80010f6:	8afa      	ldrh	r2, [r7, #22]
 80010f8:	8abb      	ldrh	r3, [r7, #20]
 80010fa:	4413      	add	r3, r2
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	82fb      	strh	r3, [r7, #22]

		LCD_DrawPixel(x0 + x, y0 + y, color);
 8001100:	88fa      	ldrh	r2, [r7, #6]
 8001102:	8a3b      	ldrh	r3, [r7, #16]
 8001104:	4413      	add	r3, r2
 8001106:	b298      	uxth	r0, r3
 8001108:	88ba      	ldrh	r2, [r7, #4]
 800110a:	89fb      	ldrh	r3, [r7, #14]
 800110c:	4413      	add	r3, r2
 800110e:	b29b      	uxth	r3, r3
 8001110:	883a      	ldrh	r2, [r7, #0]
 8001112:	4619      	mov	r1, r3
 8001114:	f7ff feee 	bl	8000ef4 <LCD_DrawPixel>
		LCD_DrawPixel(x0 - x, y0 + y, color);
 8001118:	88fa      	ldrh	r2, [r7, #6]
 800111a:	8a3b      	ldrh	r3, [r7, #16]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	b298      	uxth	r0, r3
 8001120:	88ba      	ldrh	r2, [r7, #4]
 8001122:	89fb      	ldrh	r3, [r7, #14]
 8001124:	4413      	add	r3, r2
 8001126:	b29b      	uxth	r3, r3
 8001128:	883a      	ldrh	r2, [r7, #0]
 800112a:	4619      	mov	r1, r3
 800112c:	f7ff fee2 	bl	8000ef4 <LCD_DrawPixel>
		LCD_DrawPixel(x0 + x, y0 - y, color);
 8001130:	88fa      	ldrh	r2, [r7, #6]
 8001132:	8a3b      	ldrh	r3, [r7, #16]
 8001134:	4413      	add	r3, r2
 8001136:	b298      	uxth	r0, r3
 8001138:	88ba      	ldrh	r2, [r7, #4]
 800113a:	89fb      	ldrh	r3, [r7, #14]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	b29b      	uxth	r3, r3
 8001140:	883a      	ldrh	r2, [r7, #0]
 8001142:	4619      	mov	r1, r3
 8001144:	f7ff fed6 	bl	8000ef4 <LCD_DrawPixel>
		LCD_DrawPixel(x0 - x, y0 - y, color);
 8001148:	88fa      	ldrh	r2, [r7, #6]
 800114a:	8a3b      	ldrh	r3, [r7, #16]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	b298      	uxth	r0, r3
 8001150:	88ba      	ldrh	r2, [r7, #4]
 8001152:	89fb      	ldrh	r3, [r7, #14]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	b29b      	uxth	r3, r3
 8001158:	883a      	ldrh	r2, [r7, #0]
 800115a:	4619      	mov	r1, r3
 800115c:	f7ff feca 	bl	8000ef4 <LCD_DrawPixel>
		LCD_DrawPixel(x0 + y, y0 + x, color);
 8001160:	88fa      	ldrh	r2, [r7, #6]
 8001162:	89fb      	ldrh	r3, [r7, #14]
 8001164:	4413      	add	r3, r2
 8001166:	b298      	uxth	r0, r3
 8001168:	88ba      	ldrh	r2, [r7, #4]
 800116a:	8a3b      	ldrh	r3, [r7, #16]
 800116c:	4413      	add	r3, r2
 800116e:	b29b      	uxth	r3, r3
 8001170:	883a      	ldrh	r2, [r7, #0]
 8001172:	4619      	mov	r1, r3
 8001174:	f7ff febe 	bl	8000ef4 <LCD_DrawPixel>
		LCD_DrawPixel(x0 - y, y0 + x, color);
 8001178:	88fa      	ldrh	r2, [r7, #6]
 800117a:	89fb      	ldrh	r3, [r7, #14]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	b298      	uxth	r0, r3
 8001180:	88ba      	ldrh	r2, [r7, #4]
 8001182:	8a3b      	ldrh	r3, [r7, #16]
 8001184:	4413      	add	r3, r2
 8001186:	b29b      	uxth	r3, r3
 8001188:	883a      	ldrh	r2, [r7, #0]
 800118a:	4619      	mov	r1, r3
 800118c:	f7ff feb2 	bl	8000ef4 <LCD_DrawPixel>
		LCD_DrawPixel(x0 + y, y0 - x, color);
 8001190:	88fa      	ldrh	r2, [r7, #6]
 8001192:	89fb      	ldrh	r3, [r7, #14]
 8001194:	4413      	add	r3, r2
 8001196:	b298      	uxth	r0, r3
 8001198:	88ba      	ldrh	r2, [r7, #4]
 800119a:	8a3b      	ldrh	r3, [r7, #16]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	b29b      	uxth	r3, r3
 80011a0:	883a      	ldrh	r2, [r7, #0]
 80011a2:	4619      	mov	r1, r3
 80011a4:	f7ff fea6 	bl	8000ef4 <LCD_DrawPixel>
		LCD_DrawPixel(x0 - y, y0 - x, color);
 80011a8:	88fa      	ldrh	r2, [r7, #6]
 80011aa:	89fb      	ldrh	r3, [r7, #14]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	b298      	uxth	r0, r3
 80011b0:	88ba      	ldrh	r2, [r7, #4]
 80011b2:	8a3b      	ldrh	r3, [r7, #16]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	883a      	ldrh	r2, [r7, #0]
 80011ba:	4619      	mov	r1, r3
 80011bc:	f7ff fe9a 	bl	8000ef4 <LCD_DrawPixel>
	while (x < y) {
 80011c0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80011c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	f6ff af77 	blt.w	80010bc <LCD_drawCircle+0x8c>
	}
}
 80011ce:	bf00      	nop
 80011d0:	371c      	adds	r7, #28
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd90      	pop	{r4, r7, pc}

080011d6 <LCD_drawLine>:
	fillCircleHelper(x0, y0, r, 3, 0, color);
}

//9. Line drawing functions
void LCD_drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
		uint16_t color) {
 80011d6:	b590      	push	{r4, r7, lr}
 80011d8:	b089      	sub	sp, #36	; 0x24
 80011da:	af00      	add	r7, sp, #0
 80011dc:	4604      	mov	r4, r0
 80011de:	4608      	mov	r0, r1
 80011e0:	4611      	mov	r1, r2
 80011e2:	461a      	mov	r2, r3
 80011e4:	4623      	mov	r3, r4
 80011e6:	80fb      	strh	r3, [r7, #6]
 80011e8:	4603      	mov	r3, r0
 80011ea:	80bb      	strh	r3, [r7, #4]
 80011ec:	460b      	mov	r3, r1
 80011ee:	807b      	strh	r3, [r7, #2]
 80011f0:	4613      	mov	r3, r2
 80011f2:	803b      	strh	r3, [r7, #0]
	int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80011f4:	f9b7 2000 	ldrsh.w	r2, [r7]
 80011f8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001202:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001206:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800120a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800120e:	1acb      	subs	r3, r1, r3
 8001210:	2b00      	cmp	r3, #0
 8001212:	bfb8      	it	lt
 8001214:	425b      	neglt	r3, r3
 8001216:	429a      	cmp	r2, r3
 8001218:	bfcc      	ite	gt
 800121a:	2301      	movgt	r3, #1
 800121c:	2300      	movle	r3, #0
 800121e:	b2db      	uxtb	r3, r3
 8001220:	837b      	strh	r3, [r7, #26]
	if (steep) {
 8001222:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d00b      	beq.n	8001242 <LCD_drawLine+0x6c>
		swap(x0, y0);
 800122a:	88fb      	ldrh	r3, [r7, #6]
 800122c:	833b      	strh	r3, [r7, #24]
 800122e:	88bb      	ldrh	r3, [r7, #4]
 8001230:	80fb      	strh	r3, [r7, #6]
 8001232:	8b3b      	ldrh	r3, [r7, #24]
 8001234:	80bb      	strh	r3, [r7, #4]
		swap(x1, y1);
 8001236:	887b      	ldrh	r3, [r7, #2]
 8001238:	82fb      	strh	r3, [r7, #22]
 800123a:	883b      	ldrh	r3, [r7, #0]
 800123c:	807b      	strh	r3, [r7, #2]
 800123e:	8afb      	ldrh	r3, [r7, #22]
 8001240:	803b      	strh	r3, [r7, #0]
	}

	if (x0 > x1) {
 8001242:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001246:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800124a:	429a      	cmp	r2, r3
 800124c:	dd0b      	ble.n	8001266 <LCD_drawLine+0x90>
		swap(x0, x1);
 800124e:	88fb      	ldrh	r3, [r7, #6]
 8001250:	82bb      	strh	r3, [r7, #20]
 8001252:	887b      	ldrh	r3, [r7, #2]
 8001254:	80fb      	strh	r3, [r7, #6]
 8001256:	8abb      	ldrh	r3, [r7, #20]
 8001258:	807b      	strh	r3, [r7, #2]
		swap(y0, y1);
 800125a:	88bb      	ldrh	r3, [r7, #4]
 800125c:	827b      	strh	r3, [r7, #18]
 800125e:	883b      	ldrh	r3, [r7, #0]
 8001260:	80bb      	strh	r3, [r7, #4]
 8001262:	8a7b      	ldrh	r3, [r7, #18]
 8001264:	803b      	strh	r3, [r7, #0]
	}

	int16_t dx, dy;
	dx = x1 - x0;
 8001266:	887a      	ldrh	r2, [r7, #2]
 8001268:	88fb      	ldrh	r3, [r7, #6]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	b29b      	uxth	r3, r3
 800126e:	823b      	strh	r3, [r7, #16]
	dy = abs(y1 - y0);
 8001270:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001274:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b00      	cmp	r3, #0
 800127c:	bfb8      	it	lt
 800127e:	425b      	neglt	r3, r3
 8001280:	81fb      	strh	r3, [r7, #14]

	int16_t err = dx / 2;
 8001282:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001286:	0fda      	lsrs	r2, r3, #31
 8001288:	4413      	add	r3, r2
 800128a:	105b      	asrs	r3, r3, #1
 800128c:	83fb      	strh	r3, [r7, #30]
	int16_t ystep;

	if (y0 < y1) {
 800128e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001292:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001296:	429a      	cmp	r2, r3
 8001298:	da02      	bge.n	80012a0 <LCD_drawLine+0xca>
		ystep = 1;
 800129a:	2301      	movs	r3, #1
 800129c:	83bb      	strh	r3, [r7, #28]
 800129e:	e02d      	b.n	80012fc <LCD_drawLine+0x126>
	} else {
		ystep = -1;
 80012a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012a4:	83bb      	strh	r3, [r7, #28]
	}

	for (; x0 <= x1; x0++) {
 80012a6:	e029      	b.n	80012fc <LCD_drawLine+0x126>
		if (steep) {
 80012a8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d006      	beq.n	80012be <LCD_drawLine+0xe8>
			LCD_DrawPixel(y0, x0, color);
 80012b0:	88bb      	ldrh	r3, [r7, #4]
 80012b2:	88f9      	ldrh	r1, [r7, #6]
 80012b4:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff fe1c 	bl	8000ef4 <LCD_DrawPixel>
 80012bc:	e005      	b.n	80012ca <LCD_drawLine+0xf4>
		} else {
			LCD_DrawPixel(x0, y0, color);
 80012be:	88fb      	ldrh	r3, [r7, #6]
 80012c0:	88b9      	ldrh	r1, [r7, #4]
 80012c2:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fe15 	bl	8000ef4 <LCD_DrawPixel>
		}
		err -= dy;
 80012ca:	8bfa      	ldrh	r2, [r7, #30]
 80012cc:	89fb      	ldrh	r3, [r7, #14]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	83fb      	strh	r3, [r7, #30]
		if (err < 0) {
 80012d4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	da09      	bge.n	80012f0 <LCD_drawLine+0x11a>
			y0 += ystep;
 80012dc:	88ba      	ldrh	r2, [r7, #4]
 80012de:	8bbb      	ldrh	r3, [r7, #28]
 80012e0:	4413      	add	r3, r2
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	80bb      	strh	r3, [r7, #4]
			err += dx;
 80012e6:	8bfa      	ldrh	r2, [r7, #30]
 80012e8:	8a3b      	ldrh	r3, [r7, #16]
 80012ea:	4413      	add	r3, r2
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	83fb      	strh	r3, [r7, #30]
	for (; x0 <= x1; x0++) {
 80012f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	3301      	adds	r3, #1
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	80fb      	strh	r3, [r7, #6]
 80012fc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001300:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001304:	429a      	cmp	r2, r3
 8001306:	ddcf      	ble.n	80012a8 <LCD_drawLine+0xd2>
		}
	}
}
 8001308:	bf00      	nop
 800130a:	3724      	adds	r7, #36	; 0x24
 800130c:	46bd      	mov	sp, r7
 800130e:	bd90      	pop	{r4, r7, pc}

08001310 <LCD_setRotation>:

	LCD_SendData(data[size-1] & 0xFF);
}

//13. Set screen rotation
void LCD_setRotation(uint8_t rotate) {
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	71fb      	strb	r3, [r7, #7]
	switch (rotate) {
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	3b01      	subs	r3, #1
 800131e:	2b03      	cmp	r3, #3
 8001320:	d832      	bhi.n	8001388 <LCD_setRotation+0x78>
 8001322:	a201      	add	r2, pc, #4	; (adr r2, 8001328 <LCD_setRotation+0x18>)
 8001324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001328:	08001339 	.word	0x08001339
 800132c:	0800134d 	.word	0x0800134d
 8001330:	08001361 	.word	0x08001361
 8001334:	08001375 	.word	0x08001375
	case 1:
		rotationNum = 1;
 8001338:	4b1a      	ldr	r3, [pc, #104]	; (80013a4 <LCD_setRotation+0x94>)
 800133a:	2201      	movs	r2, #1
 800133c:	701a      	strb	r2, [r3, #0]
		LCD_SendCommand(HX8357_MADCTL);
 800133e:	2036      	movs	r0, #54	; 0x36
 8001340:	f7ff fb9a 	bl	8000a78 <LCD_SendCommand>
		LCD_SendData(MADCTL_MX | MADCTL_MY | MADCTL_RGB);
 8001344:	20c0      	movs	r0, #192	; 0xc0
 8001346:	f7ff fbcb 	bl	8000ae0 <LCD_SendData>
		break;
 800134a:	e027      	b.n	800139c <LCD_setRotation+0x8c>
	case 2:
		rotationNum = 2;
 800134c:	4b15      	ldr	r3, [pc, #84]	; (80013a4 <LCD_setRotation+0x94>)
 800134e:	2202      	movs	r2, #2
 8001350:	701a      	strb	r2, [r3, #0]
		LCD_SendCommand(HX8357_MADCTL);
 8001352:	2036      	movs	r0, #54	; 0x36
 8001354:	f7ff fb90 	bl	8000a78 <LCD_SendCommand>
		LCD_SendData(MADCTL_MV | MADCTL_MY | MADCTL_RGB);
 8001358:	20a0      	movs	r0, #160	; 0xa0
 800135a:	f7ff fbc1 	bl	8000ae0 <LCD_SendData>
		break;
 800135e:	e01d      	b.n	800139c <LCD_setRotation+0x8c>
	case 3:
		rotationNum = 3;
 8001360:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <LCD_setRotation+0x94>)
 8001362:	2203      	movs	r2, #3
 8001364:	701a      	strb	r2, [r3, #0]
		LCD_SendCommand(HX8357_MADCTL);
 8001366:	2036      	movs	r0, #54	; 0x36
 8001368:	f7ff fb86 	bl	8000a78 <LCD_SendCommand>
		LCD_SendData(MADCTL_RGB);
 800136c:	2000      	movs	r0, #0
 800136e:	f7ff fbb7 	bl	8000ae0 <LCD_SendData>
		break;
 8001372:	e013      	b.n	800139c <LCD_setRotation+0x8c>
	case 4:
		rotationNum = 4;
 8001374:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <LCD_setRotation+0x94>)
 8001376:	2204      	movs	r2, #4
 8001378:	701a      	strb	r2, [r3, #0]
		LCD_SendCommand(HX8357_MADCTL);
 800137a:	2036      	movs	r0, #54	; 0x36
 800137c:	f7ff fb7c 	bl	8000a78 <LCD_SendCommand>
		LCD_SendData(MADCTL_MX | MADCTL_MV | MADCTL_RGB);
 8001380:	2060      	movs	r0, #96	; 0x60
 8001382:	f7ff fbad 	bl	8000ae0 <LCD_SendData>
		break;
 8001386:	e009      	b.n	800139c <LCD_setRotation+0x8c>
	default:
		rotationNum = 1;
 8001388:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <LCD_setRotation+0x94>)
 800138a:	2201      	movs	r2, #1
 800138c:	701a      	strb	r2, [r3, #0]
		LCD_SendCommand(HX8357_MADCTL);
 800138e:	2036      	movs	r0, #54	; 0x36
 8001390:	f7ff fb72 	bl	8000a78 <LCD_SendCommand>
		LCD_SendData(MADCTL_MY | MADCTL_BGR);
 8001394:	2088      	movs	r0, #136	; 0x88
 8001396:	f7ff fba3 	bl	8000ae0 <LCD_SendData>
		break;
 800139a:	bf00      	nop
	}
}
 800139c:	bf00      	nop
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000000 	.word	0x20000000

080013a8 <map>:
static uint16_t ym_PIN = YMIN_Pin;
static uint16_t xm_PIN = XMIN_Pin;
static uint16_t yp_PIN = YPLUS_Pin;
static uint16_t xp_PIN = XPLUS_Pin;

int map(int x, int in_min, int in_max, int out_min, int out_max) {
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
 80013b4:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80013b6:	68fa      	ldr	r2, [r7, #12]
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	69b9      	ldr	r1, [r7, #24]
 80013be:	683a      	ldr	r2, [r7, #0]
 80013c0:	1a8a      	subs	r2, r1, r2
 80013c2:	fb02 f203 	mul.w	r2, r2, r3
 80013c6:	6879      	ldr	r1, [r7, #4]
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	1acb      	subs	r3, r1, r3
 80013cc:	fb92 f2f3 	sdiv	r2, r2, r3
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	4413      	add	r3, r2
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3714      	adds	r7, #20
 80013d8:	46bd      	mov	sp, r7
 80013da:	bc80      	pop	{r7}
 80013dc:	4770      	bx	lr
	...

080013e0 <Touch_Init>:

void Touch_Init(ADC_HandleTypeDef *adc) {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
	memcpy(&adcHandle, adc, sizeof(*adc));
 80013e8:	2230      	movs	r2, #48	; 0x30
 80013ea:	6879      	ldr	r1, [r7, #4]
 80013ec:	4803      	ldr	r0, [pc, #12]	; (80013fc <Touch_Init+0x1c>)
 80013ee:	f002 fd49 	bl	8003e84 <memcpy>
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	2000016c 	.word	0x2000016c

08001400 <setupForReadY>:

bool isTouch();
uint16_t getPressure();

void setupForReadY() {
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.Pin = yp_PIN;
 8001406:	4b2c      	ldr	r3, [pc, #176]	; (80014b8 <setupForReadY+0xb8>)
 8001408:	881b      	ldrh	r3, [r3, #0]
 800140a:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800140c:	2301      	movs	r3, #1
 800140e:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 8001410:	2301      	movs	r3, #1
 8001412:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001414:	2303      	movs	r3, #3
 8001416:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init( yp , &GPIO_InitStructure );
 8001418:	4b28      	ldr	r3, [pc, #160]	; (80014bc <setupForReadY+0xbc>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	463a      	mov	r2, r7
 800141e:	4611      	mov	r1, r2
 8001420:	4618      	mov	r0, r3
 8001422:	f001 fbfb 	bl	8002c1c <HAL_GPIO_Init>
	HAL_GPIO_WritePin(yp, yp_PIN, GPIO_PIN_SET);
 8001426:	4b25      	ldr	r3, [pc, #148]	; (80014bc <setupForReadY+0xbc>)
 8001428:	6818      	ldr	r0, [r3, #0]
 800142a:	4b23      	ldr	r3, [pc, #140]	; (80014b8 <setupForReadY+0xb8>)
 800142c:	881b      	ldrh	r3, [r3, #0]
 800142e:	2201      	movs	r2, #1
 8001430:	4619      	mov	r1, r3
 8001432:	f001 fd4d 	bl	8002ed0 <HAL_GPIO_WritePin>

	GPIO_InitStructure.Pin = ym_PIN;
 8001436:	4b22      	ldr	r3, [pc, #136]	; (80014c0 <setupForReadY+0xc0>)
 8001438:	881b      	ldrh	r3, [r3, #0]
 800143a:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800143c:	2301      	movs	r3, #1
 800143e:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 8001440:	2302      	movs	r3, #2
 8001442:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001444:	2303      	movs	r3, #3
 8001446:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init( ym , &GPIO_InitStructure );
 8001448:	4b1e      	ldr	r3, [pc, #120]	; (80014c4 <setupForReadY+0xc4>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	463a      	mov	r2, r7
 800144e:	4611      	mov	r1, r2
 8001450:	4618      	mov	r0, r3
 8001452:	f001 fbe3 	bl	8002c1c <HAL_GPIO_Init>
	HAL_GPIO_WritePin(ym, ym_PIN, GPIO_PIN_RESET);
 8001456:	4b1b      	ldr	r3, [pc, #108]	; (80014c4 <setupForReadY+0xc4>)
 8001458:	6818      	ldr	r0, [r3, #0]
 800145a:	4b19      	ldr	r3, [pc, #100]	; (80014c0 <setupForReadY+0xc0>)
 800145c:	881b      	ldrh	r3, [r3, #0]
 800145e:	2200      	movs	r2, #0
 8001460:	4619      	mov	r1, r3
 8001462:	f001 fd35 	bl	8002ed0 <HAL_GPIO_WritePin>

	GPIO_InitStructure.Pin = xp_PIN;
 8001466:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <setupForReadY+0xc8>)
 8001468:	881b      	ldrh	r3, [r3, #0]
 800146a:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800146c:	2300      	movs	r3, #0
 800146e:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 8001470:	2302      	movs	r3, #2
 8001472:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init( xp , &GPIO_InitStructure );
 8001474:	4b15      	ldr	r3, [pc, #84]	; (80014cc <setupForReadY+0xcc>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	463a      	mov	r2, r7
 800147a:	4611      	mov	r1, r2
 800147c:	4618      	mov	r0, r3
 800147e:	f001 fbcd 	bl	8002c1c <HAL_GPIO_Init>
	HAL_GPIO_WritePin(xp, xp_PIN, GPIO_PIN_RESET);
 8001482:	4b12      	ldr	r3, [pc, #72]	; (80014cc <setupForReadY+0xcc>)
 8001484:	6818      	ldr	r0, [r3, #0]
 8001486:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <setupForReadY+0xc8>)
 8001488:	881b      	ldrh	r3, [r3, #0]
 800148a:	2200      	movs	r2, #0
 800148c:	4619      	mov	r1, r3
 800148e:	f001 fd1f 	bl	8002ed0 <HAL_GPIO_WritePin>

	GPIO_InitStructure.Pin = xm_PIN;
 8001492:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <setupForReadY+0xd0>)
 8001494:	881b      	ldrh	r3, [r3, #0]
 8001496:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 8001498:	2303      	movs	r3, #3
 800149a:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init( xm , &GPIO_InitStructure );
 80014a0:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <setupForReadY+0xd4>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	463a      	mov	r2, r7
 80014a6:	4611      	mov	r1, r2
 80014a8:	4618      	mov	r0, r3
 80014aa:	f001 fbb7 	bl	8002c1c <HAL_GPIO_Init>
}
 80014ae:	bf00      	nop
 80014b0:	3710      	adds	r7, #16
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20000018 	.word	0x20000018
 80014bc:	2000000c 	.word	0x2000000c
 80014c0:	20000014 	.word	0x20000014
 80014c4:	20000004 	.word	0x20000004
 80014c8:	2000001a 	.word	0x2000001a
 80014cc:	20000010 	.word	0x20000010
 80014d0:	20000016 	.word	0x20000016
 80014d4:	20000008 	.word	0x20000008

080014d8 <setupForReadX>:

void setupForReadX() {
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.Pin = xp_PIN;
 80014de:	4b2c      	ldr	r3, [pc, #176]	; (8001590 <setupForReadX+0xb8>)
 80014e0:	881b      	ldrh	r3, [r3, #0]
 80014e2:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80014e4:	2301      	movs	r3, #1
 80014e6:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 80014e8:	2301      	movs	r3, #1
 80014ea:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80014ec:	2303      	movs	r3, #3
 80014ee:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init( xp , &GPIO_InitStructure );
 80014f0:	4b28      	ldr	r3, [pc, #160]	; (8001594 <setupForReadX+0xbc>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	463a      	mov	r2, r7
 80014f6:	4611      	mov	r1, r2
 80014f8:	4618      	mov	r0, r3
 80014fa:	f001 fb8f 	bl	8002c1c <HAL_GPIO_Init>
	HAL_GPIO_WritePin(xp, xp_PIN, GPIO_PIN_SET);
 80014fe:	4b25      	ldr	r3, [pc, #148]	; (8001594 <setupForReadX+0xbc>)
 8001500:	6818      	ldr	r0, [r3, #0]
 8001502:	4b23      	ldr	r3, [pc, #140]	; (8001590 <setupForReadX+0xb8>)
 8001504:	881b      	ldrh	r3, [r3, #0]
 8001506:	2201      	movs	r2, #1
 8001508:	4619      	mov	r1, r3
 800150a:	f001 fce1 	bl	8002ed0 <HAL_GPIO_WritePin>

	GPIO_InitStructure.Pin = xm_PIN;
 800150e:	4b22      	ldr	r3, [pc, #136]	; (8001598 <setupForReadX+0xc0>)
 8001510:	881b      	ldrh	r3, [r3, #0]
 8001512:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001514:	2301      	movs	r3, #1
 8001516:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 8001518:	2302      	movs	r3, #2
 800151a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800151c:	2303      	movs	r3, #3
 800151e:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init( xm , &GPIO_InitStructure );
 8001520:	4b1e      	ldr	r3, [pc, #120]	; (800159c <setupForReadX+0xc4>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	463a      	mov	r2, r7
 8001526:	4611      	mov	r1, r2
 8001528:	4618      	mov	r0, r3
 800152a:	f001 fb77 	bl	8002c1c <HAL_GPIO_Init>
	HAL_GPIO_WritePin(xm, xm_PIN, GPIO_PIN_RESET);
 800152e:	4b1b      	ldr	r3, [pc, #108]	; (800159c <setupForReadX+0xc4>)
 8001530:	6818      	ldr	r0, [r3, #0]
 8001532:	4b19      	ldr	r3, [pc, #100]	; (8001598 <setupForReadX+0xc0>)
 8001534:	881b      	ldrh	r3, [r3, #0]
 8001536:	2200      	movs	r2, #0
 8001538:	4619      	mov	r1, r3
 800153a:	f001 fcc9 	bl	8002ed0 <HAL_GPIO_WritePin>

	GPIO_InitStructure.Pin = ym_PIN;
 800153e:	4b18      	ldr	r3, [pc, #96]	; (80015a0 <setupForReadX+0xc8>)
 8001540:	881b      	ldrh	r3, [r3, #0]
 8001542:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8001544:	2300      	movs	r3, #0
 8001546:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 8001548:	2302      	movs	r3, #2
 800154a:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init( ym , &GPIO_InitStructure );
 800154c:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <setupForReadX+0xcc>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	463a      	mov	r2, r7
 8001552:	4611      	mov	r1, r2
 8001554:	4618      	mov	r0, r3
 8001556:	f001 fb61 	bl	8002c1c <HAL_GPIO_Init>
	HAL_GPIO_WritePin(ym, ym_PIN, GPIO_PIN_RESET);
 800155a:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <setupForReadX+0xcc>)
 800155c:	6818      	ldr	r0, [r3, #0]
 800155e:	4b10      	ldr	r3, [pc, #64]	; (80015a0 <setupForReadX+0xc8>)
 8001560:	881b      	ldrh	r3, [r3, #0]
 8001562:	2200      	movs	r2, #0
 8001564:	4619      	mov	r1, r3
 8001566:	f001 fcb3 	bl	8002ed0 <HAL_GPIO_WritePin>

	GPIO_InitStructure.Pin = yp_PIN;
 800156a:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <setupForReadX+0xd0>)
 800156c:	881b      	ldrh	r3, [r3, #0]
 800156e:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 8001570:	2303      	movs	r3, #3
 8001572:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init( yp , &GPIO_InitStructure );
 8001578:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <setupForReadX+0xd4>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	463a      	mov	r2, r7
 800157e:	4611      	mov	r1, r2
 8001580:	4618      	mov	r0, r3
 8001582:	f001 fb4b 	bl	8002c1c <HAL_GPIO_Init>
}
 8001586:	bf00      	nop
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	2000001a 	.word	0x2000001a
 8001594:	20000010 	.word	0x20000010
 8001598:	20000016 	.word	0x20000016
 800159c:	20000008 	.word	0x20000008
 80015a0:	20000014 	.word	0x20000014
 80015a4:	20000004 	.word	0x20000004
 80015a8:	20000018 	.word	0x20000018
 80015ac:	2000000c 	.word	0x2000000c

080015b0 <readChannelXMin>:

int readChannelXMin() {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig;
	sConfig.Channel = ADC_CHANNEL_13;
 80015b6:	230d      	movs	r3, #13
 80015b8:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80015ba:	2301      	movs	r3, #1
 80015bc:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80015be:	2307      	movs	r3, #7
 80015c0:	60fb      	str	r3, [r7, #12]
	int config = HAL_ADC_ConfigChannel(&adcHandle, &sConfig);
 80015c2:	1d3b      	adds	r3, r7, #4
 80015c4:	4619      	mov	r1, r3
 80015c6:	480f      	ldr	r0, [pc, #60]	; (8001604 <readChannelXMin+0x54>)
 80015c8:	f001 f8c0 	bl	800274c <HAL_ADC_ConfigChannel>
 80015cc:	4603      	mov	r3, r0
 80015ce:	613b      	str	r3, [r7, #16]
	if (config != HAL_OK)
	{
		//
	}
	HAL_Delay(10);
 80015d0:	200a      	movs	r0, #10
 80015d2:	f000 fde1 	bl	8002198 <HAL_Delay>
	HAL_ADC_Start(&adcHandle);
 80015d6:	480b      	ldr	r0, [pc, #44]	; (8001604 <readChannelXMin+0x54>)
 80015d8:	f000 fed8 	bl	800238c <HAL_ADC_Start>
	uint32_t ADCValue;
	if(HAL_ADC_PollForConversion(&adcHandle, 5) == HAL_OK) {
 80015dc:	2105      	movs	r1, #5
 80015de:	4809      	ldr	r0, [pc, #36]	; (8001604 <readChannelXMin+0x54>)
 80015e0:	f000 ffae 	bl	8002540 <HAL_ADC_PollForConversion>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d103      	bne.n	80015f2 <readChannelXMin+0x42>
		ADCValue = HAL_ADC_GetValue(&adcHandle);
 80015ea:	4806      	ldr	r0, [pc, #24]	; (8001604 <readChannelXMin+0x54>)
 80015ec:	f001 f8a2 	bl	8002734 <HAL_ADC_GetValue>
 80015f0:	6178      	str	r0, [r7, #20]
	}
	HAL_ADC_Stop(&adcHandle);
 80015f2:	4804      	ldr	r0, [pc, #16]	; (8001604 <readChannelXMin+0x54>)
 80015f4:	f000 ff78 	bl	80024e8 <HAL_ADC_Stop>
	return ADCValue;
 80015f8:	697b      	ldr	r3, [r7, #20]
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3718      	adds	r7, #24
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	2000016c 	.word	0x2000016c

08001608 <readTouchY>:

int readTouchY() {
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af02      	add	r7, sp, #8
	setupForReadY();
 800160e:	f7ff fef7 	bl	8001400 <setupForReadY>
	//return readChannelXMin();
	return map(readChannelXMin(), TS_MINY, TS_MAXY, 0, 480);
 8001612:	f7ff ffcd 	bl	80015b0 <readChannelXMin>
 8001616:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800161a:	9300      	str	r3, [sp, #0]
 800161c:	2300      	movs	r3, #0
 800161e:	f640 629c 	movw	r2, #3740	; 0xe9c
 8001622:	f240 1127 	movw	r1, #295	; 0x127
 8001626:	f7ff febf 	bl	80013a8 <map>
 800162a:	4603      	mov	r3, r0
}
 800162c:	4618      	mov	r0, r3
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
	...

08001634 <readChannelYPlus>:

int readChannelYPlus() {
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig;
	sConfig.Channel = ADC_CHANNEL_12;
 800163a:	230c      	movs	r3, #12
 800163c:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800163e:	2301      	movs	r3, #1
 8001640:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001642:	2307      	movs	r3, #7
 8001644:	60fb      	str	r3, [r7, #12]
	int config = HAL_ADC_ConfigChannel(&adcHandle, &sConfig);
 8001646:	1d3b      	adds	r3, r7, #4
 8001648:	4619      	mov	r1, r3
 800164a:	480f      	ldr	r0, [pc, #60]	; (8001688 <readChannelYPlus+0x54>)
 800164c:	f001 f87e 	bl	800274c <HAL_ADC_ConfigChannel>
 8001650:	4603      	mov	r3, r0
 8001652:	613b      	str	r3, [r7, #16]
	if (config != HAL_OK)
	{
		//
	}
	HAL_Delay(10);
 8001654:	200a      	movs	r0, #10
 8001656:	f000 fd9f 	bl	8002198 <HAL_Delay>
	HAL_ADC_Start(&adcHandle);
 800165a:	480b      	ldr	r0, [pc, #44]	; (8001688 <readChannelYPlus+0x54>)
 800165c:	f000 fe96 	bl	800238c <HAL_ADC_Start>
	uint32_t ADCValue;
	if(HAL_ADC_PollForConversion(&adcHandle, 5) == HAL_OK) {
 8001660:	2105      	movs	r1, #5
 8001662:	4809      	ldr	r0, [pc, #36]	; (8001688 <readChannelYPlus+0x54>)
 8001664:	f000 ff6c 	bl	8002540 <HAL_ADC_PollForConversion>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d103      	bne.n	8001676 <readChannelYPlus+0x42>
		ADCValue = HAL_ADC_GetValue(&adcHandle);
 800166e:	4806      	ldr	r0, [pc, #24]	; (8001688 <readChannelYPlus+0x54>)
 8001670:	f001 f860 	bl	8002734 <HAL_ADC_GetValue>
 8001674:	6178      	str	r0, [r7, #20]
	}
	HAL_ADC_Stop(&adcHandle);
 8001676:	4804      	ldr	r0, [pc, #16]	; (8001688 <readChannelYPlus+0x54>)
 8001678:	f000 ff36 	bl	80024e8 <HAL_ADC_Stop>
	return ADCValue;
 800167c:	697b      	ldr	r3, [r7, #20]
}
 800167e:	4618      	mov	r0, r3
 8001680:	3718      	adds	r7, #24
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	2000016c 	.word	0x2000016c

0800168c <readTouchX>:

int readTouchX() {
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af02      	add	r7, sp, #8
	setupForReadX();
 8001692:	f7ff ff21 	bl	80014d8 <setupForReadX>
	//return readChannelYPlus();
	return map(readChannelYPlus(), TS_MINX, TS_MAXX, 0, 320);
 8001696:	f7ff ffcd 	bl	8001634 <readChannelYPlus>
 800169a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	2300      	movs	r3, #0
 80016a2:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80016a6:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 80016aa:	f7ff fe7d 	bl	80013a8 <map>
 80016ae:	4603      	mov	r3, r0
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80016b6:	b480      	push	{r7}
 80016b8:	b083      	sub	sp, #12
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80016be:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80016c2:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d013      	beq.n	80016f6 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80016ce:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80016d2:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80016d6:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d00b      	beq.n	80016f6 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80016de:	e000      	b.n	80016e2 <ITM_SendChar+0x2c>
    {
      __NOP();
 80016e0:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80016e2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d0f9      	beq.n	80016e0 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80016ec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80016f6:	687b      	ldr	r3, [r7, #4]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr

08001702 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8001702:	b580      	push	{r7, lr}
 8001704:	b086      	sub	sp, #24
 8001706:	af00      	add	r7, sp, #0
 8001708:	60f8      	str	r0, [r7, #12]
 800170a:	60b9      	str	r1, [r7, #8]
 800170c:	607a      	str	r2, [r7, #4]
	int i = 0;
 800170e:	2300      	movs	r3, #0
 8001710:	617b      	str	r3, [r7, #20]
	for (i = 0; i < len; i++)
 8001712:	2300      	movs	r3, #0
 8001714:	617b      	str	r3, [r7, #20]
 8001716:	e009      	b.n	800172c <_write+0x2a>
		ITM_SendChar((*ptr++));
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	1c5a      	adds	r2, r3, #1
 800171c:	60ba      	str	r2, [r7, #8]
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff ffc8 	bl	80016b6 <ITM_SendChar>
	for (i = 0; i < len; i++)
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	3301      	adds	r3, #1
 800172a:	617b      	str	r3, [r7, #20]
 800172c:	697a      	ldr	r2, [r7, #20]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	429a      	cmp	r2, r3
 8001732:	dbf1      	blt.n	8001718 <_write+0x16>
	return len;
 8001734:	687b      	ldr	r3, [r7, #4]
}
 8001736:	4618      	mov	r0, r3
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <drawStruct>:
	int start_x, start_y, end_x, end_y;
	uint8_t action;
	uint16_t icon[];
};

void drawStruct(struct Button * p) {
 800173e:	b590      	push	{r4, r7, lr}
 8001740:	b087      	sub	sp, #28
 8001742:	af02      	add	r7, sp, #8
 8001744:	6078      	str	r0, [r7, #4]
	uint16_t color;
	switch(p->action) {
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	7c1b      	ldrb	r3, [r3, #16]
 800174a:	2b02      	cmp	r3, #2
 800174c:	d006      	beq.n	800175c <drawStruct+0x1e>
 800174e:	2b03      	cmp	r3, #3
 8001750:	d008      	beq.n	8001764 <drawStruct+0x26>
 8001752:	2b01      	cmp	r3, #1
 8001754:	d10a      	bne.n	800176c <drawStruct+0x2e>
	case 1: color = HX8357_BLUE; break;
 8001756:	231f      	movs	r3, #31
 8001758:	81fb      	strh	r3, [r7, #14]
 800175a:	e00b      	b.n	8001774 <drawStruct+0x36>
	case 2: color= HX8357_RED; break;
 800175c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001760:	81fb      	strh	r3, [r7, #14]
 8001762:	e007      	b.n	8001774 <drawStruct+0x36>
	case 3: color = HX8357_GREEN; break;
 8001764:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001768:	81fb      	strh	r3, [r7, #14]
 800176a:	e003      	b.n	8001774 <drawStruct+0x36>
	default: color = HX8357_YELLOW; break;
 800176c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001770:	81fb      	strh	r3, [r7, #14]
 8001772:	bf00      	nop
	}
	LCD_Fill_Rect(p->start_x, p->start_y, p->end_x, p->end_y, color);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4618      	mov	r0, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	4619      	mov	r1, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	461a      	mov	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	461c      	mov	r4, r3
 800178c:	89fb      	ldrh	r3, [r7, #14]
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	4623      	mov	r3, r4
 8001792:	f7ff fc13 	bl	8000fbc <LCD_Fill_Rect>
}
 8001796:	bf00      	nop
 8001798:	3714      	adds	r7, #20
 800179a:	46bd      	mov	sp, r7
 800179c:	bd90      	pop	{r4, r7, pc}

0800179e <checkIfInBoundary>:

uint8_t checkIfInBoundary(struct Button * p, int x_coor) {
 800179e:	b480      	push	{r7}
 80017a0:	b083      	sub	sp, #12
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
 80017a6:	6039      	str	r1, [r7, #0]
	if(x_coor >= p->start_x && x_coor <= p->end_x) {
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	db06      	blt.n	80017c0 <checkIfInBoundary+0x22>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	683a      	ldr	r2, [r7, #0]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	dc01      	bgt.n	80017c0 <checkIfInBoundary+0x22>
		return 1;
 80017bc:	2301      	movs	r3, #1
 80017be:	e000      	b.n	80017c2 <checkIfInBoundary+0x24>
	}

	return 0;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc80      	pop	{r7}
 80017ca:	4770      	bx	lr

080017cc <default_screen>:
struct Button line_button = {20, 400, 60, 480, 1 };
struct Button circle_button  = {80, 400, 120, 480, 2 };
struct Button polygon_button  = {140, 400, 180, 480, 3 };
struct Button clear_button  = {200, 400, 240, 480, 4 };

void default_screen() {
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
	LCD_Fill(HX8357_BLACK);
 80017d0:	2000      	movs	r0, #0
 80017d2:	f7ff fbaf 	bl	8000f34 <LCD_Fill>
	drawStruct(&line_button);
 80017d6:	4807      	ldr	r0, [pc, #28]	; (80017f4 <default_screen+0x28>)
 80017d8:	f7ff ffb1 	bl	800173e <drawStruct>
	drawStruct(&circle_button);
 80017dc:	4806      	ldr	r0, [pc, #24]	; (80017f8 <default_screen+0x2c>)
 80017de:	f7ff ffae 	bl	800173e <drawStruct>
	drawStruct(&polygon_button);
 80017e2:	4806      	ldr	r0, [pc, #24]	; (80017fc <default_screen+0x30>)
 80017e4:	f7ff ffab 	bl	800173e <drawStruct>
	drawStruct(&clear_button);
 80017e8:	4805      	ldr	r0, [pc, #20]	; (8001800 <default_screen+0x34>)
 80017ea:	f7ff ffa8 	bl	800173e <drawStruct>
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	2000001c 	.word	0x2000001c
 80017f8:	20000030 	.word	0x20000030
 80017fc:	20000044 	.word	0x20000044
 8001800:	20000058 	.word	0x20000058

08001804 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001804:	b590      	push	{r4, r7, lr}
 8001806:	b08d      	sub	sp, #52	; 0x34
 8001808:	af04      	add	r7, sp, #16


	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800180a:	f000 fc63 	bl	80020d4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800180e:	f000 f92d 	bl	8001a6c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001812:	f000 f9fb 	bl	8001c0c <MX_GPIO_Init>
	MX_ADC1_Init();
 8001816:	f000 f985 	bl	8001b24 <MX_ADC1_Init>
	MX_SPI1_Init();
 800181a:	f000 f9c1 	bl	8001ba0 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	Touch_Init(&hadc1);
 800181e:	4885      	ldr	r0, [pc, #532]	; (8001a34 <main+0x230>)
 8001820:	f7ff fdde 	bl	80013e0 <Touch_Init>
	LCD_Init(&hspi1, LCD_CS_GPIO_Port, LCD_CS_Pin, LCD_DC_GPIO_Port, LCD_DC_Pin, LCD_RST_GPIO_Port, LCD_RST_Pin);
 8001824:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001828:	9302      	str	r3, [sp, #8]
 800182a:	4b83      	ldr	r3, [pc, #524]	; (8001a38 <main+0x234>)
 800182c:	9301      	str	r3, [sp, #4]
 800182e:	2380      	movs	r3, #128	; 0x80
 8001830:	9300      	str	r3, [sp, #0]
 8001832:	4b82      	ldr	r3, [pc, #520]	; (8001a3c <main+0x238>)
 8001834:	2240      	movs	r2, #64	; 0x40
 8001836:	4982      	ldr	r1, [pc, #520]	; (8001a40 <main+0x23c>)
 8001838:	4882      	ldr	r0, [pc, #520]	; (8001a44 <main+0x240>)
 800183a:	f7ff fa05 	bl	8000c48 <LCD_Init>
	LCD_setRotation(3);
 800183e:	2003      	movs	r0, #3
 8001840:	f7ff fd66 	bl	8001310 <LCD_setRotation>
	default_screen();
 8001844:	f7ff ffc2 	bl	80017cc <default_screen>
	int current_x, current_y, radius, x_diff, y_diff;
	int previous_x, previous_y = 0;
 8001848:	2300      	movs	r3, #0
 800184a:	61bb      	str	r3, [r7, #24]
	uint8_t enabled_action = 0;
 800184c:	2300      	movs	r3, #0
 800184e:	75fb      	strb	r3, [r7, #23]
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		current_x = readTouchX();
 8001850:	f7ff ff1c 	bl	800168c <readTouchX>
 8001854:	6138      	str	r0, [r7, #16]
		current_y = readTouchY();
 8001856:	f7ff fed7 	bl	8001608 <readTouchY>
 800185a:	60f8      	str	r0, [r7, #12]
		printf("TAPPED: (%d, %d)\n", current_x, current_y);
 800185c:	68fa      	ldr	r2, [r7, #12]
 800185e:	6939      	ldr	r1, [r7, #16]
 8001860:	4879      	ldr	r0, [pc, #484]	; (8001a48 <main+0x244>)
 8001862:	f002 fb23 	bl	8003eac <iprintf>
		if(current_x > 0 && current_y > 0) {
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	2b00      	cmp	r3, #0
 800186a:	f340 80df 	ble.w	8001a2c <main+0x228>
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2b00      	cmp	r3, #0
 8001872:	f340 80db 	ble.w	8001a2c <main+0x228>
			// 1. Check if in boundary of button
			// 2. Also determine action
			if(current_y >= 400 && current_y <= 480) {
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800187c:	db44      	blt.n	8001908 <main+0x104>
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001884:	dc40      	bgt.n	8001908 <main+0x104>
				in_button = 0;
 8001886:	2300      	movs	r3, #0
 8001888:	75bb      	strb	r3, [r7, #22]
				if(checkIfInBoundary(&line_button, current_x)) {
 800188a:	6939      	ldr	r1, [r7, #16]
 800188c:	486f      	ldr	r0, [pc, #444]	; (8001a4c <main+0x248>)
 800188e:	f7ff ff86 	bl	800179e <checkIfInBoundary>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d007      	beq.n	80018a8 <main+0xa4>
					in_button = 1;
 8001898:	2301      	movs	r3, #1
 800189a:	75bb      	strb	r3, [r7, #22]
					enabled_action = line_button.action;
 800189c:	4b6b      	ldr	r3, [pc, #428]	; (8001a4c <main+0x248>)
 800189e:	7c1b      	ldrb	r3, [r3, #16]
 80018a0:	75fb      	strb	r3, [r7, #23]
					printf("User tapped line button\n");
 80018a2:	486b      	ldr	r0, [pc, #428]	; (8001a50 <main+0x24c>)
 80018a4:	f002 fb76 	bl	8003f94 <puts>
				}

				if(checkIfInBoundary(&circle_button, current_x)) {
 80018a8:	6939      	ldr	r1, [r7, #16]
 80018aa:	486a      	ldr	r0, [pc, #424]	; (8001a54 <main+0x250>)
 80018ac:	f7ff ff77 	bl	800179e <checkIfInBoundary>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d007      	beq.n	80018c6 <main+0xc2>
					in_button = 1;
 80018b6:	2301      	movs	r3, #1
 80018b8:	75bb      	strb	r3, [r7, #22]
					enabled_action = circle_button.action;
 80018ba:	4b66      	ldr	r3, [pc, #408]	; (8001a54 <main+0x250>)
 80018bc:	7c1b      	ldrb	r3, [r3, #16]
 80018be:	75fb      	strb	r3, [r7, #23]
					printf("User tapped circle button\n");
 80018c0:	4865      	ldr	r0, [pc, #404]	; (8001a58 <main+0x254>)
 80018c2:	f002 fb67 	bl	8003f94 <puts>
				}

				if(checkIfInBoundary(&polygon_button, current_x)) {
 80018c6:	6939      	ldr	r1, [r7, #16]
 80018c8:	4864      	ldr	r0, [pc, #400]	; (8001a5c <main+0x258>)
 80018ca:	f7ff ff68 	bl	800179e <checkIfInBoundary>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d007      	beq.n	80018e4 <main+0xe0>
					in_button = 1;
 80018d4:	2301      	movs	r3, #1
 80018d6:	75bb      	strb	r3, [r7, #22]
					enabled_action = polygon_button.action;
 80018d8:	4b60      	ldr	r3, [pc, #384]	; (8001a5c <main+0x258>)
 80018da:	7c1b      	ldrb	r3, [r3, #16]
 80018dc:	75fb      	strb	r3, [r7, #23]
					printf("User tapped polygon button\n");
 80018de:	4860      	ldr	r0, [pc, #384]	; (8001a60 <main+0x25c>)
 80018e0:	f002 fb58 	bl	8003f94 <puts>
				}
				if(checkIfInBoundary(&clear_button, current_x)) {
 80018e4:	6939      	ldr	r1, [r7, #16]
 80018e6:	485f      	ldr	r0, [pc, #380]	; (8001a64 <main+0x260>)
 80018e8:	f7ff ff59 	bl	800179e <checkIfInBoundary>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d00c      	beq.n	800190c <main+0x108>
					in_button = 1;
 80018f2:	2301      	movs	r3, #1
 80018f4:	75bb      	strb	r3, [r7, #22]
					enabled_action = clear_button.action;
 80018f6:	4b5b      	ldr	r3, [pc, #364]	; (8001a64 <main+0x260>)
 80018f8:	7c1b      	ldrb	r3, [r3, #16]
 80018fa:	75fb      	strb	r3, [r7, #23]
					default_screen();
 80018fc:	f7ff ff66 	bl	80017cc <default_screen>
					printf("User tapped clear button\n");
 8001900:	4859      	ldr	r0, [pc, #356]	; (8001a68 <main+0x264>)
 8001902:	f002 fb47 	bl	8003f94 <puts>
				if(checkIfInBoundary(&clear_button, current_x)) {
 8001906:	e001      	b.n	800190c <main+0x108>
				}

			} else {
				in_button = 0;
 8001908:	2300      	movs	r3, #0
 800190a:	75bb      	strb	r3, [r7, #22]
			}

			if(in_button) {
 800190c:	7dbb      	ldrb	r3, [r7, #22]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d004      	beq.n	800191c <main+0x118>
				previous_x = 0;
 8001912:	2300      	movs	r3, #0
 8001914:	61fb      	str	r3, [r7, #28]
				previous_y = 0;
 8001916:	2300      	movs	r3, #0
 8001918:	61bb      	str	r3, [r7, #24]
 800191a:	e087      	b.n	8001a2c <main+0x228>
			} else {
				if(previous_x > 0 && previous_y > 0) {
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	2b00      	cmp	r3, #0
 8001920:	f340 8080 	ble.w	8001a24 <main+0x220>
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	2b00      	cmp	r3, #0
 8001928:	dd7c      	ble.n	8001a24 <main+0x220>
					switch(enabled_action) {
 800192a:	7dfb      	ldrb	r3, [r7, #23]
 800192c:	3b01      	subs	r3, #1
 800192e:	2b03      	cmp	r3, #3
 8001930:	d868      	bhi.n	8001a04 <main+0x200>
 8001932:	a201      	add	r2, pc, #4	; (adr r2, 8001938 <main+0x134>)
 8001934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001938:	08001949 	.word	0x08001949
 800193c:	08001967 	.word	0x08001967
 8001940:	08001a19 	.word	0x08001a19
 8001944:	08001a19 	.word	0x08001a19
					// 1 = line, 2 = circle, 3 = polygon
					case 1:
						LCD_drawLine(previous_x, previous_y, current_x, current_y, HX8357_WHITE);
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	b218      	sxth	r0, r3
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	b219      	sxth	r1, r3
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	b21a      	sxth	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	b21c      	sxth	r4, r3
 8001958:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800195c:	9300      	str	r3, [sp, #0]
 800195e:	4623      	mov	r3, r4
 8001960:	f7ff fc39 	bl	80011d6 <LCD_drawLine>
						break;
 8001964:	e059      	b.n	8001a1a <main+0x216>
					case 2:
						// Get distance
						x_diff = abs(current_x - previous_x);
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b00      	cmp	r3, #0
 800196e:	bfb8      	it	lt
 8001970:	425b      	neglt	r3, r3
 8001972:	60bb      	str	r3, [r7, #8]
						y_diff = abs(current_y - previous_y);
 8001974:	68fa      	ldr	r2, [r7, #12]
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b00      	cmp	r3, #0
 800197c:	bfb8      	it	lt
 800197e:	425b      	neglt	r3, r3
 8001980:	607b      	str	r3, [r7, #4]
						x_diff = pow(x_diff, 2);
 8001982:	68b8      	ldr	r0, [r7, #8]
 8001984:	f7fe fd36 	bl	80003f4 <__aeabi_i2d>
 8001988:	f04f 0200 	mov.w	r2, #0
 800198c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001990:	f003 f9de 	bl	8004d50 <pow>
 8001994:	4603      	mov	r3, r0
 8001996:	460c      	mov	r4, r1
 8001998:	4618      	mov	r0, r3
 800199a:	4621      	mov	r1, r4
 800199c:	f7ff f844 	bl	8000a28 <__aeabi_d2iz>
 80019a0:	4603      	mov	r3, r0
 80019a2:	60bb      	str	r3, [r7, #8]
						y_diff = pow(y_diff, 2);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f7fe fd25 	bl	80003f4 <__aeabi_i2d>
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019b2:	f003 f9cd 	bl	8004d50 <pow>
 80019b6:	4603      	mov	r3, r0
 80019b8:	460c      	mov	r4, r1
 80019ba:	4618      	mov	r0, r3
 80019bc:	4621      	mov	r1, r4
 80019be:	f7ff f833 	bl	8000a28 <__aeabi_d2iz>
 80019c2:	4603      	mov	r3, r0
 80019c4:	607b      	str	r3, [r7, #4]
						radius = sqrt((x_diff + y_diff));
 80019c6:	68ba      	ldr	r2, [r7, #8]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4413      	add	r3, r2
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7fe fd11 	bl	80003f4 <__aeabi_i2d>
 80019d2:	4603      	mov	r3, r0
 80019d4:	460c      	mov	r4, r1
 80019d6:	4618      	mov	r0, r3
 80019d8:	4621      	mov	r1, r4
 80019da:	f003 fb15 	bl	8005008 <sqrt>
 80019de:	4603      	mov	r3, r0
 80019e0:	460c      	mov	r4, r1
 80019e2:	4618      	mov	r0, r3
 80019e4:	4621      	mov	r1, r4
 80019e6:	f7ff f81f 	bl	8000a28 <__aeabi_d2iz>
 80019ea:	4603      	mov	r3, r0
 80019ec:	603b      	str	r3, [r7, #0]
						LCD_drawCircle(previous_x, previous_y, radius, HX8357_WHITE);
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	b218      	sxth	r0, r3
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	b219      	sxth	r1, r3
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	b21a      	sxth	r2, r3
 80019fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019fe:	f7ff fb17 	bl	8001030 <LCD_drawCircle>
						break;
 8001a02:	e00a      	b.n	8001a1a <main+0x216>
					case 3:
						break;
					case 4:

						break;
					default: LCD_DrawPixel(current_x, current_y, HX8357_WHITE); break;
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	b291      	uxth	r1, r2
 8001a0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff fa6f 	bl	8000ef4 <LCD_DrawPixel>
 8001a16:	e000      	b.n	8001a1a <main+0x216>
						break;
 8001a18:	bf00      	nop
					}

					// Action finished
					previous_x = 0;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61fb      	str	r3, [r7, #28]
					previous_y = 0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61bb      	str	r3, [r7, #24]
 8001a22:	e003      	b.n	8001a2c <main+0x228>
				} else {
					previous_x = current_x;
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	61fb      	str	r3, [r7, #28]
					previous_y = current_y;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	61bb      	str	r3, [r7, #24]
				}
			}
		}

		// Kind of like dender relay for button
		HAL_Delay(50);
 8001a2c:	2032      	movs	r0, #50	; 0x32
 8001a2e:	f000 fbb3 	bl	8002198 <HAL_Delay>
		current_x = readTouchX();
 8001a32:	e70d      	b.n	8001850 <main+0x4c>
 8001a34:	200001a8 	.word	0x200001a8
 8001a38:	40010800 	.word	0x40010800
 8001a3c:	40011000 	.word	0x40011000
 8001a40:	40010c00 	.word	0x40010c00
 8001a44:	200001d8 	.word	0x200001d8
 8001a48:	08005e60 	.word	0x08005e60
 8001a4c:	2000001c 	.word	0x2000001c
 8001a50:	08005e74 	.word	0x08005e74
 8001a54:	20000030 	.word	0x20000030
 8001a58:	08005e8c 	.word	0x08005e8c
 8001a5c:	20000044 	.word	0x20000044
 8001a60:	08005ea8 	.word	0x08005ea8
 8001a64:	20000058 	.word	0x20000058
 8001a68:	08005ec4 	.word	0x08005ec4

08001a6c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b094      	sub	sp, #80	; 0x50
 8001a70:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a76:	2228      	movs	r2, #40	; 0x28
 8001a78:	2100      	movs	r1, #0
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f002 fa0d 	bl	8003e9a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a80:	f107 0314 	add.w	r3, r7, #20
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	605a      	str	r2, [r3, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	60da      	str	r2, [r3, #12]
 8001a8e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a90:	1d3b      	adds	r3, r7, #4
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	605a      	str	r2, [r3, #4]
 8001a98:	609a      	str	r2, [r3, #8]
 8001a9a:	60da      	str	r2, [r3, #12]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001aa0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ab2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ab6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001ab8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001abc:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001abe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f001 fa1c 	bl	8002f00 <HAL_RCC_OscConfig>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <SystemClock_Config+0x66>
	{
		Error_Handler();
 8001ace:	f000 f945 	bl	8001d5c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ad2:	230f      	movs	r3, #15
 8001ad4:	617b      	str	r3, [r7, #20]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ada:	2300      	movs	r3, #0
 8001adc:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ade:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ae2:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ae8:	f107 0314 	add.w	r3, r7, #20
 8001aec:	2102      	movs	r1, #2
 8001aee:	4618      	mov	r0, r3
 8001af0:	f001 fc86 	bl	8003400 <HAL_RCC_ClockConfig>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <SystemClock_Config+0x92>
	{
		Error_Handler();
 8001afa:	f000 f92f 	bl	8001d5c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001afe:	2302      	movs	r3, #2
 8001b00:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001b02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b06:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b08:	1d3b      	adds	r3, r7, #4
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f001 fe00 	bl	8003710 <HAL_RCCEx_PeriphCLKConfig>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <SystemClock_Config+0xae>
	{
		Error_Handler();
 8001b16:	f000 f921 	bl	8001d5c <Error_Handler>
	}
}
 8001b1a:	bf00      	nop
 8001b1c:	3750      	adds	r7, #80	; 0x50
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8001b2a:	1d3b      	adds	r3, r7, #4
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 8001b34:	4b18      	ldr	r3, [pc, #96]	; (8001b98 <MX_ADC1_Init+0x74>)
 8001b36:	4a19      	ldr	r2, [pc, #100]	; (8001b9c <MX_ADC1_Init+0x78>)
 8001b38:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b3a:	4b17      	ldr	r3, [pc, #92]	; (8001b98 <MX_ADC1_Init+0x74>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001b40:	4b15      	ldr	r3, [pc, #84]	; (8001b98 <MX_ADC1_Init+0x74>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b46:	4b14      	ldr	r3, [pc, #80]	; (8001b98 <MX_ADC1_Init+0x74>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b4c:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <MX_ADC1_Init+0x74>)
 8001b4e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001b52:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b54:	4b10      	ldr	r3, [pc, #64]	; (8001b98 <MX_ADC1_Init+0x74>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 8001b5a:	4b0f      	ldr	r3, [pc, #60]	; (8001b98 <MX_ADC1_Init+0x74>)
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b60:	480d      	ldr	r0, [pc, #52]	; (8001b98 <MX_ADC1_Init+0x74>)
 8001b62:	f000 fb3b 	bl	80021dc <HAL_ADC_Init>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <MX_ADC1_Init+0x4c>
	{
		Error_Handler();
 8001b6c:	f000 f8f6 	bl	8001d5c <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_12;
 8001b70:	230c      	movs	r3, #12
 8001b72:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b74:	2301      	movs	r3, #1
 8001b76:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b7c:	1d3b      	adds	r3, r7, #4
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4805      	ldr	r0, [pc, #20]	; (8001b98 <MX_ADC1_Init+0x74>)
 8001b82:	f000 fde3 	bl	800274c <HAL_ADC_ConfigChannel>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_ADC1_Init+0x6c>
	{
		Error_Handler();
 8001b8c:	f000 f8e6 	bl	8001d5c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001b90:	bf00      	nop
 8001b92:	3710      	adds	r7, #16
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	200001a8 	.word	0x200001a8
 8001b9c:	40012400 	.word	0x40012400

08001ba0 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001ba4:	4b17      	ldr	r3, [pc, #92]	; (8001c04 <MX_SPI1_Init+0x64>)
 8001ba6:	4a18      	ldr	r2, [pc, #96]	; (8001c08 <MX_SPI1_Init+0x68>)
 8001ba8:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001baa:	4b16      	ldr	r3, [pc, #88]	; (8001c04 <MX_SPI1_Init+0x64>)
 8001bac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bb0:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001bb2:	4b14      	ldr	r3, [pc, #80]	; (8001c04 <MX_SPI1_Init+0x64>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bb8:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <MX_SPI1_Init+0x64>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bbe:	4b11      	ldr	r3, [pc, #68]	; (8001c04 <MX_SPI1_Init+0x64>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bc4:	4b0f      	ldr	r3, [pc, #60]	; (8001c04 <MX_SPI1_Init+0x64>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001bca:	4b0e      	ldr	r3, [pc, #56]	; (8001c04 <MX_SPI1_Init+0x64>)
 8001bcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bd0:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001bd2:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <MX_SPI1_Init+0x64>)
 8001bd4:	2208      	movs	r2, #8
 8001bd6:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bd8:	4b0a      	ldr	r3, [pc, #40]	; (8001c04 <MX_SPI1_Init+0x64>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bde:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <MX_SPI1_Init+0x64>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001be4:	4b07      	ldr	r3, [pc, #28]	; (8001c04 <MX_SPI1_Init+0x64>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8001bea:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <MX_SPI1_Init+0x64>)
 8001bec:	220a      	movs	r2, #10
 8001bee:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001bf0:	4804      	ldr	r0, [pc, #16]	; (8001c04 <MX_SPI1_Init+0x64>)
 8001bf2:	f001 feff 	bl	80039f4 <HAL_SPI_Init>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 8001bfc:	f000 f8ae 	bl	8001d5c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001c00:	bf00      	nop
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	200001d8 	.word	0x200001d8
 8001c08:	40013000 	.word	0x40013000

08001c0c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b088      	sub	sp, #32
 8001c10:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c12:	f107 0310 	add.w	r3, r7, #16
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	605a      	str	r2, [r3, #4]
 8001c1c:	609a      	str	r2, [r3, #8]
 8001c1e:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001c20:	4b4a      	ldr	r3, [pc, #296]	; (8001d4c <MX_GPIO_Init+0x140>)
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	4a49      	ldr	r2, [pc, #292]	; (8001d4c <MX_GPIO_Init+0x140>)
 8001c26:	f043 0320 	orr.w	r3, r3, #32
 8001c2a:	6193      	str	r3, [r2, #24]
 8001c2c:	4b47      	ldr	r3, [pc, #284]	; (8001d4c <MX_GPIO_Init+0x140>)
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	f003 0320 	and.w	r3, r3, #32
 8001c34:	60fb      	str	r3, [r7, #12]
 8001c36:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001c38:	4b44      	ldr	r3, [pc, #272]	; (8001d4c <MX_GPIO_Init+0x140>)
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	4a43      	ldr	r2, [pc, #268]	; (8001d4c <MX_GPIO_Init+0x140>)
 8001c3e:	f043 0310 	orr.w	r3, r3, #16
 8001c42:	6193      	str	r3, [r2, #24]
 8001c44:	4b41      	ldr	r3, [pc, #260]	; (8001d4c <MX_GPIO_Init+0x140>)
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	f003 0310 	and.w	r3, r3, #16
 8001c4c:	60bb      	str	r3, [r7, #8]
 8001c4e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001c50:	4b3e      	ldr	r3, [pc, #248]	; (8001d4c <MX_GPIO_Init+0x140>)
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	4a3d      	ldr	r2, [pc, #244]	; (8001d4c <MX_GPIO_Init+0x140>)
 8001c56:	f043 0304 	orr.w	r3, r3, #4
 8001c5a:	6193      	str	r3, [r2, #24]
 8001c5c:	4b3b      	ldr	r3, [pc, #236]	; (8001d4c <MX_GPIO_Init+0x140>)
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	607b      	str	r3, [r7, #4]
 8001c66:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001c68:	4b38      	ldr	r3, [pc, #224]	; (8001d4c <MX_GPIO_Init+0x140>)
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	4a37      	ldr	r2, [pc, #220]	; (8001d4c <MX_GPIO_Init+0x140>)
 8001c6e:	f043 0308 	orr.w	r3, r3, #8
 8001c72:	6193      	str	r3, [r2, #24]
 8001c74:	4b35      	ldr	r3, [pc, #212]	; (8001d4c <MX_GPIO_Init+0x140>)
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	f003 0308 	and.w	r3, r3, #8
 8001c7c:	603b      	str	r3, [r7, #0]
 8001c7e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8001c80:	2200      	movs	r2, #0
 8001c82:	2180      	movs	r1, #128	; 0x80
 8001c84:	4832      	ldr	r0, [pc, #200]	; (8001d50 <MX_GPIO_Init+0x144>)
 8001c86:	f001 f923 	bl	8002ed0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LCD_RST_Pin|YMIN_Pin, GPIO_PIN_RESET);
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001c90:	4830      	ldr	r0, [pc, #192]	; (8001d54 <MX_GPIO_Init+0x148>)
 8001c92:	f001 f91d 	bl	8002ed0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001c96:	2200      	movs	r2, #0
 8001c98:	2140      	movs	r1, #64	; 0x40
 8001c9a:	482f      	ldr	r0, [pc, #188]	; (8001d58 <MX_GPIO_Init+0x14c>)
 8001c9c:	f001 f918 	bl	8002ed0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : XMIN_Pin */
	GPIO_InitStruct.Pin = XMIN_Pin;
 8001ca0:	2308      	movs	r3, #8
 8001ca2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(XMIN_GPIO_Port, &GPIO_InitStruct);
 8001cac:	f107 0310 	add.w	r3, r7, #16
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4827      	ldr	r0, [pc, #156]	; (8001d50 <MX_GPIO_Init+0x144>)
 8001cb4:	f000 ffb2 	bl	8002c1c <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_DC_Pin */
	GPIO_InitStruct.Pin = LCD_DC_Pin;
 8001cb8:	2380      	movs	r3, #128	; 0x80
 8001cba:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 8001cc8:	f107 0310 	add.w	r3, r7, #16
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4820      	ldr	r0, [pc, #128]	; (8001d50 <MX_GPIO_Init+0x144>)
 8001cd0:	f000 ffa4 	bl	8002c1c <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_RST_Pin */
	GPIO_InitStruct.Pin = LCD_RST_Pin;
 8001cd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cd8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8001ce6:	f107 0310 	add.w	r3, r7, #16
 8001cea:	4619      	mov	r1, r3
 8001cec:	4819      	ldr	r0, [pc, #100]	; (8001d54 <MX_GPIO_Init+0x148>)
 8001cee:	f000 ff95 	bl	8002c1c <HAL_GPIO_Init>

	/*Configure GPIO pin : YMIN_Pin */
	GPIO_InitStruct.Pin = YMIN_Pin;
 8001cf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cf6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d00:	2303      	movs	r3, #3
 8001d02:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(YMIN_GPIO_Port, &GPIO_InitStruct);
 8001d04:	f107 0310 	add.w	r3, r7, #16
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4812      	ldr	r0, [pc, #72]	; (8001d54 <MX_GPIO_Init+0x148>)
 8001d0c:	f000 ff86 	bl	8002c1c <HAL_GPIO_Init>

	/*Configure GPIO pin : XPLUS_Pin */
	GPIO_InitStruct.Pin = XPLUS_Pin;
 8001d10:	2320      	movs	r3, #32
 8001d12:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d18:	2302      	movs	r3, #2
 8001d1a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(XPLUS_GPIO_Port, &GPIO_InitStruct);
 8001d1c:	f107 0310 	add.w	r3, r7, #16
 8001d20:	4619      	mov	r1, r3
 8001d22:	480d      	ldr	r0, [pc, #52]	; (8001d58 <MX_GPIO_Init+0x14c>)
 8001d24:	f000 ff7a 	bl	8002c1c <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_CS_Pin */
	GPIO_InitStruct.Pin = LCD_CS_Pin;
 8001d28:	2340      	movs	r3, #64	; 0x40
 8001d2a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d30:	2300      	movs	r3, #0
 8001d32:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d34:	2302      	movs	r3, #2
 8001d36:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8001d38:	f107 0310 	add.w	r3, r7, #16
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4806      	ldr	r0, [pc, #24]	; (8001d58 <MX_GPIO_Init+0x14c>)
 8001d40:	f000 ff6c 	bl	8002c1c <HAL_GPIO_Init>

}
 8001d44:	bf00      	nop
 8001d46:	3720      	adds	r7, #32
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	40011000 	.word	0x40011000
 8001d54:	40010800 	.word	0x40010800
 8001d58:	40010c00 	.word	0x40010c00

08001d5c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001d60:	bf00      	nop
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr

08001d68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d6e:	4b15      	ldr	r3, [pc, #84]	; (8001dc4 <HAL_MspInit+0x5c>)
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	4a14      	ldr	r2, [pc, #80]	; (8001dc4 <HAL_MspInit+0x5c>)
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	6193      	str	r3, [r2, #24]
 8001d7a:	4b12      	ldr	r3, [pc, #72]	; (8001dc4 <HAL_MspInit+0x5c>)
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	60bb      	str	r3, [r7, #8]
 8001d84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d86:	4b0f      	ldr	r3, [pc, #60]	; (8001dc4 <HAL_MspInit+0x5c>)
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	4a0e      	ldr	r2, [pc, #56]	; (8001dc4 <HAL_MspInit+0x5c>)
 8001d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d90:	61d3      	str	r3, [r2, #28]
 8001d92:	4b0c      	ldr	r3, [pc, #48]	; (8001dc4 <HAL_MspInit+0x5c>)
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d9a:	607b      	str	r3, [r7, #4]
 8001d9c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d9e:	4b0a      	ldr	r3, [pc, #40]	; (8001dc8 <HAL_MspInit+0x60>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	4a04      	ldr	r2, [pc, #16]	; (8001dc8 <HAL_MspInit+0x60>)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	40010000 	.word	0x40010000

08001dcc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b088      	sub	sp, #32
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd4:	f107 0310 	add.w	r3, r7, #16
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	605a      	str	r2, [r3, #4]
 8001dde:	609a      	str	r2, [r3, #8]
 8001de0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a14      	ldr	r2, [pc, #80]	; (8001e38 <HAL_ADC_MspInit+0x6c>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d121      	bne.n	8001e30 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001dec:	4b13      	ldr	r3, [pc, #76]	; (8001e3c <HAL_ADC_MspInit+0x70>)
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	4a12      	ldr	r2, [pc, #72]	; (8001e3c <HAL_ADC_MspInit+0x70>)
 8001df2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001df6:	6193      	str	r3, [r2, #24]
 8001df8:	4b10      	ldr	r3, [pc, #64]	; (8001e3c <HAL_ADC_MspInit+0x70>)
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e04:	4b0d      	ldr	r3, [pc, #52]	; (8001e3c <HAL_ADC_MspInit+0x70>)
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	4a0c      	ldr	r2, [pc, #48]	; (8001e3c <HAL_ADC_MspInit+0x70>)
 8001e0a:	f043 0310 	orr.w	r3, r3, #16
 8001e0e:	6193      	str	r3, [r2, #24]
 8001e10:	4b0a      	ldr	r3, [pc, #40]	; (8001e3c <HAL_ADC_MspInit+0x70>)
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	f003 0310 	and.w	r3, r3, #16
 8001e18:	60bb      	str	r3, [r7, #8]
 8001e1a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PC2     ------> ADC1_IN12 
    */
    GPIO_InitStruct.Pin = YPLUS_Pin;
 8001e1c:	2304      	movs	r3, #4
 8001e1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e20:	2303      	movs	r3, #3
 8001e22:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(YPLUS_GPIO_Port, &GPIO_InitStruct);
 8001e24:	f107 0310 	add.w	r3, r7, #16
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4805      	ldr	r0, [pc, #20]	; (8001e40 <HAL_ADC_MspInit+0x74>)
 8001e2c:	f000 fef6 	bl	8002c1c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e30:	bf00      	nop
 8001e32:	3720      	adds	r7, #32
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40012400 	.word	0x40012400
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	40011000 	.word	0x40011000

08001e44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b088      	sub	sp, #32
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e4c:	f107 0310 	add.w	r3, r7, #16
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	605a      	str	r2, [r3, #4]
 8001e56:	609a      	str	r2, [r3, #8]
 8001e58:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a1b      	ldr	r2, [pc, #108]	; (8001ecc <HAL_SPI_MspInit+0x88>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d12f      	bne.n	8001ec4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e64:	4b1a      	ldr	r3, [pc, #104]	; (8001ed0 <HAL_SPI_MspInit+0x8c>)
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	4a19      	ldr	r2, [pc, #100]	; (8001ed0 <HAL_SPI_MspInit+0x8c>)
 8001e6a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e6e:	6193      	str	r3, [r2, #24]
 8001e70:	4b17      	ldr	r3, [pc, #92]	; (8001ed0 <HAL_SPI_MspInit+0x8c>)
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e7c:	4b14      	ldr	r3, [pc, #80]	; (8001ed0 <HAL_SPI_MspInit+0x8c>)
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	4a13      	ldr	r2, [pc, #76]	; (8001ed0 <HAL_SPI_MspInit+0x8c>)
 8001e82:	f043 0304 	orr.w	r3, r3, #4
 8001e86:	6193      	str	r3, [r2, #24]
 8001e88:	4b11      	ldr	r3, [pc, #68]	; (8001ed0 <HAL_SPI_MspInit+0x8c>)
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	f003 0304 	and.w	r3, r3, #4
 8001e90:	60bb      	str	r3, [r7, #8]
 8001e92:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001e94:	23a0      	movs	r3, #160	; 0xa0
 8001e96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea0:	f107 0310 	add.w	r3, r7, #16
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	480b      	ldr	r0, [pc, #44]	; (8001ed4 <HAL_SPI_MspInit+0x90>)
 8001ea8:	f000 feb8 	bl	8002c1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001eac:	2340      	movs	r3, #64	; 0x40
 8001eae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb8:	f107 0310 	add.w	r3, r7, #16
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4805      	ldr	r0, [pc, #20]	; (8001ed4 <HAL_SPI_MspInit+0x90>)
 8001ec0:	f000 feac 	bl	8002c1c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ec4:	bf00      	nop
 8001ec6:	3720      	adds	r7, #32
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40013000 	.word	0x40013000
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	40010800 	.word	0x40010800

08001ed8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001edc:	bf00      	nop
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bc80      	pop	{r7}
 8001ee2:	4770      	bx	lr

08001ee4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ee8:	e7fe      	b.n	8001ee8 <HardFault_Handler+0x4>

08001eea <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001eea:	b480      	push	{r7}
 8001eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eee:	e7fe      	b.n	8001eee <MemManage_Handler+0x4>

08001ef0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ef4:	e7fe      	b.n	8001ef4 <BusFault_Handler+0x4>

08001ef6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001efa:	e7fe      	b.n	8001efa <UsageFault_Handler+0x4>

08001efc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f00:	bf00      	nop
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bc80      	pop	{r7}
 8001f06:	4770      	bx	lr

08001f08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f0c:	bf00      	nop
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr

08001f14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr

08001f20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f24:	f000 f91c 	bl	8002160 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f28:	bf00      	nop
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f38:	2300      	movs	r3, #0
 8001f3a:	617b      	str	r3, [r7, #20]
 8001f3c:	e00a      	b.n	8001f54 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f3e:	f3af 8000 	nop.w
 8001f42:	4601      	mov	r1, r0
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	1c5a      	adds	r2, r3, #1
 8001f48:	60ba      	str	r2, [r7, #8]
 8001f4a:	b2ca      	uxtb	r2, r1
 8001f4c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	3301      	adds	r3, #1
 8001f52:	617b      	str	r3, [r7, #20]
 8001f54:	697a      	ldr	r2, [r7, #20]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	dbf0      	blt.n	8001f3e <_read+0x12>
	}

return len;
 8001f5c:	687b      	ldr	r3, [r7, #4]
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3718      	adds	r7, #24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001f66:	b480      	push	{r7}
 8001f68:	b083      	sub	sp, #12
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
	return -1;
 8001f6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bc80      	pop	{r7}
 8001f7a:	4770      	bx	lr

08001f7c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f8c:	605a      	str	r2, [r3, #4]
	return 0;
 8001f8e:	2300      	movs	r3, #0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bc80      	pop	{r7}
 8001f98:	4770      	bx	lr

08001f9a <_isatty>:

int _isatty(int file)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b083      	sub	sp, #12
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
	return 1;
 8001fa2:	2301      	movs	r3, #1
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bc80      	pop	{r7}
 8001fac:	4770      	bx	lr

08001fae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b085      	sub	sp, #20
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	60f8      	str	r0, [r7, #12]
 8001fb6:	60b9      	str	r1, [r7, #8]
 8001fb8:	607a      	str	r2, [r7, #4]
	return 0;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3714      	adds	r7, #20
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bc80      	pop	{r7}
 8001fc4:	4770      	bx	lr
	...

08001fc8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001fd0:	4b11      	ldr	r3, [pc, #68]	; (8002018 <_sbrk+0x50>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d102      	bne.n	8001fde <_sbrk+0x16>
		heap_end = &end;
 8001fd8:	4b0f      	ldr	r3, [pc, #60]	; (8002018 <_sbrk+0x50>)
 8001fda:	4a10      	ldr	r2, [pc, #64]	; (800201c <_sbrk+0x54>)
 8001fdc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001fde:	4b0e      	ldr	r3, [pc, #56]	; (8002018 <_sbrk+0x50>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001fe4:	4b0c      	ldr	r3, [pc, #48]	; (8002018 <_sbrk+0x50>)
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4413      	add	r3, r2
 8001fec:	466a      	mov	r2, sp
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d907      	bls.n	8002002 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001ff2:	f001 ff1d 	bl	8003e30 <__errno>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	230c      	movs	r3, #12
 8001ffa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8002000:	e006      	b.n	8002010 <_sbrk+0x48>
	}

	heap_end += incr;
 8002002:	4b05      	ldr	r3, [pc, #20]	; (8002018 <_sbrk+0x50>)
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4413      	add	r3, r2
 800200a:	4a03      	ldr	r2, [pc, #12]	; (8002018 <_sbrk+0x50>)
 800200c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800200e:	68fb      	ldr	r3, [r7, #12]
}
 8002010:	4618      	mov	r0, r3
 8002012:	3710      	adds	r7, #16
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	2000019c 	.word	0x2000019c
 800201c:	20000238 	.word	0x20000238

08002020 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002024:	4b15      	ldr	r3, [pc, #84]	; (800207c <SystemInit+0x5c>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a14      	ldr	r2, [pc, #80]	; (800207c <SystemInit+0x5c>)
 800202a:	f043 0301 	orr.w	r3, r3, #1
 800202e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002030:	4b12      	ldr	r3, [pc, #72]	; (800207c <SystemInit+0x5c>)
 8002032:	685a      	ldr	r2, [r3, #4]
 8002034:	4911      	ldr	r1, [pc, #68]	; (800207c <SystemInit+0x5c>)
 8002036:	4b12      	ldr	r3, [pc, #72]	; (8002080 <SystemInit+0x60>)
 8002038:	4013      	ands	r3, r2
 800203a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800203c:	4b0f      	ldr	r3, [pc, #60]	; (800207c <SystemInit+0x5c>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a0e      	ldr	r2, [pc, #56]	; (800207c <SystemInit+0x5c>)
 8002042:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002046:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800204a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800204c:	4b0b      	ldr	r3, [pc, #44]	; (800207c <SystemInit+0x5c>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a0a      	ldr	r2, [pc, #40]	; (800207c <SystemInit+0x5c>)
 8002052:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002056:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002058:	4b08      	ldr	r3, [pc, #32]	; (800207c <SystemInit+0x5c>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	4a07      	ldr	r2, [pc, #28]	; (800207c <SystemInit+0x5c>)
 800205e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002062:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002064:	4b05      	ldr	r3, [pc, #20]	; (800207c <SystemInit+0x5c>)
 8002066:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800206a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800206c:	4b05      	ldr	r3, [pc, #20]	; (8002084 <SystemInit+0x64>)
 800206e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002072:	609a      	str	r2, [r3, #8]
#endif 
}
 8002074:	bf00      	nop
 8002076:	46bd      	mov	sp, r7
 8002078:	bc80      	pop	{r7}
 800207a:	4770      	bx	lr
 800207c:	40021000 	.word	0x40021000
 8002080:	f8ff0000 	.word	0xf8ff0000
 8002084:	e000ed00 	.word	0xe000ed00

08002088 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002088:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800208a:	e003      	b.n	8002094 <LoopCopyDataInit>

0800208c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800208c:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800208e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002090:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002092:	3104      	adds	r1, #4

08002094 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002094:	480a      	ldr	r0, [pc, #40]	; (80020c0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002096:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002098:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800209a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800209c:	d3f6      	bcc.n	800208c <CopyDataInit>
  ldr r2, =_sbss
 800209e:	4a0a      	ldr	r2, [pc, #40]	; (80020c8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80020a0:	e002      	b.n	80020a8 <LoopFillZerobss>

080020a2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80020a2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80020a4:	f842 3b04 	str.w	r3, [r2], #4

080020a8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80020a8:	4b08      	ldr	r3, [pc, #32]	; (80020cc <LoopFillZerobss+0x24>)
  cmp r2, r3
 80020aa:	429a      	cmp	r2, r3
  bcc FillZerobss
 80020ac:	d3f9      	bcc.n	80020a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80020ae:	f7ff ffb7 	bl	8002020 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020b2:	f001 fec3 	bl	8003e3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020b6:	f7ff fba5 	bl	8001804 <main>
  bx lr
 80020ba:	4770      	bx	lr
  ldr r3, =_sidata
 80020bc:	08006008 	.word	0x08006008
  ldr r0, =_sdata
 80020c0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80020c4:	200000e0 	.word	0x200000e0
  ldr r2, =_sbss
 80020c8:	200000e0 	.word	0x200000e0
  ldr r3, = _ebss
 80020cc:	20000238 	.word	0x20000238

080020d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020d0:	e7fe      	b.n	80020d0 <ADC1_2_IRQHandler>
	...

080020d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020d8:	4b08      	ldr	r3, [pc, #32]	; (80020fc <HAL_Init+0x28>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a07      	ldr	r2, [pc, #28]	; (80020fc <HAL_Init+0x28>)
 80020de:	f043 0310 	orr.w	r3, r3, #16
 80020e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020e4:	2003      	movs	r0, #3
 80020e6:	f000 fd65 	bl	8002bb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020ea:	2000      	movs	r0, #0
 80020ec:	f000 f808 	bl	8002100 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020f0:	f7ff fe3a 	bl	8001d68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	40022000 	.word	0x40022000

08002100 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002108:	4b12      	ldr	r3, [pc, #72]	; (8002154 <HAL_InitTick+0x54>)
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	4b12      	ldr	r3, [pc, #72]	; (8002158 <HAL_InitTick+0x58>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	4619      	mov	r1, r3
 8002112:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002116:	fbb3 f3f1 	udiv	r3, r3, r1
 800211a:	fbb2 f3f3 	udiv	r3, r2, r3
 800211e:	4618      	mov	r0, r3
 8002120:	f000 fd6f 	bl	8002c02 <HAL_SYSTICK_Config>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e00e      	b.n	800214c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2b0f      	cmp	r3, #15
 8002132:	d80a      	bhi.n	800214a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002134:	2200      	movs	r2, #0
 8002136:	6879      	ldr	r1, [r7, #4]
 8002138:	f04f 30ff 	mov.w	r0, #4294967295
 800213c:	f000 fd45 	bl	8002bca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002140:	4a06      	ldr	r2, [pc, #24]	; (800215c <HAL_InitTick+0x5c>)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002146:	2300      	movs	r3, #0
 8002148:	e000      	b.n	800214c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
}
 800214c:	4618      	mov	r0, r3
 800214e:	3708      	adds	r7, #8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	2000006c 	.word	0x2000006c
 8002158:	20000074 	.word	0x20000074
 800215c:	20000070 	.word	0x20000070

08002160 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002164:	4b05      	ldr	r3, [pc, #20]	; (800217c <HAL_IncTick+0x1c>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	461a      	mov	r2, r3
 800216a:	4b05      	ldr	r3, [pc, #20]	; (8002180 <HAL_IncTick+0x20>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4413      	add	r3, r2
 8002170:	4a03      	ldr	r2, [pc, #12]	; (8002180 <HAL_IncTick+0x20>)
 8002172:	6013      	str	r3, [r2, #0]
}
 8002174:	bf00      	nop
 8002176:	46bd      	mov	sp, r7
 8002178:	bc80      	pop	{r7}
 800217a:	4770      	bx	lr
 800217c:	20000074 	.word	0x20000074
 8002180:	20000230 	.word	0x20000230

08002184 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  return uwTick;
 8002188:	4b02      	ldr	r3, [pc, #8]	; (8002194 <HAL_GetTick+0x10>)
 800218a:	681b      	ldr	r3, [r3, #0]
}
 800218c:	4618      	mov	r0, r3
 800218e:	46bd      	mov	sp, r7
 8002190:	bc80      	pop	{r7}
 8002192:	4770      	bx	lr
 8002194:	20000230 	.word	0x20000230

08002198 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021a0:	f7ff fff0 	bl	8002184 <HAL_GetTick>
 80021a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b0:	d005      	beq.n	80021be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021b2:	4b09      	ldr	r3, [pc, #36]	; (80021d8 <HAL_Delay+0x40>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	461a      	mov	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	4413      	add	r3, r2
 80021bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021be:	bf00      	nop
 80021c0:	f7ff ffe0 	bl	8002184 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d8f7      	bhi.n	80021c0 <HAL_Delay+0x28>
  {
  }
}
 80021d0:	bf00      	nop
 80021d2:	3710      	adds	r7, #16
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	20000074 	.word	0x20000074

080021dc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021e4:	2300      	movs	r3, #0
 80021e6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80021e8:	2300      	movs	r3, #0
 80021ea:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80021ec:	2300      	movs	r3, #0
 80021ee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80021f0:	2300      	movs	r3, #0
 80021f2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e0be      	b.n	800237c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002208:	2b00      	cmp	r3, #0
 800220a:	d109      	bne.n	8002220 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f7ff fdd6 	bl	8001dcc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f000 fbdd 	bl	80029e0 <ADC_ConversionStop_Disable>
 8002226:	4603      	mov	r3, r0
 8002228:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222e:	f003 0310 	and.w	r3, r3, #16
 8002232:	2b00      	cmp	r3, #0
 8002234:	f040 8099 	bne.w	800236a <HAL_ADC_Init+0x18e>
 8002238:	7dfb      	ldrb	r3, [r7, #23]
 800223a:	2b00      	cmp	r3, #0
 800223c:	f040 8095 	bne.w	800236a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002244:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002248:	f023 0302 	bic.w	r3, r3, #2
 800224c:	f043 0202 	orr.w	r2, r3, #2
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800225c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	7b1b      	ldrb	r3, [r3, #12]
 8002262:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002264:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002266:	68ba      	ldr	r2, [r7, #8]
 8002268:	4313      	orrs	r3, r2
 800226a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002274:	d003      	beq.n	800227e <HAL_ADC_Init+0xa2>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d102      	bne.n	8002284 <HAL_ADC_Init+0xa8>
 800227e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002282:	e000      	b.n	8002286 <HAL_ADC_Init+0xaa>
 8002284:	2300      	movs	r3, #0
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	4313      	orrs	r3, r2
 800228a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	7d1b      	ldrb	r3, [r3, #20]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d119      	bne.n	80022c8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	7b1b      	ldrb	r3, [r3, #12]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d109      	bne.n	80022b0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	3b01      	subs	r3, #1
 80022a2:	035a      	lsls	r2, r3, #13
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022ac:	613b      	str	r3, [r7, #16]
 80022ae:	e00b      	b.n	80022c8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b4:	f043 0220 	orr.w	r2, r3, #32
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c0:	f043 0201 	orr.w	r2, r3, #1
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	430a      	orrs	r2, r1
 80022da:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	689a      	ldr	r2, [r3, #8]
 80022e2:	4b28      	ldr	r3, [pc, #160]	; (8002384 <HAL_ADC_Init+0x1a8>)
 80022e4:	4013      	ands	r3, r2
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	6812      	ldr	r2, [r2, #0]
 80022ea:	68b9      	ldr	r1, [r7, #8]
 80022ec:	430b      	orrs	r3, r1
 80022ee:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022f8:	d003      	beq.n	8002302 <HAL_ADC_Init+0x126>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d104      	bne.n	800230c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	3b01      	subs	r3, #1
 8002308:	051b      	lsls	r3, r3, #20
 800230a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002312:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	430a      	orrs	r2, r1
 800231e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	689a      	ldr	r2, [r3, #8]
 8002326:	4b18      	ldr	r3, [pc, #96]	; (8002388 <HAL_ADC_Init+0x1ac>)
 8002328:	4013      	ands	r3, r2
 800232a:	68ba      	ldr	r2, [r7, #8]
 800232c:	429a      	cmp	r2, r3
 800232e:	d10b      	bne.n	8002348 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800233a:	f023 0303 	bic.w	r3, r3, #3
 800233e:	f043 0201 	orr.w	r2, r3, #1
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002346:	e018      	b.n	800237a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800234c:	f023 0312 	bic.w	r3, r3, #18
 8002350:	f043 0210 	orr.w	r2, r3, #16
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235c:	f043 0201 	orr.w	r2, r3, #1
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002368:	e007      	b.n	800237a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236e:	f043 0210 	orr.w	r2, r3, #16
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800237a:	7dfb      	ldrb	r3, [r7, #23]
}
 800237c:	4618      	mov	r0, r3
 800237e:	3718      	adds	r7, #24
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	ffe1f7fd 	.word	0xffe1f7fd
 8002388:	ff1f0efe 	.word	0xff1f0efe

0800238c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002394:	2300      	movs	r3, #0
 8002396:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d101      	bne.n	80023a6 <HAL_ADC_Start+0x1a>
 80023a2:	2302      	movs	r3, #2
 80023a4:	e098      	b.n	80024d8 <HAL_ADC_Start+0x14c>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2201      	movs	r2, #1
 80023aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 fac4 	bl	800293c <ADC_Enable>
 80023b4:	4603      	mov	r3, r0
 80023b6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80023b8:	7bfb      	ldrb	r3, [r7, #15]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f040 8087 	bne.w	80024ce <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023c8:	f023 0301 	bic.w	r3, r3, #1
 80023cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a41      	ldr	r2, [pc, #260]	; (80024e0 <HAL_ADC_Start+0x154>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d105      	bne.n	80023ea <HAL_ADC_Start+0x5e>
 80023de:	4b41      	ldr	r3, [pc, #260]	; (80024e4 <HAL_ADC_Start+0x158>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d115      	bne.n	8002416 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002400:	2b00      	cmp	r3, #0
 8002402:	d026      	beq.n	8002452 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002408:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800240c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002414:	e01d      	b.n	8002452 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a2f      	ldr	r2, [pc, #188]	; (80024e4 <HAL_ADC_Start+0x158>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d004      	beq.n	8002436 <HAL_ADC_Start+0xaa>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a2b      	ldr	r2, [pc, #172]	; (80024e0 <HAL_ADC_Start+0x154>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d10d      	bne.n	8002452 <HAL_ADC_Start+0xc6>
 8002436:	4b2b      	ldr	r3, [pc, #172]	; (80024e4 <HAL_ADC_Start+0x158>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800243e:	2b00      	cmp	r3, #0
 8002440:	d007      	beq.n	8002452 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002446:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800244a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002456:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d006      	beq.n	800246c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002462:	f023 0206 	bic.w	r2, r3, #6
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	62da      	str	r2, [r3, #44]	; 0x2c
 800246a:	e002      	b.n	8002472 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f06f 0202 	mvn.w	r2, #2
 8002482:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800248e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002492:	d113      	bne.n	80024bc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002498:	4a11      	ldr	r2, [pc, #68]	; (80024e0 <HAL_ADC_Start+0x154>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d105      	bne.n	80024aa <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800249e:	4b11      	ldr	r3, [pc, #68]	; (80024e4 <HAL_ADC_Start+0x158>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d108      	bne.n	80024bc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	689a      	ldr	r2, [r3, #8]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80024b8:	609a      	str	r2, [r3, #8]
 80024ba:	e00c      	b.n	80024d6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689a      	ldr	r2, [r3, #8]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80024ca:	609a      	str	r2, [r3, #8]
 80024cc:	e003      	b.n	80024d6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80024d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3710      	adds	r7, #16
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	40012800 	.word	0x40012800
 80024e4:	40012400 	.word	0x40012400

080024e8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024f0:	2300      	movs	r3, #0
 80024f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d101      	bne.n	8002502 <HAL_ADC_Stop+0x1a>
 80024fe:	2302      	movs	r3, #2
 8002500:	e01a      	b.n	8002538 <HAL_ADC_Stop+0x50>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2201      	movs	r2, #1
 8002506:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 fa68 	bl	80029e0 <ADC_ConversionStop_Disable>
 8002510:	4603      	mov	r3, r0
 8002512:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002514:	7bfb      	ldrb	r3, [r7, #15]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d109      	bne.n	800252e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002522:	f023 0301 	bic.w	r3, r3, #1
 8002526:	f043 0201 	orr.w	r2, r3, #1
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002536:	7bfb      	ldrb	r3, [r7, #15]
}
 8002538:	4618      	mov	r0, r3
 800253a:	3710      	adds	r7, #16
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002540:	b590      	push	{r4, r7, lr}
 8002542:	b087      	sub	sp, #28
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800254a:	2300      	movs	r3, #0
 800254c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800254e:	2300      	movs	r3, #0
 8002550:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002552:	2300      	movs	r3, #0
 8002554:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002556:	f7ff fe15 	bl	8002184 <HAL_GetTick>
 800255a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00b      	beq.n	8002582 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800256e:	f043 0220 	orr.w	r2, r3, #32
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e0c8      	b.n	8002714 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800258c:	2b00      	cmp	r3, #0
 800258e:	d12a      	bne.n	80025e6 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002596:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800259a:	2b00      	cmp	r3, #0
 800259c:	d123      	bne.n	80025e6 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800259e:	e01a      	b.n	80025d6 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a6:	d016      	beq.n	80025d6 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d007      	beq.n	80025be <HAL_ADC_PollForConversion+0x7e>
 80025ae:	f7ff fde9 	bl	8002184 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	683a      	ldr	r2, [r7, #0]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d20b      	bcs.n	80025d6 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c2:	f043 0204 	orr.w	r2, r3, #4
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e09e      	b.n	8002714 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d0dd      	beq.n	80025a0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80025e4:	e06c      	b.n	80026c0 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80025e6:	4b4d      	ldr	r3, [pc, #308]	; (800271c <HAL_ADC_PollForConversion+0x1dc>)
 80025e8:	681c      	ldr	r4, [r3, #0]
 80025ea:	2002      	movs	r0, #2
 80025ec:	f001 f946 	bl	800387c <HAL_RCCEx_GetPeriphCLKFreq>
 80025f0:	4603      	mov	r3, r0
 80025f2:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6919      	ldr	r1, [r3, #16]
 80025fc:	4b48      	ldr	r3, [pc, #288]	; (8002720 <HAL_ADC_PollForConversion+0x1e0>)
 80025fe:	400b      	ands	r3, r1
 8002600:	2b00      	cmp	r3, #0
 8002602:	d118      	bne.n	8002636 <HAL_ADC_PollForConversion+0xf6>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68d9      	ldr	r1, [r3, #12]
 800260a:	4b46      	ldr	r3, [pc, #280]	; (8002724 <HAL_ADC_PollForConversion+0x1e4>)
 800260c:	400b      	ands	r3, r1
 800260e:	2b00      	cmp	r3, #0
 8002610:	d111      	bne.n	8002636 <HAL_ADC_PollForConversion+0xf6>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6919      	ldr	r1, [r3, #16]
 8002618:	4b43      	ldr	r3, [pc, #268]	; (8002728 <HAL_ADC_PollForConversion+0x1e8>)
 800261a:	400b      	ands	r3, r1
 800261c:	2b00      	cmp	r3, #0
 800261e:	d108      	bne.n	8002632 <HAL_ADC_PollForConversion+0xf2>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	68d9      	ldr	r1, [r3, #12]
 8002626:	4b41      	ldr	r3, [pc, #260]	; (800272c <HAL_ADC_PollForConversion+0x1ec>)
 8002628:	400b      	ands	r3, r1
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_ADC_PollForConversion+0xf2>
 800262e:	2314      	movs	r3, #20
 8002630:	e020      	b.n	8002674 <HAL_ADC_PollForConversion+0x134>
 8002632:	2329      	movs	r3, #41	; 0x29
 8002634:	e01e      	b.n	8002674 <HAL_ADC_PollForConversion+0x134>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	6919      	ldr	r1, [r3, #16]
 800263c:	4b3a      	ldr	r3, [pc, #232]	; (8002728 <HAL_ADC_PollForConversion+0x1e8>)
 800263e:	400b      	ands	r3, r1
 8002640:	2b00      	cmp	r3, #0
 8002642:	d106      	bne.n	8002652 <HAL_ADC_PollForConversion+0x112>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68d9      	ldr	r1, [r3, #12]
 800264a:	4b38      	ldr	r3, [pc, #224]	; (800272c <HAL_ADC_PollForConversion+0x1ec>)
 800264c:	400b      	ands	r3, r1
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00d      	beq.n	800266e <HAL_ADC_PollForConversion+0x12e>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6919      	ldr	r1, [r3, #16]
 8002658:	4b35      	ldr	r3, [pc, #212]	; (8002730 <HAL_ADC_PollForConversion+0x1f0>)
 800265a:	400b      	ands	r3, r1
 800265c:	2b00      	cmp	r3, #0
 800265e:	d108      	bne.n	8002672 <HAL_ADC_PollForConversion+0x132>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68d9      	ldr	r1, [r3, #12]
 8002666:	4b32      	ldr	r3, [pc, #200]	; (8002730 <HAL_ADC_PollForConversion+0x1f0>)
 8002668:	400b      	ands	r3, r1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <HAL_ADC_PollForConversion+0x132>
 800266e:	2354      	movs	r3, #84	; 0x54
 8002670:	e000      	b.n	8002674 <HAL_ADC_PollForConversion+0x134>
 8002672:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002674:	fb02 f303 	mul.w	r3, r2, r3
 8002678:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800267a:	e01d      	b.n	80026b8 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002682:	d016      	beq.n	80026b2 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d007      	beq.n	800269a <HAL_ADC_PollForConversion+0x15a>
 800268a:	f7ff fd7b 	bl	8002184 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	429a      	cmp	r2, r3
 8002698:	d20b      	bcs.n	80026b2 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269e:	f043 0204 	orr.w	r2, r3, #4
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e030      	b.n	8002714 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	3301      	adds	r3, #1
 80026b6:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d8dd      	bhi.n	800267c <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f06f 0212 	mvn.w	r2, #18
 80026c8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80026e0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80026e4:	d115      	bne.n	8002712 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d111      	bne.n	8002712 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d105      	bne.n	8002712 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270a:	f043 0201 	orr.w	r2, r3, #1
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	371c      	adds	r7, #28
 8002718:	46bd      	mov	sp, r7
 800271a:	bd90      	pop	{r4, r7, pc}
 800271c:	2000006c 	.word	0x2000006c
 8002720:	24924924 	.word	0x24924924
 8002724:	00924924 	.word	0x00924924
 8002728:	12492492 	.word	0x12492492
 800272c:	00492492 	.word	0x00492492
 8002730:	00249249 	.word	0x00249249

08002734 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002742:	4618      	mov	r0, r3
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	bc80      	pop	{r7}
 800274a:	4770      	bx	lr

0800274c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002756:	2300      	movs	r3, #0
 8002758:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800275a:	2300      	movs	r3, #0
 800275c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002764:	2b01      	cmp	r3, #1
 8002766:	d101      	bne.n	800276c <HAL_ADC_ConfigChannel+0x20>
 8002768:	2302      	movs	r3, #2
 800276a:	e0dc      	b.n	8002926 <HAL_ADC_ConfigChannel+0x1da>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	2b06      	cmp	r3, #6
 800277a:	d81c      	bhi.n	80027b6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685a      	ldr	r2, [r3, #4]
 8002786:	4613      	mov	r3, r2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	4413      	add	r3, r2
 800278c:	3b05      	subs	r3, #5
 800278e:	221f      	movs	r2, #31
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	43db      	mvns	r3, r3
 8002796:	4019      	ands	r1, r3
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	6818      	ldr	r0, [r3, #0]
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685a      	ldr	r2, [r3, #4]
 80027a0:	4613      	mov	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4413      	add	r3, r2
 80027a6:	3b05      	subs	r3, #5
 80027a8:	fa00 f203 	lsl.w	r2, r0, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	430a      	orrs	r2, r1
 80027b2:	635a      	str	r2, [r3, #52]	; 0x34
 80027b4:	e03c      	b.n	8002830 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	2b0c      	cmp	r3, #12
 80027bc:	d81c      	bhi.n	80027f8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	4613      	mov	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4413      	add	r3, r2
 80027ce:	3b23      	subs	r3, #35	; 0x23
 80027d0:	221f      	movs	r2, #31
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	43db      	mvns	r3, r3
 80027d8:	4019      	ands	r1, r3
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	6818      	ldr	r0, [r3, #0]
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	4613      	mov	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	4413      	add	r3, r2
 80027e8:	3b23      	subs	r3, #35	; 0x23
 80027ea:	fa00 f203 	lsl.w	r2, r0, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	430a      	orrs	r2, r1
 80027f4:	631a      	str	r2, [r3, #48]	; 0x30
 80027f6:	e01b      	b.n	8002830 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	4613      	mov	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4413      	add	r3, r2
 8002808:	3b41      	subs	r3, #65	; 0x41
 800280a:	221f      	movs	r2, #31
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	43db      	mvns	r3, r3
 8002812:	4019      	ands	r1, r3
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	6818      	ldr	r0, [r3, #0]
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685a      	ldr	r2, [r3, #4]
 800281c:	4613      	mov	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	3b41      	subs	r3, #65	; 0x41
 8002824:	fa00 f203 	lsl.w	r2, r0, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	430a      	orrs	r2, r1
 800282e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2b09      	cmp	r3, #9
 8002836:	d91c      	bls.n	8002872 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68d9      	ldr	r1, [r3, #12]
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	4613      	mov	r3, r2
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	4413      	add	r3, r2
 8002848:	3b1e      	subs	r3, #30
 800284a:	2207      	movs	r2, #7
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	43db      	mvns	r3, r3
 8002852:	4019      	ands	r1, r3
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	6898      	ldr	r0, [r3, #8]
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	4613      	mov	r3, r2
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	4413      	add	r3, r2
 8002862:	3b1e      	subs	r3, #30
 8002864:	fa00 f203 	lsl.w	r2, r0, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	430a      	orrs	r2, r1
 800286e:	60da      	str	r2, [r3, #12]
 8002870:	e019      	b.n	80028a6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	6919      	ldr	r1, [r3, #16]
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	4613      	mov	r3, r2
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	4413      	add	r3, r2
 8002882:	2207      	movs	r2, #7
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	43db      	mvns	r3, r3
 800288a:	4019      	ands	r1, r3
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	6898      	ldr	r0, [r3, #8]
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	4613      	mov	r3, r2
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	4413      	add	r3, r2
 800289a:	fa00 f203 	lsl.w	r2, r0, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	430a      	orrs	r2, r1
 80028a4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2b10      	cmp	r3, #16
 80028ac:	d003      	beq.n	80028b6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80028b2:	2b11      	cmp	r3, #17
 80028b4:	d132      	bne.n	800291c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a1d      	ldr	r2, [pc, #116]	; (8002930 <HAL_ADC_ConfigChannel+0x1e4>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d125      	bne.n	800290c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d126      	bne.n	800291c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689a      	ldr	r2, [r3, #8]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80028dc:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2b10      	cmp	r3, #16
 80028e4:	d11a      	bne.n	800291c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80028e6:	4b13      	ldr	r3, [pc, #76]	; (8002934 <HAL_ADC_ConfigChannel+0x1e8>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a13      	ldr	r2, [pc, #76]	; (8002938 <HAL_ADC_ConfigChannel+0x1ec>)
 80028ec:	fba2 2303 	umull	r2, r3, r2, r3
 80028f0:	0c9a      	lsrs	r2, r3, #18
 80028f2:	4613      	mov	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	4413      	add	r3, r2
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80028fc:	e002      	b.n	8002904 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	3b01      	subs	r3, #1
 8002902:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1f9      	bne.n	80028fe <HAL_ADC_ConfigChannel+0x1b2>
 800290a:	e007      	b.n	800291c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002910:	f043 0220 	orr.w	r2, r3, #32
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002924:	7bfb      	ldrb	r3, [r7, #15]
}
 8002926:	4618      	mov	r0, r3
 8002928:	3714      	adds	r7, #20
 800292a:	46bd      	mov	sp, r7
 800292c:	bc80      	pop	{r7}
 800292e:	4770      	bx	lr
 8002930:	40012400 	.word	0x40012400
 8002934:	2000006c 	.word	0x2000006c
 8002938:	431bde83 	.word	0x431bde83

0800293c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002944:	2300      	movs	r3, #0
 8002946:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002948:	2300      	movs	r3, #0
 800294a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b01      	cmp	r3, #1
 8002958:	d039      	beq.n	80029ce <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f042 0201 	orr.w	r2, r2, #1
 8002968:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800296a:	4b1b      	ldr	r3, [pc, #108]	; (80029d8 <ADC_Enable+0x9c>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a1b      	ldr	r2, [pc, #108]	; (80029dc <ADC_Enable+0xa0>)
 8002970:	fba2 2303 	umull	r2, r3, r2, r3
 8002974:	0c9b      	lsrs	r3, r3, #18
 8002976:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002978:	e002      	b.n	8002980 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	3b01      	subs	r3, #1
 800297e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1f9      	bne.n	800297a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002986:	f7ff fbfd 	bl	8002184 <HAL_GetTick>
 800298a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800298c:	e018      	b.n	80029c0 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800298e:	f7ff fbf9 	bl	8002184 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d911      	bls.n	80029c0 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a0:	f043 0210 	orr.w	r2, r3, #16
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ac:	f043 0201 	orr.w	r2, r3, #1
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e007      	b.n	80029d0 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d1df      	bne.n	800298e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	2000006c 	.word	0x2000006c
 80029dc:	431bde83 	.word	0x431bde83

080029e0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029e8:	2300      	movs	r3, #0
 80029ea:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d127      	bne.n	8002a4a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 0201 	bic.w	r2, r2, #1
 8002a08:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a0a:	f7ff fbbb 	bl	8002184 <HAL_GetTick>
 8002a0e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002a10:	e014      	b.n	8002a3c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a12:	f7ff fbb7 	bl	8002184 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d90d      	bls.n	8002a3c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a24:	f043 0210 	orr.w	r2, r3, #16
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a30:	f043 0201 	orr.w	r2, r3, #1
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e007      	b.n	8002a4c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d0e3      	beq.n	8002a12 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3710      	adds	r7, #16
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <__NVIC_SetPriorityGrouping>:
{
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f003 0307 	and.w	r3, r3, #7
 8002a62:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a64:	4b0c      	ldr	r3, [pc, #48]	; (8002a98 <__NVIC_SetPriorityGrouping+0x44>)
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a6a:	68ba      	ldr	r2, [r7, #8]
 8002a6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a70:	4013      	ands	r3, r2
 8002a72:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a86:	4a04      	ldr	r2, [pc, #16]	; (8002a98 <__NVIC_SetPriorityGrouping+0x44>)
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	60d3      	str	r3, [r2, #12]
}
 8002a8c:	bf00      	nop
 8002a8e:	3714      	adds	r7, #20
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bc80      	pop	{r7}
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	e000ed00 	.word	0xe000ed00

08002a9c <__NVIC_GetPriorityGrouping>:
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002aa0:	4b04      	ldr	r3, [pc, #16]	; (8002ab4 <__NVIC_GetPriorityGrouping+0x18>)
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	0a1b      	lsrs	r3, r3, #8
 8002aa6:	f003 0307 	and.w	r3, r3, #7
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bc80      	pop	{r7}
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	e000ed00 	.word	0xe000ed00

08002ab8 <__NVIC_SetPriority>:
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	4603      	mov	r3, r0
 8002ac0:	6039      	str	r1, [r7, #0]
 8002ac2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	db0a      	blt.n	8002ae2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	b2da      	uxtb	r2, r3
 8002ad0:	490c      	ldr	r1, [pc, #48]	; (8002b04 <__NVIC_SetPriority+0x4c>)
 8002ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad6:	0112      	lsls	r2, r2, #4
 8002ad8:	b2d2      	uxtb	r2, r2
 8002ada:	440b      	add	r3, r1
 8002adc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002ae0:	e00a      	b.n	8002af8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	4908      	ldr	r1, [pc, #32]	; (8002b08 <__NVIC_SetPriority+0x50>)
 8002ae8:	79fb      	ldrb	r3, [r7, #7]
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	3b04      	subs	r3, #4
 8002af0:	0112      	lsls	r2, r2, #4
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	440b      	add	r3, r1
 8002af6:	761a      	strb	r2, [r3, #24]
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bc80      	pop	{r7}
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	e000e100 	.word	0xe000e100
 8002b08:	e000ed00 	.word	0xe000ed00

08002b0c <NVIC_EncodePriority>:
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b089      	sub	sp, #36	; 0x24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	f1c3 0307 	rsb	r3, r3, #7
 8002b26:	2b04      	cmp	r3, #4
 8002b28:	bf28      	it	cs
 8002b2a:	2304      	movcs	r3, #4
 8002b2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	3304      	adds	r3, #4
 8002b32:	2b06      	cmp	r3, #6
 8002b34:	d902      	bls.n	8002b3c <NVIC_EncodePriority+0x30>
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	3b03      	subs	r3, #3
 8002b3a:	e000      	b.n	8002b3e <NVIC_EncodePriority+0x32>
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b40:	f04f 32ff 	mov.w	r2, #4294967295
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	43da      	mvns	r2, r3
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	401a      	ands	r2, r3
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b54:	f04f 31ff 	mov.w	r1, #4294967295
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b5e:	43d9      	mvns	r1, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b64:	4313      	orrs	r3, r2
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3724      	adds	r7, #36	; 0x24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bc80      	pop	{r7}
 8002b6e:	4770      	bx	lr

08002b70 <SysTick_Config>:
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b80:	d301      	bcc.n	8002b86 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002b82:	2301      	movs	r3, #1
 8002b84:	e00f      	b.n	8002ba6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b86:	4a0a      	ldr	r2, [pc, #40]	; (8002bb0 <SysTick_Config+0x40>)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b8e:	210f      	movs	r1, #15
 8002b90:	f04f 30ff 	mov.w	r0, #4294967295
 8002b94:	f7ff ff90 	bl	8002ab8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b98:	4b05      	ldr	r3, [pc, #20]	; (8002bb0 <SysTick_Config+0x40>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b9e:	4b04      	ldr	r3, [pc, #16]	; (8002bb0 <SysTick_Config+0x40>)
 8002ba0:	2207      	movs	r2, #7
 8002ba2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	e000e010 	.word	0xe000e010

08002bb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f7ff ff49 	bl	8002a54 <__NVIC_SetPriorityGrouping>
}
 8002bc2:	bf00      	nop
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b086      	sub	sp, #24
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	60b9      	str	r1, [r7, #8]
 8002bd4:	607a      	str	r2, [r7, #4]
 8002bd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bdc:	f7ff ff5e 	bl	8002a9c <__NVIC_GetPriorityGrouping>
 8002be0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	68b9      	ldr	r1, [r7, #8]
 8002be6:	6978      	ldr	r0, [r7, #20]
 8002be8:	f7ff ff90 	bl	8002b0c <NVIC_EncodePriority>
 8002bec:	4602      	mov	r2, r0
 8002bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bf2:	4611      	mov	r1, r2
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff ff5f 	bl	8002ab8 <__NVIC_SetPriority>
}
 8002bfa:	bf00      	nop
 8002bfc:	3718      	adds	r7, #24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b082      	sub	sp, #8
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f7ff ffb0 	bl	8002b70 <SysTick_Config>
 8002c10:	4603      	mov	r3, r0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
	...

08002c1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b08b      	sub	sp, #44	; 0x2c
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c26:	2300      	movs	r3, #0
 8002c28:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c2e:	e127      	b.n	8002e80 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c30:	2201      	movs	r2, #1
 8002c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	69fa      	ldr	r2, [r7, #28]
 8002c40:	4013      	ands	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	f040 8116 	bne.w	8002e7a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	2b12      	cmp	r3, #18
 8002c54:	d034      	beq.n	8002cc0 <HAL_GPIO_Init+0xa4>
 8002c56:	2b12      	cmp	r3, #18
 8002c58:	d80d      	bhi.n	8002c76 <HAL_GPIO_Init+0x5a>
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d02b      	beq.n	8002cb6 <HAL_GPIO_Init+0x9a>
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d804      	bhi.n	8002c6c <HAL_GPIO_Init+0x50>
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d031      	beq.n	8002cca <HAL_GPIO_Init+0xae>
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d01c      	beq.n	8002ca4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002c6a:	e048      	b.n	8002cfe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002c6c:	2b03      	cmp	r3, #3
 8002c6e:	d043      	beq.n	8002cf8 <HAL_GPIO_Init+0xdc>
 8002c70:	2b11      	cmp	r3, #17
 8002c72:	d01b      	beq.n	8002cac <HAL_GPIO_Init+0x90>
          break;
 8002c74:	e043      	b.n	8002cfe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002c76:	4a89      	ldr	r2, [pc, #548]	; (8002e9c <HAL_GPIO_Init+0x280>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d026      	beq.n	8002cca <HAL_GPIO_Init+0xae>
 8002c7c:	4a87      	ldr	r2, [pc, #540]	; (8002e9c <HAL_GPIO_Init+0x280>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d806      	bhi.n	8002c90 <HAL_GPIO_Init+0x74>
 8002c82:	4a87      	ldr	r2, [pc, #540]	; (8002ea0 <HAL_GPIO_Init+0x284>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d020      	beq.n	8002cca <HAL_GPIO_Init+0xae>
 8002c88:	4a86      	ldr	r2, [pc, #536]	; (8002ea4 <HAL_GPIO_Init+0x288>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d01d      	beq.n	8002cca <HAL_GPIO_Init+0xae>
          break;
 8002c8e:	e036      	b.n	8002cfe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002c90:	4a85      	ldr	r2, [pc, #532]	; (8002ea8 <HAL_GPIO_Init+0x28c>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d019      	beq.n	8002cca <HAL_GPIO_Init+0xae>
 8002c96:	4a85      	ldr	r2, [pc, #532]	; (8002eac <HAL_GPIO_Init+0x290>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d016      	beq.n	8002cca <HAL_GPIO_Init+0xae>
 8002c9c:	4a84      	ldr	r2, [pc, #528]	; (8002eb0 <HAL_GPIO_Init+0x294>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d013      	beq.n	8002cca <HAL_GPIO_Init+0xae>
          break;
 8002ca2:	e02c      	b.n	8002cfe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	623b      	str	r3, [r7, #32]
          break;
 8002caa:	e028      	b.n	8002cfe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	3304      	adds	r3, #4
 8002cb2:	623b      	str	r3, [r7, #32]
          break;
 8002cb4:	e023      	b.n	8002cfe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	3308      	adds	r3, #8
 8002cbc:	623b      	str	r3, [r7, #32]
          break;
 8002cbe:	e01e      	b.n	8002cfe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	330c      	adds	r3, #12
 8002cc6:	623b      	str	r3, [r7, #32]
          break;
 8002cc8:	e019      	b.n	8002cfe <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d102      	bne.n	8002cd8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002cd2:	2304      	movs	r3, #4
 8002cd4:	623b      	str	r3, [r7, #32]
          break;
 8002cd6:	e012      	b.n	8002cfe <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d105      	bne.n	8002cec <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ce0:	2308      	movs	r3, #8
 8002ce2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	69fa      	ldr	r2, [r7, #28]
 8002ce8:	611a      	str	r2, [r3, #16]
          break;
 8002cea:	e008      	b.n	8002cfe <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002cec:	2308      	movs	r3, #8
 8002cee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	69fa      	ldr	r2, [r7, #28]
 8002cf4:	615a      	str	r2, [r3, #20]
          break;
 8002cf6:	e002      	b.n	8002cfe <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	623b      	str	r3, [r7, #32]
          break;
 8002cfc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	2bff      	cmp	r3, #255	; 0xff
 8002d02:	d801      	bhi.n	8002d08 <HAL_GPIO_Init+0xec>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	e001      	b.n	8002d0c <HAL_GPIO_Init+0xf0>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	3304      	adds	r3, #4
 8002d0c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	2bff      	cmp	r3, #255	; 0xff
 8002d12:	d802      	bhi.n	8002d1a <HAL_GPIO_Init+0xfe>
 8002d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	e002      	b.n	8002d20 <HAL_GPIO_Init+0x104>
 8002d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1c:	3b08      	subs	r3, #8
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	210f      	movs	r1, #15
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2e:	43db      	mvns	r3, r3
 8002d30:	401a      	ands	r2, r3
 8002d32:	6a39      	ldr	r1, [r7, #32]
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	fa01 f303 	lsl.w	r3, r1, r3
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f000 8096 	beq.w	8002e7a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d4e:	4b59      	ldr	r3, [pc, #356]	; (8002eb4 <HAL_GPIO_Init+0x298>)
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	4a58      	ldr	r2, [pc, #352]	; (8002eb4 <HAL_GPIO_Init+0x298>)
 8002d54:	f043 0301 	orr.w	r3, r3, #1
 8002d58:	6193      	str	r3, [r2, #24]
 8002d5a:	4b56      	ldr	r3, [pc, #344]	; (8002eb4 <HAL_GPIO_Init+0x298>)
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	60bb      	str	r3, [r7, #8]
 8002d64:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d66:	4a54      	ldr	r2, [pc, #336]	; (8002eb8 <HAL_GPIO_Init+0x29c>)
 8002d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6a:	089b      	lsrs	r3, r3, #2
 8002d6c:	3302      	adds	r3, #2
 8002d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d72:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d76:	f003 0303 	and.w	r3, r3, #3
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	220f      	movs	r2, #15
 8002d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d82:	43db      	mvns	r3, r3
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	4013      	ands	r3, r2
 8002d88:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a4b      	ldr	r2, [pc, #300]	; (8002ebc <HAL_GPIO_Init+0x2a0>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d013      	beq.n	8002dba <HAL_GPIO_Init+0x19e>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a4a      	ldr	r2, [pc, #296]	; (8002ec0 <HAL_GPIO_Init+0x2a4>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d00d      	beq.n	8002db6 <HAL_GPIO_Init+0x19a>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a49      	ldr	r2, [pc, #292]	; (8002ec4 <HAL_GPIO_Init+0x2a8>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d007      	beq.n	8002db2 <HAL_GPIO_Init+0x196>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a48      	ldr	r2, [pc, #288]	; (8002ec8 <HAL_GPIO_Init+0x2ac>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d101      	bne.n	8002dae <HAL_GPIO_Init+0x192>
 8002daa:	2303      	movs	r3, #3
 8002dac:	e006      	b.n	8002dbc <HAL_GPIO_Init+0x1a0>
 8002dae:	2304      	movs	r3, #4
 8002db0:	e004      	b.n	8002dbc <HAL_GPIO_Init+0x1a0>
 8002db2:	2302      	movs	r3, #2
 8002db4:	e002      	b.n	8002dbc <HAL_GPIO_Init+0x1a0>
 8002db6:	2301      	movs	r3, #1
 8002db8:	e000      	b.n	8002dbc <HAL_GPIO_Init+0x1a0>
 8002dba:	2300      	movs	r3, #0
 8002dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dbe:	f002 0203 	and.w	r2, r2, #3
 8002dc2:	0092      	lsls	r2, r2, #2
 8002dc4:	4093      	lsls	r3, r2
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002dcc:	493a      	ldr	r1, [pc, #232]	; (8002eb8 <HAL_GPIO_Init+0x29c>)
 8002dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd0:	089b      	lsrs	r3, r3, #2
 8002dd2:	3302      	adds	r3, #2
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d006      	beq.n	8002df4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002de6:	4b39      	ldr	r3, [pc, #228]	; (8002ecc <HAL_GPIO_Init+0x2b0>)
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	4938      	ldr	r1, [pc, #224]	; (8002ecc <HAL_GPIO_Init+0x2b0>)
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	600b      	str	r3, [r1, #0]
 8002df2:	e006      	b.n	8002e02 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002df4:	4b35      	ldr	r3, [pc, #212]	; (8002ecc <HAL_GPIO_Init+0x2b0>)
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	43db      	mvns	r3, r3
 8002dfc:	4933      	ldr	r1, [pc, #204]	; (8002ecc <HAL_GPIO_Init+0x2b0>)
 8002dfe:	4013      	ands	r3, r2
 8002e00:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d006      	beq.n	8002e1c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002e0e:	4b2f      	ldr	r3, [pc, #188]	; (8002ecc <HAL_GPIO_Init+0x2b0>)
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	492e      	ldr	r1, [pc, #184]	; (8002ecc <HAL_GPIO_Init+0x2b0>)
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	604b      	str	r3, [r1, #4]
 8002e1a:	e006      	b.n	8002e2a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002e1c:	4b2b      	ldr	r3, [pc, #172]	; (8002ecc <HAL_GPIO_Init+0x2b0>)
 8002e1e:	685a      	ldr	r2, [r3, #4]
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	43db      	mvns	r3, r3
 8002e24:	4929      	ldr	r1, [pc, #164]	; (8002ecc <HAL_GPIO_Init+0x2b0>)
 8002e26:	4013      	ands	r3, r2
 8002e28:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d006      	beq.n	8002e44 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e36:	4b25      	ldr	r3, [pc, #148]	; (8002ecc <HAL_GPIO_Init+0x2b0>)
 8002e38:	689a      	ldr	r2, [r3, #8]
 8002e3a:	4924      	ldr	r1, [pc, #144]	; (8002ecc <HAL_GPIO_Init+0x2b0>)
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	608b      	str	r3, [r1, #8]
 8002e42:	e006      	b.n	8002e52 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e44:	4b21      	ldr	r3, [pc, #132]	; (8002ecc <HAL_GPIO_Init+0x2b0>)
 8002e46:	689a      	ldr	r2, [r3, #8]
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	43db      	mvns	r3, r3
 8002e4c:	491f      	ldr	r1, [pc, #124]	; (8002ecc <HAL_GPIO_Init+0x2b0>)
 8002e4e:	4013      	ands	r3, r2
 8002e50:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d006      	beq.n	8002e6c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e5e:	4b1b      	ldr	r3, [pc, #108]	; (8002ecc <HAL_GPIO_Init+0x2b0>)
 8002e60:	68da      	ldr	r2, [r3, #12]
 8002e62:	491a      	ldr	r1, [pc, #104]	; (8002ecc <HAL_GPIO_Init+0x2b0>)
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	60cb      	str	r3, [r1, #12]
 8002e6a:	e006      	b.n	8002e7a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002e6c:	4b17      	ldr	r3, [pc, #92]	; (8002ecc <HAL_GPIO_Init+0x2b0>)
 8002e6e:	68da      	ldr	r2, [r3, #12]
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	43db      	mvns	r3, r3
 8002e74:	4915      	ldr	r1, [pc, #84]	; (8002ecc <HAL_GPIO_Init+0x2b0>)
 8002e76:	4013      	ands	r3, r2
 8002e78:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e86:	fa22 f303 	lsr.w	r3, r2, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f47f aed0 	bne.w	8002c30 <HAL_GPIO_Init+0x14>
  }
}
 8002e90:	bf00      	nop
 8002e92:	372c      	adds	r7, #44	; 0x2c
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bc80      	pop	{r7}
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	10210000 	.word	0x10210000
 8002ea0:	10110000 	.word	0x10110000
 8002ea4:	10120000 	.word	0x10120000
 8002ea8:	10310000 	.word	0x10310000
 8002eac:	10320000 	.word	0x10320000
 8002eb0:	10220000 	.word	0x10220000
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	40010000 	.word	0x40010000
 8002ebc:	40010800 	.word	0x40010800
 8002ec0:	40010c00 	.word	0x40010c00
 8002ec4:	40011000 	.word	0x40011000
 8002ec8:	40011400 	.word	0x40011400
 8002ecc:	40010400 	.word	0x40010400

08002ed0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	460b      	mov	r3, r1
 8002eda:	807b      	strh	r3, [r7, #2]
 8002edc:	4613      	mov	r3, r2
 8002ede:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ee0:	787b      	ldrb	r3, [r7, #1]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d003      	beq.n	8002eee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ee6:	887a      	ldrh	r2, [r7, #2]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002eec:	e003      	b.n	8002ef6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002eee:	887b      	ldrh	r3, [r7, #2]
 8002ef0:	041a      	lsls	r2, r3, #16
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	611a      	str	r2, [r3, #16]
}
 8002ef6:	bf00      	nop
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bc80      	pop	{r7}
 8002efe:	4770      	bx	lr

08002f00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e26c      	b.n	80033ec <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f000 8087 	beq.w	800302e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f20:	4b92      	ldr	r3, [pc, #584]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f003 030c 	and.w	r3, r3, #12
 8002f28:	2b04      	cmp	r3, #4
 8002f2a:	d00c      	beq.n	8002f46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f2c:	4b8f      	ldr	r3, [pc, #572]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f003 030c 	and.w	r3, r3, #12
 8002f34:	2b08      	cmp	r3, #8
 8002f36:	d112      	bne.n	8002f5e <HAL_RCC_OscConfig+0x5e>
 8002f38:	4b8c      	ldr	r3, [pc, #560]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f44:	d10b      	bne.n	8002f5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f46:	4b89      	ldr	r3, [pc, #548]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d06c      	beq.n	800302c <HAL_RCC_OscConfig+0x12c>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d168      	bne.n	800302c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e246      	b.n	80033ec <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f66:	d106      	bne.n	8002f76 <HAL_RCC_OscConfig+0x76>
 8002f68:	4b80      	ldr	r3, [pc, #512]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a7f      	ldr	r2, [pc, #508]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8002f6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f72:	6013      	str	r3, [r2, #0]
 8002f74:	e02e      	b.n	8002fd4 <HAL_RCC_OscConfig+0xd4>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10c      	bne.n	8002f98 <HAL_RCC_OscConfig+0x98>
 8002f7e:	4b7b      	ldr	r3, [pc, #492]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a7a      	ldr	r2, [pc, #488]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8002f84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f88:	6013      	str	r3, [r2, #0]
 8002f8a:	4b78      	ldr	r3, [pc, #480]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a77      	ldr	r2, [pc, #476]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8002f90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f94:	6013      	str	r3, [r2, #0]
 8002f96:	e01d      	b.n	8002fd4 <HAL_RCC_OscConfig+0xd4>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fa0:	d10c      	bne.n	8002fbc <HAL_RCC_OscConfig+0xbc>
 8002fa2:	4b72      	ldr	r3, [pc, #456]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a71      	ldr	r2, [pc, #452]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8002fa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fac:	6013      	str	r3, [r2, #0]
 8002fae:	4b6f      	ldr	r3, [pc, #444]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a6e      	ldr	r2, [pc, #440]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8002fb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fb8:	6013      	str	r3, [r2, #0]
 8002fba:	e00b      	b.n	8002fd4 <HAL_RCC_OscConfig+0xd4>
 8002fbc:	4b6b      	ldr	r3, [pc, #428]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a6a      	ldr	r2, [pc, #424]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8002fc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fc6:	6013      	str	r3, [r2, #0]
 8002fc8:	4b68      	ldr	r3, [pc, #416]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a67      	ldr	r2, [pc, #412]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8002fce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fd2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d013      	beq.n	8003004 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fdc:	f7ff f8d2 	bl	8002184 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fe4:	f7ff f8ce 	bl	8002184 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b64      	cmp	r3, #100	; 0x64
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e1fa      	b.n	80033ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ff6:	4b5d      	ldr	r3, [pc, #372]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d0f0      	beq.n	8002fe4 <HAL_RCC_OscConfig+0xe4>
 8003002:	e014      	b.n	800302e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003004:	f7ff f8be 	bl	8002184 <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800300c:	f7ff f8ba 	bl	8002184 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b64      	cmp	r3, #100	; 0x64
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e1e6      	b.n	80033ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800301e:	4b53      	ldr	r3, [pc, #332]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1f0      	bne.n	800300c <HAL_RCC_OscConfig+0x10c>
 800302a:	e000      	b.n	800302e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800302c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d063      	beq.n	8003102 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800303a:	4b4c      	ldr	r3, [pc, #304]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f003 030c 	and.w	r3, r3, #12
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00b      	beq.n	800305e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003046:	4b49      	ldr	r3, [pc, #292]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f003 030c 	and.w	r3, r3, #12
 800304e:	2b08      	cmp	r3, #8
 8003050:	d11c      	bne.n	800308c <HAL_RCC_OscConfig+0x18c>
 8003052:	4b46      	ldr	r3, [pc, #280]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d116      	bne.n	800308c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800305e:	4b43      	ldr	r3, [pc, #268]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d005      	beq.n	8003076 <HAL_RCC_OscConfig+0x176>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d001      	beq.n	8003076 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e1ba      	b.n	80033ec <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003076:	4b3d      	ldr	r3, [pc, #244]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	4939      	ldr	r1, [pc, #228]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8003086:	4313      	orrs	r3, r2
 8003088:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800308a:	e03a      	b.n	8003102 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d020      	beq.n	80030d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003094:	4b36      	ldr	r3, [pc, #216]	; (8003170 <HAL_RCC_OscConfig+0x270>)
 8003096:	2201      	movs	r2, #1
 8003098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800309a:	f7ff f873 	bl	8002184 <HAL_GetTick>
 800309e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a0:	e008      	b.n	80030b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030a2:	f7ff f86f 	bl	8002184 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d901      	bls.n	80030b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e19b      	b.n	80033ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b4:	4b2d      	ldr	r3, [pc, #180]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d0f0      	beq.n	80030a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030c0:	4b2a      	ldr	r3, [pc, #168]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	695b      	ldr	r3, [r3, #20]
 80030cc:	00db      	lsls	r3, r3, #3
 80030ce:	4927      	ldr	r1, [pc, #156]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	600b      	str	r3, [r1, #0]
 80030d4:	e015      	b.n	8003102 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030d6:	4b26      	ldr	r3, [pc, #152]	; (8003170 <HAL_RCC_OscConfig+0x270>)
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030dc:	f7ff f852 	bl	8002184 <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030e4:	f7ff f84e 	bl	8002184 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e17a      	b.n	80033ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030f6:	4b1d      	ldr	r3, [pc, #116]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1f0      	bne.n	80030e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0308 	and.w	r3, r3, #8
 800310a:	2b00      	cmp	r3, #0
 800310c:	d03a      	beq.n	8003184 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d019      	beq.n	800314a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003116:	4b17      	ldr	r3, [pc, #92]	; (8003174 <HAL_RCC_OscConfig+0x274>)
 8003118:	2201      	movs	r2, #1
 800311a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800311c:	f7ff f832 	bl	8002184 <HAL_GetTick>
 8003120:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003122:	e008      	b.n	8003136 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003124:	f7ff f82e 	bl	8002184 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b02      	cmp	r3, #2
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e15a      	b.n	80033ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003136:	4b0d      	ldr	r3, [pc, #52]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8003138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d0f0      	beq.n	8003124 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003142:	2001      	movs	r0, #1
 8003144:	f000 fac6 	bl	80036d4 <RCC_Delay>
 8003148:	e01c      	b.n	8003184 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800314a:	4b0a      	ldr	r3, [pc, #40]	; (8003174 <HAL_RCC_OscConfig+0x274>)
 800314c:	2200      	movs	r2, #0
 800314e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003150:	f7ff f818 	bl	8002184 <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003156:	e00f      	b.n	8003178 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003158:	f7ff f814 	bl	8002184 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b02      	cmp	r3, #2
 8003164:	d908      	bls.n	8003178 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e140      	b.n	80033ec <HAL_RCC_OscConfig+0x4ec>
 800316a:	bf00      	nop
 800316c:	40021000 	.word	0x40021000
 8003170:	42420000 	.word	0x42420000
 8003174:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003178:	4b9e      	ldr	r3, [pc, #632]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 800317a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1e9      	bne.n	8003158 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0304 	and.w	r3, r3, #4
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 80a6 	beq.w	80032de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003192:	2300      	movs	r3, #0
 8003194:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003196:	4b97      	ldr	r3, [pc, #604]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10d      	bne.n	80031be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031a2:	4b94      	ldr	r3, [pc, #592]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	4a93      	ldr	r2, [pc, #588]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 80031a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ac:	61d3      	str	r3, [r2, #28]
 80031ae:	4b91      	ldr	r3, [pc, #580]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b6:	60bb      	str	r3, [r7, #8]
 80031b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031ba:	2301      	movs	r3, #1
 80031bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031be:	4b8e      	ldr	r3, [pc, #568]	; (80033f8 <HAL_RCC_OscConfig+0x4f8>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d118      	bne.n	80031fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031ca:	4b8b      	ldr	r3, [pc, #556]	; (80033f8 <HAL_RCC_OscConfig+0x4f8>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a8a      	ldr	r2, [pc, #552]	; (80033f8 <HAL_RCC_OscConfig+0x4f8>)
 80031d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031d6:	f7fe ffd5 	bl	8002184 <HAL_GetTick>
 80031da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031dc:	e008      	b.n	80031f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031de:	f7fe ffd1 	bl	8002184 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b64      	cmp	r3, #100	; 0x64
 80031ea:	d901      	bls.n	80031f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e0fd      	b.n	80033ec <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f0:	4b81      	ldr	r3, [pc, #516]	; (80033f8 <HAL_RCC_OscConfig+0x4f8>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d0f0      	beq.n	80031de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d106      	bne.n	8003212 <HAL_RCC_OscConfig+0x312>
 8003204:	4b7b      	ldr	r3, [pc, #492]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 8003206:	6a1b      	ldr	r3, [r3, #32]
 8003208:	4a7a      	ldr	r2, [pc, #488]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 800320a:	f043 0301 	orr.w	r3, r3, #1
 800320e:	6213      	str	r3, [r2, #32]
 8003210:	e02d      	b.n	800326e <HAL_RCC_OscConfig+0x36e>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d10c      	bne.n	8003234 <HAL_RCC_OscConfig+0x334>
 800321a:	4b76      	ldr	r3, [pc, #472]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 800321c:	6a1b      	ldr	r3, [r3, #32]
 800321e:	4a75      	ldr	r2, [pc, #468]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 8003220:	f023 0301 	bic.w	r3, r3, #1
 8003224:	6213      	str	r3, [r2, #32]
 8003226:	4b73      	ldr	r3, [pc, #460]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 8003228:	6a1b      	ldr	r3, [r3, #32]
 800322a:	4a72      	ldr	r2, [pc, #456]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 800322c:	f023 0304 	bic.w	r3, r3, #4
 8003230:	6213      	str	r3, [r2, #32]
 8003232:	e01c      	b.n	800326e <HAL_RCC_OscConfig+0x36e>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	2b05      	cmp	r3, #5
 800323a:	d10c      	bne.n	8003256 <HAL_RCC_OscConfig+0x356>
 800323c:	4b6d      	ldr	r3, [pc, #436]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 800323e:	6a1b      	ldr	r3, [r3, #32]
 8003240:	4a6c      	ldr	r2, [pc, #432]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 8003242:	f043 0304 	orr.w	r3, r3, #4
 8003246:	6213      	str	r3, [r2, #32]
 8003248:	4b6a      	ldr	r3, [pc, #424]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	4a69      	ldr	r2, [pc, #420]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 800324e:	f043 0301 	orr.w	r3, r3, #1
 8003252:	6213      	str	r3, [r2, #32]
 8003254:	e00b      	b.n	800326e <HAL_RCC_OscConfig+0x36e>
 8003256:	4b67      	ldr	r3, [pc, #412]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 8003258:	6a1b      	ldr	r3, [r3, #32]
 800325a:	4a66      	ldr	r2, [pc, #408]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 800325c:	f023 0301 	bic.w	r3, r3, #1
 8003260:	6213      	str	r3, [r2, #32]
 8003262:	4b64      	ldr	r3, [pc, #400]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	4a63      	ldr	r2, [pc, #396]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 8003268:	f023 0304 	bic.w	r3, r3, #4
 800326c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d015      	beq.n	80032a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003276:	f7fe ff85 	bl	8002184 <HAL_GetTick>
 800327a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800327c:	e00a      	b.n	8003294 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800327e:	f7fe ff81 	bl	8002184 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	f241 3288 	movw	r2, #5000	; 0x1388
 800328c:	4293      	cmp	r3, r2
 800328e:	d901      	bls.n	8003294 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e0ab      	b.n	80033ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003294:	4b57      	ldr	r3, [pc, #348]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d0ee      	beq.n	800327e <HAL_RCC_OscConfig+0x37e>
 80032a0:	e014      	b.n	80032cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032a2:	f7fe ff6f 	bl	8002184 <HAL_GetTick>
 80032a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032a8:	e00a      	b.n	80032c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032aa:	f7fe ff6b 	bl	8002184 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d901      	bls.n	80032c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e095      	b.n	80033ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032c0:	4b4c      	ldr	r3, [pc, #304]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d1ee      	bne.n	80032aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032cc:	7dfb      	ldrb	r3, [r7, #23]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d105      	bne.n	80032de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032d2:	4b48      	ldr	r3, [pc, #288]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 80032d4:	69db      	ldr	r3, [r3, #28]
 80032d6:	4a47      	ldr	r2, [pc, #284]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 80032d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	69db      	ldr	r3, [r3, #28]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f000 8081 	beq.w	80033ea <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032e8:	4b42      	ldr	r3, [pc, #264]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f003 030c 	and.w	r3, r3, #12
 80032f0:	2b08      	cmp	r3, #8
 80032f2:	d061      	beq.n	80033b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	69db      	ldr	r3, [r3, #28]
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d146      	bne.n	800338a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032fc:	4b3f      	ldr	r3, [pc, #252]	; (80033fc <HAL_RCC_OscConfig+0x4fc>)
 80032fe:	2200      	movs	r2, #0
 8003300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003302:	f7fe ff3f 	bl	8002184 <HAL_GetTick>
 8003306:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003308:	e008      	b.n	800331c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800330a:	f7fe ff3b 	bl	8002184 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d901      	bls.n	800331c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e067      	b.n	80033ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800331c:	4b35      	ldr	r3, [pc, #212]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d1f0      	bne.n	800330a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003330:	d108      	bne.n	8003344 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003332:	4b30      	ldr	r3, [pc, #192]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	492d      	ldr	r1, [pc, #180]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 8003340:	4313      	orrs	r3, r2
 8003342:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003344:	4b2b      	ldr	r3, [pc, #172]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a19      	ldr	r1, [r3, #32]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003354:	430b      	orrs	r3, r1
 8003356:	4927      	ldr	r1, [pc, #156]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 8003358:	4313      	orrs	r3, r2
 800335a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800335c:	4b27      	ldr	r3, [pc, #156]	; (80033fc <HAL_RCC_OscConfig+0x4fc>)
 800335e:	2201      	movs	r2, #1
 8003360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003362:	f7fe ff0f 	bl	8002184 <HAL_GetTick>
 8003366:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003368:	e008      	b.n	800337c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800336a:	f7fe ff0b 	bl	8002184 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d901      	bls.n	800337c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e037      	b.n	80033ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800337c:	4b1d      	ldr	r3, [pc, #116]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d0f0      	beq.n	800336a <HAL_RCC_OscConfig+0x46a>
 8003388:	e02f      	b.n	80033ea <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800338a:	4b1c      	ldr	r3, [pc, #112]	; (80033fc <HAL_RCC_OscConfig+0x4fc>)
 800338c:	2200      	movs	r2, #0
 800338e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003390:	f7fe fef8 	bl	8002184 <HAL_GetTick>
 8003394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003396:	e008      	b.n	80033aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003398:	f7fe fef4 	bl	8002184 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e020      	b.n	80033ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033aa:	4b12      	ldr	r3, [pc, #72]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1f0      	bne.n	8003398 <HAL_RCC_OscConfig+0x498>
 80033b6:	e018      	b.n	80033ea <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	69db      	ldr	r3, [r3, #28]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d101      	bne.n	80033c4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e013      	b.n	80033ec <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033c4:	4b0b      	ldr	r3, [pc, #44]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a1b      	ldr	r3, [r3, #32]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d106      	bne.n	80033e6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d001      	beq.n	80033ea <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e000      	b.n	80033ec <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3718      	adds	r7, #24
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	40021000 	.word	0x40021000
 80033f8:	40007000 	.word	0x40007000
 80033fc:	42420060 	.word	0x42420060

08003400 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d101      	bne.n	8003414 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e0d0      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003414:	4b6a      	ldr	r3, [pc, #424]	; (80035c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0307 	and.w	r3, r3, #7
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	429a      	cmp	r2, r3
 8003420:	d910      	bls.n	8003444 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003422:	4b67      	ldr	r3, [pc, #412]	; (80035c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f023 0207 	bic.w	r2, r3, #7
 800342a:	4965      	ldr	r1, [pc, #404]	; (80035c0 <HAL_RCC_ClockConfig+0x1c0>)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	4313      	orrs	r3, r2
 8003430:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003432:	4b63      	ldr	r3, [pc, #396]	; (80035c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0307 	and.w	r3, r3, #7
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	429a      	cmp	r2, r3
 800343e:	d001      	beq.n	8003444 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e0b8      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d020      	beq.n	8003492 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0304 	and.w	r3, r3, #4
 8003458:	2b00      	cmp	r3, #0
 800345a:	d005      	beq.n	8003468 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800345c:	4b59      	ldr	r3, [pc, #356]	; (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	4a58      	ldr	r2, [pc, #352]	; (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003462:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003466:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0308 	and.w	r3, r3, #8
 8003470:	2b00      	cmp	r3, #0
 8003472:	d005      	beq.n	8003480 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003474:	4b53      	ldr	r3, [pc, #332]	; (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	4a52      	ldr	r2, [pc, #328]	; (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 800347a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800347e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003480:	4b50      	ldr	r3, [pc, #320]	; (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	494d      	ldr	r1, [pc, #308]	; (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 800348e:	4313      	orrs	r3, r2
 8003490:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b00      	cmp	r3, #0
 800349c:	d040      	beq.n	8003520 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d107      	bne.n	80034b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034a6:	4b47      	ldr	r3, [pc, #284]	; (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d115      	bne.n	80034de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e07f      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d107      	bne.n	80034ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034be:	4b41      	ldr	r3, [pc, #260]	; (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d109      	bne.n	80034de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e073      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ce:	4b3d      	ldr	r3, [pc, #244]	; (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d101      	bne.n	80034de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e06b      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034de:	4b39      	ldr	r3, [pc, #228]	; (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f023 0203 	bic.w	r2, r3, #3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	4936      	ldr	r1, [pc, #216]	; (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034f0:	f7fe fe48 	bl	8002184 <HAL_GetTick>
 80034f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034f6:	e00a      	b.n	800350e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034f8:	f7fe fe44 	bl	8002184 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	f241 3288 	movw	r2, #5000	; 0x1388
 8003506:	4293      	cmp	r3, r2
 8003508:	d901      	bls.n	800350e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e053      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800350e:	4b2d      	ldr	r3, [pc, #180]	; (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f003 020c 	and.w	r2, r3, #12
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	429a      	cmp	r2, r3
 800351e:	d1eb      	bne.n	80034f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003520:	4b27      	ldr	r3, [pc, #156]	; (80035c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0307 	and.w	r3, r3, #7
 8003528:	683a      	ldr	r2, [r7, #0]
 800352a:	429a      	cmp	r2, r3
 800352c:	d210      	bcs.n	8003550 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800352e:	4b24      	ldr	r3, [pc, #144]	; (80035c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f023 0207 	bic.w	r2, r3, #7
 8003536:	4922      	ldr	r1, [pc, #136]	; (80035c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	4313      	orrs	r3, r2
 800353c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800353e:	4b20      	ldr	r3, [pc, #128]	; (80035c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0307 	and.w	r3, r3, #7
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	429a      	cmp	r2, r3
 800354a:	d001      	beq.n	8003550 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e032      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	2b00      	cmp	r3, #0
 800355a:	d008      	beq.n	800356e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800355c:	4b19      	ldr	r3, [pc, #100]	; (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	4916      	ldr	r1, [pc, #88]	; (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 800356a:	4313      	orrs	r3, r2
 800356c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0308 	and.w	r3, r3, #8
 8003576:	2b00      	cmp	r3, #0
 8003578:	d009      	beq.n	800358e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800357a:	4b12      	ldr	r3, [pc, #72]	; (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	490e      	ldr	r1, [pc, #56]	; (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 800358a:	4313      	orrs	r3, r2
 800358c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800358e:	f000 f821 	bl	80035d4 <HAL_RCC_GetSysClockFreq>
 8003592:	4601      	mov	r1, r0
 8003594:	4b0b      	ldr	r3, [pc, #44]	; (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	091b      	lsrs	r3, r3, #4
 800359a:	f003 030f 	and.w	r3, r3, #15
 800359e:	4a0a      	ldr	r2, [pc, #40]	; (80035c8 <HAL_RCC_ClockConfig+0x1c8>)
 80035a0:	5cd3      	ldrb	r3, [r2, r3]
 80035a2:	fa21 f303 	lsr.w	r3, r1, r3
 80035a6:	4a09      	ldr	r2, [pc, #36]	; (80035cc <HAL_RCC_ClockConfig+0x1cc>)
 80035a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80035aa:	4b09      	ldr	r3, [pc, #36]	; (80035d0 <HAL_RCC_ClockConfig+0x1d0>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7fe fda6 	bl	8002100 <HAL_InitTick>

  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	40022000 	.word	0x40022000
 80035c4:	40021000 	.word	0x40021000
 80035c8:	08005f08 	.word	0x08005f08
 80035cc:	2000006c 	.word	0x2000006c
 80035d0:	20000070 	.word	0x20000070

080035d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035d4:	b490      	push	{r4, r7}
 80035d6:	b08a      	sub	sp, #40	; 0x28
 80035d8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80035da:	4b2a      	ldr	r3, [pc, #168]	; (8003684 <HAL_RCC_GetSysClockFreq+0xb0>)
 80035dc:	1d3c      	adds	r4, r7, #4
 80035de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80035e4:	4b28      	ldr	r3, [pc, #160]	; (8003688 <HAL_RCC_GetSysClockFreq+0xb4>)
 80035e6:	881b      	ldrh	r3, [r3, #0]
 80035e8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035ea:	2300      	movs	r3, #0
 80035ec:	61fb      	str	r3, [r7, #28]
 80035ee:	2300      	movs	r3, #0
 80035f0:	61bb      	str	r3, [r7, #24]
 80035f2:	2300      	movs	r3, #0
 80035f4:	627b      	str	r3, [r7, #36]	; 0x24
 80035f6:	2300      	movs	r3, #0
 80035f8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80035fa:	2300      	movs	r3, #0
 80035fc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80035fe:	4b23      	ldr	r3, [pc, #140]	; (800368c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	f003 030c 	and.w	r3, r3, #12
 800360a:	2b04      	cmp	r3, #4
 800360c:	d002      	beq.n	8003614 <HAL_RCC_GetSysClockFreq+0x40>
 800360e:	2b08      	cmp	r3, #8
 8003610:	d003      	beq.n	800361a <HAL_RCC_GetSysClockFreq+0x46>
 8003612:	e02d      	b.n	8003670 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003614:	4b1e      	ldr	r3, [pc, #120]	; (8003690 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003616:	623b      	str	r3, [r7, #32]
      break;
 8003618:	e02d      	b.n	8003676 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	0c9b      	lsrs	r3, r3, #18
 800361e:	f003 030f 	and.w	r3, r3, #15
 8003622:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003626:	4413      	add	r3, r2
 8003628:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800362c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d013      	beq.n	8003660 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003638:	4b14      	ldr	r3, [pc, #80]	; (800368c <HAL_RCC_GetSysClockFreq+0xb8>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	0c5b      	lsrs	r3, r3, #17
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003646:	4413      	add	r3, r2
 8003648:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800364c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	4a0f      	ldr	r2, [pc, #60]	; (8003690 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003652:	fb02 f203 	mul.w	r2, r2, r3
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	fbb2 f3f3 	udiv	r3, r2, r3
 800365c:	627b      	str	r3, [r7, #36]	; 0x24
 800365e:	e004      	b.n	800366a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	4a0c      	ldr	r2, [pc, #48]	; (8003694 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003664:	fb02 f303 	mul.w	r3, r2, r3
 8003668:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800366a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366c:	623b      	str	r3, [r7, #32]
      break;
 800366e:	e002      	b.n	8003676 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003670:	4b07      	ldr	r3, [pc, #28]	; (8003690 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003672:	623b      	str	r3, [r7, #32]
      break;
 8003674:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003676:	6a3b      	ldr	r3, [r7, #32]
}
 8003678:	4618      	mov	r0, r3
 800367a:	3728      	adds	r7, #40	; 0x28
 800367c:	46bd      	mov	sp, r7
 800367e:	bc90      	pop	{r4, r7}
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	08005ee0 	.word	0x08005ee0
 8003688:	08005ef0 	.word	0x08005ef0
 800368c:	40021000 	.word	0x40021000
 8003690:	007a1200 	.word	0x007a1200
 8003694:	003d0900 	.word	0x003d0900

08003698 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800369c:	4b02      	ldr	r3, [pc, #8]	; (80036a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800369e:	681b      	ldr	r3, [r3, #0]
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bc80      	pop	{r7}
 80036a6:	4770      	bx	lr
 80036a8:	2000006c 	.word	0x2000006c

080036ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80036b0:	f7ff fff2 	bl	8003698 <HAL_RCC_GetHCLKFreq>
 80036b4:	4601      	mov	r1, r0
 80036b6:	4b05      	ldr	r3, [pc, #20]	; (80036cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	0adb      	lsrs	r3, r3, #11
 80036bc:	f003 0307 	and.w	r3, r3, #7
 80036c0:	4a03      	ldr	r2, [pc, #12]	; (80036d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036c2:	5cd3      	ldrb	r3, [r2, r3]
 80036c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	40021000 	.word	0x40021000
 80036d0:	08005f18 	.word	0x08005f18

080036d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b085      	sub	sp, #20
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80036dc:	4b0a      	ldr	r3, [pc, #40]	; (8003708 <RCC_Delay+0x34>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a0a      	ldr	r2, [pc, #40]	; (800370c <RCC_Delay+0x38>)
 80036e2:	fba2 2303 	umull	r2, r3, r2, r3
 80036e6:	0a5b      	lsrs	r3, r3, #9
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	fb02 f303 	mul.w	r3, r2, r3
 80036ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80036f0:	bf00      	nop
  }
  while (Delay --);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	1e5a      	subs	r2, r3, #1
 80036f6:	60fa      	str	r2, [r7, #12]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1f9      	bne.n	80036f0 <RCC_Delay+0x1c>
}
 80036fc:	bf00      	nop
 80036fe:	3714      	adds	r7, #20
 8003700:	46bd      	mov	sp, r7
 8003702:	bc80      	pop	{r7}
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	2000006c 	.word	0x2000006c
 800370c:	10624dd3 	.word	0x10624dd3

08003710 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003718:	2300      	movs	r3, #0
 800371a:	613b      	str	r3, [r7, #16]
 800371c:	2300      	movs	r3, #0
 800371e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0301 	and.w	r3, r3, #1
 8003728:	2b00      	cmp	r3, #0
 800372a:	d07d      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800372c:	2300      	movs	r3, #0
 800372e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003730:	4b4f      	ldr	r3, [pc, #316]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003732:	69db      	ldr	r3, [r3, #28]
 8003734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d10d      	bne.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800373c:	4b4c      	ldr	r3, [pc, #304]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800373e:	69db      	ldr	r3, [r3, #28]
 8003740:	4a4b      	ldr	r2, [pc, #300]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003746:	61d3      	str	r3, [r2, #28]
 8003748:	4b49      	ldr	r3, [pc, #292]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800374a:	69db      	ldr	r3, [r3, #28]
 800374c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003750:	60bb      	str	r3, [r7, #8]
 8003752:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003754:	2301      	movs	r3, #1
 8003756:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003758:	4b46      	ldr	r3, [pc, #280]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003760:	2b00      	cmp	r3, #0
 8003762:	d118      	bne.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003764:	4b43      	ldr	r3, [pc, #268]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a42      	ldr	r2, [pc, #264]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800376a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800376e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003770:	f7fe fd08 	bl	8002184 <HAL_GetTick>
 8003774:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003776:	e008      	b.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003778:	f7fe fd04 	bl	8002184 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b64      	cmp	r3, #100	; 0x64
 8003784:	d901      	bls.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e06d      	b.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800378a:	4b3a      	ldr	r3, [pc, #232]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003792:	2b00      	cmp	r3, #0
 8003794:	d0f0      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003796:	4b36      	ldr	r3, [pc, #216]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800379e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d02e      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d027      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037b4:	4b2e      	ldr	r3, [pc, #184]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037b6:	6a1b      	ldr	r3, [r3, #32]
 80037b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037bc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037be:	4b2e      	ldr	r3, [pc, #184]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80037c0:	2201      	movs	r2, #1
 80037c2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037c4:	4b2c      	ldr	r3, [pc, #176]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80037ca:	4a29      	ldr	r2, [pc, #164]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d014      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037da:	f7fe fcd3 	bl	8002184 <HAL_GetTick>
 80037de:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037e0:	e00a      	b.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037e2:	f7fe fccf 	bl	8002184 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d901      	bls.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e036      	b.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037f8:	4b1d      	ldr	r3, [pc, #116]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d0ee      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003804:	4b1a      	ldr	r3, [pc, #104]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003806:	6a1b      	ldr	r3, [r3, #32]
 8003808:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	4917      	ldr	r1, [pc, #92]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003812:	4313      	orrs	r3, r2
 8003814:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003816:	7dfb      	ldrb	r3, [r7, #23]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d105      	bne.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800381c:	4b14      	ldr	r3, [pc, #80]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800381e:	69db      	ldr	r3, [r3, #28]
 8003820:	4a13      	ldr	r2, [pc, #76]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003822:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003826:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	2b00      	cmp	r3, #0
 8003832:	d008      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003834:	4b0e      	ldr	r3, [pc, #56]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	490b      	ldr	r1, [pc, #44]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003842:	4313      	orrs	r3, r2
 8003844:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0310 	and.w	r3, r3, #16
 800384e:	2b00      	cmp	r3, #0
 8003850:	d008      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003852:	4b07      	ldr	r3, [pc, #28]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	4904      	ldr	r1, [pc, #16]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003860:	4313      	orrs	r3, r2
 8003862:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3718      	adds	r7, #24
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	40021000 	.word	0x40021000
 8003874:	40007000 	.word	0x40007000
 8003878:	42420440 	.word	0x42420440

0800387c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800387c:	b590      	push	{r4, r7, lr}
 800387e:	b08d      	sub	sp, #52	; 0x34
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003884:	4b55      	ldr	r3, [pc, #340]	; (80039dc <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003886:	f107 040c 	add.w	r4, r7, #12
 800388a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800388c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003890:	4b53      	ldr	r3, [pc, #332]	; (80039e0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003892:	881b      	ldrh	r3, [r3, #0]
 8003894:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003896:	2300      	movs	r3, #0
 8003898:	627b      	str	r3, [r7, #36]	; 0x24
 800389a:	2300      	movs	r3, #0
 800389c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800389e:	2300      	movs	r3, #0
 80038a0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80038a2:	2300      	movs	r3, #0
 80038a4:	61fb      	str	r3, [r7, #28]
 80038a6:	2300      	movs	r3, #0
 80038a8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d07f      	beq.n	80039b0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80038b0:	2b10      	cmp	r3, #16
 80038b2:	d002      	beq.n	80038ba <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d048      	beq.n	800394a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80038b8:	e08b      	b.n	80039d2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 80038ba:	4b4a      	ldr	r3, [pc, #296]	; (80039e4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80038c0:	4b48      	ldr	r3, [pc, #288]	; (80039e4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d07f      	beq.n	80039cc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	0c9b      	lsrs	r3, r3, #18
 80038d0:	f003 030f 	and.w	r3, r3, #15
 80038d4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80038d8:	4413      	add	r3, r2
 80038da:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80038de:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d018      	beq.n	800391c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038ea:	4b3e      	ldr	r3, [pc, #248]	; (80039e4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	0c5b      	lsrs	r3, r3, #17
 80038f0:	f003 0301 	and.w	r3, r3, #1
 80038f4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80038f8:	4413      	add	r3, r2
 80038fa:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80038fe:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00d      	beq.n	8003926 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800390a:	4a37      	ldr	r2, [pc, #220]	; (80039e8 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 800390c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003912:	6a3b      	ldr	r3, [r7, #32]
 8003914:	fb02 f303 	mul.w	r3, r2, r3
 8003918:	62fb      	str	r3, [r7, #44]	; 0x2c
 800391a:	e004      	b.n	8003926 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800391c:	6a3b      	ldr	r3, [r7, #32]
 800391e:	4a33      	ldr	r2, [pc, #204]	; (80039ec <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003920:	fb02 f303 	mul.w	r3, r2, r3
 8003924:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003926:	4b2f      	ldr	r3, [pc, #188]	; (80039e4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800392e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003932:	d102      	bne.n	800393a <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8003934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003936:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003938:	e048      	b.n	80039cc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 800393a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800393c:	005b      	lsls	r3, r3, #1
 800393e:	4a2c      	ldr	r2, [pc, #176]	; (80039f0 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003940:	fba2 2303 	umull	r2, r3, r2, r3
 8003944:	085b      	lsrs	r3, r3, #1
 8003946:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003948:	e040      	b.n	80039cc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 800394a:	4b26      	ldr	r3, [pc, #152]	; (80039e4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003956:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800395a:	d108      	bne.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d003      	beq.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8003966:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800396a:	62bb      	str	r3, [r7, #40]	; 0x28
 800396c:	e01f      	b.n	80039ae <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003974:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003978:	d109      	bne.n	800398e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800397a:	4b1a      	ldr	r3, [pc, #104]	; (80039e4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800397c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8003986:	f649 4340 	movw	r3, #40000	; 0x9c40
 800398a:	62bb      	str	r3, [r7, #40]	; 0x28
 800398c:	e00f      	b.n	80039ae <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003994:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003998:	d11a      	bne.n	80039d0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800399a:	4b12      	ldr	r3, [pc, #72]	; (80039e4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d014      	beq.n	80039d0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 80039a6:	f24f 4324 	movw	r3, #62500	; 0xf424
 80039aa:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80039ac:	e010      	b.n	80039d0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80039ae:	e00f      	b.n	80039d0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80039b0:	f7ff fe7c 	bl	80036ac <HAL_RCC_GetPCLK2Freq>
 80039b4:	4602      	mov	r2, r0
 80039b6:	4b0b      	ldr	r3, [pc, #44]	; (80039e4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	0b9b      	lsrs	r3, r3, #14
 80039bc:	f003 0303 	and.w	r3, r3, #3
 80039c0:	3301      	adds	r3, #1
 80039c2:	005b      	lsls	r3, r3, #1
 80039c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80039ca:	e002      	b.n	80039d2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80039cc:	bf00      	nop
 80039ce:	e000      	b.n	80039d2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80039d0:	bf00      	nop
    }
  }
  return (frequency);
 80039d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3734      	adds	r7, #52	; 0x34
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd90      	pop	{r4, r7, pc}
 80039dc:	08005ef4 	.word	0x08005ef4
 80039e0:	08005f04 	.word	0x08005f04
 80039e4:	40021000 	.word	0x40021000
 80039e8:	007a1200 	.word	0x007a1200
 80039ec:	003d0900 	.word	0x003d0900
 80039f0:	aaaaaaab 	.word	0xaaaaaaab

080039f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e053      	b.n	8003aae <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d106      	bne.n	8003a26 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f7fe fa0f 	bl	8001e44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2202      	movs	r2, #2
 8003a2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a3c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685a      	ldr	r2, [r3, #4]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	431a      	orrs	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	431a      	orrs	r2, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	431a      	orrs	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	431a      	orrs	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a62:	431a      	orrs	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	69db      	ldr	r3, [r3, #28]
 8003a68:	431a      	orrs	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	ea42 0103 	orr.w	r1, r2, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	0c1a      	lsrs	r2, r3, #16
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f002 0204 	and.w	r2, r2, #4
 8003a8c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	69da      	ldr	r2, [r3, #28]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a9c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3708      	adds	r7, #8
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b088      	sub	sp, #32
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	60f8      	str	r0, [r7, #12]
 8003abe:	60b9      	str	r1, [r7, #8]
 8003ac0:	603b      	str	r3, [r7, #0]
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d101      	bne.n	8003ad8 <HAL_SPI_Transmit+0x22>
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	e11e      	b.n	8003d16 <HAL_SPI_Transmit+0x260>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ae0:	f7fe fb50 	bl	8002184 <HAL_GetTick>
 8003ae4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003ae6:	88fb      	ldrh	r3, [r7, #6]
 8003ae8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d002      	beq.n	8003afc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003af6:	2302      	movs	r3, #2
 8003af8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003afa:	e103      	b.n	8003d04 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d002      	beq.n	8003b08 <HAL_SPI_Transmit+0x52>
 8003b02:	88fb      	ldrh	r3, [r7, #6]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d102      	bne.n	8003b0e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b0c:	e0fa      	b.n	8003d04 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2203      	movs	r2, #3
 8003b12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	68ba      	ldr	r2, [r7, #8]
 8003b20:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	88fa      	ldrh	r2, [r7, #6]
 8003b26:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	88fa      	ldrh	r2, [r7, #6]
 8003b2c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2200      	movs	r2, #0
 8003b38:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b54:	d107      	bne.n	8003b66 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b64:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b70:	2b40      	cmp	r3, #64	; 0x40
 8003b72:	d007      	beq.n	8003b84 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b82:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b8c:	d14b      	bne.n	8003c26 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d002      	beq.n	8003b9c <HAL_SPI_Transmit+0xe6>
 8003b96:	8afb      	ldrh	r3, [r7, #22]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d13e      	bne.n	8003c1a <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba0:	881a      	ldrh	r2, [r3, #0]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bac:	1c9a      	adds	r2, r3, #2
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003bc0:	e02b      	b.n	8003c1a <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d112      	bne.n	8003bf6 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd4:	881a      	ldrh	r2, [r3, #0]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be0:	1c9a      	adds	r2, r3, #2
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	3b01      	subs	r3, #1
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	86da      	strh	r2, [r3, #54]	; 0x36
 8003bf4:	e011      	b.n	8003c1a <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bf6:	f7fe fac5 	bl	8002184 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	683a      	ldr	r2, [r7, #0]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d803      	bhi.n	8003c0e <HAL_SPI_Transmit+0x158>
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c0c:	d102      	bne.n	8003c14 <HAL_SPI_Transmit+0x15e>
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d102      	bne.n	8003c1a <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003c18:	e074      	b.n	8003d04 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1ce      	bne.n	8003bc2 <HAL_SPI_Transmit+0x10c>
 8003c24:	e04c      	b.n	8003cc0 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d002      	beq.n	8003c34 <HAL_SPI_Transmit+0x17e>
 8003c2e:	8afb      	ldrh	r3, [r7, #22]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d140      	bne.n	8003cb6 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	330c      	adds	r3, #12
 8003c3e:	7812      	ldrb	r2, [r2, #0]
 8003c40:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c46:	1c5a      	adds	r2, r3, #1
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	3b01      	subs	r3, #1
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003c5a:	e02c      	b.n	8003cb6 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d113      	bne.n	8003c92 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	330c      	adds	r3, #12
 8003c74:	7812      	ldrb	r2, [r2, #0]
 8003c76:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7c:	1c5a      	adds	r2, r3, #1
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003c90:	e011      	b.n	8003cb6 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c92:	f7fe fa77 	bl	8002184 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	683a      	ldr	r2, [r7, #0]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d803      	bhi.n	8003caa <HAL_SPI_Transmit+0x1f4>
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca8:	d102      	bne.n	8003cb0 <HAL_SPI_Transmit+0x1fa>
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d102      	bne.n	8003cb6 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003cb4:	e026      	b.n	8003d04 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d1cd      	bne.n	8003c5c <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	6839      	ldr	r1, [r7, #0]
 8003cc4:	68f8      	ldr	r0, [r7, #12]
 8003cc6:	f000 f894 	bl	8003df2 <SPI_EndRxTxTransaction>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d002      	beq.n	8003cd6 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2220      	movs	r2, #32
 8003cd4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10a      	bne.n	8003cf4 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003cde:	2300      	movs	r3, #0
 8003ce0:	613b      	str	r3, [r7, #16]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	613b      	str	r3, [r7, #16]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	613b      	str	r3, [r7, #16]
 8003cf2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d002      	beq.n	8003d02 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	77fb      	strb	r3, [r7, #31]
 8003d00:	e000      	b.n	8003d04 <HAL_SPI_Transmit+0x24e>
  }

error:
 8003d02:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d14:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3720      	adds	r7, #32
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d1e:	b580      	push	{r7, lr}
 8003d20:	b084      	sub	sp, #16
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	60f8      	str	r0, [r7, #12]
 8003d26:	60b9      	str	r1, [r7, #8]
 8003d28:	603b      	str	r3, [r7, #0]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d2e:	e04c      	b.n	8003dca <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d36:	d048      	beq.n	8003dca <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003d38:	f7fe fa24 	bl	8002184 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	683a      	ldr	r2, [r7, #0]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d902      	bls.n	8003d4e <SPI_WaitFlagStateUntilTimeout+0x30>
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d13d      	bne.n	8003dca <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	685a      	ldr	r2, [r3, #4]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d5c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d66:	d111      	bne.n	8003d8c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d70:	d004      	beq.n	8003d7c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d7a:	d107      	bne.n	8003d8c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d8a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d94:	d10f      	bne.n	8003db6 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003da4:	601a      	str	r2, [r3, #0]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003db4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e00f      	b.n	8003dea <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	689a      	ldr	r2, [r3, #8]
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	68ba      	ldr	r2, [r7, #8]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	bf0c      	ite	eq
 8003dda:	2301      	moveq	r3, #1
 8003ddc:	2300      	movne	r3, #0
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	461a      	mov	r2, r3
 8003de2:	79fb      	ldrb	r3, [r7, #7]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d1a3      	bne.n	8003d30 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b086      	sub	sp, #24
 8003df6:	af02      	add	r7, sp, #8
 8003df8:	60f8      	str	r0, [r7, #12]
 8003dfa:	60b9      	str	r1, [r7, #8]
 8003dfc:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	9300      	str	r3, [sp, #0]
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	2200      	movs	r2, #0
 8003e06:	2180      	movs	r1, #128	; 0x80
 8003e08:	68f8      	ldr	r0, [r7, #12]
 8003e0a:	f7ff ff88 	bl	8003d1e <SPI_WaitFlagStateUntilTimeout>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d007      	beq.n	8003e24 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e18:	f043 0220 	orr.w	r2, r3, #32
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e000      	b.n	8003e26 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
	...

08003e30 <__errno>:
 8003e30:	4b01      	ldr	r3, [pc, #4]	; (8003e38 <__errno+0x8>)
 8003e32:	6818      	ldr	r0, [r3, #0]
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	20000078 	.word	0x20000078

08003e3c <__libc_init_array>:
 8003e3c:	b570      	push	{r4, r5, r6, lr}
 8003e3e:	2500      	movs	r5, #0
 8003e40:	4e0c      	ldr	r6, [pc, #48]	; (8003e74 <__libc_init_array+0x38>)
 8003e42:	4c0d      	ldr	r4, [pc, #52]	; (8003e78 <__libc_init_array+0x3c>)
 8003e44:	1ba4      	subs	r4, r4, r6
 8003e46:	10a4      	asrs	r4, r4, #2
 8003e48:	42a5      	cmp	r5, r4
 8003e4a:	d109      	bne.n	8003e60 <__libc_init_array+0x24>
 8003e4c:	f001 fffc 	bl	8005e48 <_init>
 8003e50:	2500      	movs	r5, #0
 8003e52:	4e0a      	ldr	r6, [pc, #40]	; (8003e7c <__libc_init_array+0x40>)
 8003e54:	4c0a      	ldr	r4, [pc, #40]	; (8003e80 <__libc_init_array+0x44>)
 8003e56:	1ba4      	subs	r4, r4, r6
 8003e58:	10a4      	asrs	r4, r4, #2
 8003e5a:	42a5      	cmp	r5, r4
 8003e5c:	d105      	bne.n	8003e6a <__libc_init_array+0x2e>
 8003e5e:	bd70      	pop	{r4, r5, r6, pc}
 8003e60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e64:	4798      	blx	r3
 8003e66:	3501      	adds	r5, #1
 8003e68:	e7ee      	b.n	8003e48 <__libc_init_array+0xc>
 8003e6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e6e:	4798      	blx	r3
 8003e70:	3501      	adds	r5, #1
 8003e72:	e7f2      	b.n	8003e5a <__libc_init_array+0x1e>
 8003e74:	08006000 	.word	0x08006000
 8003e78:	08006000 	.word	0x08006000
 8003e7c:	08006000 	.word	0x08006000
 8003e80:	08006004 	.word	0x08006004

08003e84 <memcpy>:
 8003e84:	b510      	push	{r4, lr}
 8003e86:	1e43      	subs	r3, r0, #1
 8003e88:	440a      	add	r2, r1
 8003e8a:	4291      	cmp	r1, r2
 8003e8c:	d100      	bne.n	8003e90 <memcpy+0xc>
 8003e8e:	bd10      	pop	{r4, pc}
 8003e90:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e98:	e7f7      	b.n	8003e8a <memcpy+0x6>

08003e9a <memset>:
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	4402      	add	r2, r0
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d100      	bne.n	8003ea4 <memset+0xa>
 8003ea2:	4770      	bx	lr
 8003ea4:	f803 1b01 	strb.w	r1, [r3], #1
 8003ea8:	e7f9      	b.n	8003e9e <memset+0x4>
	...

08003eac <iprintf>:
 8003eac:	b40f      	push	{r0, r1, r2, r3}
 8003eae:	4b0a      	ldr	r3, [pc, #40]	; (8003ed8 <iprintf+0x2c>)
 8003eb0:	b513      	push	{r0, r1, r4, lr}
 8003eb2:	681c      	ldr	r4, [r3, #0]
 8003eb4:	b124      	cbz	r4, 8003ec0 <iprintf+0x14>
 8003eb6:	69a3      	ldr	r3, [r4, #24]
 8003eb8:	b913      	cbnz	r3, 8003ec0 <iprintf+0x14>
 8003eba:	4620      	mov	r0, r4
 8003ebc:	f000 fa22 	bl	8004304 <__sinit>
 8003ec0:	ab05      	add	r3, sp, #20
 8003ec2:	9a04      	ldr	r2, [sp, #16]
 8003ec4:	68a1      	ldr	r1, [r4, #8]
 8003ec6:	4620      	mov	r0, r4
 8003ec8:	9301      	str	r3, [sp, #4]
 8003eca:	f000 fbd7 	bl	800467c <_vfiprintf_r>
 8003ece:	b002      	add	sp, #8
 8003ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ed4:	b004      	add	sp, #16
 8003ed6:	4770      	bx	lr
 8003ed8:	20000078 	.word	0x20000078

08003edc <_puts_r>:
 8003edc:	b570      	push	{r4, r5, r6, lr}
 8003ede:	460e      	mov	r6, r1
 8003ee0:	4605      	mov	r5, r0
 8003ee2:	b118      	cbz	r0, 8003eec <_puts_r+0x10>
 8003ee4:	6983      	ldr	r3, [r0, #24]
 8003ee6:	b90b      	cbnz	r3, 8003eec <_puts_r+0x10>
 8003ee8:	f000 fa0c 	bl	8004304 <__sinit>
 8003eec:	69ab      	ldr	r3, [r5, #24]
 8003eee:	68ac      	ldr	r4, [r5, #8]
 8003ef0:	b913      	cbnz	r3, 8003ef8 <_puts_r+0x1c>
 8003ef2:	4628      	mov	r0, r5
 8003ef4:	f000 fa06 	bl	8004304 <__sinit>
 8003ef8:	4b23      	ldr	r3, [pc, #140]	; (8003f88 <_puts_r+0xac>)
 8003efa:	429c      	cmp	r4, r3
 8003efc:	d117      	bne.n	8003f2e <_puts_r+0x52>
 8003efe:	686c      	ldr	r4, [r5, #4]
 8003f00:	89a3      	ldrh	r3, [r4, #12]
 8003f02:	071b      	lsls	r3, r3, #28
 8003f04:	d51d      	bpl.n	8003f42 <_puts_r+0x66>
 8003f06:	6923      	ldr	r3, [r4, #16]
 8003f08:	b1db      	cbz	r3, 8003f42 <_puts_r+0x66>
 8003f0a:	3e01      	subs	r6, #1
 8003f0c:	68a3      	ldr	r3, [r4, #8]
 8003f0e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003f12:	3b01      	subs	r3, #1
 8003f14:	60a3      	str	r3, [r4, #8]
 8003f16:	b9e9      	cbnz	r1, 8003f54 <_puts_r+0x78>
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	da2e      	bge.n	8003f7a <_puts_r+0x9e>
 8003f1c:	4622      	mov	r2, r4
 8003f1e:	210a      	movs	r1, #10
 8003f20:	4628      	mov	r0, r5
 8003f22:	f000 f83f 	bl	8003fa4 <__swbuf_r>
 8003f26:	3001      	adds	r0, #1
 8003f28:	d011      	beq.n	8003f4e <_puts_r+0x72>
 8003f2a:	200a      	movs	r0, #10
 8003f2c:	e011      	b.n	8003f52 <_puts_r+0x76>
 8003f2e:	4b17      	ldr	r3, [pc, #92]	; (8003f8c <_puts_r+0xb0>)
 8003f30:	429c      	cmp	r4, r3
 8003f32:	d101      	bne.n	8003f38 <_puts_r+0x5c>
 8003f34:	68ac      	ldr	r4, [r5, #8]
 8003f36:	e7e3      	b.n	8003f00 <_puts_r+0x24>
 8003f38:	4b15      	ldr	r3, [pc, #84]	; (8003f90 <_puts_r+0xb4>)
 8003f3a:	429c      	cmp	r4, r3
 8003f3c:	bf08      	it	eq
 8003f3e:	68ec      	ldreq	r4, [r5, #12]
 8003f40:	e7de      	b.n	8003f00 <_puts_r+0x24>
 8003f42:	4621      	mov	r1, r4
 8003f44:	4628      	mov	r0, r5
 8003f46:	f000 f87f 	bl	8004048 <__swsetup_r>
 8003f4a:	2800      	cmp	r0, #0
 8003f4c:	d0dd      	beq.n	8003f0a <_puts_r+0x2e>
 8003f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8003f52:	bd70      	pop	{r4, r5, r6, pc}
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	da04      	bge.n	8003f62 <_puts_r+0x86>
 8003f58:	69a2      	ldr	r2, [r4, #24]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	dc06      	bgt.n	8003f6c <_puts_r+0x90>
 8003f5e:	290a      	cmp	r1, #10
 8003f60:	d004      	beq.n	8003f6c <_puts_r+0x90>
 8003f62:	6823      	ldr	r3, [r4, #0]
 8003f64:	1c5a      	adds	r2, r3, #1
 8003f66:	6022      	str	r2, [r4, #0]
 8003f68:	7019      	strb	r1, [r3, #0]
 8003f6a:	e7cf      	b.n	8003f0c <_puts_r+0x30>
 8003f6c:	4622      	mov	r2, r4
 8003f6e:	4628      	mov	r0, r5
 8003f70:	f000 f818 	bl	8003fa4 <__swbuf_r>
 8003f74:	3001      	adds	r0, #1
 8003f76:	d1c9      	bne.n	8003f0c <_puts_r+0x30>
 8003f78:	e7e9      	b.n	8003f4e <_puts_r+0x72>
 8003f7a:	200a      	movs	r0, #10
 8003f7c:	6823      	ldr	r3, [r4, #0]
 8003f7e:	1c5a      	adds	r2, r3, #1
 8003f80:	6022      	str	r2, [r4, #0]
 8003f82:	7018      	strb	r0, [r3, #0]
 8003f84:	e7e5      	b.n	8003f52 <_puts_r+0x76>
 8003f86:	bf00      	nop
 8003f88:	08005f44 	.word	0x08005f44
 8003f8c:	08005f64 	.word	0x08005f64
 8003f90:	08005f24 	.word	0x08005f24

08003f94 <puts>:
 8003f94:	4b02      	ldr	r3, [pc, #8]	; (8003fa0 <puts+0xc>)
 8003f96:	4601      	mov	r1, r0
 8003f98:	6818      	ldr	r0, [r3, #0]
 8003f9a:	f7ff bf9f 	b.w	8003edc <_puts_r>
 8003f9e:	bf00      	nop
 8003fa0:	20000078 	.word	0x20000078

08003fa4 <__swbuf_r>:
 8003fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fa6:	460e      	mov	r6, r1
 8003fa8:	4614      	mov	r4, r2
 8003faa:	4605      	mov	r5, r0
 8003fac:	b118      	cbz	r0, 8003fb6 <__swbuf_r+0x12>
 8003fae:	6983      	ldr	r3, [r0, #24]
 8003fb0:	b90b      	cbnz	r3, 8003fb6 <__swbuf_r+0x12>
 8003fb2:	f000 f9a7 	bl	8004304 <__sinit>
 8003fb6:	4b21      	ldr	r3, [pc, #132]	; (800403c <__swbuf_r+0x98>)
 8003fb8:	429c      	cmp	r4, r3
 8003fba:	d12a      	bne.n	8004012 <__swbuf_r+0x6e>
 8003fbc:	686c      	ldr	r4, [r5, #4]
 8003fbe:	69a3      	ldr	r3, [r4, #24]
 8003fc0:	60a3      	str	r3, [r4, #8]
 8003fc2:	89a3      	ldrh	r3, [r4, #12]
 8003fc4:	071a      	lsls	r2, r3, #28
 8003fc6:	d52e      	bpl.n	8004026 <__swbuf_r+0x82>
 8003fc8:	6923      	ldr	r3, [r4, #16]
 8003fca:	b363      	cbz	r3, 8004026 <__swbuf_r+0x82>
 8003fcc:	6923      	ldr	r3, [r4, #16]
 8003fce:	6820      	ldr	r0, [r4, #0]
 8003fd0:	b2f6      	uxtb	r6, r6
 8003fd2:	1ac0      	subs	r0, r0, r3
 8003fd4:	6963      	ldr	r3, [r4, #20]
 8003fd6:	4637      	mov	r7, r6
 8003fd8:	4283      	cmp	r3, r0
 8003fda:	dc04      	bgt.n	8003fe6 <__swbuf_r+0x42>
 8003fdc:	4621      	mov	r1, r4
 8003fde:	4628      	mov	r0, r5
 8003fe0:	f000 f926 	bl	8004230 <_fflush_r>
 8003fe4:	bb28      	cbnz	r0, 8004032 <__swbuf_r+0x8e>
 8003fe6:	68a3      	ldr	r3, [r4, #8]
 8003fe8:	3001      	adds	r0, #1
 8003fea:	3b01      	subs	r3, #1
 8003fec:	60a3      	str	r3, [r4, #8]
 8003fee:	6823      	ldr	r3, [r4, #0]
 8003ff0:	1c5a      	adds	r2, r3, #1
 8003ff2:	6022      	str	r2, [r4, #0]
 8003ff4:	701e      	strb	r6, [r3, #0]
 8003ff6:	6963      	ldr	r3, [r4, #20]
 8003ff8:	4283      	cmp	r3, r0
 8003ffa:	d004      	beq.n	8004006 <__swbuf_r+0x62>
 8003ffc:	89a3      	ldrh	r3, [r4, #12]
 8003ffe:	07db      	lsls	r3, r3, #31
 8004000:	d519      	bpl.n	8004036 <__swbuf_r+0x92>
 8004002:	2e0a      	cmp	r6, #10
 8004004:	d117      	bne.n	8004036 <__swbuf_r+0x92>
 8004006:	4621      	mov	r1, r4
 8004008:	4628      	mov	r0, r5
 800400a:	f000 f911 	bl	8004230 <_fflush_r>
 800400e:	b190      	cbz	r0, 8004036 <__swbuf_r+0x92>
 8004010:	e00f      	b.n	8004032 <__swbuf_r+0x8e>
 8004012:	4b0b      	ldr	r3, [pc, #44]	; (8004040 <__swbuf_r+0x9c>)
 8004014:	429c      	cmp	r4, r3
 8004016:	d101      	bne.n	800401c <__swbuf_r+0x78>
 8004018:	68ac      	ldr	r4, [r5, #8]
 800401a:	e7d0      	b.n	8003fbe <__swbuf_r+0x1a>
 800401c:	4b09      	ldr	r3, [pc, #36]	; (8004044 <__swbuf_r+0xa0>)
 800401e:	429c      	cmp	r4, r3
 8004020:	bf08      	it	eq
 8004022:	68ec      	ldreq	r4, [r5, #12]
 8004024:	e7cb      	b.n	8003fbe <__swbuf_r+0x1a>
 8004026:	4621      	mov	r1, r4
 8004028:	4628      	mov	r0, r5
 800402a:	f000 f80d 	bl	8004048 <__swsetup_r>
 800402e:	2800      	cmp	r0, #0
 8004030:	d0cc      	beq.n	8003fcc <__swbuf_r+0x28>
 8004032:	f04f 37ff 	mov.w	r7, #4294967295
 8004036:	4638      	mov	r0, r7
 8004038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800403a:	bf00      	nop
 800403c:	08005f44 	.word	0x08005f44
 8004040:	08005f64 	.word	0x08005f64
 8004044:	08005f24 	.word	0x08005f24

08004048 <__swsetup_r>:
 8004048:	4b32      	ldr	r3, [pc, #200]	; (8004114 <__swsetup_r+0xcc>)
 800404a:	b570      	push	{r4, r5, r6, lr}
 800404c:	681d      	ldr	r5, [r3, #0]
 800404e:	4606      	mov	r6, r0
 8004050:	460c      	mov	r4, r1
 8004052:	b125      	cbz	r5, 800405e <__swsetup_r+0x16>
 8004054:	69ab      	ldr	r3, [r5, #24]
 8004056:	b913      	cbnz	r3, 800405e <__swsetup_r+0x16>
 8004058:	4628      	mov	r0, r5
 800405a:	f000 f953 	bl	8004304 <__sinit>
 800405e:	4b2e      	ldr	r3, [pc, #184]	; (8004118 <__swsetup_r+0xd0>)
 8004060:	429c      	cmp	r4, r3
 8004062:	d10f      	bne.n	8004084 <__swsetup_r+0x3c>
 8004064:	686c      	ldr	r4, [r5, #4]
 8004066:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800406a:	b29a      	uxth	r2, r3
 800406c:	0715      	lsls	r5, r2, #28
 800406e:	d42c      	bmi.n	80040ca <__swsetup_r+0x82>
 8004070:	06d0      	lsls	r0, r2, #27
 8004072:	d411      	bmi.n	8004098 <__swsetup_r+0x50>
 8004074:	2209      	movs	r2, #9
 8004076:	6032      	str	r2, [r6, #0]
 8004078:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800407c:	81a3      	strh	r3, [r4, #12]
 800407e:	f04f 30ff 	mov.w	r0, #4294967295
 8004082:	e03e      	b.n	8004102 <__swsetup_r+0xba>
 8004084:	4b25      	ldr	r3, [pc, #148]	; (800411c <__swsetup_r+0xd4>)
 8004086:	429c      	cmp	r4, r3
 8004088:	d101      	bne.n	800408e <__swsetup_r+0x46>
 800408a:	68ac      	ldr	r4, [r5, #8]
 800408c:	e7eb      	b.n	8004066 <__swsetup_r+0x1e>
 800408e:	4b24      	ldr	r3, [pc, #144]	; (8004120 <__swsetup_r+0xd8>)
 8004090:	429c      	cmp	r4, r3
 8004092:	bf08      	it	eq
 8004094:	68ec      	ldreq	r4, [r5, #12]
 8004096:	e7e6      	b.n	8004066 <__swsetup_r+0x1e>
 8004098:	0751      	lsls	r1, r2, #29
 800409a:	d512      	bpl.n	80040c2 <__swsetup_r+0x7a>
 800409c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800409e:	b141      	cbz	r1, 80040b2 <__swsetup_r+0x6a>
 80040a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80040a4:	4299      	cmp	r1, r3
 80040a6:	d002      	beq.n	80040ae <__swsetup_r+0x66>
 80040a8:	4630      	mov	r0, r6
 80040aa:	f000 fa19 	bl	80044e0 <_free_r>
 80040ae:	2300      	movs	r3, #0
 80040b0:	6363      	str	r3, [r4, #52]	; 0x34
 80040b2:	89a3      	ldrh	r3, [r4, #12]
 80040b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80040b8:	81a3      	strh	r3, [r4, #12]
 80040ba:	2300      	movs	r3, #0
 80040bc:	6063      	str	r3, [r4, #4]
 80040be:	6923      	ldr	r3, [r4, #16]
 80040c0:	6023      	str	r3, [r4, #0]
 80040c2:	89a3      	ldrh	r3, [r4, #12]
 80040c4:	f043 0308 	orr.w	r3, r3, #8
 80040c8:	81a3      	strh	r3, [r4, #12]
 80040ca:	6923      	ldr	r3, [r4, #16]
 80040cc:	b94b      	cbnz	r3, 80040e2 <__swsetup_r+0x9a>
 80040ce:	89a3      	ldrh	r3, [r4, #12]
 80040d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80040d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040d8:	d003      	beq.n	80040e2 <__swsetup_r+0x9a>
 80040da:	4621      	mov	r1, r4
 80040dc:	4630      	mov	r0, r6
 80040de:	f000 f9bf 	bl	8004460 <__smakebuf_r>
 80040e2:	89a2      	ldrh	r2, [r4, #12]
 80040e4:	f012 0301 	ands.w	r3, r2, #1
 80040e8:	d00c      	beq.n	8004104 <__swsetup_r+0xbc>
 80040ea:	2300      	movs	r3, #0
 80040ec:	60a3      	str	r3, [r4, #8]
 80040ee:	6963      	ldr	r3, [r4, #20]
 80040f0:	425b      	negs	r3, r3
 80040f2:	61a3      	str	r3, [r4, #24]
 80040f4:	6923      	ldr	r3, [r4, #16]
 80040f6:	b953      	cbnz	r3, 800410e <__swsetup_r+0xc6>
 80040f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040fc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004100:	d1ba      	bne.n	8004078 <__swsetup_r+0x30>
 8004102:	bd70      	pop	{r4, r5, r6, pc}
 8004104:	0792      	lsls	r2, r2, #30
 8004106:	bf58      	it	pl
 8004108:	6963      	ldrpl	r3, [r4, #20]
 800410a:	60a3      	str	r3, [r4, #8]
 800410c:	e7f2      	b.n	80040f4 <__swsetup_r+0xac>
 800410e:	2000      	movs	r0, #0
 8004110:	e7f7      	b.n	8004102 <__swsetup_r+0xba>
 8004112:	bf00      	nop
 8004114:	20000078 	.word	0x20000078
 8004118:	08005f44 	.word	0x08005f44
 800411c:	08005f64 	.word	0x08005f64
 8004120:	08005f24 	.word	0x08005f24

08004124 <__sflush_r>:
 8004124:	898a      	ldrh	r2, [r1, #12]
 8004126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800412a:	4605      	mov	r5, r0
 800412c:	0710      	lsls	r0, r2, #28
 800412e:	460c      	mov	r4, r1
 8004130:	d458      	bmi.n	80041e4 <__sflush_r+0xc0>
 8004132:	684b      	ldr	r3, [r1, #4]
 8004134:	2b00      	cmp	r3, #0
 8004136:	dc05      	bgt.n	8004144 <__sflush_r+0x20>
 8004138:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800413a:	2b00      	cmp	r3, #0
 800413c:	dc02      	bgt.n	8004144 <__sflush_r+0x20>
 800413e:	2000      	movs	r0, #0
 8004140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004144:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004146:	2e00      	cmp	r6, #0
 8004148:	d0f9      	beq.n	800413e <__sflush_r+0x1a>
 800414a:	2300      	movs	r3, #0
 800414c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004150:	682f      	ldr	r7, [r5, #0]
 8004152:	6a21      	ldr	r1, [r4, #32]
 8004154:	602b      	str	r3, [r5, #0]
 8004156:	d032      	beq.n	80041be <__sflush_r+0x9a>
 8004158:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800415a:	89a3      	ldrh	r3, [r4, #12]
 800415c:	075a      	lsls	r2, r3, #29
 800415e:	d505      	bpl.n	800416c <__sflush_r+0x48>
 8004160:	6863      	ldr	r3, [r4, #4]
 8004162:	1ac0      	subs	r0, r0, r3
 8004164:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004166:	b10b      	cbz	r3, 800416c <__sflush_r+0x48>
 8004168:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800416a:	1ac0      	subs	r0, r0, r3
 800416c:	2300      	movs	r3, #0
 800416e:	4602      	mov	r2, r0
 8004170:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004172:	6a21      	ldr	r1, [r4, #32]
 8004174:	4628      	mov	r0, r5
 8004176:	47b0      	blx	r6
 8004178:	1c43      	adds	r3, r0, #1
 800417a:	89a3      	ldrh	r3, [r4, #12]
 800417c:	d106      	bne.n	800418c <__sflush_r+0x68>
 800417e:	6829      	ldr	r1, [r5, #0]
 8004180:	291d      	cmp	r1, #29
 8004182:	d848      	bhi.n	8004216 <__sflush_r+0xf2>
 8004184:	4a29      	ldr	r2, [pc, #164]	; (800422c <__sflush_r+0x108>)
 8004186:	40ca      	lsrs	r2, r1
 8004188:	07d6      	lsls	r6, r2, #31
 800418a:	d544      	bpl.n	8004216 <__sflush_r+0xf2>
 800418c:	2200      	movs	r2, #0
 800418e:	6062      	str	r2, [r4, #4]
 8004190:	6922      	ldr	r2, [r4, #16]
 8004192:	04d9      	lsls	r1, r3, #19
 8004194:	6022      	str	r2, [r4, #0]
 8004196:	d504      	bpl.n	80041a2 <__sflush_r+0x7e>
 8004198:	1c42      	adds	r2, r0, #1
 800419a:	d101      	bne.n	80041a0 <__sflush_r+0x7c>
 800419c:	682b      	ldr	r3, [r5, #0]
 800419e:	b903      	cbnz	r3, 80041a2 <__sflush_r+0x7e>
 80041a0:	6560      	str	r0, [r4, #84]	; 0x54
 80041a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80041a4:	602f      	str	r7, [r5, #0]
 80041a6:	2900      	cmp	r1, #0
 80041a8:	d0c9      	beq.n	800413e <__sflush_r+0x1a>
 80041aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80041ae:	4299      	cmp	r1, r3
 80041b0:	d002      	beq.n	80041b8 <__sflush_r+0x94>
 80041b2:	4628      	mov	r0, r5
 80041b4:	f000 f994 	bl	80044e0 <_free_r>
 80041b8:	2000      	movs	r0, #0
 80041ba:	6360      	str	r0, [r4, #52]	; 0x34
 80041bc:	e7c0      	b.n	8004140 <__sflush_r+0x1c>
 80041be:	2301      	movs	r3, #1
 80041c0:	4628      	mov	r0, r5
 80041c2:	47b0      	blx	r6
 80041c4:	1c41      	adds	r1, r0, #1
 80041c6:	d1c8      	bne.n	800415a <__sflush_r+0x36>
 80041c8:	682b      	ldr	r3, [r5, #0]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d0c5      	beq.n	800415a <__sflush_r+0x36>
 80041ce:	2b1d      	cmp	r3, #29
 80041d0:	d001      	beq.n	80041d6 <__sflush_r+0xb2>
 80041d2:	2b16      	cmp	r3, #22
 80041d4:	d101      	bne.n	80041da <__sflush_r+0xb6>
 80041d6:	602f      	str	r7, [r5, #0]
 80041d8:	e7b1      	b.n	800413e <__sflush_r+0x1a>
 80041da:	89a3      	ldrh	r3, [r4, #12]
 80041dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041e0:	81a3      	strh	r3, [r4, #12]
 80041e2:	e7ad      	b.n	8004140 <__sflush_r+0x1c>
 80041e4:	690f      	ldr	r7, [r1, #16]
 80041e6:	2f00      	cmp	r7, #0
 80041e8:	d0a9      	beq.n	800413e <__sflush_r+0x1a>
 80041ea:	0793      	lsls	r3, r2, #30
 80041ec:	bf18      	it	ne
 80041ee:	2300      	movne	r3, #0
 80041f0:	680e      	ldr	r6, [r1, #0]
 80041f2:	bf08      	it	eq
 80041f4:	694b      	ldreq	r3, [r1, #20]
 80041f6:	eba6 0807 	sub.w	r8, r6, r7
 80041fa:	600f      	str	r7, [r1, #0]
 80041fc:	608b      	str	r3, [r1, #8]
 80041fe:	f1b8 0f00 	cmp.w	r8, #0
 8004202:	dd9c      	ble.n	800413e <__sflush_r+0x1a>
 8004204:	4643      	mov	r3, r8
 8004206:	463a      	mov	r2, r7
 8004208:	6a21      	ldr	r1, [r4, #32]
 800420a:	4628      	mov	r0, r5
 800420c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800420e:	47b0      	blx	r6
 8004210:	2800      	cmp	r0, #0
 8004212:	dc06      	bgt.n	8004222 <__sflush_r+0xfe>
 8004214:	89a3      	ldrh	r3, [r4, #12]
 8004216:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800421a:	81a3      	strh	r3, [r4, #12]
 800421c:	f04f 30ff 	mov.w	r0, #4294967295
 8004220:	e78e      	b.n	8004140 <__sflush_r+0x1c>
 8004222:	4407      	add	r7, r0
 8004224:	eba8 0800 	sub.w	r8, r8, r0
 8004228:	e7e9      	b.n	80041fe <__sflush_r+0xda>
 800422a:	bf00      	nop
 800422c:	20400001 	.word	0x20400001

08004230 <_fflush_r>:
 8004230:	b538      	push	{r3, r4, r5, lr}
 8004232:	690b      	ldr	r3, [r1, #16]
 8004234:	4605      	mov	r5, r0
 8004236:	460c      	mov	r4, r1
 8004238:	b1db      	cbz	r3, 8004272 <_fflush_r+0x42>
 800423a:	b118      	cbz	r0, 8004244 <_fflush_r+0x14>
 800423c:	6983      	ldr	r3, [r0, #24]
 800423e:	b90b      	cbnz	r3, 8004244 <_fflush_r+0x14>
 8004240:	f000 f860 	bl	8004304 <__sinit>
 8004244:	4b0c      	ldr	r3, [pc, #48]	; (8004278 <_fflush_r+0x48>)
 8004246:	429c      	cmp	r4, r3
 8004248:	d109      	bne.n	800425e <_fflush_r+0x2e>
 800424a:	686c      	ldr	r4, [r5, #4]
 800424c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004250:	b17b      	cbz	r3, 8004272 <_fflush_r+0x42>
 8004252:	4621      	mov	r1, r4
 8004254:	4628      	mov	r0, r5
 8004256:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800425a:	f7ff bf63 	b.w	8004124 <__sflush_r>
 800425e:	4b07      	ldr	r3, [pc, #28]	; (800427c <_fflush_r+0x4c>)
 8004260:	429c      	cmp	r4, r3
 8004262:	d101      	bne.n	8004268 <_fflush_r+0x38>
 8004264:	68ac      	ldr	r4, [r5, #8]
 8004266:	e7f1      	b.n	800424c <_fflush_r+0x1c>
 8004268:	4b05      	ldr	r3, [pc, #20]	; (8004280 <_fflush_r+0x50>)
 800426a:	429c      	cmp	r4, r3
 800426c:	bf08      	it	eq
 800426e:	68ec      	ldreq	r4, [r5, #12]
 8004270:	e7ec      	b.n	800424c <_fflush_r+0x1c>
 8004272:	2000      	movs	r0, #0
 8004274:	bd38      	pop	{r3, r4, r5, pc}
 8004276:	bf00      	nop
 8004278:	08005f44 	.word	0x08005f44
 800427c:	08005f64 	.word	0x08005f64
 8004280:	08005f24 	.word	0x08005f24

08004284 <std>:
 8004284:	2300      	movs	r3, #0
 8004286:	b510      	push	{r4, lr}
 8004288:	4604      	mov	r4, r0
 800428a:	e9c0 3300 	strd	r3, r3, [r0]
 800428e:	6083      	str	r3, [r0, #8]
 8004290:	8181      	strh	r1, [r0, #12]
 8004292:	6643      	str	r3, [r0, #100]	; 0x64
 8004294:	81c2      	strh	r2, [r0, #14]
 8004296:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800429a:	6183      	str	r3, [r0, #24]
 800429c:	4619      	mov	r1, r3
 800429e:	2208      	movs	r2, #8
 80042a0:	305c      	adds	r0, #92	; 0x5c
 80042a2:	f7ff fdfa 	bl	8003e9a <memset>
 80042a6:	4b05      	ldr	r3, [pc, #20]	; (80042bc <std+0x38>)
 80042a8:	6224      	str	r4, [r4, #32]
 80042aa:	6263      	str	r3, [r4, #36]	; 0x24
 80042ac:	4b04      	ldr	r3, [pc, #16]	; (80042c0 <std+0x3c>)
 80042ae:	62a3      	str	r3, [r4, #40]	; 0x28
 80042b0:	4b04      	ldr	r3, [pc, #16]	; (80042c4 <std+0x40>)
 80042b2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80042b4:	4b04      	ldr	r3, [pc, #16]	; (80042c8 <std+0x44>)
 80042b6:	6323      	str	r3, [r4, #48]	; 0x30
 80042b8:	bd10      	pop	{r4, pc}
 80042ba:	bf00      	nop
 80042bc:	08004bd9 	.word	0x08004bd9
 80042c0:	08004bfb 	.word	0x08004bfb
 80042c4:	08004c33 	.word	0x08004c33
 80042c8:	08004c57 	.word	0x08004c57

080042cc <_cleanup_r>:
 80042cc:	4901      	ldr	r1, [pc, #4]	; (80042d4 <_cleanup_r+0x8>)
 80042ce:	f000 b885 	b.w	80043dc <_fwalk_reent>
 80042d2:	bf00      	nop
 80042d4:	08004231 	.word	0x08004231

080042d8 <__sfmoreglue>:
 80042d8:	b570      	push	{r4, r5, r6, lr}
 80042da:	2568      	movs	r5, #104	; 0x68
 80042dc:	1e4a      	subs	r2, r1, #1
 80042de:	4355      	muls	r5, r2
 80042e0:	460e      	mov	r6, r1
 80042e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80042e6:	f000 f947 	bl	8004578 <_malloc_r>
 80042ea:	4604      	mov	r4, r0
 80042ec:	b140      	cbz	r0, 8004300 <__sfmoreglue+0x28>
 80042ee:	2100      	movs	r1, #0
 80042f0:	e9c0 1600 	strd	r1, r6, [r0]
 80042f4:	300c      	adds	r0, #12
 80042f6:	60a0      	str	r0, [r4, #8]
 80042f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80042fc:	f7ff fdcd 	bl	8003e9a <memset>
 8004300:	4620      	mov	r0, r4
 8004302:	bd70      	pop	{r4, r5, r6, pc}

08004304 <__sinit>:
 8004304:	6983      	ldr	r3, [r0, #24]
 8004306:	b510      	push	{r4, lr}
 8004308:	4604      	mov	r4, r0
 800430a:	bb33      	cbnz	r3, 800435a <__sinit+0x56>
 800430c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004310:	6503      	str	r3, [r0, #80]	; 0x50
 8004312:	4b12      	ldr	r3, [pc, #72]	; (800435c <__sinit+0x58>)
 8004314:	4a12      	ldr	r2, [pc, #72]	; (8004360 <__sinit+0x5c>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	6282      	str	r2, [r0, #40]	; 0x28
 800431a:	4298      	cmp	r0, r3
 800431c:	bf04      	itt	eq
 800431e:	2301      	moveq	r3, #1
 8004320:	6183      	streq	r3, [r0, #24]
 8004322:	f000 f81f 	bl	8004364 <__sfp>
 8004326:	6060      	str	r0, [r4, #4]
 8004328:	4620      	mov	r0, r4
 800432a:	f000 f81b 	bl	8004364 <__sfp>
 800432e:	60a0      	str	r0, [r4, #8]
 8004330:	4620      	mov	r0, r4
 8004332:	f000 f817 	bl	8004364 <__sfp>
 8004336:	2200      	movs	r2, #0
 8004338:	60e0      	str	r0, [r4, #12]
 800433a:	2104      	movs	r1, #4
 800433c:	6860      	ldr	r0, [r4, #4]
 800433e:	f7ff ffa1 	bl	8004284 <std>
 8004342:	2201      	movs	r2, #1
 8004344:	2109      	movs	r1, #9
 8004346:	68a0      	ldr	r0, [r4, #8]
 8004348:	f7ff ff9c 	bl	8004284 <std>
 800434c:	2202      	movs	r2, #2
 800434e:	2112      	movs	r1, #18
 8004350:	68e0      	ldr	r0, [r4, #12]
 8004352:	f7ff ff97 	bl	8004284 <std>
 8004356:	2301      	movs	r3, #1
 8004358:	61a3      	str	r3, [r4, #24]
 800435a:	bd10      	pop	{r4, pc}
 800435c:	08005f20 	.word	0x08005f20
 8004360:	080042cd 	.word	0x080042cd

08004364 <__sfp>:
 8004364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004366:	4b1b      	ldr	r3, [pc, #108]	; (80043d4 <__sfp+0x70>)
 8004368:	4607      	mov	r7, r0
 800436a:	681e      	ldr	r6, [r3, #0]
 800436c:	69b3      	ldr	r3, [r6, #24]
 800436e:	b913      	cbnz	r3, 8004376 <__sfp+0x12>
 8004370:	4630      	mov	r0, r6
 8004372:	f7ff ffc7 	bl	8004304 <__sinit>
 8004376:	3648      	adds	r6, #72	; 0x48
 8004378:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800437c:	3b01      	subs	r3, #1
 800437e:	d503      	bpl.n	8004388 <__sfp+0x24>
 8004380:	6833      	ldr	r3, [r6, #0]
 8004382:	b133      	cbz	r3, 8004392 <__sfp+0x2e>
 8004384:	6836      	ldr	r6, [r6, #0]
 8004386:	e7f7      	b.n	8004378 <__sfp+0x14>
 8004388:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800438c:	b16d      	cbz	r5, 80043aa <__sfp+0x46>
 800438e:	3468      	adds	r4, #104	; 0x68
 8004390:	e7f4      	b.n	800437c <__sfp+0x18>
 8004392:	2104      	movs	r1, #4
 8004394:	4638      	mov	r0, r7
 8004396:	f7ff ff9f 	bl	80042d8 <__sfmoreglue>
 800439a:	6030      	str	r0, [r6, #0]
 800439c:	2800      	cmp	r0, #0
 800439e:	d1f1      	bne.n	8004384 <__sfp+0x20>
 80043a0:	230c      	movs	r3, #12
 80043a2:	4604      	mov	r4, r0
 80043a4:	603b      	str	r3, [r7, #0]
 80043a6:	4620      	mov	r0, r4
 80043a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043aa:	4b0b      	ldr	r3, [pc, #44]	; (80043d8 <__sfp+0x74>)
 80043ac:	6665      	str	r5, [r4, #100]	; 0x64
 80043ae:	e9c4 5500 	strd	r5, r5, [r4]
 80043b2:	60a5      	str	r5, [r4, #8]
 80043b4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80043b8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80043bc:	2208      	movs	r2, #8
 80043be:	4629      	mov	r1, r5
 80043c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80043c4:	f7ff fd69 	bl	8003e9a <memset>
 80043c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80043cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80043d0:	e7e9      	b.n	80043a6 <__sfp+0x42>
 80043d2:	bf00      	nop
 80043d4:	08005f20 	.word	0x08005f20
 80043d8:	ffff0001 	.word	0xffff0001

080043dc <_fwalk_reent>:
 80043dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043e0:	4680      	mov	r8, r0
 80043e2:	4689      	mov	r9, r1
 80043e4:	2600      	movs	r6, #0
 80043e6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80043ea:	b914      	cbnz	r4, 80043f2 <_fwalk_reent+0x16>
 80043ec:	4630      	mov	r0, r6
 80043ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043f2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80043f6:	3f01      	subs	r7, #1
 80043f8:	d501      	bpl.n	80043fe <_fwalk_reent+0x22>
 80043fa:	6824      	ldr	r4, [r4, #0]
 80043fc:	e7f5      	b.n	80043ea <_fwalk_reent+0xe>
 80043fe:	89ab      	ldrh	r3, [r5, #12]
 8004400:	2b01      	cmp	r3, #1
 8004402:	d907      	bls.n	8004414 <_fwalk_reent+0x38>
 8004404:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004408:	3301      	adds	r3, #1
 800440a:	d003      	beq.n	8004414 <_fwalk_reent+0x38>
 800440c:	4629      	mov	r1, r5
 800440e:	4640      	mov	r0, r8
 8004410:	47c8      	blx	r9
 8004412:	4306      	orrs	r6, r0
 8004414:	3568      	adds	r5, #104	; 0x68
 8004416:	e7ee      	b.n	80043f6 <_fwalk_reent+0x1a>

08004418 <__swhatbuf_r>:
 8004418:	b570      	push	{r4, r5, r6, lr}
 800441a:	460e      	mov	r6, r1
 800441c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004420:	b096      	sub	sp, #88	; 0x58
 8004422:	2900      	cmp	r1, #0
 8004424:	4614      	mov	r4, r2
 8004426:	461d      	mov	r5, r3
 8004428:	da07      	bge.n	800443a <__swhatbuf_r+0x22>
 800442a:	2300      	movs	r3, #0
 800442c:	602b      	str	r3, [r5, #0]
 800442e:	89b3      	ldrh	r3, [r6, #12]
 8004430:	061a      	lsls	r2, r3, #24
 8004432:	d410      	bmi.n	8004456 <__swhatbuf_r+0x3e>
 8004434:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004438:	e00e      	b.n	8004458 <__swhatbuf_r+0x40>
 800443a:	466a      	mov	r2, sp
 800443c:	f000 fc32 	bl	8004ca4 <_fstat_r>
 8004440:	2800      	cmp	r0, #0
 8004442:	dbf2      	blt.n	800442a <__swhatbuf_r+0x12>
 8004444:	9a01      	ldr	r2, [sp, #4]
 8004446:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800444a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800444e:	425a      	negs	r2, r3
 8004450:	415a      	adcs	r2, r3
 8004452:	602a      	str	r2, [r5, #0]
 8004454:	e7ee      	b.n	8004434 <__swhatbuf_r+0x1c>
 8004456:	2340      	movs	r3, #64	; 0x40
 8004458:	2000      	movs	r0, #0
 800445a:	6023      	str	r3, [r4, #0]
 800445c:	b016      	add	sp, #88	; 0x58
 800445e:	bd70      	pop	{r4, r5, r6, pc}

08004460 <__smakebuf_r>:
 8004460:	898b      	ldrh	r3, [r1, #12]
 8004462:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004464:	079d      	lsls	r5, r3, #30
 8004466:	4606      	mov	r6, r0
 8004468:	460c      	mov	r4, r1
 800446a:	d507      	bpl.n	800447c <__smakebuf_r+0x1c>
 800446c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004470:	6023      	str	r3, [r4, #0]
 8004472:	6123      	str	r3, [r4, #16]
 8004474:	2301      	movs	r3, #1
 8004476:	6163      	str	r3, [r4, #20]
 8004478:	b002      	add	sp, #8
 800447a:	bd70      	pop	{r4, r5, r6, pc}
 800447c:	ab01      	add	r3, sp, #4
 800447e:	466a      	mov	r2, sp
 8004480:	f7ff ffca 	bl	8004418 <__swhatbuf_r>
 8004484:	9900      	ldr	r1, [sp, #0]
 8004486:	4605      	mov	r5, r0
 8004488:	4630      	mov	r0, r6
 800448a:	f000 f875 	bl	8004578 <_malloc_r>
 800448e:	b948      	cbnz	r0, 80044a4 <__smakebuf_r+0x44>
 8004490:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004494:	059a      	lsls	r2, r3, #22
 8004496:	d4ef      	bmi.n	8004478 <__smakebuf_r+0x18>
 8004498:	f023 0303 	bic.w	r3, r3, #3
 800449c:	f043 0302 	orr.w	r3, r3, #2
 80044a0:	81a3      	strh	r3, [r4, #12]
 80044a2:	e7e3      	b.n	800446c <__smakebuf_r+0xc>
 80044a4:	4b0d      	ldr	r3, [pc, #52]	; (80044dc <__smakebuf_r+0x7c>)
 80044a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80044a8:	89a3      	ldrh	r3, [r4, #12]
 80044aa:	6020      	str	r0, [r4, #0]
 80044ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044b0:	81a3      	strh	r3, [r4, #12]
 80044b2:	9b00      	ldr	r3, [sp, #0]
 80044b4:	6120      	str	r0, [r4, #16]
 80044b6:	6163      	str	r3, [r4, #20]
 80044b8:	9b01      	ldr	r3, [sp, #4]
 80044ba:	b15b      	cbz	r3, 80044d4 <__smakebuf_r+0x74>
 80044bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80044c0:	4630      	mov	r0, r6
 80044c2:	f000 fc01 	bl	8004cc8 <_isatty_r>
 80044c6:	b128      	cbz	r0, 80044d4 <__smakebuf_r+0x74>
 80044c8:	89a3      	ldrh	r3, [r4, #12]
 80044ca:	f023 0303 	bic.w	r3, r3, #3
 80044ce:	f043 0301 	orr.w	r3, r3, #1
 80044d2:	81a3      	strh	r3, [r4, #12]
 80044d4:	89a3      	ldrh	r3, [r4, #12]
 80044d6:	431d      	orrs	r5, r3
 80044d8:	81a5      	strh	r5, [r4, #12]
 80044da:	e7cd      	b.n	8004478 <__smakebuf_r+0x18>
 80044dc:	080042cd 	.word	0x080042cd

080044e0 <_free_r>:
 80044e0:	b538      	push	{r3, r4, r5, lr}
 80044e2:	4605      	mov	r5, r0
 80044e4:	2900      	cmp	r1, #0
 80044e6:	d043      	beq.n	8004570 <_free_r+0x90>
 80044e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044ec:	1f0c      	subs	r4, r1, #4
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	bfb8      	it	lt
 80044f2:	18e4      	addlt	r4, r4, r3
 80044f4:	f000 fc18 	bl	8004d28 <__malloc_lock>
 80044f8:	4a1e      	ldr	r2, [pc, #120]	; (8004574 <_free_r+0x94>)
 80044fa:	6813      	ldr	r3, [r2, #0]
 80044fc:	4610      	mov	r0, r2
 80044fe:	b933      	cbnz	r3, 800450e <_free_r+0x2e>
 8004500:	6063      	str	r3, [r4, #4]
 8004502:	6014      	str	r4, [r2, #0]
 8004504:	4628      	mov	r0, r5
 8004506:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800450a:	f000 bc0e 	b.w	8004d2a <__malloc_unlock>
 800450e:	42a3      	cmp	r3, r4
 8004510:	d90b      	bls.n	800452a <_free_r+0x4a>
 8004512:	6821      	ldr	r1, [r4, #0]
 8004514:	1862      	adds	r2, r4, r1
 8004516:	4293      	cmp	r3, r2
 8004518:	bf01      	itttt	eq
 800451a:	681a      	ldreq	r2, [r3, #0]
 800451c:	685b      	ldreq	r3, [r3, #4]
 800451e:	1852      	addeq	r2, r2, r1
 8004520:	6022      	streq	r2, [r4, #0]
 8004522:	6063      	str	r3, [r4, #4]
 8004524:	6004      	str	r4, [r0, #0]
 8004526:	e7ed      	b.n	8004504 <_free_r+0x24>
 8004528:	4613      	mov	r3, r2
 800452a:	685a      	ldr	r2, [r3, #4]
 800452c:	b10a      	cbz	r2, 8004532 <_free_r+0x52>
 800452e:	42a2      	cmp	r2, r4
 8004530:	d9fa      	bls.n	8004528 <_free_r+0x48>
 8004532:	6819      	ldr	r1, [r3, #0]
 8004534:	1858      	adds	r0, r3, r1
 8004536:	42a0      	cmp	r0, r4
 8004538:	d10b      	bne.n	8004552 <_free_r+0x72>
 800453a:	6820      	ldr	r0, [r4, #0]
 800453c:	4401      	add	r1, r0
 800453e:	1858      	adds	r0, r3, r1
 8004540:	4282      	cmp	r2, r0
 8004542:	6019      	str	r1, [r3, #0]
 8004544:	d1de      	bne.n	8004504 <_free_r+0x24>
 8004546:	6810      	ldr	r0, [r2, #0]
 8004548:	6852      	ldr	r2, [r2, #4]
 800454a:	4401      	add	r1, r0
 800454c:	6019      	str	r1, [r3, #0]
 800454e:	605a      	str	r2, [r3, #4]
 8004550:	e7d8      	b.n	8004504 <_free_r+0x24>
 8004552:	d902      	bls.n	800455a <_free_r+0x7a>
 8004554:	230c      	movs	r3, #12
 8004556:	602b      	str	r3, [r5, #0]
 8004558:	e7d4      	b.n	8004504 <_free_r+0x24>
 800455a:	6820      	ldr	r0, [r4, #0]
 800455c:	1821      	adds	r1, r4, r0
 800455e:	428a      	cmp	r2, r1
 8004560:	bf01      	itttt	eq
 8004562:	6811      	ldreq	r1, [r2, #0]
 8004564:	6852      	ldreq	r2, [r2, #4]
 8004566:	1809      	addeq	r1, r1, r0
 8004568:	6021      	streq	r1, [r4, #0]
 800456a:	6062      	str	r2, [r4, #4]
 800456c:	605c      	str	r4, [r3, #4]
 800456e:	e7c9      	b.n	8004504 <_free_r+0x24>
 8004570:	bd38      	pop	{r3, r4, r5, pc}
 8004572:	bf00      	nop
 8004574:	200001a0 	.word	0x200001a0

08004578 <_malloc_r>:
 8004578:	b570      	push	{r4, r5, r6, lr}
 800457a:	1ccd      	adds	r5, r1, #3
 800457c:	f025 0503 	bic.w	r5, r5, #3
 8004580:	3508      	adds	r5, #8
 8004582:	2d0c      	cmp	r5, #12
 8004584:	bf38      	it	cc
 8004586:	250c      	movcc	r5, #12
 8004588:	2d00      	cmp	r5, #0
 800458a:	4606      	mov	r6, r0
 800458c:	db01      	blt.n	8004592 <_malloc_r+0x1a>
 800458e:	42a9      	cmp	r1, r5
 8004590:	d903      	bls.n	800459a <_malloc_r+0x22>
 8004592:	230c      	movs	r3, #12
 8004594:	6033      	str	r3, [r6, #0]
 8004596:	2000      	movs	r0, #0
 8004598:	bd70      	pop	{r4, r5, r6, pc}
 800459a:	f000 fbc5 	bl	8004d28 <__malloc_lock>
 800459e:	4a21      	ldr	r2, [pc, #132]	; (8004624 <_malloc_r+0xac>)
 80045a0:	6814      	ldr	r4, [r2, #0]
 80045a2:	4621      	mov	r1, r4
 80045a4:	b991      	cbnz	r1, 80045cc <_malloc_r+0x54>
 80045a6:	4c20      	ldr	r4, [pc, #128]	; (8004628 <_malloc_r+0xb0>)
 80045a8:	6823      	ldr	r3, [r4, #0]
 80045aa:	b91b      	cbnz	r3, 80045b4 <_malloc_r+0x3c>
 80045ac:	4630      	mov	r0, r6
 80045ae:	f000 fb03 	bl	8004bb8 <_sbrk_r>
 80045b2:	6020      	str	r0, [r4, #0]
 80045b4:	4629      	mov	r1, r5
 80045b6:	4630      	mov	r0, r6
 80045b8:	f000 fafe 	bl	8004bb8 <_sbrk_r>
 80045bc:	1c43      	adds	r3, r0, #1
 80045be:	d124      	bne.n	800460a <_malloc_r+0x92>
 80045c0:	230c      	movs	r3, #12
 80045c2:	4630      	mov	r0, r6
 80045c4:	6033      	str	r3, [r6, #0]
 80045c6:	f000 fbb0 	bl	8004d2a <__malloc_unlock>
 80045ca:	e7e4      	b.n	8004596 <_malloc_r+0x1e>
 80045cc:	680b      	ldr	r3, [r1, #0]
 80045ce:	1b5b      	subs	r3, r3, r5
 80045d0:	d418      	bmi.n	8004604 <_malloc_r+0x8c>
 80045d2:	2b0b      	cmp	r3, #11
 80045d4:	d90f      	bls.n	80045f6 <_malloc_r+0x7e>
 80045d6:	600b      	str	r3, [r1, #0]
 80045d8:	18cc      	adds	r4, r1, r3
 80045da:	50cd      	str	r5, [r1, r3]
 80045dc:	4630      	mov	r0, r6
 80045de:	f000 fba4 	bl	8004d2a <__malloc_unlock>
 80045e2:	f104 000b 	add.w	r0, r4, #11
 80045e6:	1d23      	adds	r3, r4, #4
 80045e8:	f020 0007 	bic.w	r0, r0, #7
 80045ec:	1ac3      	subs	r3, r0, r3
 80045ee:	d0d3      	beq.n	8004598 <_malloc_r+0x20>
 80045f0:	425a      	negs	r2, r3
 80045f2:	50e2      	str	r2, [r4, r3]
 80045f4:	e7d0      	b.n	8004598 <_malloc_r+0x20>
 80045f6:	684b      	ldr	r3, [r1, #4]
 80045f8:	428c      	cmp	r4, r1
 80045fa:	bf16      	itet	ne
 80045fc:	6063      	strne	r3, [r4, #4]
 80045fe:	6013      	streq	r3, [r2, #0]
 8004600:	460c      	movne	r4, r1
 8004602:	e7eb      	b.n	80045dc <_malloc_r+0x64>
 8004604:	460c      	mov	r4, r1
 8004606:	6849      	ldr	r1, [r1, #4]
 8004608:	e7cc      	b.n	80045a4 <_malloc_r+0x2c>
 800460a:	1cc4      	adds	r4, r0, #3
 800460c:	f024 0403 	bic.w	r4, r4, #3
 8004610:	42a0      	cmp	r0, r4
 8004612:	d005      	beq.n	8004620 <_malloc_r+0xa8>
 8004614:	1a21      	subs	r1, r4, r0
 8004616:	4630      	mov	r0, r6
 8004618:	f000 face 	bl	8004bb8 <_sbrk_r>
 800461c:	3001      	adds	r0, #1
 800461e:	d0cf      	beq.n	80045c0 <_malloc_r+0x48>
 8004620:	6025      	str	r5, [r4, #0]
 8004622:	e7db      	b.n	80045dc <_malloc_r+0x64>
 8004624:	200001a0 	.word	0x200001a0
 8004628:	200001a4 	.word	0x200001a4

0800462c <__sfputc_r>:
 800462c:	6893      	ldr	r3, [r2, #8]
 800462e:	b410      	push	{r4}
 8004630:	3b01      	subs	r3, #1
 8004632:	2b00      	cmp	r3, #0
 8004634:	6093      	str	r3, [r2, #8]
 8004636:	da07      	bge.n	8004648 <__sfputc_r+0x1c>
 8004638:	6994      	ldr	r4, [r2, #24]
 800463a:	42a3      	cmp	r3, r4
 800463c:	db01      	blt.n	8004642 <__sfputc_r+0x16>
 800463e:	290a      	cmp	r1, #10
 8004640:	d102      	bne.n	8004648 <__sfputc_r+0x1c>
 8004642:	bc10      	pop	{r4}
 8004644:	f7ff bcae 	b.w	8003fa4 <__swbuf_r>
 8004648:	6813      	ldr	r3, [r2, #0]
 800464a:	1c58      	adds	r0, r3, #1
 800464c:	6010      	str	r0, [r2, #0]
 800464e:	7019      	strb	r1, [r3, #0]
 8004650:	4608      	mov	r0, r1
 8004652:	bc10      	pop	{r4}
 8004654:	4770      	bx	lr

08004656 <__sfputs_r>:
 8004656:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004658:	4606      	mov	r6, r0
 800465a:	460f      	mov	r7, r1
 800465c:	4614      	mov	r4, r2
 800465e:	18d5      	adds	r5, r2, r3
 8004660:	42ac      	cmp	r4, r5
 8004662:	d101      	bne.n	8004668 <__sfputs_r+0x12>
 8004664:	2000      	movs	r0, #0
 8004666:	e007      	b.n	8004678 <__sfputs_r+0x22>
 8004668:	463a      	mov	r2, r7
 800466a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800466e:	4630      	mov	r0, r6
 8004670:	f7ff ffdc 	bl	800462c <__sfputc_r>
 8004674:	1c43      	adds	r3, r0, #1
 8004676:	d1f3      	bne.n	8004660 <__sfputs_r+0xa>
 8004678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800467c <_vfiprintf_r>:
 800467c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004680:	460c      	mov	r4, r1
 8004682:	b09d      	sub	sp, #116	; 0x74
 8004684:	4617      	mov	r7, r2
 8004686:	461d      	mov	r5, r3
 8004688:	4606      	mov	r6, r0
 800468a:	b118      	cbz	r0, 8004694 <_vfiprintf_r+0x18>
 800468c:	6983      	ldr	r3, [r0, #24]
 800468e:	b90b      	cbnz	r3, 8004694 <_vfiprintf_r+0x18>
 8004690:	f7ff fe38 	bl	8004304 <__sinit>
 8004694:	4b7c      	ldr	r3, [pc, #496]	; (8004888 <_vfiprintf_r+0x20c>)
 8004696:	429c      	cmp	r4, r3
 8004698:	d158      	bne.n	800474c <_vfiprintf_r+0xd0>
 800469a:	6874      	ldr	r4, [r6, #4]
 800469c:	89a3      	ldrh	r3, [r4, #12]
 800469e:	0718      	lsls	r0, r3, #28
 80046a0:	d55e      	bpl.n	8004760 <_vfiprintf_r+0xe4>
 80046a2:	6923      	ldr	r3, [r4, #16]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d05b      	beq.n	8004760 <_vfiprintf_r+0xe4>
 80046a8:	2300      	movs	r3, #0
 80046aa:	9309      	str	r3, [sp, #36]	; 0x24
 80046ac:	2320      	movs	r3, #32
 80046ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80046b2:	2330      	movs	r3, #48	; 0x30
 80046b4:	f04f 0b01 	mov.w	fp, #1
 80046b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80046bc:	9503      	str	r5, [sp, #12]
 80046be:	46b8      	mov	r8, r7
 80046c0:	4645      	mov	r5, r8
 80046c2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80046c6:	b10b      	cbz	r3, 80046cc <_vfiprintf_r+0x50>
 80046c8:	2b25      	cmp	r3, #37	; 0x25
 80046ca:	d154      	bne.n	8004776 <_vfiprintf_r+0xfa>
 80046cc:	ebb8 0a07 	subs.w	sl, r8, r7
 80046d0:	d00b      	beq.n	80046ea <_vfiprintf_r+0x6e>
 80046d2:	4653      	mov	r3, sl
 80046d4:	463a      	mov	r2, r7
 80046d6:	4621      	mov	r1, r4
 80046d8:	4630      	mov	r0, r6
 80046da:	f7ff ffbc 	bl	8004656 <__sfputs_r>
 80046de:	3001      	adds	r0, #1
 80046e0:	f000 80c2 	beq.w	8004868 <_vfiprintf_r+0x1ec>
 80046e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046e6:	4453      	add	r3, sl
 80046e8:	9309      	str	r3, [sp, #36]	; 0x24
 80046ea:	f898 3000 	ldrb.w	r3, [r8]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f000 80ba 	beq.w	8004868 <_vfiprintf_r+0x1ec>
 80046f4:	2300      	movs	r3, #0
 80046f6:	f04f 32ff 	mov.w	r2, #4294967295
 80046fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046fe:	9304      	str	r3, [sp, #16]
 8004700:	9307      	str	r3, [sp, #28]
 8004702:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004706:	931a      	str	r3, [sp, #104]	; 0x68
 8004708:	46a8      	mov	r8, r5
 800470a:	2205      	movs	r2, #5
 800470c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004710:	485e      	ldr	r0, [pc, #376]	; (800488c <_vfiprintf_r+0x210>)
 8004712:	f000 fafb 	bl	8004d0c <memchr>
 8004716:	9b04      	ldr	r3, [sp, #16]
 8004718:	bb78      	cbnz	r0, 800477a <_vfiprintf_r+0xfe>
 800471a:	06d9      	lsls	r1, r3, #27
 800471c:	bf44      	itt	mi
 800471e:	2220      	movmi	r2, #32
 8004720:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004724:	071a      	lsls	r2, r3, #28
 8004726:	bf44      	itt	mi
 8004728:	222b      	movmi	r2, #43	; 0x2b
 800472a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800472e:	782a      	ldrb	r2, [r5, #0]
 8004730:	2a2a      	cmp	r2, #42	; 0x2a
 8004732:	d02a      	beq.n	800478a <_vfiprintf_r+0x10e>
 8004734:	46a8      	mov	r8, r5
 8004736:	2000      	movs	r0, #0
 8004738:	250a      	movs	r5, #10
 800473a:	9a07      	ldr	r2, [sp, #28]
 800473c:	4641      	mov	r1, r8
 800473e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004742:	3b30      	subs	r3, #48	; 0x30
 8004744:	2b09      	cmp	r3, #9
 8004746:	d969      	bls.n	800481c <_vfiprintf_r+0x1a0>
 8004748:	b360      	cbz	r0, 80047a4 <_vfiprintf_r+0x128>
 800474a:	e024      	b.n	8004796 <_vfiprintf_r+0x11a>
 800474c:	4b50      	ldr	r3, [pc, #320]	; (8004890 <_vfiprintf_r+0x214>)
 800474e:	429c      	cmp	r4, r3
 8004750:	d101      	bne.n	8004756 <_vfiprintf_r+0xda>
 8004752:	68b4      	ldr	r4, [r6, #8]
 8004754:	e7a2      	b.n	800469c <_vfiprintf_r+0x20>
 8004756:	4b4f      	ldr	r3, [pc, #316]	; (8004894 <_vfiprintf_r+0x218>)
 8004758:	429c      	cmp	r4, r3
 800475a:	bf08      	it	eq
 800475c:	68f4      	ldreq	r4, [r6, #12]
 800475e:	e79d      	b.n	800469c <_vfiprintf_r+0x20>
 8004760:	4621      	mov	r1, r4
 8004762:	4630      	mov	r0, r6
 8004764:	f7ff fc70 	bl	8004048 <__swsetup_r>
 8004768:	2800      	cmp	r0, #0
 800476a:	d09d      	beq.n	80046a8 <_vfiprintf_r+0x2c>
 800476c:	f04f 30ff 	mov.w	r0, #4294967295
 8004770:	b01d      	add	sp, #116	; 0x74
 8004772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004776:	46a8      	mov	r8, r5
 8004778:	e7a2      	b.n	80046c0 <_vfiprintf_r+0x44>
 800477a:	4a44      	ldr	r2, [pc, #272]	; (800488c <_vfiprintf_r+0x210>)
 800477c:	4645      	mov	r5, r8
 800477e:	1a80      	subs	r0, r0, r2
 8004780:	fa0b f000 	lsl.w	r0, fp, r0
 8004784:	4318      	orrs	r0, r3
 8004786:	9004      	str	r0, [sp, #16]
 8004788:	e7be      	b.n	8004708 <_vfiprintf_r+0x8c>
 800478a:	9a03      	ldr	r2, [sp, #12]
 800478c:	1d11      	adds	r1, r2, #4
 800478e:	6812      	ldr	r2, [r2, #0]
 8004790:	9103      	str	r1, [sp, #12]
 8004792:	2a00      	cmp	r2, #0
 8004794:	db01      	blt.n	800479a <_vfiprintf_r+0x11e>
 8004796:	9207      	str	r2, [sp, #28]
 8004798:	e004      	b.n	80047a4 <_vfiprintf_r+0x128>
 800479a:	4252      	negs	r2, r2
 800479c:	f043 0302 	orr.w	r3, r3, #2
 80047a0:	9207      	str	r2, [sp, #28]
 80047a2:	9304      	str	r3, [sp, #16]
 80047a4:	f898 3000 	ldrb.w	r3, [r8]
 80047a8:	2b2e      	cmp	r3, #46	; 0x2e
 80047aa:	d10e      	bne.n	80047ca <_vfiprintf_r+0x14e>
 80047ac:	f898 3001 	ldrb.w	r3, [r8, #1]
 80047b0:	2b2a      	cmp	r3, #42	; 0x2a
 80047b2:	d138      	bne.n	8004826 <_vfiprintf_r+0x1aa>
 80047b4:	9b03      	ldr	r3, [sp, #12]
 80047b6:	f108 0802 	add.w	r8, r8, #2
 80047ba:	1d1a      	adds	r2, r3, #4
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	9203      	str	r2, [sp, #12]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	bfb8      	it	lt
 80047c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80047c8:	9305      	str	r3, [sp, #20]
 80047ca:	4d33      	ldr	r5, [pc, #204]	; (8004898 <_vfiprintf_r+0x21c>)
 80047cc:	2203      	movs	r2, #3
 80047ce:	f898 1000 	ldrb.w	r1, [r8]
 80047d2:	4628      	mov	r0, r5
 80047d4:	f000 fa9a 	bl	8004d0c <memchr>
 80047d8:	b140      	cbz	r0, 80047ec <_vfiprintf_r+0x170>
 80047da:	2340      	movs	r3, #64	; 0x40
 80047dc:	1b40      	subs	r0, r0, r5
 80047de:	fa03 f000 	lsl.w	r0, r3, r0
 80047e2:	9b04      	ldr	r3, [sp, #16]
 80047e4:	f108 0801 	add.w	r8, r8, #1
 80047e8:	4303      	orrs	r3, r0
 80047ea:	9304      	str	r3, [sp, #16]
 80047ec:	f898 1000 	ldrb.w	r1, [r8]
 80047f0:	2206      	movs	r2, #6
 80047f2:	482a      	ldr	r0, [pc, #168]	; (800489c <_vfiprintf_r+0x220>)
 80047f4:	f108 0701 	add.w	r7, r8, #1
 80047f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80047fc:	f000 fa86 	bl	8004d0c <memchr>
 8004800:	2800      	cmp	r0, #0
 8004802:	d037      	beq.n	8004874 <_vfiprintf_r+0x1f8>
 8004804:	4b26      	ldr	r3, [pc, #152]	; (80048a0 <_vfiprintf_r+0x224>)
 8004806:	bb1b      	cbnz	r3, 8004850 <_vfiprintf_r+0x1d4>
 8004808:	9b03      	ldr	r3, [sp, #12]
 800480a:	3307      	adds	r3, #7
 800480c:	f023 0307 	bic.w	r3, r3, #7
 8004810:	3308      	adds	r3, #8
 8004812:	9303      	str	r3, [sp, #12]
 8004814:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004816:	444b      	add	r3, r9
 8004818:	9309      	str	r3, [sp, #36]	; 0x24
 800481a:	e750      	b.n	80046be <_vfiprintf_r+0x42>
 800481c:	fb05 3202 	mla	r2, r5, r2, r3
 8004820:	2001      	movs	r0, #1
 8004822:	4688      	mov	r8, r1
 8004824:	e78a      	b.n	800473c <_vfiprintf_r+0xc0>
 8004826:	2300      	movs	r3, #0
 8004828:	250a      	movs	r5, #10
 800482a:	4619      	mov	r1, r3
 800482c:	f108 0801 	add.w	r8, r8, #1
 8004830:	9305      	str	r3, [sp, #20]
 8004832:	4640      	mov	r0, r8
 8004834:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004838:	3a30      	subs	r2, #48	; 0x30
 800483a:	2a09      	cmp	r2, #9
 800483c:	d903      	bls.n	8004846 <_vfiprintf_r+0x1ca>
 800483e:	2b00      	cmp	r3, #0
 8004840:	d0c3      	beq.n	80047ca <_vfiprintf_r+0x14e>
 8004842:	9105      	str	r1, [sp, #20]
 8004844:	e7c1      	b.n	80047ca <_vfiprintf_r+0x14e>
 8004846:	fb05 2101 	mla	r1, r5, r1, r2
 800484a:	2301      	movs	r3, #1
 800484c:	4680      	mov	r8, r0
 800484e:	e7f0      	b.n	8004832 <_vfiprintf_r+0x1b6>
 8004850:	ab03      	add	r3, sp, #12
 8004852:	9300      	str	r3, [sp, #0]
 8004854:	4622      	mov	r2, r4
 8004856:	4b13      	ldr	r3, [pc, #76]	; (80048a4 <_vfiprintf_r+0x228>)
 8004858:	a904      	add	r1, sp, #16
 800485a:	4630      	mov	r0, r6
 800485c:	f3af 8000 	nop.w
 8004860:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004864:	4681      	mov	r9, r0
 8004866:	d1d5      	bne.n	8004814 <_vfiprintf_r+0x198>
 8004868:	89a3      	ldrh	r3, [r4, #12]
 800486a:	065b      	lsls	r3, r3, #25
 800486c:	f53f af7e 	bmi.w	800476c <_vfiprintf_r+0xf0>
 8004870:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004872:	e77d      	b.n	8004770 <_vfiprintf_r+0xf4>
 8004874:	ab03      	add	r3, sp, #12
 8004876:	9300      	str	r3, [sp, #0]
 8004878:	4622      	mov	r2, r4
 800487a:	4b0a      	ldr	r3, [pc, #40]	; (80048a4 <_vfiprintf_r+0x228>)
 800487c:	a904      	add	r1, sp, #16
 800487e:	4630      	mov	r0, r6
 8004880:	f000 f888 	bl	8004994 <_printf_i>
 8004884:	e7ec      	b.n	8004860 <_vfiprintf_r+0x1e4>
 8004886:	bf00      	nop
 8004888:	08005f44 	.word	0x08005f44
 800488c:	08005f84 	.word	0x08005f84
 8004890:	08005f64 	.word	0x08005f64
 8004894:	08005f24 	.word	0x08005f24
 8004898:	08005f8a 	.word	0x08005f8a
 800489c:	08005f8e 	.word	0x08005f8e
 80048a0:	00000000 	.word	0x00000000
 80048a4:	08004657 	.word	0x08004657

080048a8 <_printf_common>:
 80048a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048ac:	4691      	mov	r9, r2
 80048ae:	461f      	mov	r7, r3
 80048b0:	688a      	ldr	r2, [r1, #8]
 80048b2:	690b      	ldr	r3, [r1, #16]
 80048b4:	4606      	mov	r6, r0
 80048b6:	4293      	cmp	r3, r2
 80048b8:	bfb8      	it	lt
 80048ba:	4613      	movlt	r3, r2
 80048bc:	f8c9 3000 	str.w	r3, [r9]
 80048c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048c4:	460c      	mov	r4, r1
 80048c6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048ca:	b112      	cbz	r2, 80048d2 <_printf_common+0x2a>
 80048cc:	3301      	adds	r3, #1
 80048ce:	f8c9 3000 	str.w	r3, [r9]
 80048d2:	6823      	ldr	r3, [r4, #0]
 80048d4:	0699      	lsls	r1, r3, #26
 80048d6:	bf42      	ittt	mi
 80048d8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80048dc:	3302      	addmi	r3, #2
 80048de:	f8c9 3000 	strmi.w	r3, [r9]
 80048e2:	6825      	ldr	r5, [r4, #0]
 80048e4:	f015 0506 	ands.w	r5, r5, #6
 80048e8:	d107      	bne.n	80048fa <_printf_common+0x52>
 80048ea:	f104 0a19 	add.w	sl, r4, #25
 80048ee:	68e3      	ldr	r3, [r4, #12]
 80048f0:	f8d9 2000 	ldr.w	r2, [r9]
 80048f4:	1a9b      	subs	r3, r3, r2
 80048f6:	42ab      	cmp	r3, r5
 80048f8:	dc29      	bgt.n	800494e <_printf_common+0xa6>
 80048fa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80048fe:	6822      	ldr	r2, [r4, #0]
 8004900:	3300      	adds	r3, #0
 8004902:	bf18      	it	ne
 8004904:	2301      	movne	r3, #1
 8004906:	0692      	lsls	r2, r2, #26
 8004908:	d42e      	bmi.n	8004968 <_printf_common+0xc0>
 800490a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800490e:	4639      	mov	r1, r7
 8004910:	4630      	mov	r0, r6
 8004912:	47c0      	blx	r8
 8004914:	3001      	adds	r0, #1
 8004916:	d021      	beq.n	800495c <_printf_common+0xb4>
 8004918:	6823      	ldr	r3, [r4, #0]
 800491a:	68e5      	ldr	r5, [r4, #12]
 800491c:	f003 0306 	and.w	r3, r3, #6
 8004920:	2b04      	cmp	r3, #4
 8004922:	bf18      	it	ne
 8004924:	2500      	movne	r5, #0
 8004926:	f8d9 2000 	ldr.w	r2, [r9]
 800492a:	f04f 0900 	mov.w	r9, #0
 800492e:	bf08      	it	eq
 8004930:	1aad      	subeq	r5, r5, r2
 8004932:	68a3      	ldr	r3, [r4, #8]
 8004934:	6922      	ldr	r2, [r4, #16]
 8004936:	bf08      	it	eq
 8004938:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800493c:	4293      	cmp	r3, r2
 800493e:	bfc4      	itt	gt
 8004940:	1a9b      	subgt	r3, r3, r2
 8004942:	18ed      	addgt	r5, r5, r3
 8004944:	341a      	adds	r4, #26
 8004946:	454d      	cmp	r5, r9
 8004948:	d11a      	bne.n	8004980 <_printf_common+0xd8>
 800494a:	2000      	movs	r0, #0
 800494c:	e008      	b.n	8004960 <_printf_common+0xb8>
 800494e:	2301      	movs	r3, #1
 8004950:	4652      	mov	r2, sl
 8004952:	4639      	mov	r1, r7
 8004954:	4630      	mov	r0, r6
 8004956:	47c0      	blx	r8
 8004958:	3001      	adds	r0, #1
 800495a:	d103      	bne.n	8004964 <_printf_common+0xbc>
 800495c:	f04f 30ff 	mov.w	r0, #4294967295
 8004960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004964:	3501      	adds	r5, #1
 8004966:	e7c2      	b.n	80048ee <_printf_common+0x46>
 8004968:	2030      	movs	r0, #48	; 0x30
 800496a:	18e1      	adds	r1, r4, r3
 800496c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004970:	1c5a      	adds	r2, r3, #1
 8004972:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004976:	4422      	add	r2, r4
 8004978:	3302      	adds	r3, #2
 800497a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800497e:	e7c4      	b.n	800490a <_printf_common+0x62>
 8004980:	2301      	movs	r3, #1
 8004982:	4622      	mov	r2, r4
 8004984:	4639      	mov	r1, r7
 8004986:	4630      	mov	r0, r6
 8004988:	47c0      	blx	r8
 800498a:	3001      	adds	r0, #1
 800498c:	d0e6      	beq.n	800495c <_printf_common+0xb4>
 800498e:	f109 0901 	add.w	r9, r9, #1
 8004992:	e7d8      	b.n	8004946 <_printf_common+0x9e>

08004994 <_printf_i>:
 8004994:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004998:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800499c:	460c      	mov	r4, r1
 800499e:	7e09      	ldrb	r1, [r1, #24]
 80049a0:	b085      	sub	sp, #20
 80049a2:	296e      	cmp	r1, #110	; 0x6e
 80049a4:	4617      	mov	r7, r2
 80049a6:	4606      	mov	r6, r0
 80049a8:	4698      	mov	r8, r3
 80049aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80049ac:	f000 80b3 	beq.w	8004b16 <_printf_i+0x182>
 80049b0:	d822      	bhi.n	80049f8 <_printf_i+0x64>
 80049b2:	2963      	cmp	r1, #99	; 0x63
 80049b4:	d036      	beq.n	8004a24 <_printf_i+0x90>
 80049b6:	d80a      	bhi.n	80049ce <_printf_i+0x3a>
 80049b8:	2900      	cmp	r1, #0
 80049ba:	f000 80b9 	beq.w	8004b30 <_printf_i+0x19c>
 80049be:	2958      	cmp	r1, #88	; 0x58
 80049c0:	f000 8083 	beq.w	8004aca <_printf_i+0x136>
 80049c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049c8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80049cc:	e032      	b.n	8004a34 <_printf_i+0xa0>
 80049ce:	2964      	cmp	r1, #100	; 0x64
 80049d0:	d001      	beq.n	80049d6 <_printf_i+0x42>
 80049d2:	2969      	cmp	r1, #105	; 0x69
 80049d4:	d1f6      	bne.n	80049c4 <_printf_i+0x30>
 80049d6:	6820      	ldr	r0, [r4, #0]
 80049d8:	6813      	ldr	r3, [r2, #0]
 80049da:	0605      	lsls	r5, r0, #24
 80049dc:	f103 0104 	add.w	r1, r3, #4
 80049e0:	d52a      	bpl.n	8004a38 <_printf_i+0xa4>
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	6011      	str	r1, [r2, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	da03      	bge.n	80049f2 <_printf_i+0x5e>
 80049ea:	222d      	movs	r2, #45	; 0x2d
 80049ec:	425b      	negs	r3, r3
 80049ee:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80049f2:	486f      	ldr	r0, [pc, #444]	; (8004bb0 <_printf_i+0x21c>)
 80049f4:	220a      	movs	r2, #10
 80049f6:	e039      	b.n	8004a6c <_printf_i+0xd8>
 80049f8:	2973      	cmp	r1, #115	; 0x73
 80049fa:	f000 809d 	beq.w	8004b38 <_printf_i+0x1a4>
 80049fe:	d808      	bhi.n	8004a12 <_printf_i+0x7e>
 8004a00:	296f      	cmp	r1, #111	; 0x6f
 8004a02:	d020      	beq.n	8004a46 <_printf_i+0xb2>
 8004a04:	2970      	cmp	r1, #112	; 0x70
 8004a06:	d1dd      	bne.n	80049c4 <_printf_i+0x30>
 8004a08:	6823      	ldr	r3, [r4, #0]
 8004a0a:	f043 0320 	orr.w	r3, r3, #32
 8004a0e:	6023      	str	r3, [r4, #0]
 8004a10:	e003      	b.n	8004a1a <_printf_i+0x86>
 8004a12:	2975      	cmp	r1, #117	; 0x75
 8004a14:	d017      	beq.n	8004a46 <_printf_i+0xb2>
 8004a16:	2978      	cmp	r1, #120	; 0x78
 8004a18:	d1d4      	bne.n	80049c4 <_printf_i+0x30>
 8004a1a:	2378      	movs	r3, #120	; 0x78
 8004a1c:	4865      	ldr	r0, [pc, #404]	; (8004bb4 <_printf_i+0x220>)
 8004a1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a22:	e055      	b.n	8004ad0 <_printf_i+0x13c>
 8004a24:	6813      	ldr	r3, [r2, #0]
 8004a26:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a2a:	1d19      	adds	r1, r3, #4
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	6011      	str	r1, [r2, #0]
 8004a30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a34:	2301      	movs	r3, #1
 8004a36:	e08c      	b.n	8004b52 <_printf_i+0x1be>
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004a3e:	6011      	str	r1, [r2, #0]
 8004a40:	bf18      	it	ne
 8004a42:	b21b      	sxthne	r3, r3
 8004a44:	e7cf      	b.n	80049e6 <_printf_i+0x52>
 8004a46:	6813      	ldr	r3, [r2, #0]
 8004a48:	6825      	ldr	r5, [r4, #0]
 8004a4a:	1d18      	adds	r0, r3, #4
 8004a4c:	6010      	str	r0, [r2, #0]
 8004a4e:	0628      	lsls	r0, r5, #24
 8004a50:	d501      	bpl.n	8004a56 <_printf_i+0xc2>
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	e002      	b.n	8004a5c <_printf_i+0xc8>
 8004a56:	0668      	lsls	r0, r5, #25
 8004a58:	d5fb      	bpl.n	8004a52 <_printf_i+0xbe>
 8004a5a:	881b      	ldrh	r3, [r3, #0]
 8004a5c:	296f      	cmp	r1, #111	; 0x6f
 8004a5e:	bf14      	ite	ne
 8004a60:	220a      	movne	r2, #10
 8004a62:	2208      	moveq	r2, #8
 8004a64:	4852      	ldr	r0, [pc, #328]	; (8004bb0 <_printf_i+0x21c>)
 8004a66:	2100      	movs	r1, #0
 8004a68:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a6c:	6865      	ldr	r5, [r4, #4]
 8004a6e:	2d00      	cmp	r5, #0
 8004a70:	60a5      	str	r5, [r4, #8]
 8004a72:	f2c0 8095 	blt.w	8004ba0 <_printf_i+0x20c>
 8004a76:	6821      	ldr	r1, [r4, #0]
 8004a78:	f021 0104 	bic.w	r1, r1, #4
 8004a7c:	6021      	str	r1, [r4, #0]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d13d      	bne.n	8004afe <_printf_i+0x16a>
 8004a82:	2d00      	cmp	r5, #0
 8004a84:	f040 808e 	bne.w	8004ba4 <_printf_i+0x210>
 8004a88:	4665      	mov	r5, ip
 8004a8a:	2a08      	cmp	r2, #8
 8004a8c:	d10b      	bne.n	8004aa6 <_printf_i+0x112>
 8004a8e:	6823      	ldr	r3, [r4, #0]
 8004a90:	07db      	lsls	r3, r3, #31
 8004a92:	d508      	bpl.n	8004aa6 <_printf_i+0x112>
 8004a94:	6923      	ldr	r3, [r4, #16]
 8004a96:	6862      	ldr	r2, [r4, #4]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	bfde      	ittt	le
 8004a9c:	2330      	movle	r3, #48	; 0x30
 8004a9e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004aa2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004aa6:	ebac 0305 	sub.w	r3, ip, r5
 8004aaa:	6123      	str	r3, [r4, #16]
 8004aac:	f8cd 8000 	str.w	r8, [sp]
 8004ab0:	463b      	mov	r3, r7
 8004ab2:	aa03      	add	r2, sp, #12
 8004ab4:	4621      	mov	r1, r4
 8004ab6:	4630      	mov	r0, r6
 8004ab8:	f7ff fef6 	bl	80048a8 <_printf_common>
 8004abc:	3001      	adds	r0, #1
 8004abe:	d14d      	bne.n	8004b5c <_printf_i+0x1c8>
 8004ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ac4:	b005      	add	sp, #20
 8004ac6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004aca:	4839      	ldr	r0, [pc, #228]	; (8004bb0 <_printf_i+0x21c>)
 8004acc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004ad0:	6813      	ldr	r3, [r2, #0]
 8004ad2:	6821      	ldr	r1, [r4, #0]
 8004ad4:	1d1d      	adds	r5, r3, #4
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	6015      	str	r5, [r2, #0]
 8004ada:	060a      	lsls	r2, r1, #24
 8004adc:	d50b      	bpl.n	8004af6 <_printf_i+0x162>
 8004ade:	07ca      	lsls	r2, r1, #31
 8004ae0:	bf44      	itt	mi
 8004ae2:	f041 0120 	orrmi.w	r1, r1, #32
 8004ae6:	6021      	strmi	r1, [r4, #0]
 8004ae8:	b91b      	cbnz	r3, 8004af2 <_printf_i+0x15e>
 8004aea:	6822      	ldr	r2, [r4, #0]
 8004aec:	f022 0220 	bic.w	r2, r2, #32
 8004af0:	6022      	str	r2, [r4, #0]
 8004af2:	2210      	movs	r2, #16
 8004af4:	e7b7      	b.n	8004a66 <_printf_i+0xd2>
 8004af6:	064d      	lsls	r5, r1, #25
 8004af8:	bf48      	it	mi
 8004afa:	b29b      	uxthmi	r3, r3
 8004afc:	e7ef      	b.n	8004ade <_printf_i+0x14a>
 8004afe:	4665      	mov	r5, ip
 8004b00:	fbb3 f1f2 	udiv	r1, r3, r2
 8004b04:	fb02 3311 	mls	r3, r2, r1, r3
 8004b08:	5cc3      	ldrb	r3, [r0, r3]
 8004b0a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004b0e:	460b      	mov	r3, r1
 8004b10:	2900      	cmp	r1, #0
 8004b12:	d1f5      	bne.n	8004b00 <_printf_i+0x16c>
 8004b14:	e7b9      	b.n	8004a8a <_printf_i+0xf6>
 8004b16:	6813      	ldr	r3, [r2, #0]
 8004b18:	6825      	ldr	r5, [r4, #0]
 8004b1a:	1d18      	adds	r0, r3, #4
 8004b1c:	6961      	ldr	r1, [r4, #20]
 8004b1e:	6010      	str	r0, [r2, #0]
 8004b20:	0628      	lsls	r0, r5, #24
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	d501      	bpl.n	8004b2a <_printf_i+0x196>
 8004b26:	6019      	str	r1, [r3, #0]
 8004b28:	e002      	b.n	8004b30 <_printf_i+0x19c>
 8004b2a:	066a      	lsls	r2, r5, #25
 8004b2c:	d5fb      	bpl.n	8004b26 <_printf_i+0x192>
 8004b2e:	8019      	strh	r1, [r3, #0]
 8004b30:	2300      	movs	r3, #0
 8004b32:	4665      	mov	r5, ip
 8004b34:	6123      	str	r3, [r4, #16]
 8004b36:	e7b9      	b.n	8004aac <_printf_i+0x118>
 8004b38:	6813      	ldr	r3, [r2, #0]
 8004b3a:	1d19      	adds	r1, r3, #4
 8004b3c:	6011      	str	r1, [r2, #0]
 8004b3e:	681d      	ldr	r5, [r3, #0]
 8004b40:	6862      	ldr	r2, [r4, #4]
 8004b42:	2100      	movs	r1, #0
 8004b44:	4628      	mov	r0, r5
 8004b46:	f000 f8e1 	bl	8004d0c <memchr>
 8004b4a:	b108      	cbz	r0, 8004b50 <_printf_i+0x1bc>
 8004b4c:	1b40      	subs	r0, r0, r5
 8004b4e:	6060      	str	r0, [r4, #4]
 8004b50:	6863      	ldr	r3, [r4, #4]
 8004b52:	6123      	str	r3, [r4, #16]
 8004b54:	2300      	movs	r3, #0
 8004b56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b5a:	e7a7      	b.n	8004aac <_printf_i+0x118>
 8004b5c:	6923      	ldr	r3, [r4, #16]
 8004b5e:	462a      	mov	r2, r5
 8004b60:	4639      	mov	r1, r7
 8004b62:	4630      	mov	r0, r6
 8004b64:	47c0      	blx	r8
 8004b66:	3001      	adds	r0, #1
 8004b68:	d0aa      	beq.n	8004ac0 <_printf_i+0x12c>
 8004b6a:	6823      	ldr	r3, [r4, #0]
 8004b6c:	079b      	lsls	r3, r3, #30
 8004b6e:	d413      	bmi.n	8004b98 <_printf_i+0x204>
 8004b70:	68e0      	ldr	r0, [r4, #12]
 8004b72:	9b03      	ldr	r3, [sp, #12]
 8004b74:	4298      	cmp	r0, r3
 8004b76:	bfb8      	it	lt
 8004b78:	4618      	movlt	r0, r3
 8004b7a:	e7a3      	b.n	8004ac4 <_printf_i+0x130>
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	464a      	mov	r2, r9
 8004b80:	4639      	mov	r1, r7
 8004b82:	4630      	mov	r0, r6
 8004b84:	47c0      	blx	r8
 8004b86:	3001      	adds	r0, #1
 8004b88:	d09a      	beq.n	8004ac0 <_printf_i+0x12c>
 8004b8a:	3501      	adds	r5, #1
 8004b8c:	68e3      	ldr	r3, [r4, #12]
 8004b8e:	9a03      	ldr	r2, [sp, #12]
 8004b90:	1a9b      	subs	r3, r3, r2
 8004b92:	42ab      	cmp	r3, r5
 8004b94:	dcf2      	bgt.n	8004b7c <_printf_i+0x1e8>
 8004b96:	e7eb      	b.n	8004b70 <_printf_i+0x1dc>
 8004b98:	2500      	movs	r5, #0
 8004b9a:	f104 0919 	add.w	r9, r4, #25
 8004b9e:	e7f5      	b.n	8004b8c <_printf_i+0x1f8>
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d1ac      	bne.n	8004afe <_printf_i+0x16a>
 8004ba4:	7803      	ldrb	r3, [r0, #0]
 8004ba6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004baa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004bae:	e76c      	b.n	8004a8a <_printf_i+0xf6>
 8004bb0:	08005f95 	.word	0x08005f95
 8004bb4:	08005fa6 	.word	0x08005fa6

08004bb8 <_sbrk_r>:
 8004bb8:	b538      	push	{r3, r4, r5, lr}
 8004bba:	2300      	movs	r3, #0
 8004bbc:	4c05      	ldr	r4, [pc, #20]	; (8004bd4 <_sbrk_r+0x1c>)
 8004bbe:	4605      	mov	r5, r0
 8004bc0:	4608      	mov	r0, r1
 8004bc2:	6023      	str	r3, [r4, #0]
 8004bc4:	f7fd fa00 	bl	8001fc8 <_sbrk>
 8004bc8:	1c43      	adds	r3, r0, #1
 8004bca:	d102      	bne.n	8004bd2 <_sbrk_r+0x1a>
 8004bcc:	6823      	ldr	r3, [r4, #0]
 8004bce:	b103      	cbz	r3, 8004bd2 <_sbrk_r+0x1a>
 8004bd0:	602b      	str	r3, [r5, #0]
 8004bd2:	bd38      	pop	{r3, r4, r5, pc}
 8004bd4:	20000234 	.word	0x20000234

08004bd8 <__sread>:
 8004bd8:	b510      	push	{r4, lr}
 8004bda:	460c      	mov	r4, r1
 8004bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004be0:	f000 f8a4 	bl	8004d2c <_read_r>
 8004be4:	2800      	cmp	r0, #0
 8004be6:	bfab      	itete	ge
 8004be8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004bea:	89a3      	ldrhlt	r3, [r4, #12]
 8004bec:	181b      	addge	r3, r3, r0
 8004bee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004bf2:	bfac      	ite	ge
 8004bf4:	6563      	strge	r3, [r4, #84]	; 0x54
 8004bf6:	81a3      	strhlt	r3, [r4, #12]
 8004bf8:	bd10      	pop	{r4, pc}

08004bfa <__swrite>:
 8004bfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bfe:	461f      	mov	r7, r3
 8004c00:	898b      	ldrh	r3, [r1, #12]
 8004c02:	4605      	mov	r5, r0
 8004c04:	05db      	lsls	r3, r3, #23
 8004c06:	460c      	mov	r4, r1
 8004c08:	4616      	mov	r6, r2
 8004c0a:	d505      	bpl.n	8004c18 <__swrite+0x1e>
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c14:	f000 f868 	bl	8004ce8 <_lseek_r>
 8004c18:	89a3      	ldrh	r3, [r4, #12]
 8004c1a:	4632      	mov	r2, r6
 8004c1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c20:	81a3      	strh	r3, [r4, #12]
 8004c22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c26:	463b      	mov	r3, r7
 8004c28:	4628      	mov	r0, r5
 8004c2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c2e:	f000 b817 	b.w	8004c60 <_write_r>

08004c32 <__sseek>:
 8004c32:	b510      	push	{r4, lr}
 8004c34:	460c      	mov	r4, r1
 8004c36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c3a:	f000 f855 	bl	8004ce8 <_lseek_r>
 8004c3e:	1c43      	adds	r3, r0, #1
 8004c40:	89a3      	ldrh	r3, [r4, #12]
 8004c42:	bf15      	itete	ne
 8004c44:	6560      	strne	r0, [r4, #84]	; 0x54
 8004c46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004c4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004c4e:	81a3      	strheq	r3, [r4, #12]
 8004c50:	bf18      	it	ne
 8004c52:	81a3      	strhne	r3, [r4, #12]
 8004c54:	bd10      	pop	{r4, pc}

08004c56 <__sclose>:
 8004c56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c5a:	f000 b813 	b.w	8004c84 <_close_r>
	...

08004c60 <_write_r>:
 8004c60:	b538      	push	{r3, r4, r5, lr}
 8004c62:	4605      	mov	r5, r0
 8004c64:	4608      	mov	r0, r1
 8004c66:	4611      	mov	r1, r2
 8004c68:	2200      	movs	r2, #0
 8004c6a:	4c05      	ldr	r4, [pc, #20]	; (8004c80 <_write_r+0x20>)
 8004c6c:	6022      	str	r2, [r4, #0]
 8004c6e:	461a      	mov	r2, r3
 8004c70:	f7fc fd47 	bl	8001702 <_write>
 8004c74:	1c43      	adds	r3, r0, #1
 8004c76:	d102      	bne.n	8004c7e <_write_r+0x1e>
 8004c78:	6823      	ldr	r3, [r4, #0]
 8004c7a:	b103      	cbz	r3, 8004c7e <_write_r+0x1e>
 8004c7c:	602b      	str	r3, [r5, #0]
 8004c7e:	bd38      	pop	{r3, r4, r5, pc}
 8004c80:	20000234 	.word	0x20000234

08004c84 <_close_r>:
 8004c84:	b538      	push	{r3, r4, r5, lr}
 8004c86:	2300      	movs	r3, #0
 8004c88:	4c05      	ldr	r4, [pc, #20]	; (8004ca0 <_close_r+0x1c>)
 8004c8a:	4605      	mov	r5, r0
 8004c8c:	4608      	mov	r0, r1
 8004c8e:	6023      	str	r3, [r4, #0]
 8004c90:	f7fd f969 	bl	8001f66 <_close>
 8004c94:	1c43      	adds	r3, r0, #1
 8004c96:	d102      	bne.n	8004c9e <_close_r+0x1a>
 8004c98:	6823      	ldr	r3, [r4, #0]
 8004c9a:	b103      	cbz	r3, 8004c9e <_close_r+0x1a>
 8004c9c:	602b      	str	r3, [r5, #0]
 8004c9e:	bd38      	pop	{r3, r4, r5, pc}
 8004ca0:	20000234 	.word	0x20000234

08004ca4 <_fstat_r>:
 8004ca4:	b538      	push	{r3, r4, r5, lr}
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	4c06      	ldr	r4, [pc, #24]	; (8004cc4 <_fstat_r+0x20>)
 8004caa:	4605      	mov	r5, r0
 8004cac:	4608      	mov	r0, r1
 8004cae:	4611      	mov	r1, r2
 8004cb0:	6023      	str	r3, [r4, #0]
 8004cb2:	f7fd f963 	bl	8001f7c <_fstat>
 8004cb6:	1c43      	adds	r3, r0, #1
 8004cb8:	d102      	bne.n	8004cc0 <_fstat_r+0x1c>
 8004cba:	6823      	ldr	r3, [r4, #0]
 8004cbc:	b103      	cbz	r3, 8004cc0 <_fstat_r+0x1c>
 8004cbe:	602b      	str	r3, [r5, #0]
 8004cc0:	bd38      	pop	{r3, r4, r5, pc}
 8004cc2:	bf00      	nop
 8004cc4:	20000234 	.word	0x20000234

08004cc8 <_isatty_r>:
 8004cc8:	b538      	push	{r3, r4, r5, lr}
 8004cca:	2300      	movs	r3, #0
 8004ccc:	4c05      	ldr	r4, [pc, #20]	; (8004ce4 <_isatty_r+0x1c>)
 8004cce:	4605      	mov	r5, r0
 8004cd0:	4608      	mov	r0, r1
 8004cd2:	6023      	str	r3, [r4, #0]
 8004cd4:	f7fd f961 	bl	8001f9a <_isatty>
 8004cd8:	1c43      	adds	r3, r0, #1
 8004cda:	d102      	bne.n	8004ce2 <_isatty_r+0x1a>
 8004cdc:	6823      	ldr	r3, [r4, #0]
 8004cde:	b103      	cbz	r3, 8004ce2 <_isatty_r+0x1a>
 8004ce0:	602b      	str	r3, [r5, #0]
 8004ce2:	bd38      	pop	{r3, r4, r5, pc}
 8004ce4:	20000234 	.word	0x20000234

08004ce8 <_lseek_r>:
 8004ce8:	b538      	push	{r3, r4, r5, lr}
 8004cea:	4605      	mov	r5, r0
 8004cec:	4608      	mov	r0, r1
 8004cee:	4611      	mov	r1, r2
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	4c05      	ldr	r4, [pc, #20]	; (8004d08 <_lseek_r+0x20>)
 8004cf4:	6022      	str	r2, [r4, #0]
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	f7fd f959 	bl	8001fae <_lseek>
 8004cfc:	1c43      	adds	r3, r0, #1
 8004cfe:	d102      	bne.n	8004d06 <_lseek_r+0x1e>
 8004d00:	6823      	ldr	r3, [r4, #0]
 8004d02:	b103      	cbz	r3, 8004d06 <_lseek_r+0x1e>
 8004d04:	602b      	str	r3, [r5, #0]
 8004d06:	bd38      	pop	{r3, r4, r5, pc}
 8004d08:	20000234 	.word	0x20000234

08004d0c <memchr>:
 8004d0c:	b510      	push	{r4, lr}
 8004d0e:	b2c9      	uxtb	r1, r1
 8004d10:	4402      	add	r2, r0
 8004d12:	4290      	cmp	r0, r2
 8004d14:	4603      	mov	r3, r0
 8004d16:	d101      	bne.n	8004d1c <memchr+0x10>
 8004d18:	2300      	movs	r3, #0
 8004d1a:	e003      	b.n	8004d24 <memchr+0x18>
 8004d1c:	781c      	ldrb	r4, [r3, #0]
 8004d1e:	3001      	adds	r0, #1
 8004d20:	428c      	cmp	r4, r1
 8004d22:	d1f6      	bne.n	8004d12 <memchr+0x6>
 8004d24:	4618      	mov	r0, r3
 8004d26:	bd10      	pop	{r4, pc}

08004d28 <__malloc_lock>:
 8004d28:	4770      	bx	lr

08004d2a <__malloc_unlock>:
 8004d2a:	4770      	bx	lr

08004d2c <_read_r>:
 8004d2c:	b538      	push	{r3, r4, r5, lr}
 8004d2e:	4605      	mov	r5, r0
 8004d30:	4608      	mov	r0, r1
 8004d32:	4611      	mov	r1, r2
 8004d34:	2200      	movs	r2, #0
 8004d36:	4c05      	ldr	r4, [pc, #20]	; (8004d4c <_read_r+0x20>)
 8004d38:	6022      	str	r2, [r4, #0]
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	f7fd f8f6 	bl	8001f2c <_read>
 8004d40:	1c43      	adds	r3, r0, #1
 8004d42:	d102      	bne.n	8004d4a <_read_r+0x1e>
 8004d44:	6823      	ldr	r3, [r4, #0]
 8004d46:	b103      	cbz	r3, 8004d4a <_read_r+0x1e>
 8004d48:	602b      	str	r3, [r5, #0]
 8004d4a:	bd38      	pop	{r3, r4, r5, pc}
 8004d4c:	20000234 	.word	0x20000234

08004d50 <pow>:
 8004d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d54:	b08f      	sub	sp, #60	; 0x3c
 8004d56:	461d      	mov	r5, r3
 8004d58:	4680      	mov	r8, r0
 8004d5a:	4689      	mov	r9, r1
 8004d5c:	4614      	mov	r4, r2
 8004d5e:	f000 f9a7 	bl	80050b0 <__ieee754_pow>
 8004d62:	4fa1      	ldr	r7, [pc, #644]	; (8004fe8 <pow+0x298>)
 8004d64:	e9cd 0100 	strd	r0, r1, [sp]
 8004d68:	f997 3000 	ldrsb.w	r3, [r7]
 8004d6c:	463e      	mov	r6, r7
 8004d6e:	9302      	str	r3, [sp, #8]
 8004d70:	3301      	adds	r3, #1
 8004d72:	d05f      	beq.n	8004e34 <pow+0xe4>
 8004d74:	4622      	mov	r2, r4
 8004d76:	462b      	mov	r3, r5
 8004d78:	4620      	mov	r0, r4
 8004d7a:	4629      	mov	r1, r5
 8004d7c:	f7fb fe3e 	bl	80009fc <__aeabi_dcmpun>
 8004d80:	4682      	mov	sl, r0
 8004d82:	2800      	cmp	r0, #0
 8004d84:	d156      	bne.n	8004e34 <pow+0xe4>
 8004d86:	4642      	mov	r2, r8
 8004d88:	464b      	mov	r3, r9
 8004d8a:	4640      	mov	r0, r8
 8004d8c:	4649      	mov	r1, r9
 8004d8e:	f7fb fe35 	bl	80009fc <__aeabi_dcmpun>
 8004d92:	9003      	str	r0, [sp, #12]
 8004d94:	b1e8      	cbz	r0, 8004dd2 <pow+0x82>
 8004d96:	2200      	movs	r2, #0
 8004d98:	2300      	movs	r3, #0
 8004d9a:	4620      	mov	r0, r4
 8004d9c:	4629      	mov	r1, r5
 8004d9e:	f7fb fdfb 	bl	8000998 <__aeabi_dcmpeq>
 8004da2:	2800      	cmp	r0, #0
 8004da4:	d046      	beq.n	8004e34 <pow+0xe4>
 8004da6:	2301      	movs	r3, #1
 8004da8:	2200      	movs	r2, #0
 8004daa:	9304      	str	r3, [sp, #16]
 8004dac:	4b8f      	ldr	r3, [pc, #572]	; (8004fec <pow+0x29c>)
 8004dae:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8004db2:	9305      	str	r3, [sp, #20]
 8004db4:	4b8e      	ldr	r3, [pc, #568]	; (8004ff0 <pow+0x2a0>)
 8004db6:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8004dba:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004dbe:	9b02      	ldr	r3, [sp, #8]
 8004dc0:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d031      	beq.n	8004e2c <pow+0xdc>
 8004dc8:	a804      	add	r0, sp, #16
 8004dca:	f000 ff31 	bl	8005c30 <matherr>
 8004dce:	bb38      	cbnz	r0, 8004e20 <pow+0xd0>
 8004dd0:	e058      	b.n	8004e84 <pow+0x134>
 8004dd2:	f04f 0a00 	mov.w	sl, #0
 8004dd6:	f04f 0b00 	mov.w	fp, #0
 8004dda:	4652      	mov	r2, sl
 8004ddc:	465b      	mov	r3, fp
 8004dde:	4640      	mov	r0, r8
 8004de0:	4649      	mov	r1, r9
 8004de2:	f7fb fdd9 	bl	8000998 <__aeabi_dcmpeq>
 8004de6:	2800      	cmp	r0, #0
 8004de8:	d051      	beq.n	8004e8e <pow+0x13e>
 8004dea:	4652      	mov	r2, sl
 8004dec:	465b      	mov	r3, fp
 8004dee:	4620      	mov	r0, r4
 8004df0:	4629      	mov	r1, r5
 8004df2:	f7fb fdd1 	bl	8000998 <__aeabi_dcmpeq>
 8004df6:	4606      	mov	r6, r0
 8004df8:	b308      	cbz	r0, 8004e3e <pow+0xee>
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	9304      	str	r3, [sp, #16]
 8004dfe:	4b7b      	ldr	r3, [pc, #492]	; (8004fec <pow+0x29c>)
 8004e00:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8004e04:	9305      	str	r3, [sp, #20]
 8004e06:	9b03      	ldr	r3, [sp, #12]
 8004e08:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8004e0c:	930c      	str	r3, [sp, #48]	; 0x30
 8004e0e:	9b02      	ldr	r3, [sp, #8]
 8004e10:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d0d7      	beq.n	8004dc8 <pow+0x78>
 8004e18:	2200      	movs	r2, #0
 8004e1a:	4b75      	ldr	r3, [pc, #468]	; (8004ff0 <pow+0x2a0>)
 8004e1c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004e20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e22:	b11b      	cbz	r3, 8004e2c <pow+0xdc>
 8004e24:	f7ff f804 	bl	8003e30 <__errno>
 8004e28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e2a:	6003      	str	r3, [r0, #0]
 8004e2c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 8004e30:	e9cd 3400 	strd	r3, r4, [sp]
 8004e34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004e38:	b00f      	add	sp, #60	; 0x3c
 8004e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e3e:	4620      	mov	r0, r4
 8004e40:	4629      	mov	r1, r5
 8004e42:	f000 feef 	bl	8005c24 <finite>
 8004e46:	2800      	cmp	r0, #0
 8004e48:	d0f4      	beq.n	8004e34 <pow+0xe4>
 8004e4a:	4652      	mov	r2, sl
 8004e4c:	465b      	mov	r3, fp
 8004e4e:	4620      	mov	r0, r4
 8004e50:	4629      	mov	r1, r5
 8004e52:	f7fb fdab 	bl	80009ac <__aeabi_dcmplt>
 8004e56:	2800      	cmp	r0, #0
 8004e58:	d0ec      	beq.n	8004e34 <pow+0xe4>
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	9304      	str	r3, [sp, #16]
 8004e5e:	4b63      	ldr	r3, [pc, #396]	; (8004fec <pow+0x29c>)
 8004e60:	960c      	str	r6, [sp, #48]	; 0x30
 8004e62:	9305      	str	r3, [sp, #20]
 8004e64:	f997 3000 	ldrsb.w	r3, [r7]
 8004e68:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8004e6c:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8004e70:	b913      	cbnz	r3, 8004e78 <pow+0x128>
 8004e72:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8004e76:	e7a7      	b.n	8004dc8 <pow+0x78>
 8004e78:	2000      	movs	r0, #0
 8004e7a:	495e      	ldr	r1, [pc, #376]	; (8004ff4 <pow+0x2a4>)
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004e82:	d1a1      	bne.n	8004dc8 <pow+0x78>
 8004e84:	f7fe ffd4 	bl	8003e30 <__errno>
 8004e88:	2321      	movs	r3, #33	; 0x21
 8004e8a:	6003      	str	r3, [r0, #0]
 8004e8c:	e7c8      	b.n	8004e20 <pow+0xd0>
 8004e8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004e92:	f000 fec7 	bl	8005c24 <finite>
 8004e96:	9002      	str	r0, [sp, #8]
 8004e98:	2800      	cmp	r0, #0
 8004e9a:	d177      	bne.n	8004f8c <pow+0x23c>
 8004e9c:	4640      	mov	r0, r8
 8004e9e:	4649      	mov	r1, r9
 8004ea0:	f000 fec0 	bl	8005c24 <finite>
 8004ea4:	2800      	cmp	r0, #0
 8004ea6:	d071      	beq.n	8004f8c <pow+0x23c>
 8004ea8:	4620      	mov	r0, r4
 8004eaa:	4629      	mov	r1, r5
 8004eac:	f000 feba 	bl	8005c24 <finite>
 8004eb0:	2800      	cmp	r0, #0
 8004eb2:	d06b      	beq.n	8004f8c <pow+0x23c>
 8004eb4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004eb8:	4619      	mov	r1, r3
 8004eba:	4610      	mov	r0, r2
 8004ebc:	f7fb fd9e 	bl	80009fc <__aeabi_dcmpun>
 8004ec0:	f997 7000 	ldrsb.w	r7, [r7]
 8004ec4:	4b49      	ldr	r3, [pc, #292]	; (8004fec <pow+0x29c>)
 8004ec6:	b1a0      	cbz	r0, 8004ef2 <pow+0x1a2>
 8004ec8:	2201      	movs	r2, #1
 8004eca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004ece:	9b02      	ldr	r3, [sp, #8]
 8004ed0:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8004ed4:	930c      	str	r3, [sp, #48]	; 0x30
 8004ed6:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8004eda:	2f00      	cmp	r7, #0
 8004edc:	d0c9      	beq.n	8004e72 <pow+0x122>
 8004ede:	4652      	mov	r2, sl
 8004ee0:	465b      	mov	r3, fp
 8004ee2:	4650      	mov	r0, sl
 8004ee4:	4659      	mov	r1, fp
 8004ee6:	f7fb fc19 	bl	800071c <__aeabi_ddiv>
 8004eea:	2f02      	cmp	r7, #2
 8004eec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004ef0:	e7c7      	b.n	8004e82 <pow+0x132>
 8004ef2:	2203      	movs	r2, #3
 8004ef4:	900c      	str	r0, [sp, #48]	; 0x30
 8004ef6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004efa:	4620      	mov	r0, r4
 8004efc:	4629      	mov	r1, r5
 8004efe:	2200      	movs	r2, #0
 8004f00:	4b3d      	ldr	r3, [pc, #244]	; (8004ff8 <pow+0x2a8>)
 8004f02:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8004f06:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8004f0a:	f7fb fadd 	bl	80004c8 <__aeabi_dmul>
 8004f0e:	4604      	mov	r4, r0
 8004f10:	460d      	mov	r5, r1
 8004f12:	bb17      	cbnz	r7, 8004f5a <pow+0x20a>
 8004f14:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004f18:	4b38      	ldr	r3, [pc, #224]	; (8004ffc <pow+0x2ac>)
 8004f1a:	4640      	mov	r0, r8
 8004f1c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004f20:	4649      	mov	r1, r9
 8004f22:	4652      	mov	r2, sl
 8004f24:	465b      	mov	r3, fp
 8004f26:	f7fb fd41 	bl	80009ac <__aeabi_dcmplt>
 8004f2a:	2800      	cmp	r0, #0
 8004f2c:	d054      	beq.n	8004fd8 <pow+0x288>
 8004f2e:	4620      	mov	r0, r4
 8004f30:	4629      	mov	r1, r5
 8004f32:	f000 fe85 	bl	8005c40 <rint>
 8004f36:	4622      	mov	r2, r4
 8004f38:	462b      	mov	r3, r5
 8004f3a:	f7fb fd2d 	bl	8000998 <__aeabi_dcmpeq>
 8004f3e:	b920      	cbnz	r0, 8004f4a <pow+0x1fa>
 8004f40:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004f44:	4b2e      	ldr	r3, [pc, #184]	; (8005000 <pow+0x2b0>)
 8004f46:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004f4a:	f996 3000 	ldrsb.w	r3, [r6]
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d142      	bne.n	8004fd8 <pow+0x288>
 8004f52:	f7fe ff6d 	bl	8003e30 <__errno>
 8004f56:	2322      	movs	r3, #34	; 0x22
 8004f58:	e797      	b.n	8004e8a <pow+0x13a>
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	4b29      	ldr	r3, [pc, #164]	; (8005004 <pow+0x2b4>)
 8004f5e:	4640      	mov	r0, r8
 8004f60:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004f64:	4649      	mov	r1, r9
 8004f66:	4652      	mov	r2, sl
 8004f68:	465b      	mov	r3, fp
 8004f6a:	f7fb fd1f 	bl	80009ac <__aeabi_dcmplt>
 8004f6e:	2800      	cmp	r0, #0
 8004f70:	d0eb      	beq.n	8004f4a <pow+0x1fa>
 8004f72:	4620      	mov	r0, r4
 8004f74:	4629      	mov	r1, r5
 8004f76:	f000 fe63 	bl	8005c40 <rint>
 8004f7a:	4622      	mov	r2, r4
 8004f7c:	462b      	mov	r3, r5
 8004f7e:	f7fb fd0b 	bl	8000998 <__aeabi_dcmpeq>
 8004f82:	2800      	cmp	r0, #0
 8004f84:	d1e1      	bne.n	8004f4a <pow+0x1fa>
 8004f86:	2200      	movs	r2, #0
 8004f88:	4b1a      	ldr	r3, [pc, #104]	; (8004ff4 <pow+0x2a4>)
 8004f8a:	e7dc      	b.n	8004f46 <pow+0x1f6>
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f92:	2300      	movs	r3, #0
 8004f94:	f7fb fd00 	bl	8000998 <__aeabi_dcmpeq>
 8004f98:	2800      	cmp	r0, #0
 8004f9a:	f43f af4b 	beq.w	8004e34 <pow+0xe4>
 8004f9e:	4640      	mov	r0, r8
 8004fa0:	4649      	mov	r1, r9
 8004fa2:	f000 fe3f 	bl	8005c24 <finite>
 8004fa6:	2800      	cmp	r0, #0
 8004fa8:	f43f af44 	beq.w	8004e34 <pow+0xe4>
 8004fac:	4620      	mov	r0, r4
 8004fae:	4629      	mov	r1, r5
 8004fb0:	f000 fe38 	bl	8005c24 <finite>
 8004fb4:	2800      	cmp	r0, #0
 8004fb6:	f43f af3d 	beq.w	8004e34 <pow+0xe4>
 8004fba:	2304      	movs	r3, #4
 8004fbc:	9304      	str	r3, [sp, #16]
 8004fbe:	4b0b      	ldr	r3, [pc, #44]	; (8004fec <pow+0x29c>)
 8004fc0:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8004fc4:	9305      	str	r3, [sp, #20]
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	2400      	movs	r4, #0
 8004fca:	930c      	str	r3, [sp, #48]	; 0x30
 8004fcc:	2300      	movs	r3, #0
 8004fce:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8004fd2:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8004fd6:	e7b8      	b.n	8004f4a <pow+0x1fa>
 8004fd8:	a804      	add	r0, sp, #16
 8004fda:	f000 fe29 	bl	8005c30 <matherr>
 8004fde:	2800      	cmp	r0, #0
 8004fe0:	f47f af1e 	bne.w	8004e20 <pow+0xd0>
 8004fe4:	e7b5      	b.n	8004f52 <pow+0x202>
 8004fe6:	bf00      	nop
 8004fe8:	200000dc 	.word	0x200000dc
 8004fec:	08005fb7 	.word	0x08005fb7
 8004ff0:	3ff00000 	.word	0x3ff00000
 8004ff4:	fff00000 	.word	0xfff00000
 8004ff8:	3fe00000 	.word	0x3fe00000
 8004ffc:	47efffff 	.word	0x47efffff
 8005000:	c7efffff 	.word	0xc7efffff
 8005004:	7ff00000 	.word	0x7ff00000

08005008 <sqrt>:
 8005008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800500c:	b08b      	sub	sp, #44	; 0x2c
 800500e:	4604      	mov	r4, r0
 8005010:	460d      	mov	r5, r1
 8005012:	f000 fd57 	bl	8005ac4 <__ieee754_sqrt>
 8005016:	4b24      	ldr	r3, [pc, #144]	; (80050a8 <sqrt+0xa0>)
 8005018:	4680      	mov	r8, r0
 800501a:	f993 a000 	ldrsb.w	sl, [r3]
 800501e:	4689      	mov	r9, r1
 8005020:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005024:	d02b      	beq.n	800507e <sqrt+0x76>
 8005026:	4622      	mov	r2, r4
 8005028:	462b      	mov	r3, r5
 800502a:	4620      	mov	r0, r4
 800502c:	4629      	mov	r1, r5
 800502e:	f7fb fce5 	bl	80009fc <__aeabi_dcmpun>
 8005032:	4683      	mov	fp, r0
 8005034:	bb18      	cbnz	r0, 800507e <sqrt+0x76>
 8005036:	2600      	movs	r6, #0
 8005038:	2700      	movs	r7, #0
 800503a:	4632      	mov	r2, r6
 800503c:	463b      	mov	r3, r7
 800503e:	4620      	mov	r0, r4
 8005040:	4629      	mov	r1, r5
 8005042:	f7fb fcb3 	bl	80009ac <__aeabi_dcmplt>
 8005046:	b1d0      	cbz	r0, 800507e <sqrt+0x76>
 8005048:	2301      	movs	r3, #1
 800504a:	9300      	str	r3, [sp, #0]
 800504c:	4b17      	ldr	r3, [pc, #92]	; (80050ac <sqrt+0xa4>)
 800504e:	f8cd b020 	str.w	fp, [sp, #32]
 8005052:	9301      	str	r3, [sp, #4]
 8005054:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8005058:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800505c:	f1ba 0f00 	cmp.w	sl, #0
 8005060:	d112      	bne.n	8005088 <sqrt+0x80>
 8005062:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8005066:	4668      	mov	r0, sp
 8005068:	f000 fde2 	bl	8005c30 <matherr>
 800506c:	b1b8      	cbz	r0, 800509e <sqrt+0x96>
 800506e:	9b08      	ldr	r3, [sp, #32]
 8005070:	b11b      	cbz	r3, 800507a <sqrt+0x72>
 8005072:	f7fe fedd 	bl	8003e30 <__errno>
 8005076:	9b08      	ldr	r3, [sp, #32]
 8005078:	6003      	str	r3, [r0, #0]
 800507a:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800507e:	4640      	mov	r0, r8
 8005080:	4649      	mov	r1, r9
 8005082:	b00b      	add	sp, #44	; 0x2c
 8005084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005088:	4632      	mov	r2, r6
 800508a:	463b      	mov	r3, r7
 800508c:	4630      	mov	r0, r6
 800508e:	4639      	mov	r1, r7
 8005090:	f7fb fb44 	bl	800071c <__aeabi_ddiv>
 8005094:	f1ba 0f02 	cmp.w	sl, #2
 8005098:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800509c:	d1e3      	bne.n	8005066 <sqrt+0x5e>
 800509e:	f7fe fec7 	bl	8003e30 <__errno>
 80050a2:	2321      	movs	r3, #33	; 0x21
 80050a4:	6003      	str	r3, [r0, #0]
 80050a6:	e7e2      	b.n	800506e <sqrt+0x66>
 80050a8:	200000dc 	.word	0x200000dc
 80050ac:	08005fbb 	.word	0x08005fbb

080050b0 <__ieee754_pow>:
 80050b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050b4:	b091      	sub	sp, #68	; 0x44
 80050b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80050ba:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 80050be:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80050c2:	ea55 0302 	orrs.w	r3, r5, r2
 80050c6:	4607      	mov	r7, r0
 80050c8:	4688      	mov	r8, r1
 80050ca:	f000 84b7 	beq.w	8005a3c <__ieee754_pow+0x98c>
 80050ce:	4b80      	ldr	r3, [pc, #512]	; (80052d0 <__ieee754_pow+0x220>)
 80050d0:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 80050d4:	429c      	cmp	r4, r3
 80050d6:	4689      	mov	r9, r1
 80050d8:	4682      	mov	sl, r0
 80050da:	dc09      	bgt.n	80050f0 <__ieee754_pow+0x40>
 80050dc:	d103      	bne.n	80050e6 <__ieee754_pow+0x36>
 80050de:	b938      	cbnz	r0, 80050f0 <__ieee754_pow+0x40>
 80050e0:	42a5      	cmp	r5, r4
 80050e2:	dc0d      	bgt.n	8005100 <__ieee754_pow+0x50>
 80050e4:	e001      	b.n	80050ea <__ieee754_pow+0x3a>
 80050e6:	429d      	cmp	r5, r3
 80050e8:	dc02      	bgt.n	80050f0 <__ieee754_pow+0x40>
 80050ea:	429d      	cmp	r5, r3
 80050ec:	d10e      	bne.n	800510c <__ieee754_pow+0x5c>
 80050ee:	b16a      	cbz	r2, 800510c <__ieee754_pow+0x5c>
 80050f0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80050f4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80050f8:	ea54 030a 	orrs.w	r3, r4, sl
 80050fc:	f000 849e 	beq.w	8005a3c <__ieee754_pow+0x98c>
 8005100:	4874      	ldr	r0, [pc, #464]	; (80052d4 <__ieee754_pow+0x224>)
 8005102:	b011      	add	sp, #68	; 0x44
 8005104:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005108:	f000 bd94 	b.w	8005c34 <nan>
 800510c:	f1b9 0f00 	cmp.w	r9, #0
 8005110:	da53      	bge.n	80051ba <__ieee754_pow+0x10a>
 8005112:	4b71      	ldr	r3, [pc, #452]	; (80052d8 <__ieee754_pow+0x228>)
 8005114:	429d      	cmp	r5, r3
 8005116:	dc4e      	bgt.n	80051b6 <__ieee754_pow+0x106>
 8005118:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800511c:	429d      	cmp	r5, r3
 800511e:	dd4c      	ble.n	80051ba <__ieee754_pow+0x10a>
 8005120:	152b      	asrs	r3, r5, #20
 8005122:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005126:	2b14      	cmp	r3, #20
 8005128:	dd28      	ble.n	800517c <__ieee754_pow+0xcc>
 800512a:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800512e:	fa22 f103 	lsr.w	r1, r2, r3
 8005132:	fa01 f303 	lsl.w	r3, r1, r3
 8005136:	4293      	cmp	r3, r2
 8005138:	d13f      	bne.n	80051ba <__ieee754_pow+0x10a>
 800513a:	f001 0101 	and.w	r1, r1, #1
 800513e:	f1c1 0302 	rsb	r3, r1, #2
 8005142:	9300      	str	r3, [sp, #0]
 8005144:	2a00      	cmp	r2, #0
 8005146:	d15c      	bne.n	8005202 <__ieee754_pow+0x152>
 8005148:	4b61      	ldr	r3, [pc, #388]	; (80052d0 <__ieee754_pow+0x220>)
 800514a:	429d      	cmp	r5, r3
 800514c:	d126      	bne.n	800519c <__ieee754_pow+0xec>
 800514e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005152:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005156:	ea53 030a 	orrs.w	r3, r3, sl
 800515a:	f000 846f 	beq.w	8005a3c <__ieee754_pow+0x98c>
 800515e:	4b5f      	ldr	r3, [pc, #380]	; (80052dc <__ieee754_pow+0x22c>)
 8005160:	429c      	cmp	r4, r3
 8005162:	dd2c      	ble.n	80051be <__ieee754_pow+0x10e>
 8005164:	2e00      	cmp	r6, #0
 8005166:	f280 846f 	bge.w	8005a48 <__ieee754_pow+0x998>
 800516a:	f04f 0b00 	mov.w	fp, #0
 800516e:	f04f 0c00 	mov.w	ip, #0
 8005172:	4658      	mov	r0, fp
 8005174:	4661      	mov	r1, ip
 8005176:	b011      	add	sp, #68	; 0x44
 8005178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800517c:	2a00      	cmp	r2, #0
 800517e:	d13e      	bne.n	80051fe <__ieee754_pow+0x14e>
 8005180:	f1c3 0314 	rsb	r3, r3, #20
 8005184:	fa45 f103 	asr.w	r1, r5, r3
 8005188:	fa01 f303 	lsl.w	r3, r1, r3
 800518c:	42ab      	cmp	r3, r5
 800518e:	f040 8463 	bne.w	8005a58 <__ieee754_pow+0x9a8>
 8005192:	f001 0101 	and.w	r1, r1, #1
 8005196:	f1c1 0302 	rsb	r3, r1, #2
 800519a:	9300      	str	r3, [sp, #0]
 800519c:	4b50      	ldr	r3, [pc, #320]	; (80052e0 <__ieee754_pow+0x230>)
 800519e:	429d      	cmp	r5, r3
 80051a0:	d114      	bne.n	80051cc <__ieee754_pow+0x11c>
 80051a2:	2e00      	cmp	r6, #0
 80051a4:	f280 8454 	bge.w	8005a50 <__ieee754_pow+0x9a0>
 80051a8:	463a      	mov	r2, r7
 80051aa:	4643      	mov	r3, r8
 80051ac:	2000      	movs	r0, #0
 80051ae:	494c      	ldr	r1, [pc, #304]	; (80052e0 <__ieee754_pow+0x230>)
 80051b0:	f7fb fab4 	bl	800071c <__aeabi_ddiv>
 80051b4:	e013      	b.n	80051de <__ieee754_pow+0x12e>
 80051b6:	2302      	movs	r3, #2
 80051b8:	e7c3      	b.n	8005142 <__ieee754_pow+0x92>
 80051ba:	2300      	movs	r3, #0
 80051bc:	e7c1      	b.n	8005142 <__ieee754_pow+0x92>
 80051be:	2e00      	cmp	r6, #0
 80051c0:	dad3      	bge.n	800516a <__ieee754_pow+0xba>
 80051c2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 80051c6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 80051ca:	e7d2      	b.n	8005172 <__ieee754_pow+0xc2>
 80051cc:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 80051d0:	d108      	bne.n	80051e4 <__ieee754_pow+0x134>
 80051d2:	463a      	mov	r2, r7
 80051d4:	4643      	mov	r3, r8
 80051d6:	4638      	mov	r0, r7
 80051d8:	4641      	mov	r1, r8
 80051da:	f7fb f975 	bl	80004c8 <__aeabi_dmul>
 80051de:	4683      	mov	fp, r0
 80051e0:	468c      	mov	ip, r1
 80051e2:	e7c6      	b.n	8005172 <__ieee754_pow+0xc2>
 80051e4:	4b3f      	ldr	r3, [pc, #252]	; (80052e4 <__ieee754_pow+0x234>)
 80051e6:	429e      	cmp	r6, r3
 80051e8:	d10b      	bne.n	8005202 <__ieee754_pow+0x152>
 80051ea:	f1b9 0f00 	cmp.w	r9, #0
 80051ee:	db08      	blt.n	8005202 <__ieee754_pow+0x152>
 80051f0:	4638      	mov	r0, r7
 80051f2:	4641      	mov	r1, r8
 80051f4:	b011      	add	sp, #68	; 0x44
 80051f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051fa:	f000 bc63 	b.w	8005ac4 <__ieee754_sqrt>
 80051fe:	2300      	movs	r3, #0
 8005200:	9300      	str	r3, [sp, #0]
 8005202:	4638      	mov	r0, r7
 8005204:	4641      	mov	r1, r8
 8005206:	f000 fd09 	bl	8005c1c <fabs>
 800520a:	4683      	mov	fp, r0
 800520c:	468c      	mov	ip, r1
 800520e:	f1ba 0f00 	cmp.w	sl, #0
 8005212:	d12b      	bne.n	800526c <__ieee754_pow+0x1bc>
 8005214:	b124      	cbz	r4, 8005220 <__ieee754_pow+0x170>
 8005216:	4b32      	ldr	r3, [pc, #200]	; (80052e0 <__ieee754_pow+0x230>)
 8005218:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800521c:	429a      	cmp	r2, r3
 800521e:	d125      	bne.n	800526c <__ieee754_pow+0x1bc>
 8005220:	2e00      	cmp	r6, #0
 8005222:	da07      	bge.n	8005234 <__ieee754_pow+0x184>
 8005224:	465a      	mov	r2, fp
 8005226:	4663      	mov	r3, ip
 8005228:	2000      	movs	r0, #0
 800522a:	492d      	ldr	r1, [pc, #180]	; (80052e0 <__ieee754_pow+0x230>)
 800522c:	f7fb fa76 	bl	800071c <__aeabi_ddiv>
 8005230:	4683      	mov	fp, r0
 8005232:	468c      	mov	ip, r1
 8005234:	f1b9 0f00 	cmp.w	r9, #0
 8005238:	da9b      	bge.n	8005172 <__ieee754_pow+0xc2>
 800523a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800523e:	9b00      	ldr	r3, [sp, #0]
 8005240:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005244:	4323      	orrs	r3, r4
 8005246:	d108      	bne.n	800525a <__ieee754_pow+0x1aa>
 8005248:	465a      	mov	r2, fp
 800524a:	4663      	mov	r3, ip
 800524c:	4658      	mov	r0, fp
 800524e:	4661      	mov	r1, ip
 8005250:	f7fa ff82 	bl	8000158 <__aeabi_dsub>
 8005254:	4602      	mov	r2, r0
 8005256:	460b      	mov	r3, r1
 8005258:	e7aa      	b.n	80051b0 <__ieee754_pow+0x100>
 800525a:	9b00      	ldr	r3, [sp, #0]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d188      	bne.n	8005172 <__ieee754_pow+0xc2>
 8005260:	4658      	mov	r0, fp
 8005262:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8005266:	4683      	mov	fp, r0
 8005268:	469c      	mov	ip, r3
 800526a:	e782      	b.n	8005172 <__ieee754_pow+0xc2>
 800526c:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8005270:	f109 33ff 	add.w	r3, r9, #4294967295
 8005274:	930d      	str	r3, [sp, #52]	; 0x34
 8005276:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005278:	9b00      	ldr	r3, [sp, #0]
 800527a:	4313      	orrs	r3, r2
 800527c:	d104      	bne.n	8005288 <__ieee754_pow+0x1d8>
 800527e:	463a      	mov	r2, r7
 8005280:	4643      	mov	r3, r8
 8005282:	4638      	mov	r0, r7
 8005284:	4641      	mov	r1, r8
 8005286:	e7e3      	b.n	8005250 <__ieee754_pow+0x1a0>
 8005288:	4b17      	ldr	r3, [pc, #92]	; (80052e8 <__ieee754_pow+0x238>)
 800528a:	429d      	cmp	r5, r3
 800528c:	f340 80fe 	ble.w	800548c <__ieee754_pow+0x3dc>
 8005290:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005294:	429d      	cmp	r5, r3
 8005296:	dd0b      	ble.n	80052b0 <__ieee754_pow+0x200>
 8005298:	4b10      	ldr	r3, [pc, #64]	; (80052dc <__ieee754_pow+0x22c>)
 800529a:	429c      	cmp	r4, r3
 800529c:	dc0e      	bgt.n	80052bc <__ieee754_pow+0x20c>
 800529e:	2e00      	cmp	r6, #0
 80052a0:	f6bf af63 	bge.w	800516a <__ieee754_pow+0xba>
 80052a4:	a308      	add	r3, pc, #32	; (adr r3, 80052c8 <__ieee754_pow+0x218>)
 80052a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052aa:	4610      	mov	r0, r2
 80052ac:	4619      	mov	r1, r3
 80052ae:	e794      	b.n	80051da <__ieee754_pow+0x12a>
 80052b0:	4b0e      	ldr	r3, [pc, #56]	; (80052ec <__ieee754_pow+0x23c>)
 80052b2:	429c      	cmp	r4, r3
 80052b4:	ddf3      	ble.n	800529e <__ieee754_pow+0x1ee>
 80052b6:	4b0a      	ldr	r3, [pc, #40]	; (80052e0 <__ieee754_pow+0x230>)
 80052b8:	429c      	cmp	r4, r3
 80052ba:	dd19      	ble.n	80052f0 <__ieee754_pow+0x240>
 80052bc:	2e00      	cmp	r6, #0
 80052be:	dcf1      	bgt.n	80052a4 <__ieee754_pow+0x1f4>
 80052c0:	e753      	b.n	800516a <__ieee754_pow+0xba>
 80052c2:	bf00      	nop
 80052c4:	f3af 8000 	nop.w
 80052c8:	8800759c 	.word	0x8800759c
 80052cc:	7e37e43c 	.word	0x7e37e43c
 80052d0:	7ff00000 	.word	0x7ff00000
 80052d4:	08005f89 	.word	0x08005f89
 80052d8:	433fffff 	.word	0x433fffff
 80052dc:	3fefffff 	.word	0x3fefffff
 80052e0:	3ff00000 	.word	0x3ff00000
 80052e4:	3fe00000 	.word	0x3fe00000
 80052e8:	41e00000 	.word	0x41e00000
 80052ec:	3feffffe 	.word	0x3feffffe
 80052f0:	4661      	mov	r1, ip
 80052f2:	2200      	movs	r2, #0
 80052f4:	4b60      	ldr	r3, [pc, #384]	; (8005478 <__ieee754_pow+0x3c8>)
 80052f6:	4658      	mov	r0, fp
 80052f8:	f7fa ff2e 	bl	8000158 <__aeabi_dsub>
 80052fc:	a354      	add	r3, pc, #336	; (adr r3, 8005450 <__ieee754_pow+0x3a0>)
 80052fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005302:	4604      	mov	r4, r0
 8005304:	460d      	mov	r5, r1
 8005306:	f7fb f8df 	bl	80004c8 <__aeabi_dmul>
 800530a:	a353      	add	r3, pc, #332	; (adr r3, 8005458 <__ieee754_pow+0x3a8>)
 800530c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005310:	4606      	mov	r6, r0
 8005312:	460f      	mov	r7, r1
 8005314:	4620      	mov	r0, r4
 8005316:	4629      	mov	r1, r5
 8005318:	f7fb f8d6 	bl	80004c8 <__aeabi_dmul>
 800531c:	2200      	movs	r2, #0
 800531e:	4682      	mov	sl, r0
 8005320:	468b      	mov	fp, r1
 8005322:	4b56      	ldr	r3, [pc, #344]	; (800547c <__ieee754_pow+0x3cc>)
 8005324:	4620      	mov	r0, r4
 8005326:	4629      	mov	r1, r5
 8005328:	f7fb f8ce 	bl	80004c8 <__aeabi_dmul>
 800532c:	4602      	mov	r2, r0
 800532e:	460b      	mov	r3, r1
 8005330:	a14b      	add	r1, pc, #300	; (adr r1, 8005460 <__ieee754_pow+0x3b0>)
 8005332:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005336:	f7fa ff0f 	bl	8000158 <__aeabi_dsub>
 800533a:	4622      	mov	r2, r4
 800533c:	462b      	mov	r3, r5
 800533e:	f7fb f8c3 	bl	80004c8 <__aeabi_dmul>
 8005342:	4602      	mov	r2, r0
 8005344:	460b      	mov	r3, r1
 8005346:	2000      	movs	r0, #0
 8005348:	494d      	ldr	r1, [pc, #308]	; (8005480 <__ieee754_pow+0x3d0>)
 800534a:	f7fa ff05 	bl	8000158 <__aeabi_dsub>
 800534e:	4622      	mov	r2, r4
 8005350:	462b      	mov	r3, r5
 8005352:	4680      	mov	r8, r0
 8005354:	4689      	mov	r9, r1
 8005356:	4620      	mov	r0, r4
 8005358:	4629      	mov	r1, r5
 800535a:	f7fb f8b5 	bl	80004c8 <__aeabi_dmul>
 800535e:	4602      	mov	r2, r0
 8005360:	460b      	mov	r3, r1
 8005362:	4640      	mov	r0, r8
 8005364:	4649      	mov	r1, r9
 8005366:	f7fb f8af 	bl	80004c8 <__aeabi_dmul>
 800536a:	a33f      	add	r3, pc, #252	; (adr r3, 8005468 <__ieee754_pow+0x3b8>)
 800536c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005370:	f7fb f8aa 	bl	80004c8 <__aeabi_dmul>
 8005374:	4602      	mov	r2, r0
 8005376:	460b      	mov	r3, r1
 8005378:	4650      	mov	r0, sl
 800537a:	4659      	mov	r1, fp
 800537c:	f7fa feec 	bl	8000158 <__aeabi_dsub>
 8005380:	4602      	mov	r2, r0
 8005382:	460b      	mov	r3, r1
 8005384:	4604      	mov	r4, r0
 8005386:	460d      	mov	r5, r1
 8005388:	4630      	mov	r0, r6
 800538a:	4639      	mov	r1, r7
 800538c:	f7fa fee6 	bl	800015c <__adddf3>
 8005390:	2000      	movs	r0, #0
 8005392:	468b      	mov	fp, r1
 8005394:	4682      	mov	sl, r0
 8005396:	4632      	mov	r2, r6
 8005398:	463b      	mov	r3, r7
 800539a:	f7fa fedd 	bl	8000158 <__aeabi_dsub>
 800539e:	4602      	mov	r2, r0
 80053a0:	460b      	mov	r3, r1
 80053a2:	4620      	mov	r0, r4
 80053a4:	4629      	mov	r1, r5
 80053a6:	f7fa fed7 	bl	8000158 <__aeabi_dsub>
 80053aa:	9b00      	ldr	r3, [sp, #0]
 80053ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80053ae:	3b01      	subs	r3, #1
 80053b0:	4313      	orrs	r3, r2
 80053b2:	f04f 0300 	mov.w	r3, #0
 80053b6:	bf0c      	ite	eq
 80053b8:	4c32      	ldreq	r4, [pc, #200]	; (8005484 <__ieee754_pow+0x3d4>)
 80053ba:	4c2f      	ldrne	r4, [pc, #188]	; (8005478 <__ieee754_pow+0x3c8>)
 80053bc:	4606      	mov	r6, r0
 80053be:	e9cd 3400 	strd	r3, r4, [sp]
 80053c2:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80053c6:	2400      	movs	r4, #0
 80053c8:	460f      	mov	r7, r1
 80053ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053ce:	4622      	mov	r2, r4
 80053d0:	462b      	mov	r3, r5
 80053d2:	f7fa fec1 	bl	8000158 <__aeabi_dsub>
 80053d6:	4652      	mov	r2, sl
 80053d8:	465b      	mov	r3, fp
 80053da:	f7fb f875 	bl	80004c8 <__aeabi_dmul>
 80053de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80053e2:	4680      	mov	r8, r0
 80053e4:	4689      	mov	r9, r1
 80053e6:	4630      	mov	r0, r6
 80053e8:	4639      	mov	r1, r7
 80053ea:	f7fb f86d 	bl	80004c8 <__aeabi_dmul>
 80053ee:	4602      	mov	r2, r0
 80053f0:	460b      	mov	r3, r1
 80053f2:	4640      	mov	r0, r8
 80053f4:	4649      	mov	r1, r9
 80053f6:	f7fa feb1 	bl	800015c <__adddf3>
 80053fa:	4622      	mov	r2, r4
 80053fc:	462b      	mov	r3, r5
 80053fe:	4680      	mov	r8, r0
 8005400:	4689      	mov	r9, r1
 8005402:	4650      	mov	r0, sl
 8005404:	4659      	mov	r1, fp
 8005406:	f7fb f85f 	bl	80004c8 <__aeabi_dmul>
 800540a:	4604      	mov	r4, r0
 800540c:	460d      	mov	r5, r1
 800540e:	460b      	mov	r3, r1
 8005410:	4602      	mov	r2, r0
 8005412:	4649      	mov	r1, r9
 8005414:	4640      	mov	r0, r8
 8005416:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800541a:	f7fa fe9f 	bl	800015c <__adddf3>
 800541e:	4b1a      	ldr	r3, [pc, #104]	; (8005488 <__ieee754_pow+0x3d8>)
 8005420:	4682      	mov	sl, r0
 8005422:	4299      	cmp	r1, r3
 8005424:	460f      	mov	r7, r1
 8005426:	460e      	mov	r6, r1
 8005428:	f340 82e1 	ble.w	80059ee <__ieee754_pow+0x93e>
 800542c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005430:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8005434:	4303      	orrs	r3, r0
 8005436:	f000 81db 	beq.w	80057f0 <__ieee754_pow+0x740>
 800543a:	a30d      	add	r3, pc, #52	; (adr r3, 8005470 <__ieee754_pow+0x3c0>)
 800543c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005440:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005444:	f7fb f840 	bl	80004c8 <__aeabi_dmul>
 8005448:	a309      	add	r3, pc, #36	; (adr r3, 8005470 <__ieee754_pow+0x3c0>)
 800544a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800544e:	e6c4      	b.n	80051da <__ieee754_pow+0x12a>
 8005450:	60000000 	.word	0x60000000
 8005454:	3ff71547 	.word	0x3ff71547
 8005458:	f85ddf44 	.word	0xf85ddf44
 800545c:	3e54ae0b 	.word	0x3e54ae0b
 8005460:	55555555 	.word	0x55555555
 8005464:	3fd55555 	.word	0x3fd55555
 8005468:	652b82fe 	.word	0x652b82fe
 800546c:	3ff71547 	.word	0x3ff71547
 8005470:	8800759c 	.word	0x8800759c
 8005474:	7e37e43c 	.word	0x7e37e43c
 8005478:	3ff00000 	.word	0x3ff00000
 800547c:	3fd00000 	.word	0x3fd00000
 8005480:	3fe00000 	.word	0x3fe00000
 8005484:	bff00000 	.word	0xbff00000
 8005488:	408fffff 	.word	0x408fffff
 800548c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8005490:	f04f 0200 	mov.w	r2, #0
 8005494:	da08      	bge.n	80054a8 <__ieee754_pow+0x3f8>
 8005496:	4658      	mov	r0, fp
 8005498:	4bcd      	ldr	r3, [pc, #820]	; (80057d0 <__ieee754_pow+0x720>)
 800549a:	4661      	mov	r1, ip
 800549c:	f7fb f814 	bl	80004c8 <__aeabi_dmul>
 80054a0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80054a4:	4683      	mov	fp, r0
 80054a6:	460c      	mov	r4, r1
 80054a8:	1523      	asrs	r3, r4, #20
 80054aa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80054ae:	4413      	add	r3, r2
 80054b0:	930c      	str	r3, [sp, #48]	; 0x30
 80054b2:	4bc8      	ldr	r3, [pc, #800]	; (80057d4 <__ieee754_pow+0x724>)
 80054b4:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80054b8:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80054bc:	429c      	cmp	r4, r3
 80054be:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80054c2:	dd08      	ble.n	80054d6 <__ieee754_pow+0x426>
 80054c4:	4bc4      	ldr	r3, [pc, #784]	; (80057d8 <__ieee754_pow+0x728>)
 80054c6:	429c      	cmp	r4, r3
 80054c8:	f340 815b 	ble.w	8005782 <__ieee754_pow+0x6d2>
 80054cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80054ce:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80054d2:	3301      	adds	r3, #1
 80054d4:	930c      	str	r3, [sp, #48]	; 0x30
 80054d6:	f04f 0800 	mov.w	r8, #0
 80054da:	4658      	mov	r0, fp
 80054dc:	4629      	mov	r1, r5
 80054de:	4bbf      	ldr	r3, [pc, #764]	; (80057dc <__ieee754_pow+0x72c>)
 80054e0:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 80054e4:	444b      	add	r3, r9
 80054e6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80054ea:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80054ee:	461a      	mov	r2, r3
 80054f0:	4623      	mov	r3, r4
 80054f2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80054f6:	f7fa fe2f 	bl	8000158 <__aeabi_dsub>
 80054fa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80054fe:	4606      	mov	r6, r0
 8005500:	460f      	mov	r7, r1
 8005502:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005506:	f7fa fe29 	bl	800015c <__adddf3>
 800550a:	4602      	mov	r2, r0
 800550c:	460b      	mov	r3, r1
 800550e:	2000      	movs	r0, #0
 8005510:	49b3      	ldr	r1, [pc, #716]	; (80057e0 <__ieee754_pow+0x730>)
 8005512:	f7fb f903 	bl	800071c <__aeabi_ddiv>
 8005516:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800551a:	4602      	mov	r2, r0
 800551c:	460b      	mov	r3, r1
 800551e:	4630      	mov	r0, r6
 8005520:	4639      	mov	r1, r7
 8005522:	f7fa ffd1 	bl	80004c8 <__aeabi_dmul>
 8005526:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800552a:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800552e:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005532:	2300      	movs	r3, #0
 8005534:	2200      	movs	r2, #0
 8005536:	106d      	asrs	r5, r5, #1
 8005538:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800553c:	9304      	str	r3, [sp, #16]
 800553e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005542:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8005546:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 800554a:	4650      	mov	r0, sl
 800554c:	4659      	mov	r1, fp
 800554e:	4614      	mov	r4, r2
 8005550:	461d      	mov	r5, r3
 8005552:	f7fa ffb9 	bl	80004c8 <__aeabi_dmul>
 8005556:	4602      	mov	r2, r0
 8005558:	460b      	mov	r3, r1
 800555a:	4630      	mov	r0, r6
 800555c:	4639      	mov	r1, r7
 800555e:	f7fa fdfb 	bl	8000158 <__aeabi_dsub>
 8005562:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005566:	4606      	mov	r6, r0
 8005568:	460f      	mov	r7, r1
 800556a:	4620      	mov	r0, r4
 800556c:	4629      	mov	r1, r5
 800556e:	f7fa fdf3 	bl	8000158 <__aeabi_dsub>
 8005572:	4602      	mov	r2, r0
 8005574:	460b      	mov	r3, r1
 8005576:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800557a:	f7fa fded 	bl	8000158 <__aeabi_dsub>
 800557e:	4652      	mov	r2, sl
 8005580:	465b      	mov	r3, fp
 8005582:	f7fa ffa1 	bl	80004c8 <__aeabi_dmul>
 8005586:	4602      	mov	r2, r0
 8005588:	460b      	mov	r3, r1
 800558a:	4630      	mov	r0, r6
 800558c:	4639      	mov	r1, r7
 800558e:	f7fa fde3 	bl	8000158 <__aeabi_dsub>
 8005592:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005596:	f7fa ff97 	bl	80004c8 <__aeabi_dmul>
 800559a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800559e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80055a2:	4610      	mov	r0, r2
 80055a4:	4619      	mov	r1, r3
 80055a6:	f7fa ff8f 	bl	80004c8 <__aeabi_dmul>
 80055aa:	a377      	add	r3, pc, #476	; (adr r3, 8005788 <__ieee754_pow+0x6d8>)
 80055ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b0:	4604      	mov	r4, r0
 80055b2:	460d      	mov	r5, r1
 80055b4:	f7fa ff88 	bl	80004c8 <__aeabi_dmul>
 80055b8:	a375      	add	r3, pc, #468	; (adr r3, 8005790 <__ieee754_pow+0x6e0>)
 80055ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055be:	f7fa fdcd 	bl	800015c <__adddf3>
 80055c2:	4622      	mov	r2, r4
 80055c4:	462b      	mov	r3, r5
 80055c6:	f7fa ff7f 	bl	80004c8 <__aeabi_dmul>
 80055ca:	a373      	add	r3, pc, #460	; (adr r3, 8005798 <__ieee754_pow+0x6e8>)
 80055cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d0:	f7fa fdc4 	bl	800015c <__adddf3>
 80055d4:	4622      	mov	r2, r4
 80055d6:	462b      	mov	r3, r5
 80055d8:	f7fa ff76 	bl	80004c8 <__aeabi_dmul>
 80055dc:	a370      	add	r3, pc, #448	; (adr r3, 80057a0 <__ieee754_pow+0x6f0>)
 80055de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e2:	f7fa fdbb 	bl	800015c <__adddf3>
 80055e6:	4622      	mov	r2, r4
 80055e8:	462b      	mov	r3, r5
 80055ea:	f7fa ff6d 	bl	80004c8 <__aeabi_dmul>
 80055ee:	a36e      	add	r3, pc, #440	; (adr r3, 80057a8 <__ieee754_pow+0x6f8>)
 80055f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f4:	f7fa fdb2 	bl	800015c <__adddf3>
 80055f8:	4622      	mov	r2, r4
 80055fa:	462b      	mov	r3, r5
 80055fc:	f7fa ff64 	bl	80004c8 <__aeabi_dmul>
 8005600:	a36b      	add	r3, pc, #428	; (adr r3, 80057b0 <__ieee754_pow+0x700>)
 8005602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005606:	f7fa fda9 	bl	800015c <__adddf3>
 800560a:	4622      	mov	r2, r4
 800560c:	4606      	mov	r6, r0
 800560e:	460f      	mov	r7, r1
 8005610:	462b      	mov	r3, r5
 8005612:	4620      	mov	r0, r4
 8005614:	4629      	mov	r1, r5
 8005616:	f7fa ff57 	bl	80004c8 <__aeabi_dmul>
 800561a:	4602      	mov	r2, r0
 800561c:	460b      	mov	r3, r1
 800561e:	4630      	mov	r0, r6
 8005620:	4639      	mov	r1, r7
 8005622:	f7fa ff51 	bl	80004c8 <__aeabi_dmul>
 8005626:	4604      	mov	r4, r0
 8005628:	460d      	mov	r5, r1
 800562a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800562e:	4652      	mov	r2, sl
 8005630:	465b      	mov	r3, fp
 8005632:	f7fa fd93 	bl	800015c <__adddf3>
 8005636:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800563a:	f7fa ff45 	bl	80004c8 <__aeabi_dmul>
 800563e:	4622      	mov	r2, r4
 8005640:	462b      	mov	r3, r5
 8005642:	f7fa fd8b 	bl	800015c <__adddf3>
 8005646:	4652      	mov	r2, sl
 8005648:	4606      	mov	r6, r0
 800564a:	460f      	mov	r7, r1
 800564c:	465b      	mov	r3, fp
 800564e:	4650      	mov	r0, sl
 8005650:	4659      	mov	r1, fp
 8005652:	f7fa ff39 	bl	80004c8 <__aeabi_dmul>
 8005656:	2200      	movs	r2, #0
 8005658:	4b62      	ldr	r3, [pc, #392]	; (80057e4 <__ieee754_pow+0x734>)
 800565a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800565e:	f7fa fd7d 	bl	800015c <__adddf3>
 8005662:	4632      	mov	r2, r6
 8005664:	463b      	mov	r3, r7
 8005666:	f7fa fd79 	bl	800015c <__adddf3>
 800566a:	9804      	ldr	r0, [sp, #16]
 800566c:	460d      	mov	r5, r1
 800566e:	4604      	mov	r4, r0
 8005670:	4602      	mov	r2, r0
 8005672:	460b      	mov	r3, r1
 8005674:	4650      	mov	r0, sl
 8005676:	4659      	mov	r1, fp
 8005678:	f7fa ff26 	bl	80004c8 <__aeabi_dmul>
 800567c:	2200      	movs	r2, #0
 800567e:	4682      	mov	sl, r0
 8005680:	468b      	mov	fp, r1
 8005682:	4b58      	ldr	r3, [pc, #352]	; (80057e4 <__ieee754_pow+0x734>)
 8005684:	4620      	mov	r0, r4
 8005686:	4629      	mov	r1, r5
 8005688:	f7fa fd66 	bl	8000158 <__aeabi_dsub>
 800568c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005690:	f7fa fd62 	bl	8000158 <__aeabi_dsub>
 8005694:	4602      	mov	r2, r0
 8005696:	460b      	mov	r3, r1
 8005698:	4630      	mov	r0, r6
 800569a:	4639      	mov	r1, r7
 800569c:	f7fa fd5c 	bl	8000158 <__aeabi_dsub>
 80056a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80056a4:	f7fa ff10 	bl	80004c8 <__aeabi_dmul>
 80056a8:	4622      	mov	r2, r4
 80056aa:	4606      	mov	r6, r0
 80056ac:	460f      	mov	r7, r1
 80056ae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80056b2:	462b      	mov	r3, r5
 80056b4:	f7fa ff08 	bl	80004c8 <__aeabi_dmul>
 80056b8:	4602      	mov	r2, r0
 80056ba:	460b      	mov	r3, r1
 80056bc:	4630      	mov	r0, r6
 80056be:	4639      	mov	r1, r7
 80056c0:	f7fa fd4c 	bl	800015c <__adddf3>
 80056c4:	4606      	mov	r6, r0
 80056c6:	460f      	mov	r7, r1
 80056c8:	4602      	mov	r2, r0
 80056ca:	460b      	mov	r3, r1
 80056cc:	4650      	mov	r0, sl
 80056ce:	4659      	mov	r1, fp
 80056d0:	f7fa fd44 	bl	800015c <__adddf3>
 80056d4:	a338      	add	r3, pc, #224	; (adr r3, 80057b8 <__ieee754_pow+0x708>)
 80056d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056da:	9804      	ldr	r0, [sp, #16]
 80056dc:	460d      	mov	r5, r1
 80056de:	4604      	mov	r4, r0
 80056e0:	f7fa fef2 	bl	80004c8 <__aeabi_dmul>
 80056e4:	4652      	mov	r2, sl
 80056e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80056ea:	465b      	mov	r3, fp
 80056ec:	4620      	mov	r0, r4
 80056ee:	4629      	mov	r1, r5
 80056f0:	f7fa fd32 	bl	8000158 <__aeabi_dsub>
 80056f4:	4602      	mov	r2, r0
 80056f6:	460b      	mov	r3, r1
 80056f8:	4630      	mov	r0, r6
 80056fa:	4639      	mov	r1, r7
 80056fc:	f7fa fd2c 	bl	8000158 <__aeabi_dsub>
 8005700:	a32f      	add	r3, pc, #188	; (adr r3, 80057c0 <__ieee754_pow+0x710>)
 8005702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005706:	f7fa fedf 	bl	80004c8 <__aeabi_dmul>
 800570a:	a32f      	add	r3, pc, #188	; (adr r3, 80057c8 <__ieee754_pow+0x718>)
 800570c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005710:	4606      	mov	r6, r0
 8005712:	460f      	mov	r7, r1
 8005714:	4620      	mov	r0, r4
 8005716:	4629      	mov	r1, r5
 8005718:	f7fa fed6 	bl	80004c8 <__aeabi_dmul>
 800571c:	4602      	mov	r2, r0
 800571e:	460b      	mov	r3, r1
 8005720:	4630      	mov	r0, r6
 8005722:	4639      	mov	r1, r7
 8005724:	f7fa fd1a 	bl	800015c <__adddf3>
 8005728:	4b2f      	ldr	r3, [pc, #188]	; (80057e8 <__ieee754_pow+0x738>)
 800572a:	444b      	add	r3, r9
 800572c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005730:	f7fa fd14 	bl	800015c <__adddf3>
 8005734:	4604      	mov	r4, r0
 8005736:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005738:	460d      	mov	r5, r1
 800573a:	f7fa fe5b 	bl	80003f4 <__aeabi_i2d>
 800573e:	4606      	mov	r6, r0
 8005740:	460f      	mov	r7, r1
 8005742:	4b2a      	ldr	r3, [pc, #168]	; (80057ec <__ieee754_pow+0x73c>)
 8005744:	4622      	mov	r2, r4
 8005746:	444b      	add	r3, r9
 8005748:	e9d3 8900 	ldrd	r8, r9, [r3]
 800574c:	462b      	mov	r3, r5
 800574e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005752:	f7fa fd03 	bl	800015c <__adddf3>
 8005756:	4642      	mov	r2, r8
 8005758:	464b      	mov	r3, r9
 800575a:	f7fa fcff 	bl	800015c <__adddf3>
 800575e:	4632      	mov	r2, r6
 8005760:	463b      	mov	r3, r7
 8005762:	f7fa fcfb 	bl	800015c <__adddf3>
 8005766:	9804      	ldr	r0, [sp, #16]
 8005768:	4632      	mov	r2, r6
 800576a:	463b      	mov	r3, r7
 800576c:	4682      	mov	sl, r0
 800576e:	468b      	mov	fp, r1
 8005770:	f7fa fcf2 	bl	8000158 <__aeabi_dsub>
 8005774:	4642      	mov	r2, r8
 8005776:	464b      	mov	r3, r9
 8005778:	f7fa fcee 	bl	8000158 <__aeabi_dsub>
 800577c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005780:	e60b      	b.n	800539a <__ieee754_pow+0x2ea>
 8005782:	f04f 0801 	mov.w	r8, #1
 8005786:	e6a8      	b.n	80054da <__ieee754_pow+0x42a>
 8005788:	4a454eef 	.word	0x4a454eef
 800578c:	3fca7e28 	.word	0x3fca7e28
 8005790:	93c9db65 	.word	0x93c9db65
 8005794:	3fcd864a 	.word	0x3fcd864a
 8005798:	a91d4101 	.word	0xa91d4101
 800579c:	3fd17460 	.word	0x3fd17460
 80057a0:	518f264d 	.word	0x518f264d
 80057a4:	3fd55555 	.word	0x3fd55555
 80057a8:	db6fabff 	.word	0xdb6fabff
 80057ac:	3fdb6db6 	.word	0x3fdb6db6
 80057b0:	33333303 	.word	0x33333303
 80057b4:	3fe33333 	.word	0x3fe33333
 80057b8:	e0000000 	.word	0xe0000000
 80057bc:	3feec709 	.word	0x3feec709
 80057c0:	dc3a03fd 	.word	0xdc3a03fd
 80057c4:	3feec709 	.word	0x3feec709
 80057c8:	145b01f5 	.word	0x145b01f5
 80057cc:	be3e2fe0 	.word	0xbe3e2fe0
 80057d0:	43400000 	.word	0x43400000
 80057d4:	0003988e 	.word	0x0003988e
 80057d8:	000bb679 	.word	0x000bb679
 80057dc:	08005fc0 	.word	0x08005fc0
 80057e0:	3ff00000 	.word	0x3ff00000
 80057e4:	40080000 	.word	0x40080000
 80057e8:	08005fe0 	.word	0x08005fe0
 80057ec:	08005fd0 	.word	0x08005fd0
 80057f0:	a39b      	add	r3, pc, #620	; (adr r3, 8005a60 <__ieee754_pow+0x9b0>)
 80057f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f6:	4640      	mov	r0, r8
 80057f8:	4649      	mov	r1, r9
 80057fa:	f7fa fcaf 	bl	800015c <__adddf3>
 80057fe:	4622      	mov	r2, r4
 8005800:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005804:	462b      	mov	r3, r5
 8005806:	4650      	mov	r0, sl
 8005808:	4639      	mov	r1, r7
 800580a:	f7fa fca5 	bl	8000158 <__aeabi_dsub>
 800580e:	4602      	mov	r2, r0
 8005810:	460b      	mov	r3, r1
 8005812:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005816:	f7fb f8e7 	bl	80009e8 <__aeabi_dcmpgt>
 800581a:	2800      	cmp	r0, #0
 800581c:	f47f ae0d 	bne.w	800543a <__ieee754_pow+0x38a>
 8005820:	4aa3      	ldr	r2, [pc, #652]	; (8005ab0 <__ieee754_pow+0xa00>)
 8005822:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8005826:	4293      	cmp	r3, r2
 8005828:	f340 8103 	ble.w	8005a32 <__ieee754_pow+0x982>
 800582c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005830:	2000      	movs	r0, #0
 8005832:	151b      	asrs	r3, r3, #20
 8005834:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005838:	fa4a f303 	asr.w	r3, sl, r3
 800583c:	4433      	add	r3, r6
 800583e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8005842:	4f9c      	ldr	r7, [pc, #624]	; (8005ab4 <__ieee754_pow+0xa04>)
 8005844:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8005848:	4117      	asrs	r7, r2
 800584a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800584e:	ea23 0107 	bic.w	r1, r3, r7
 8005852:	f1c2 0214 	rsb	r2, r2, #20
 8005856:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800585a:	fa4a fa02 	asr.w	sl, sl, r2
 800585e:	2e00      	cmp	r6, #0
 8005860:	4602      	mov	r2, r0
 8005862:	460b      	mov	r3, r1
 8005864:	4620      	mov	r0, r4
 8005866:	4629      	mov	r1, r5
 8005868:	bfb8      	it	lt
 800586a:	f1ca 0a00 	rsblt	sl, sl, #0
 800586e:	f7fa fc73 	bl	8000158 <__aeabi_dsub>
 8005872:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005876:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800587a:	4642      	mov	r2, r8
 800587c:	464b      	mov	r3, r9
 800587e:	f7fa fc6d 	bl	800015c <__adddf3>
 8005882:	a379      	add	r3, pc, #484	; (adr r3, 8005a68 <__ieee754_pow+0x9b8>)
 8005884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005888:	2000      	movs	r0, #0
 800588a:	460d      	mov	r5, r1
 800588c:	4604      	mov	r4, r0
 800588e:	f7fa fe1b 	bl	80004c8 <__aeabi_dmul>
 8005892:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005896:	4606      	mov	r6, r0
 8005898:	460f      	mov	r7, r1
 800589a:	4620      	mov	r0, r4
 800589c:	4629      	mov	r1, r5
 800589e:	f7fa fc5b 	bl	8000158 <__aeabi_dsub>
 80058a2:	4602      	mov	r2, r0
 80058a4:	460b      	mov	r3, r1
 80058a6:	4640      	mov	r0, r8
 80058a8:	4649      	mov	r1, r9
 80058aa:	f7fa fc55 	bl	8000158 <__aeabi_dsub>
 80058ae:	a370      	add	r3, pc, #448	; (adr r3, 8005a70 <__ieee754_pow+0x9c0>)
 80058b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b4:	f7fa fe08 	bl	80004c8 <__aeabi_dmul>
 80058b8:	a36f      	add	r3, pc, #444	; (adr r3, 8005a78 <__ieee754_pow+0x9c8>)
 80058ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058be:	4680      	mov	r8, r0
 80058c0:	4689      	mov	r9, r1
 80058c2:	4620      	mov	r0, r4
 80058c4:	4629      	mov	r1, r5
 80058c6:	f7fa fdff 	bl	80004c8 <__aeabi_dmul>
 80058ca:	4602      	mov	r2, r0
 80058cc:	460b      	mov	r3, r1
 80058ce:	4640      	mov	r0, r8
 80058d0:	4649      	mov	r1, r9
 80058d2:	f7fa fc43 	bl	800015c <__adddf3>
 80058d6:	4604      	mov	r4, r0
 80058d8:	460d      	mov	r5, r1
 80058da:	4602      	mov	r2, r0
 80058dc:	460b      	mov	r3, r1
 80058de:	4630      	mov	r0, r6
 80058e0:	4639      	mov	r1, r7
 80058e2:	f7fa fc3b 	bl	800015c <__adddf3>
 80058e6:	4632      	mov	r2, r6
 80058e8:	463b      	mov	r3, r7
 80058ea:	4680      	mov	r8, r0
 80058ec:	4689      	mov	r9, r1
 80058ee:	f7fa fc33 	bl	8000158 <__aeabi_dsub>
 80058f2:	4602      	mov	r2, r0
 80058f4:	460b      	mov	r3, r1
 80058f6:	4620      	mov	r0, r4
 80058f8:	4629      	mov	r1, r5
 80058fa:	f7fa fc2d 	bl	8000158 <__aeabi_dsub>
 80058fe:	4642      	mov	r2, r8
 8005900:	4606      	mov	r6, r0
 8005902:	460f      	mov	r7, r1
 8005904:	464b      	mov	r3, r9
 8005906:	4640      	mov	r0, r8
 8005908:	4649      	mov	r1, r9
 800590a:	f7fa fddd 	bl	80004c8 <__aeabi_dmul>
 800590e:	a35c      	add	r3, pc, #368	; (adr r3, 8005a80 <__ieee754_pow+0x9d0>)
 8005910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005914:	4604      	mov	r4, r0
 8005916:	460d      	mov	r5, r1
 8005918:	f7fa fdd6 	bl	80004c8 <__aeabi_dmul>
 800591c:	a35a      	add	r3, pc, #360	; (adr r3, 8005a88 <__ieee754_pow+0x9d8>)
 800591e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005922:	f7fa fc19 	bl	8000158 <__aeabi_dsub>
 8005926:	4622      	mov	r2, r4
 8005928:	462b      	mov	r3, r5
 800592a:	f7fa fdcd 	bl	80004c8 <__aeabi_dmul>
 800592e:	a358      	add	r3, pc, #352	; (adr r3, 8005a90 <__ieee754_pow+0x9e0>)
 8005930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005934:	f7fa fc12 	bl	800015c <__adddf3>
 8005938:	4622      	mov	r2, r4
 800593a:	462b      	mov	r3, r5
 800593c:	f7fa fdc4 	bl	80004c8 <__aeabi_dmul>
 8005940:	a355      	add	r3, pc, #340	; (adr r3, 8005a98 <__ieee754_pow+0x9e8>)
 8005942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005946:	f7fa fc07 	bl	8000158 <__aeabi_dsub>
 800594a:	4622      	mov	r2, r4
 800594c:	462b      	mov	r3, r5
 800594e:	f7fa fdbb 	bl	80004c8 <__aeabi_dmul>
 8005952:	a353      	add	r3, pc, #332	; (adr r3, 8005aa0 <__ieee754_pow+0x9f0>)
 8005954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005958:	f7fa fc00 	bl	800015c <__adddf3>
 800595c:	4622      	mov	r2, r4
 800595e:	462b      	mov	r3, r5
 8005960:	f7fa fdb2 	bl	80004c8 <__aeabi_dmul>
 8005964:	4602      	mov	r2, r0
 8005966:	460b      	mov	r3, r1
 8005968:	4640      	mov	r0, r8
 800596a:	4649      	mov	r1, r9
 800596c:	f7fa fbf4 	bl	8000158 <__aeabi_dsub>
 8005970:	4604      	mov	r4, r0
 8005972:	460d      	mov	r5, r1
 8005974:	4602      	mov	r2, r0
 8005976:	460b      	mov	r3, r1
 8005978:	4640      	mov	r0, r8
 800597a:	4649      	mov	r1, r9
 800597c:	f7fa fda4 	bl	80004c8 <__aeabi_dmul>
 8005980:	2200      	movs	r2, #0
 8005982:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005986:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800598a:	4620      	mov	r0, r4
 800598c:	4629      	mov	r1, r5
 800598e:	f7fa fbe3 	bl	8000158 <__aeabi_dsub>
 8005992:	4602      	mov	r2, r0
 8005994:	460b      	mov	r3, r1
 8005996:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800599a:	f7fa febf 	bl	800071c <__aeabi_ddiv>
 800599e:	4632      	mov	r2, r6
 80059a0:	4604      	mov	r4, r0
 80059a2:	460d      	mov	r5, r1
 80059a4:	463b      	mov	r3, r7
 80059a6:	4640      	mov	r0, r8
 80059a8:	4649      	mov	r1, r9
 80059aa:	f7fa fd8d 	bl	80004c8 <__aeabi_dmul>
 80059ae:	4632      	mov	r2, r6
 80059b0:	463b      	mov	r3, r7
 80059b2:	f7fa fbd3 	bl	800015c <__adddf3>
 80059b6:	4602      	mov	r2, r0
 80059b8:	460b      	mov	r3, r1
 80059ba:	4620      	mov	r0, r4
 80059bc:	4629      	mov	r1, r5
 80059be:	f7fa fbcb 	bl	8000158 <__aeabi_dsub>
 80059c2:	4642      	mov	r2, r8
 80059c4:	464b      	mov	r3, r9
 80059c6:	f7fa fbc7 	bl	8000158 <__aeabi_dsub>
 80059ca:	4602      	mov	r2, r0
 80059cc:	460b      	mov	r3, r1
 80059ce:	2000      	movs	r0, #0
 80059d0:	4939      	ldr	r1, [pc, #228]	; (8005ab8 <__ieee754_pow+0xa08>)
 80059d2:	f7fa fbc1 	bl	8000158 <__aeabi_dsub>
 80059d6:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80059da:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80059de:	da2b      	bge.n	8005a38 <__ieee754_pow+0x988>
 80059e0:	4652      	mov	r2, sl
 80059e2:	f000 f9b9 	bl	8005d58 <scalbn>
 80059e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80059ea:	f7ff bbf6 	b.w	80051da <__ieee754_pow+0x12a>
 80059ee:	4b33      	ldr	r3, [pc, #204]	; (8005abc <__ieee754_pow+0xa0c>)
 80059f0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80059f4:	429f      	cmp	r7, r3
 80059f6:	f77f af13 	ble.w	8005820 <__ieee754_pow+0x770>
 80059fa:	4b31      	ldr	r3, [pc, #196]	; (8005ac0 <__ieee754_pow+0xa10>)
 80059fc:	440b      	add	r3, r1
 80059fe:	4303      	orrs	r3, r0
 8005a00:	d00b      	beq.n	8005a1a <__ieee754_pow+0x96a>
 8005a02:	a329      	add	r3, pc, #164	; (adr r3, 8005aa8 <__ieee754_pow+0x9f8>)
 8005a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a08:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a0c:	f7fa fd5c 	bl	80004c8 <__aeabi_dmul>
 8005a10:	a325      	add	r3, pc, #148	; (adr r3, 8005aa8 <__ieee754_pow+0x9f8>)
 8005a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a16:	f7ff bbe0 	b.w	80051da <__ieee754_pow+0x12a>
 8005a1a:	4622      	mov	r2, r4
 8005a1c:	462b      	mov	r3, r5
 8005a1e:	f7fa fb9b 	bl	8000158 <__aeabi_dsub>
 8005a22:	4642      	mov	r2, r8
 8005a24:	464b      	mov	r3, r9
 8005a26:	f7fa ffd5 	bl	80009d4 <__aeabi_dcmpge>
 8005a2a:	2800      	cmp	r0, #0
 8005a2c:	f43f aef8 	beq.w	8005820 <__ieee754_pow+0x770>
 8005a30:	e7e7      	b.n	8005a02 <__ieee754_pow+0x952>
 8005a32:	f04f 0a00 	mov.w	sl, #0
 8005a36:	e71e      	b.n	8005876 <__ieee754_pow+0x7c6>
 8005a38:	4621      	mov	r1, r4
 8005a3a:	e7d4      	b.n	80059e6 <__ieee754_pow+0x936>
 8005a3c:	f04f 0b00 	mov.w	fp, #0
 8005a40:	f8df c074 	ldr.w	ip, [pc, #116]	; 8005ab8 <__ieee754_pow+0xa08>
 8005a44:	f7ff bb95 	b.w	8005172 <__ieee754_pow+0xc2>
 8005a48:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8005a4c:	f7ff bb91 	b.w	8005172 <__ieee754_pow+0xc2>
 8005a50:	4638      	mov	r0, r7
 8005a52:	4641      	mov	r1, r8
 8005a54:	f7ff bbc3 	b.w	80051de <__ieee754_pow+0x12e>
 8005a58:	9200      	str	r2, [sp, #0]
 8005a5a:	f7ff bb9f 	b.w	800519c <__ieee754_pow+0xec>
 8005a5e:	bf00      	nop
 8005a60:	652b82fe 	.word	0x652b82fe
 8005a64:	3c971547 	.word	0x3c971547
 8005a68:	00000000 	.word	0x00000000
 8005a6c:	3fe62e43 	.word	0x3fe62e43
 8005a70:	fefa39ef 	.word	0xfefa39ef
 8005a74:	3fe62e42 	.word	0x3fe62e42
 8005a78:	0ca86c39 	.word	0x0ca86c39
 8005a7c:	be205c61 	.word	0xbe205c61
 8005a80:	72bea4d0 	.word	0x72bea4d0
 8005a84:	3e663769 	.word	0x3e663769
 8005a88:	c5d26bf1 	.word	0xc5d26bf1
 8005a8c:	3ebbbd41 	.word	0x3ebbbd41
 8005a90:	af25de2c 	.word	0xaf25de2c
 8005a94:	3f11566a 	.word	0x3f11566a
 8005a98:	16bebd93 	.word	0x16bebd93
 8005a9c:	3f66c16c 	.word	0x3f66c16c
 8005aa0:	5555553e 	.word	0x5555553e
 8005aa4:	3fc55555 	.word	0x3fc55555
 8005aa8:	c2f8f359 	.word	0xc2f8f359
 8005aac:	01a56e1f 	.word	0x01a56e1f
 8005ab0:	3fe00000 	.word	0x3fe00000
 8005ab4:	000fffff 	.word	0x000fffff
 8005ab8:	3ff00000 	.word	0x3ff00000
 8005abc:	4090cbff 	.word	0x4090cbff
 8005ac0:	3f6f3400 	.word	0x3f6f3400

08005ac4 <__ieee754_sqrt>:
 8005ac4:	4b54      	ldr	r3, [pc, #336]	; (8005c18 <__ieee754_sqrt+0x154>)
 8005ac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005aca:	438b      	bics	r3, r1
 8005acc:	4606      	mov	r6, r0
 8005ace:	460d      	mov	r5, r1
 8005ad0:	460a      	mov	r2, r1
 8005ad2:	460c      	mov	r4, r1
 8005ad4:	d10f      	bne.n	8005af6 <__ieee754_sqrt+0x32>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	460b      	mov	r3, r1
 8005ada:	f7fa fcf5 	bl	80004c8 <__aeabi_dmul>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	460b      	mov	r3, r1
 8005ae2:	4630      	mov	r0, r6
 8005ae4:	4629      	mov	r1, r5
 8005ae6:	f7fa fb39 	bl	800015c <__adddf3>
 8005aea:	4606      	mov	r6, r0
 8005aec:	460d      	mov	r5, r1
 8005aee:	4630      	mov	r0, r6
 8005af0:	4629      	mov	r1, r5
 8005af2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005af6:	2900      	cmp	r1, #0
 8005af8:	4607      	mov	r7, r0
 8005afa:	4603      	mov	r3, r0
 8005afc:	dc0e      	bgt.n	8005b1c <__ieee754_sqrt+0x58>
 8005afe:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8005b02:	ea5c 0707 	orrs.w	r7, ip, r7
 8005b06:	d0f2      	beq.n	8005aee <__ieee754_sqrt+0x2a>
 8005b08:	b141      	cbz	r1, 8005b1c <__ieee754_sqrt+0x58>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	f7fa fb23 	bl	8000158 <__aeabi_dsub>
 8005b12:	4602      	mov	r2, r0
 8005b14:	460b      	mov	r3, r1
 8005b16:	f7fa fe01 	bl	800071c <__aeabi_ddiv>
 8005b1a:	e7e6      	b.n	8005aea <__ieee754_sqrt+0x26>
 8005b1c:	1512      	asrs	r2, r2, #20
 8005b1e:	d074      	beq.n	8005c0a <__ieee754_sqrt+0x146>
 8005b20:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8005b24:	07d5      	lsls	r5, r2, #31
 8005b26:	f04f 0500 	mov.w	r5, #0
 8005b2a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005b2e:	bf48      	it	mi
 8005b30:	0fd9      	lsrmi	r1, r3, #31
 8005b32:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8005b36:	bf44      	itt	mi
 8005b38:	005b      	lslmi	r3, r3, #1
 8005b3a:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 8005b3e:	1051      	asrs	r1, r2, #1
 8005b40:	0fda      	lsrs	r2, r3, #31
 8005b42:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8005b46:	4628      	mov	r0, r5
 8005b48:	2216      	movs	r2, #22
 8005b4a:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8005b4e:	005b      	lsls	r3, r3, #1
 8005b50:	1987      	adds	r7, r0, r6
 8005b52:	42a7      	cmp	r7, r4
 8005b54:	bfde      	ittt	le
 8005b56:	19b8      	addle	r0, r7, r6
 8005b58:	1be4      	suble	r4, r4, r7
 8005b5a:	19ad      	addle	r5, r5, r6
 8005b5c:	0fdf      	lsrs	r7, r3, #31
 8005b5e:	3a01      	subs	r2, #1
 8005b60:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8005b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005b68:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005b6c:	d1f0      	bne.n	8005b50 <__ieee754_sqrt+0x8c>
 8005b6e:	f04f 0c20 	mov.w	ip, #32
 8005b72:	4696      	mov	lr, r2
 8005b74:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005b78:	4284      	cmp	r4, r0
 8005b7a:	eb06 070e 	add.w	r7, r6, lr
 8005b7e:	dc02      	bgt.n	8005b86 <__ieee754_sqrt+0xc2>
 8005b80:	d112      	bne.n	8005ba8 <__ieee754_sqrt+0xe4>
 8005b82:	429f      	cmp	r7, r3
 8005b84:	d810      	bhi.n	8005ba8 <__ieee754_sqrt+0xe4>
 8005b86:	2f00      	cmp	r7, #0
 8005b88:	eb07 0e06 	add.w	lr, r7, r6
 8005b8c:	da42      	bge.n	8005c14 <__ieee754_sqrt+0x150>
 8005b8e:	f1be 0f00 	cmp.w	lr, #0
 8005b92:	db3f      	blt.n	8005c14 <__ieee754_sqrt+0x150>
 8005b94:	f100 0801 	add.w	r8, r0, #1
 8005b98:	1a24      	subs	r4, r4, r0
 8005b9a:	4640      	mov	r0, r8
 8005b9c:	429f      	cmp	r7, r3
 8005b9e:	bf88      	it	hi
 8005ba0:	f104 34ff 	addhi.w	r4, r4, #4294967295
 8005ba4:	1bdb      	subs	r3, r3, r7
 8005ba6:	4432      	add	r2, r6
 8005ba8:	0064      	lsls	r4, r4, #1
 8005baa:	f1bc 0c01 	subs.w	ip, ip, #1
 8005bae:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 8005bb2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005bb6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005bba:	d1dd      	bne.n	8005b78 <__ieee754_sqrt+0xb4>
 8005bbc:	4323      	orrs	r3, r4
 8005bbe:	d006      	beq.n	8005bce <__ieee754_sqrt+0x10a>
 8005bc0:	1c54      	adds	r4, r2, #1
 8005bc2:	bf0b      	itete	eq
 8005bc4:	4662      	moveq	r2, ip
 8005bc6:	3201      	addne	r2, #1
 8005bc8:	3501      	addeq	r5, #1
 8005bca:	f022 0201 	bicne.w	r2, r2, #1
 8005bce:	106b      	asrs	r3, r5, #1
 8005bd0:	0852      	lsrs	r2, r2, #1
 8005bd2:	07e8      	lsls	r0, r5, #31
 8005bd4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005bd8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005bdc:	bf48      	it	mi
 8005bde:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8005be2:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 8005be6:	4616      	mov	r6, r2
 8005be8:	e781      	b.n	8005aee <__ieee754_sqrt+0x2a>
 8005bea:	0adc      	lsrs	r4, r3, #11
 8005bec:	3915      	subs	r1, #21
 8005bee:	055b      	lsls	r3, r3, #21
 8005bf0:	2c00      	cmp	r4, #0
 8005bf2:	d0fa      	beq.n	8005bea <__ieee754_sqrt+0x126>
 8005bf4:	02e6      	lsls	r6, r4, #11
 8005bf6:	d50a      	bpl.n	8005c0e <__ieee754_sqrt+0x14a>
 8005bf8:	f1c2 0020 	rsb	r0, r2, #32
 8005bfc:	fa23 f000 	lsr.w	r0, r3, r0
 8005c00:	1e55      	subs	r5, r2, #1
 8005c02:	4093      	lsls	r3, r2
 8005c04:	4304      	orrs	r4, r0
 8005c06:	1b4a      	subs	r2, r1, r5
 8005c08:	e78a      	b.n	8005b20 <__ieee754_sqrt+0x5c>
 8005c0a:	4611      	mov	r1, r2
 8005c0c:	e7f0      	b.n	8005bf0 <__ieee754_sqrt+0x12c>
 8005c0e:	0064      	lsls	r4, r4, #1
 8005c10:	3201      	adds	r2, #1
 8005c12:	e7ef      	b.n	8005bf4 <__ieee754_sqrt+0x130>
 8005c14:	4680      	mov	r8, r0
 8005c16:	e7bf      	b.n	8005b98 <__ieee754_sqrt+0xd4>
 8005c18:	7ff00000 	.word	0x7ff00000

08005c1c <fabs>:
 8005c1c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005c20:	4619      	mov	r1, r3
 8005c22:	4770      	bx	lr

08005c24 <finite>:
 8005c24:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8005c28:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 8005c2c:	0fc0      	lsrs	r0, r0, #31
 8005c2e:	4770      	bx	lr

08005c30 <matherr>:
 8005c30:	2000      	movs	r0, #0
 8005c32:	4770      	bx	lr

08005c34 <nan>:
 8005c34:	2000      	movs	r0, #0
 8005c36:	4901      	ldr	r1, [pc, #4]	; (8005c3c <nan+0x8>)
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	7ff80000 	.word	0x7ff80000

08005c40 <rint>:
 8005c40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c42:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005c46:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 8005c4a:	f1bc 0f13 	cmp.w	ip, #19
 8005c4e:	4604      	mov	r4, r0
 8005c50:	460d      	mov	r5, r1
 8005c52:	460b      	mov	r3, r1
 8005c54:	4606      	mov	r6, r0
 8005c56:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 8005c5a:	dc5a      	bgt.n	8005d12 <rint+0xd2>
 8005c5c:	f1bc 0f00 	cmp.w	ip, #0
 8005c60:	da2b      	bge.n	8005cba <rint+0x7a>
 8005c62:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8005c66:	4302      	orrs	r2, r0
 8005c68:	d023      	beq.n	8005cb2 <rint+0x72>
 8005c6a:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8005c6e:	4302      	orrs	r2, r0
 8005c70:	4256      	negs	r6, r2
 8005c72:	4316      	orrs	r6, r2
 8005c74:	0c4b      	lsrs	r3, r1, #17
 8005c76:	0b36      	lsrs	r6, r6, #12
 8005c78:	4934      	ldr	r1, [pc, #208]	; (8005d4c <rint+0x10c>)
 8005c7a:	045b      	lsls	r3, r3, #17
 8005c7c:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 8005c80:	ea46 0503 	orr.w	r5, r6, r3
 8005c84:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8005c88:	4602      	mov	r2, r0
 8005c8a:	462b      	mov	r3, r5
 8005c8c:	e9d1 4500 	ldrd	r4, r5, [r1]
 8005c90:	4620      	mov	r0, r4
 8005c92:	4629      	mov	r1, r5
 8005c94:	f7fa fa62 	bl	800015c <__adddf3>
 8005c98:	e9cd 0100 	strd	r0, r1, [sp]
 8005c9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ca0:	462b      	mov	r3, r5
 8005ca2:	4622      	mov	r2, r4
 8005ca4:	f7fa fa58 	bl	8000158 <__aeabi_dsub>
 8005ca8:	4604      	mov	r4, r0
 8005caa:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005cae:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 8005cb2:	4620      	mov	r0, r4
 8005cb4:	4629      	mov	r1, r5
 8005cb6:	b003      	add	sp, #12
 8005cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cba:	4a25      	ldr	r2, [pc, #148]	; (8005d50 <rint+0x110>)
 8005cbc:	fa42 f20c 	asr.w	r2, r2, ip
 8005cc0:	4011      	ands	r1, r2
 8005cc2:	4301      	orrs	r1, r0
 8005cc4:	d0f5      	beq.n	8005cb2 <rint+0x72>
 8005cc6:	0852      	lsrs	r2, r2, #1
 8005cc8:	ea05 0102 	and.w	r1, r5, r2
 8005ccc:	ea50 0601 	orrs.w	r6, r0, r1
 8005cd0:	d00c      	beq.n	8005cec <rint+0xac>
 8005cd2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005cd6:	f1bc 0f13 	cmp.w	ip, #19
 8005cda:	bf0c      	ite	eq
 8005cdc:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 8005ce0:	2600      	movne	r6, #0
 8005ce2:	ea25 0202 	bic.w	r2, r5, r2
 8005ce6:	fa43 f30c 	asr.w	r3, r3, ip
 8005cea:	4313      	orrs	r3, r2
 8005cec:	4917      	ldr	r1, [pc, #92]	; (8005d4c <rint+0x10c>)
 8005cee:	4632      	mov	r2, r6
 8005cf0:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 8005cf4:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005cf8:	4620      	mov	r0, r4
 8005cfa:	4629      	mov	r1, r5
 8005cfc:	f7fa fa2e 	bl	800015c <__adddf3>
 8005d00:	e9cd 0100 	strd	r0, r1, [sp]
 8005d04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d08:	4622      	mov	r2, r4
 8005d0a:	462b      	mov	r3, r5
 8005d0c:	f7fa fa24 	bl	8000158 <__aeabi_dsub>
 8005d10:	e008      	b.n	8005d24 <rint+0xe4>
 8005d12:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 8005d16:	dd08      	ble.n	8005d2a <rint+0xea>
 8005d18:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 8005d1c:	d1c9      	bne.n	8005cb2 <rint+0x72>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	f7fa fa1c 	bl	800015c <__adddf3>
 8005d24:	4604      	mov	r4, r0
 8005d26:	460d      	mov	r5, r1
 8005d28:	e7c3      	b.n	8005cb2 <rint+0x72>
 8005d2a:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 8005d2e:	f04f 32ff 	mov.w	r2, #4294967295
 8005d32:	40ca      	lsrs	r2, r1
 8005d34:	4210      	tst	r0, r2
 8005d36:	d0bc      	beq.n	8005cb2 <rint+0x72>
 8005d38:	0852      	lsrs	r2, r2, #1
 8005d3a:	4210      	tst	r0, r2
 8005d3c:	bf1f      	itttt	ne
 8005d3e:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 8005d42:	ea20 0202 	bicne.w	r2, r0, r2
 8005d46:	410e      	asrne	r6, r1
 8005d48:	4316      	orrne	r6, r2
 8005d4a:	e7cf      	b.n	8005cec <rint+0xac>
 8005d4c:	08005ff0 	.word	0x08005ff0
 8005d50:	000fffff 	.word	0x000fffff
 8005d54:	00000000 	.word	0x00000000

08005d58 <scalbn>:
 8005d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d5a:	4616      	mov	r6, r2
 8005d5c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005d60:	4604      	mov	r4, r0
 8005d62:	460d      	mov	r5, r1
 8005d64:	460b      	mov	r3, r1
 8005d66:	b982      	cbnz	r2, 8005d8a <scalbn+0x32>
 8005d68:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005d6c:	4303      	orrs	r3, r0
 8005d6e:	d034      	beq.n	8005dda <scalbn+0x82>
 8005d70:	4b2d      	ldr	r3, [pc, #180]	; (8005e28 <scalbn+0xd0>)
 8005d72:	2200      	movs	r2, #0
 8005d74:	f7fa fba8 	bl	80004c8 <__aeabi_dmul>
 8005d78:	4b2c      	ldr	r3, [pc, #176]	; (8005e2c <scalbn+0xd4>)
 8005d7a:	4604      	mov	r4, r0
 8005d7c:	429e      	cmp	r6, r3
 8005d7e:	460d      	mov	r5, r1
 8005d80:	da0d      	bge.n	8005d9e <scalbn+0x46>
 8005d82:	a325      	add	r3, pc, #148	; (adr r3, 8005e18 <scalbn+0xc0>)
 8005d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d88:	e01c      	b.n	8005dc4 <scalbn+0x6c>
 8005d8a:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8005d8e:	42ba      	cmp	r2, r7
 8005d90:	d109      	bne.n	8005da6 <scalbn+0x4e>
 8005d92:	4602      	mov	r2, r0
 8005d94:	f7fa f9e2 	bl	800015c <__adddf3>
 8005d98:	4604      	mov	r4, r0
 8005d9a:	460d      	mov	r5, r1
 8005d9c:	e01d      	b.n	8005dda <scalbn+0x82>
 8005d9e:	460b      	mov	r3, r1
 8005da0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005da4:	3a36      	subs	r2, #54	; 0x36
 8005da6:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005daa:	4432      	add	r2, r6
 8005dac:	428a      	cmp	r2, r1
 8005dae:	dd0c      	ble.n	8005dca <scalbn+0x72>
 8005db0:	4622      	mov	r2, r4
 8005db2:	462b      	mov	r3, r5
 8005db4:	a11a      	add	r1, pc, #104	; (adr r1, 8005e20 <scalbn+0xc8>)
 8005db6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005dba:	f000 f83b 	bl	8005e34 <copysign>
 8005dbe:	a318      	add	r3, pc, #96	; (adr r3, 8005e20 <scalbn+0xc8>)
 8005dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc4:	f7fa fb80 	bl	80004c8 <__aeabi_dmul>
 8005dc8:	e7e6      	b.n	8005d98 <scalbn+0x40>
 8005dca:	2a00      	cmp	r2, #0
 8005dcc:	dd08      	ble.n	8005de0 <scalbn+0x88>
 8005dce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005dd2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005dd6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005dda:	4620      	mov	r0, r4
 8005ddc:	4629      	mov	r1, r5
 8005dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005de0:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005de4:	da0b      	bge.n	8005dfe <scalbn+0xa6>
 8005de6:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005dea:	429e      	cmp	r6, r3
 8005dec:	4622      	mov	r2, r4
 8005dee:	462b      	mov	r3, r5
 8005df0:	dce0      	bgt.n	8005db4 <scalbn+0x5c>
 8005df2:	a109      	add	r1, pc, #36	; (adr r1, 8005e18 <scalbn+0xc0>)
 8005df4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005df8:	f000 f81c 	bl	8005e34 <copysign>
 8005dfc:	e7c1      	b.n	8005d82 <scalbn+0x2a>
 8005dfe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005e02:	3236      	adds	r2, #54	; 0x36
 8005e04:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005e08:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005e0c:	4620      	mov	r0, r4
 8005e0e:	4629      	mov	r1, r5
 8005e10:	2200      	movs	r2, #0
 8005e12:	4b07      	ldr	r3, [pc, #28]	; (8005e30 <scalbn+0xd8>)
 8005e14:	e7d6      	b.n	8005dc4 <scalbn+0x6c>
 8005e16:	bf00      	nop
 8005e18:	c2f8f359 	.word	0xc2f8f359
 8005e1c:	01a56e1f 	.word	0x01a56e1f
 8005e20:	8800759c 	.word	0x8800759c
 8005e24:	7e37e43c 	.word	0x7e37e43c
 8005e28:	43500000 	.word	0x43500000
 8005e2c:	ffff3cb0 	.word	0xffff3cb0
 8005e30:	3c900000 	.word	0x3c900000

08005e34 <copysign>:
 8005e34:	b530      	push	{r4, r5, lr}
 8005e36:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8005e3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e3e:	ea42 0503 	orr.w	r5, r2, r3
 8005e42:	4629      	mov	r1, r5
 8005e44:	bd30      	pop	{r4, r5, pc}
	...

08005e48 <_init>:
 8005e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e4a:	bf00      	nop
 8005e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e4e:	bc08      	pop	{r3}
 8005e50:	469e      	mov	lr, r3
 8005e52:	4770      	bx	lr

08005e54 <_fini>:
 8005e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e56:	bf00      	nop
 8005e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e5a:	bc08      	pop	{r3}
 8005e5c:	469e      	mov	lr, r3
 8005e5e:	4770      	bx	lr
