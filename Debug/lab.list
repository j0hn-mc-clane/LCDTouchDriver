
lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e18  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002f24  08002f24  00012f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f64  08002f64  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08002f64  08002f64  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f64  08002f64  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f64  08002f64  00012f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f68  08002f68  00012f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08002f6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  20000064  08002fd0  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  08002fd0  000201ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009970  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000019ab  00000000  00000000  000299fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000818  00000000  00000000  0002b3a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000740  00000000  00000000  0002bbc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00004939  00000000  00000000  0002c300  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00002961  00000000  00000000  00030c39  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  0003359a  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001fa0  00000000  00000000  00033618  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f0c 	.word	0x08002f0c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	08002f0c 	.word	0x08002f0c

0800014c <LCD_SendCommand>:


//***** Functions prototypes *****//

//1. Write Command to LCD
void LCD_SendCommand(uint8_t com) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60000000) = com;
	uint8_t tmpCmd = com;
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	73fb      	strb	r3, [r7, #15]
	//Set DC HIGH for COMMAND mode
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_RESET);
 800015a:	4b11      	ldr	r3, [pc, #68]	; (80001a0 <LCD_SendCommand+0x54>)
 800015c:	6818      	ldr	r0, [r3, #0]
 800015e:	4b11      	ldr	r3, [pc, #68]	; (80001a4 <LCD_SendCommand+0x58>)
 8000160:	881b      	ldrh	r3, [r3, #0]
 8000162:	2200      	movs	r2, #0
 8000164:	4619      	mov	r1, r3
 8000166:	f001 fee9 	bl	8001f3c <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 800016a:	4b0f      	ldr	r3, [pc, #60]	; (80001a8 <LCD_SendCommand+0x5c>)
 800016c:	6818      	ldr	r0, [r3, #0]
 800016e:	4b0f      	ldr	r3, [pc, #60]	; (80001ac <LCD_SendCommand+0x60>)
 8000170:	881b      	ldrh	r3, [r3, #0]
 8000172:	2200      	movs	r2, #0
 8000174:	4619      	mov	r1, r3
 8000176:	f001 fee1 	bl	8001f3c <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpCmd, 1, 5);
 800017a:	f107 010f 	add.w	r1, r7, #15
 800017e:	2305      	movs	r3, #5
 8000180:	2201      	movs	r2, #1
 8000182:	480b      	ldr	r0, [pc, #44]	; (80001b0 <LCD_SendCommand+0x64>)
 8000184:	f002 fccd 	bl	8002b22 <HAL_SPI_Transmit>
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 8000188:	4b07      	ldr	r3, [pc, #28]	; (80001a8 <LCD_SendCommand+0x5c>)
 800018a:	6818      	ldr	r0, [r3, #0]
 800018c:	4b07      	ldr	r3, [pc, #28]	; (80001ac <LCD_SendCommand+0x60>)
 800018e:	881b      	ldrh	r3, [r3, #0]
 8000190:	2201      	movs	r2, #1
 8000192:	4619      	mov	r1, r3
 8000194:	f001 fed2 	bl	8001f3c <HAL_GPIO_WritePin>
}
 8000198:	bf00      	nop
 800019a:	3710      	adds	r7, #16
 800019c:	46bd      	mov	sp, r7
 800019e:	bd80      	pop	{r7, pc}
 80001a0:	200000e0 	.word	0x200000e0
 80001a4:	200000e4 	.word	0x200000e4
 80001a8:	200000d8 	.word	0x200000d8
 80001ac:	200000dc 	.word	0x200000dc
 80001b0:	20000080 	.word	0x20000080

080001b4 <LCD_SendData>:

//2. Write data to LCD
void LCD_SendData(uint8_t data) {
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b084      	sub	sp, #16
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	4603      	mov	r3, r0
 80001bc:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60040000) = data;
	uint8_t tmpCmd = data;
 80001be:	79fb      	ldrb	r3, [r7, #7]
 80001c0:	73fb      	strb	r3, [r7, #15]
	//Set DC LOW for DATA mode
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
 80001c2:	4b11      	ldr	r3, [pc, #68]	; (8000208 <LCD_SendData+0x54>)
 80001c4:	6818      	ldr	r0, [r3, #0]
 80001c6:	4b11      	ldr	r3, [pc, #68]	; (800020c <LCD_SendData+0x58>)
 80001c8:	881b      	ldrh	r3, [r3, #0]
 80001ca:	2201      	movs	r2, #1
 80001cc:	4619      	mov	r1, r3
 80001ce:	f001 feb5 	bl	8001f3c <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 80001d2:	4b0f      	ldr	r3, [pc, #60]	; (8000210 <LCD_SendData+0x5c>)
 80001d4:	6818      	ldr	r0, [r3, #0]
 80001d6:	4b0f      	ldr	r3, [pc, #60]	; (8000214 <LCD_SendData+0x60>)
 80001d8:	881b      	ldrh	r3, [r3, #0]
 80001da:	2200      	movs	r2, #0
 80001dc:	4619      	mov	r1, r3
 80001de:	f001 fead 	bl	8001f3c <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpCmd, 1, 5);
 80001e2:	f107 010f 	add.w	r1, r7, #15
 80001e6:	2305      	movs	r3, #5
 80001e8:	2201      	movs	r2, #1
 80001ea:	480b      	ldr	r0, [pc, #44]	; (8000218 <LCD_SendData+0x64>)
 80001ec:	f002 fc99 	bl	8002b22 <HAL_SPI_Transmit>
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 80001f0:	4b07      	ldr	r3, [pc, #28]	; (8000210 <LCD_SendData+0x5c>)
 80001f2:	6818      	ldr	r0, [r3, #0]
 80001f4:	4b07      	ldr	r3, [pc, #28]	; (8000214 <LCD_SendData+0x60>)
 80001f6:	881b      	ldrh	r3, [r3, #0]
 80001f8:	2201      	movs	r2, #1
 80001fa:	4619      	mov	r1, r3
 80001fc:	f001 fe9e 	bl	8001f3c <HAL_GPIO_WritePin>
}
 8000200:	bf00      	nop
 8000202:	3710      	adds	r7, #16
 8000204:	46bd      	mov	sp, r7
 8000206:	bd80      	pop	{r7, pc}
 8000208:	200000e0 	.word	0x200000e0
 800020c:	200000e4 	.word	0x200000e4
 8000210:	200000d8 	.word	0x200000d8
 8000214:	200000dc 	.word	0x200000dc
 8000218:	20000080 	.word	0x20000080

0800021c <LCD_SendDataMulti>:
//2.2 Write multiple/DMA
void LCD_SendDataMulti(uint16_t Colordata, uint32_t size) {
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	4603      	mov	r3, r0
 8000224:	6039      	str	r1, [r7, #0]
 8000226:	80fb      	strh	r3, [r7, #6]
	uint8_t colorL, colorH;

	//Set DC LOW for DATA mode
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
 8000228:	4b11      	ldr	r3, [pc, #68]	; (8000270 <LCD_SendDataMulti+0x54>)
 800022a:	6818      	ldr	r0, [r3, #0]
 800022c:	4b11      	ldr	r3, [pc, #68]	; (8000274 <LCD_SendDataMulti+0x58>)
 800022e:	881b      	ldrh	r3, [r3, #0]
 8000230:	2201      	movs	r2, #1
 8000232:	4619      	mov	r1, r3
 8000234:	f001 fe82 	bl	8001f3c <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 8000238:	4b0f      	ldr	r3, [pc, #60]	; (8000278 <LCD_SendDataMulti+0x5c>)
 800023a:	6818      	ldr	r0, [r3, #0]
 800023c:	4b0f      	ldr	r3, [pc, #60]	; (800027c <LCD_SendDataMulti+0x60>)
 800023e:	881b      	ldrh	r3, [r3, #0]
 8000240:	2200      	movs	r2, #0
 8000242:	4619      	mov	r1, r3
 8000244:	f001 fe7a 	bl	8001f3c <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&lcdSPIhandle, (uint8_t*) &Colordata, size, 1000);
 8000248:	683b      	ldr	r3, [r7, #0]
 800024a:	b29a      	uxth	r2, r3
 800024c:	1db9      	adds	r1, r7, #6
 800024e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000252:	480b      	ldr	r0, [pc, #44]	; (8000280 <LCD_SendDataMulti+0x64>)
 8000254:	f002 fc65 	bl	8002b22 <HAL_SPI_Transmit>
	//Wait for end of DMA transfer
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 8000258:	4b07      	ldr	r3, [pc, #28]	; (8000278 <LCD_SendDataMulti+0x5c>)
 800025a:	6818      	ldr	r0, [r3, #0]
 800025c:	4b07      	ldr	r3, [pc, #28]	; (800027c <LCD_SendDataMulti+0x60>)
 800025e:	881b      	ldrh	r3, [r3, #0]
 8000260:	2201      	movs	r2, #1
 8000262:	4619      	mov	r1, r3
 8000264:	f001 fe6a 	bl	8001f3c <HAL_GPIO_WritePin>
}
 8000268:	bf00      	nop
 800026a:	3708      	adds	r7, #8
 800026c:	46bd      	mov	sp, r7
 800026e:	bd80      	pop	{r7, pc}
 8000270:	200000e0 	.word	0x200000e0
 8000274:	200000e4 	.word	0x200000e4
 8000278:	200000d8 	.word	0x200000d8
 800027c:	200000dc 	.word	0x200000dc
 8000280:	20000080 	.word	0x20000080

08000284 <LCD_SetCursorPosition>:

//3. Set cursor position
void LCD_SetCursorPosition(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8000284:	b590      	push	{r4, r7, lr}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0
 800028a:	4604      	mov	r4, r0
 800028c:	4608      	mov	r0, r1
 800028e:	4611      	mov	r1, r2
 8000290:	461a      	mov	r2, r3
 8000292:	4623      	mov	r3, r4
 8000294:	80fb      	strh	r3, [r7, #6]
 8000296:	4603      	mov	r3, r0
 8000298:	80bb      	strh	r3, [r7, #4]
 800029a:	460b      	mov	r3, r1
 800029c:	807b      	strh	r3, [r7, #2]
 800029e:	4613      	mov	r3, r2
 80002a0:	803b      	strh	r3, [r7, #0]

	LCD_SendCommand(HX8357_CASET);
 80002a2:	202a      	movs	r0, #42	; 0x2a
 80002a4:	f7ff ff52 	bl	800014c <LCD_SendCommand>
	LCD_SendData(x1 >> 8);
 80002a8:	88fb      	ldrh	r3, [r7, #6]
 80002aa:	0a1b      	lsrs	r3, r3, #8
 80002ac:	b29b      	uxth	r3, r3
 80002ae:	b2db      	uxtb	r3, r3
 80002b0:	4618      	mov	r0, r3
 80002b2:	f7ff ff7f 	bl	80001b4 <LCD_SendData>
	LCD_SendData(x1 & 0xFF);
 80002b6:	88fb      	ldrh	r3, [r7, #6]
 80002b8:	b2db      	uxtb	r3, r3
 80002ba:	4618      	mov	r0, r3
 80002bc:	f7ff ff7a 	bl	80001b4 <LCD_SendData>
	LCD_SendData(x2 >> 8);
 80002c0:	887b      	ldrh	r3, [r7, #2]
 80002c2:	0a1b      	lsrs	r3, r3, #8
 80002c4:	b29b      	uxth	r3, r3
 80002c6:	b2db      	uxtb	r3, r3
 80002c8:	4618      	mov	r0, r3
 80002ca:	f7ff ff73 	bl	80001b4 <LCD_SendData>
	LCD_SendData(x2 & 0xFF);
 80002ce:	887b      	ldrh	r3, [r7, #2]
 80002d0:	b2db      	uxtb	r3, r3
 80002d2:	4618      	mov	r0, r3
 80002d4:	f7ff ff6e 	bl	80001b4 <LCD_SendData>

	LCD_SendCommand(HX8357_PASET);
 80002d8:	202b      	movs	r0, #43	; 0x2b
 80002da:	f7ff ff37 	bl	800014c <LCD_SendCommand>
	LCD_SendData(y1 >> 8);
 80002de:	88bb      	ldrh	r3, [r7, #4]
 80002e0:	0a1b      	lsrs	r3, r3, #8
 80002e2:	b29b      	uxth	r3, r3
 80002e4:	b2db      	uxtb	r3, r3
 80002e6:	4618      	mov	r0, r3
 80002e8:	f7ff ff64 	bl	80001b4 <LCD_SendData>
	LCD_SendData(y1 & 0xFF);
 80002ec:	88bb      	ldrh	r3, [r7, #4]
 80002ee:	b2db      	uxtb	r3, r3
 80002f0:	4618      	mov	r0, r3
 80002f2:	f7ff ff5f 	bl	80001b4 <LCD_SendData>
	LCD_SendData(y2 >> 8);
 80002f6:	883b      	ldrh	r3, [r7, #0]
 80002f8:	0a1b      	lsrs	r3, r3, #8
 80002fa:	b29b      	uxth	r3, r3
 80002fc:	b2db      	uxtb	r3, r3
 80002fe:	4618      	mov	r0, r3
 8000300:	f7ff ff58 	bl	80001b4 <LCD_SendData>
	LCD_SendData(y2 & 0xFF);
 8000304:	883b      	ldrh	r3, [r7, #0]
 8000306:	b2db      	uxtb	r3, r3
 8000308:	4618      	mov	r0, r3
 800030a:	f7ff ff53 	bl	80001b4 <LCD_SendData>
	LCD_SendCommand(HX8357_RAMWR);
 800030e:	202c      	movs	r0, #44	; 0x2c
 8000310:	f7ff ff1c 	bl	800014c <LCD_SendCommand>
}
 8000314:	bf00      	nop
 8000316:	370c      	adds	r7, #12
 8000318:	46bd      	mov	sp, r7
 800031a:	bd90      	pop	{r4, r7, pc}

0800031c <LCD_Init>:
//4. Initialise function
void LCD_Init(SPI_HandleTypeDef *spiLcdHandle, GPIO_TypeDef *csPORT,
		uint16_t csPIN, GPIO_TypeDef *dcPORT, uint16_t dcPIN,
		GPIO_TypeDef *resetPORT, uint16_t resetPIN) {
 800031c:	b580      	push	{r7, lr}
 800031e:	b084      	sub	sp, #16
 8000320:	af00      	add	r7, sp, #0
 8000322:	60f8      	str	r0, [r7, #12]
 8000324:	60b9      	str	r1, [r7, #8]
 8000326:	603b      	str	r3, [r7, #0]
 8000328:	4613      	mov	r3, r2
 800032a:	80fb      	strh	r3, [r7, #6]
	//Copy SPI settings
	memcpy(&lcdSPIhandle, spiLcdHandle, sizeof(*spiLcdHandle));
 800032c:	2258      	movs	r2, #88	; 0x58
 800032e:	68f9      	ldr	r1, [r7, #12]
 8000330:	489e      	ldr	r0, [pc, #632]	; (80005ac <LCD_Init+0x290>)
 8000332:	f002 fdd7 	bl	8002ee4 <memcpy>
	//CS pin
	tftCS_GPIO = csPORT;
 8000336:	4a9e      	ldr	r2, [pc, #632]	; (80005b0 <LCD_Init+0x294>)
 8000338:	68bb      	ldr	r3, [r7, #8]
 800033a:	6013      	str	r3, [r2, #0]
	tftCS_PIN = csPIN;
 800033c:	4a9d      	ldr	r2, [pc, #628]	; (80005b4 <LCD_Init+0x298>)
 800033e:	88fb      	ldrh	r3, [r7, #6]
 8000340:	8013      	strh	r3, [r2, #0]
	//DC pin
	tftDC_GPIO = dcPORT;
 8000342:	4a9d      	ldr	r2, [pc, #628]	; (80005b8 <LCD_Init+0x29c>)
 8000344:	683b      	ldr	r3, [r7, #0]
 8000346:	6013      	str	r3, [r2, #0]
	tftDC_PIN = dcPIN;
 8000348:	4a9c      	ldr	r2, [pc, #624]	; (80005bc <LCD_Init+0x2a0>)
 800034a:	8b3b      	ldrh	r3, [r7, #24]
 800034c:	8013      	strh	r3, [r2, #0]
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 800034e:	4b98      	ldr	r3, [pc, #608]	; (80005b0 <LCD_Init+0x294>)
 8000350:	6818      	ldr	r0, [r3, #0]
 8000352:	4b98      	ldr	r3, [pc, #608]	; (80005b4 <LCD_Init+0x298>)
 8000354:	881b      	ldrh	r3, [r3, #0]
 8000356:	2201      	movs	r2, #1
 8000358:	4619      	mov	r1, r3
 800035a:	f001 fdef 	bl	8001f3c <HAL_GPIO_WritePin>
	//RESET pin
	tftRESET_GPIO = resetPORT;
 800035e:	4a98      	ldr	r2, [pc, #608]	; (80005c0 <LCD_Init+0x2a4>)
 8000360:	69fb      	ldr	r3, [r7, #28]
 8000362:	6013      	str	r3, [r2, #0]
	tftRESET_PIN = resetPIN;
 8000364:	4a97      	ldr	r2, [pc, #604]	; (80005c4 <LCD_Init+0x2a8>)
 8000366:	8c3b      	ldrh	r3, [r7, #32]
 8000368:	8013      	strh	r3, [r2, #0]
	HAL_GPIO_WritePin(resetPORT, resetPIN, GPIO_PIN_SET);  //Turn LCD ON
 800036a:	8c3b      	ldrh	r3, [r7, #32]
 800036c:	2201      	movs	r2, #1
 800036e:	4619      	mov	r1, r3
 8000370:	69f8      	ldr	r0, [r7, #28]
 8000372:	f001 fde3 	bl	8001f3c <HAL_GPIO_WritePin>

	LCD_SendCommand(HX8357_SWRESET);
 8000376:	2001      	movs	r0, #1
 8000378:	f7ff fee8 	bl	800014c <LCD_SendCommand>
	LCD_SendCommand(0x80);
 800037c:	2080      	movs	r0, #128	; 0x80
 800037e:	f7ff fee5 	bl	800014c <LCD_SendCommand>
	HAL_Delay(10);
 8000382:	200a      	movs	r0, #10
 8000384:	f000 ff3e 	bl	8001204 <HAL_Delay>
	LCD_SendCommand(HX8357D_SETC);
 8000388:	20b9      	movs	r0, #185	; 0xb9
 800038a:	f7ff fedf 	bl	800014c <LCD_SendCommand>
	LCD_SendData(0xFF);
 800038e:	20ff      	movs	r0, #255	; 0xff
 8000390:	f7ff ff10 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x83);
 8000394:	2083      	movs	r0, #131	; 0x83
 8000396:	f7ff ff0d 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x57);
 800039a:	2057      	movs	r0, #87	; 0x57
 800039c:	f7ff ff0a 	bl	80001b4 <LCD_SendData>
	LCD_SendCommand(0xFF);
 80003a0:	20ff      	movs	r0, #255	; 0xff
 80003a2:	f7ff fed3 	bl	800014c <LCD_SendCommand>
	LCD_SendCommand(0x80);
 80003a6:	2080      	movs	r0, #128	; 0x80
 80003a8:	f7ff fed0 	bl	800014c <LCD_SendCommand>
	HAL_Delay(300);
 80003ac:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80003b0:	f000 ff28 	bl	8001204 <HAL_Delay>
	LCD_SendCommand(HX8357_SETRGB);
 80003b4:	20b3      	movs	r0, #179	; 0xb3
 80003b6:	f7ff fec9 	bl	800014c <LCD_SendCommand>
	LCD_SendData(0x80);
 80003ba:	2080      	movs	r0, #128	; 0x80
 80003bc:	f7ff fefa 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x00);
 80003c0:	2000      	movs	r0, #0
 80003c2:	f7ff fef7 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x06);
 80003c6:	2006      	movs	r0, #6
 80003c8:	f7ff fef4 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x06);
 80003cc:	2006      	movs	r0, #6
 80003ce:	f7ff fef1 	bl	80001b4 <LCD_SendData>
	LCD_SendCommand(HX8357D_SETCOM);
 80003d2:	20b6      	movs	r0, #182	; 0xb6
 80003d4:	f7ff feba 	bl	800014c <LCD_SendCommand>
	LCD_SendData(0x25);
 80003d8:	2025      	movs	r0, #37	; 0x25
 80003da:	f7ff feeb 	bl	80001b4 <LCD_SendData>
	LCD_SendCommand(HX8357_SETOSC);
 80003de:	20b0      	movs	r0, #176	; 0xb0
 80003e0:	f7ff feb4 	bl	800014c <LCD_SendCommand>
	LCD_SendData(0x68);
 80003e4:	2068      	movs	r0, #104	; 0x68
 80003e6:	f7ff fee5 	bl	80001b4 <LCD_SendData>
	LCD_SendCommand(HX8357_SETPANEL);
 80003ea:	20cc      	movs	r0, #204	; 0xcc
 80003ec:	f7ff feae 	bl	800014c <LCD_SendCommand>
	LCD_SendData(0x05);
 80003f0:	2005      	movs	r0, #5
 80003f2:	f7ff fedf 	bl	80001b4 <LCD_SendData>
	LCD_SendCommand(HX8357_SETPWR1);
 80003f6:	20b1      	movs	r0, #177	; 0xb1
 80003f8:	f7ff fea8 	bl	800014c <LCD_SendCommand>
	LCD_SendData(0x00);
 80003fc:	2000      	movs	r0, #0
 80003fe:	f7ff fed9 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x15);
 8000402:	2015      	movs	r0, #21
 8000404:	f7ff fed6 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x1C);
 8000408:	201c      	movs	r0, #28
 800040a:	f7ff fed3 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x1C);
 800040e:	201c      	movs	r0, #28
 8000410:	f7ff fed0 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x83);
 8000414:	2083      	movs	r0, #131	; 0x83
 8000416:	f7ff fecd 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0xAA);
 800041a:	20aa      	movs	r0, #170	; 0xaa
 800041c:	f7ff feca 	bl	80001b4 <LCD_SendData>
	LCD_SendCommand(HX8357D_SETSTBA);
 8000420:	20c0      	movs	r0, #192	; 0xc0
 8000422:	f7ff fe93 	bl	800014c <LCD_SendCommand>
	LCD_SendData(0x50);
 8000426:	2050      	movs	r0, #80	; 0x50
 8000428:	f7ff fec4 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x50);
 800042c:	2050      	movs	r0, #80	; 0x50
 800042e:	f7ff fec1 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x01);
 8000432:	2001      	movs	r0, #1
 8000434:	f7ff febe 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x3C);
 8000438:	203c      	movs	r0, #60	; 0x3c
 800043a:	f7ff febb 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x1E);
 800043e:	201e      	movs	r0, #30
 8000440:	f7ff feb8 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x08);
 8000444:	2008      	movs	r0, #8
 8000446:	f7ff feb5 	bl	80001b4 <LCD_SendData>
	LCD_SendCommand(HX8357D_SETCYC);
 800044a:	20b4      	movs	r0, #180	; 0xb4
 800044c:	f7ff fe7e 	bl	800014c <LCD_SendCommand>
	LCD_SendData(0x02);
 8000450:	2002      	movs	r0, #2
 8000452:	f7ff feaf 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x40);
 8000456:	2040      	movs	r0, #64	; 0x40
 8000458:	f7ff feac 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x00);
 800045c:	2000      	movs	r0, #0
 800045e:	f7ff fea9 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x2A);
 8000462:	202a      	movs	r0, #42	; 0x2a
 8000464:	f7ff fea6 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x2A);
 8000468:	202a      	movs	r0, #42	; 0x2a
 800046a:	f7ff fea3 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x0D);
 800046e:	200d      	movs	r0, #13
 8000470:	f7ff fea0 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x78);
 8000474:	2078      	movs	r0, #120	; 0x78
 8000476:	f7ff fe9d 	bl	80001b4 <LCD_SendData>
	LCD_SendCommand(HX8357D_SETGAMMA);
 800047a:	20e0      	movs	r0, #224	; 0xe0
 800047c:	f7ff fe66 	bl	800014c <LCD_SendCommand>

	LCD_SendData(0x02);
 8000480:	2002      	movs	r0, #2
 8000482:	f7ff fe97 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x0A);
 8000486:	200a      	movs	r0, #10
 8000488:	f7ff fe94 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x11);
 800048c:	2011      	movs	r0, #17
 800048e:	f7ff fe91 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x1D);
 8000492:	201d      	movs	r0, #29
 8000494:	f7ff fe8e 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x23);
 8000498:	2023      	movs	r0, #35	; 0x23
 800049a:	f7ff fe8b 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x35);
 800049e:	2035      	movs	r0, #53	; 0x35
 80004a0:	f7ff fe88 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x41);
 80004a4:	2041      	movs	r0, #65	; 0x41
 80004a6:	f7ff fe85 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x4b);
 80004aa:	204b      	movs	r0, #75	; 0x4b
 80004ac:	f7ff fe82 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x4b);
 80004b0:	204b      	movs	r0, #75	; 0x4b
 80004b2:	f7ff fe7f 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x42);
 80004b6:	2042      	movs	r0, #66	; 0x42
 80004b8:	f7ff fe7c 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x3A);
 80004bc:	203a      	movs	r0, #58	; 0x3a
 80004be:	f7ff fe79 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x27);
 80004c2:	2027      	movs	r0, #39	; 0x27
 80004c4:	f7ff fe76 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x1B);
 80004c8:	201b      	movs	r0, #27
 80004ca:	f7ff fe73 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x08);
 80004ce:	2008      	movs	r0, #8
 80004d0:	f7ff fe70 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x09);
 80004d4:	2009      	movs	r0, #9
 80004d6:	f7ff fe6d 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x03);
 80004da:	2003      	movs	r0, #3
 80004dc:	f7ff fe6a 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x02);
 80004e0:	2002      	movs	r0, #2
 80004e2:	f7ff fe67 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x0A);
 80004e6:	200a      	movs	r0, #10
 80004e8:	f7ff fe64 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x11);
 80004ec:	2011      	movs	r0, #17
 80004ee:	f7ff fe61 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x1d);
 80004f2:	201d      	movs	r0, #29
 80004f4:	f7ff fe5e 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x23);
 80004f8:	2023      	movs	r0, #35	; 0x23
 80004fa:	f7ff fe5b 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x35);
 80004fe:	2035      	movs	r0, #53	; 0x35
 8000500:	f7ff fe58 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x41);
 8000504:	2041      	movs	r0, #65	; 0x41
 8000506:	f7ff fe55 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x4b);
 800050a:	204b      	movs	r0, #75	; 0x4b
 800050c:	f7ff fe52 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x4b);
 8000510:	204b      	movs	r0, #75	; 0x4b
 8000512:	f7ff fe4f 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x42);
 8000516:	2042      	movs	r0, #66	; 0x42
 8000518:	f7ff fe4c 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x3A);
 800051c:	203a      	movs	r0, #58	; 0x3a
 800051e:	f7ff fe49 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x27);
 8000522:	2027      	movs	r0, #39	; 0x27
 8000524:	f7ff fe46 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x1B);
 8000528:	201b      	movs	r0, #27
 800052a:	f7ff fe43 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x08);
 800052e:	2008      	movs	r0, #8
 8000530:	f7ff fe40 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x09);
 8000534:	2009      	movs	r0, #9
 8000536:	f7ff fe3d 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x03);
 800053a:	2003      	movs	r0, #3
 800053c:	f7ff fe3a 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x00);
 8000540:	2000      	movs	r0, #0
 8000542:	f7ff fe37 	bl	80001b4 <LCD_SendData>
	LCD_SendData(0x01);
 8000546:	2001      	movs	r0, #1
 8000548:	f7ff fe34 	bl	80001b4 <LCD_SendData>

	LCD_SendCommand(HX8357_COLMOD);
 800054c:	203a      	movs	r0, #58	; 0x3a
 800054e:	f7ff fdfd 	bl	800014c <LCD_SendCommand>
	LCD_SendData(0x55);
 8000552:	2055      	movs	r0, #85	; 0x55
 8000554:	f7ff fe2e 	bl	80001b4 <LCD_SendData>
	LCD_SendCommand(HX8357_MADCTL);
 8000558:	2036      	movs	r0, #54	; 0x36
 800055a:	f7ff fdf7 	bl	800014c <LCD_SendCommand>
	LCD_SendData(0xC0);
 800055e:	20c0      	movs	r0, #192	; 0xc0
 8000560:	f7ff fe28 	bl	80001b4 <LCD_SendData>
	LCD_SendCommand(HX8357_TEON);
 8000564:	2035      	movs	r0, #53	; 0x35
 8000566:	f7ff fdf1 	bl	800014c <LCD_SendCommand>
	LCD_SendData(0x00);
 800056a:	2000      	movs	r0, #0
 800056c:	f7ff fe22 	bl	80001b4 <LCD_SendData>
	LCD_SendCommand(HX8357_TEARLINE);
 8000570:	2044      	movs	r0, #68	; 0x44
 8000572:	f7ff fdeb 	bl	800014c <LCD_SendCommand>
	LCD_SendDataMulti(0x00, 0x02);
 8000576:	2102      	movs	r1, #2
 8000578:	2000      	movs	r0, #0
 800057a:	f7ff fe4f 	bl	800021c <LCD_SendDataMulti>
	LCD_SendCommand(HX8357_SLPOUT);
 800057e:	2011      	movs	r0, #17
 8000580:	f7ff fde4 	bl	800014c <LCD_SendCommand>
	LCD_SendCommand(0x80);
 8000584:	2080      	movs	r0, #128	; 0x80
 8000586:	f7ff fde1 	bl	800014c <LCD_SendCommand>
	HAL_Delay(150);
 800058a:	2096      	movs	r0, #150	; 0x96
 800058c:	f000 fe3a 	bl	8001204 <HAL_Delay>
	LCD_SendCommand(HX8357_DISPON);
 8000590:	2029      	movs	r0, #41	; 0x29
 8000592:	f7ff fddb 	bl	800014c <LCD_SendCommand>
	LCD_SendCommand(0x80);
 8000596:	2080      	movs	r0, #128	; 0x80
 8000598:	f7ff fdd8 	bl	800014c <LCD_SendCommand>
	HAL_Delay(50);
 800059c:	2032      	movs	r0, #50	; 0x32
 800059e:	f000 fe31 	bl	8001204 <HAL_Delay>
}
 80005a2:	bf00      	nop
 80005a4:	3710      	adds	r7, #16
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	20000080 	.word	0x20000080
 80005b0:	200000d8 	.word	0x200000d8
 80005b4:	200000dc 	.word	0x200000dc
 80005b8:	200000e0 	.word	0x200000e0
 80005bc:	200000e4 	.word	0x200000e4
 80005c0:	200000e8 	.word	0x200000e8
 80005c4:	200000ec 	.word	0x200000ec

080005c8 <LCD_DrawPixel>:

//5. Write data to a single pixel
void LCD_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	80fb      	strh	r3, [r7, #6]
 80005d2:	460b      	mov	r3, r1
 80005d4:	80bb      	strh	r3, [r7, #4]
 80005d6:	4613      	mov	r3, r2
 80005d8:	807b      	strh	r3, [r7, #2]
	LCD_SetCursorPosition(x, y, x, y);
 80005da:	88bb      	ldrh	r3, [r7, #4]
 80005dc:	88fa      	ldrh	r2, [r7, #6]
 80005de:	88b9      	ldrh	r1, [r7, #4]
 80005e0:	88f8      	ldrh	r0, [r7, #6]
 80005e2:	f7ff fe4f 	bl	8000284 <LCD_SetCursorPosition>
	LCD_SendData(color >> 8);
 80005e6:	887b      	ldrh	r3, [r7, #2]
 80005e8:	0a1b      	lsrs	r3, r3, #8
 80005ea:	b29b      	uxth	r3, r3
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	4618      	mov	r0, r3
 80005f0:	f7ff fde0 	bl	80001b4 <LCD_SendData>
	LCD_SendData(color & 0xFF);
 80005f4:	887b      	ldrh	r3, [r7, #2]
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	4618      	mov	r0, r3
 80005fa:	f7ff fddb 	bl	80001b4 <LCD_SendData>
}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
	...

08000608 <LCD_Fill>:
//6. Fill the entire screen with a background color
void LCD_Fill(uint16_t color) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	80fb      	strh	r3, [r7, #6]
	uint32_t n = LCD_PIXEL_COUNT;
 8000612:	f44f 3316 	mov.w	r3, #153600	; 0x25800
 8000616:	60fb      	str	r3, [r7, #12]
	uint16_t myColor = 0xFF;
 8000618:	23ff      	movs	r3, #255	; 0xff
 800061a:	817b      	strh	r3, [r7, #10]

	if (rotationNum == 1 || rotationNum == 3) {
 800061c:	4b1b      	ldr	r3, [pc, #108]	; (800068c <LCD_Fill+0x84>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b01      	cmp	r3, #1
 8000622:	d003      	beq.n	800062c <LCD_Fill+0x24>
 8000624:	4b19      	ldr	r3, [pc, #100]	; (800068c <LCD_Fill+0x84>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	2b03      	cmp	r3, #3
 800062a:	d108      	bne.n	800063e <LCD_Fill+0x36>
		LCD_SetCursorPosition(0, 0, HX8357_TFTWIDTH - 1, HX8357_TFTHEIGHT - 1);
 800062c:	f240 13df 	movw	r3, #479	; 0x1df
 8000630:	f240 123f 	movw	r2, #319	; 0x13f
 8000634:	2100      	movs	r1, #0
 8000636:	2000      	movs	r0, #0
 8000638:	f7ff fe24 	bl	8000284 <LCD_SetCursorPosition>
 800063c:	e00f      	b.n	800065e <LCD_Fill+0x56>
	} else if (rotationNum == 2 || rotationNum == 4) {
 800063e:	4b13      	ldr	r3, [pc, #76]	; (800068c <LCD_Fill+0x84>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	2b02      	cmp	r3, #2
 8000644:	d003      	beq.n	800064e <LCD_Fill+0x46>
 8000646:	4b11      	ldr	r3, [pc, #68]	; (800068c <LCD_Fill+0x84>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	2b04      	cmp	r3, #4
 800064c:	d117      	bne.n	800067e <LCD_Fill+0x76>
		LCD_SetCursorPosition(0, 0, HX8357_TFTHEIGHT - 1, HX8357_TFTWIDTH - 1);
 800064e:	f240 133f 	movw	r3, #319	; 0x13f
 8000652:	f240 12df 	movw	r2, #479	; 0x1df
 8000656:	2100      	movs	r1, #0
 8000658:	2000      	movs	r0, #0
 800065a:	f7ff fe13 	bl	8000284 <LCD_SetCursorPosition>
	}

	while (n) {
 800065e:	e00e      	b.n	800067e <LCD_Fill+0x76>
		n--;
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	3b01      	subs	r3, #1
 8000664:	60fb      	str	r3, [r7, #12]
		LCD_SendData(color >> 8);
 8000666:	88fb      	ldrh	r3, [r7, #6]
 8000668:	0a1b      	lsrs	r3, r3, #8
 800066a:	b29b      	uxth	r3, r3
 800066c:	b2db      	uxtb	r3, r3
 800066e:	4618      	mov	r0, r3
 8000670:	f7ff fda0 	bl	80001b4 <LCD_SendData>
		LCD_SendData(color & 0xff);
 8000674:	88fb      	ldrh	r3, [r7, #6]
 8000676:	b2db      	uxtb	r3, r3
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff fd9b 	bl	80001b4 <LCD_SendData>
	while (n) {
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d1ed      	bne.n	8000660 <LCD_Fill+0x58>
	}
}
 8000684:	bf00      	nop
 8000686:	3710      	adds	r7, #16
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	20000000 	.word	0x20000000

08000690 <LCD_Fill_Rect>:
//7. Rectangle drawing functions
void LCD_Fill_Rect(unsigned int x0, unsigned int y0, unsigned int x1,
		unsigned int y1, uint16_t color) {
 8000690:	b580      	push	{r7, lr}
 8000692:	b086      	sub	sp, #24
 8000694:	af00      	add	r7, sp, #0
 8000696:	60f8      	str	r0, [r7, #12]
 8000698:	60b9      	str	r1, [r7, #8]
 800069a:	607a      	str	r2, [r7, #4]
 800069c:	603b      	str	r3, [r7, #0]
	uint32_t n = ((x1 + 1) - x0) * ((y1 + 1) - y0);
 800069e:	687a      	ldr	r2, [r7, #4]
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	1ad3      	subs	r3, r2, r3
 80006a4:	3301      	adds	r3, #1
 80006a6:	6839      	ldr	r1, [r7, #0]
 80006a8:	68ba      	ldr	r2, [r7, #8]
 80006aa:	1a8a      	subs	r2, r1, r2
 80006ac:	3201      	adds	r2, #1
 80006ae:	fb02 f303 	mul.w	r3, r2, r3
 80006b2:	617b      	str	r3, [r7, #20]
	if (n > LCD_PIXEL_COUNT)
 80006b4:	697b      	ldr	r3, [r7, #20]
 80006b6:	f5b3 3f16 	cmp.w	r3, #153600	; 0x25800
 80006ba:	d902      	bls.n	80006c2 <LCD_Fill_Rect+0x32>
		n = LCD_PIXEL_COUNT;
 80006bc:	f44f 3316 	mov.w	r3, #153600	; 0x25800
 80006c0:	617b      	str	r3, [r7, #20]
	LCD_SetCursorPosition(x0, y0, x1, y1);
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	b298      	uxth	r0, r3
 80006c6:	68bb      	ldr	r3, [r7, #8]
 80006c8:	b299      	uxth	r1, r3
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	b29a      	uxth	r2, r3
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	b29b      	uxth	r3, r3
 80006d2:	f7ff fdd7 	bl	8000284 <LCD_SetCursorPosition>
	while (n) {
 80006d6:	e00e      	b.n	80006f6 <LCD_Fill_Rect+0x66>
		n--;
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	3b01      	subs	r3, #1
 80006dc:	617b      	str	r3, [r7, #20]
		LCD_SendData(color >> 8);
 80006de:	8c3b      	ldrh	r3, [r7, #32]
 80006e0:	0a1b      	lsrs	r3, r3, #8
 80006e2:	b29b      	uxth	r3, r3
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff fd64 	bl	80001b4 <LCD_SendData>
		LCD_SendData(color & 0xff);
 80006ec:	8c3b      	ldrh	r3, [r7, #32]
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	4618      	mov	r0, r3
 80006f2:	f7ff fd5f 	bl	80001b4 <LCD_SendData>
	while (n) {
 80006f6:	697b      	ldr	r3, [r7, #20]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d1ed      	bne.n	80006d8 <LCD_Fill_Rect+0x48>
	}
}
 80006fc:	bf00      	nop
 80006fe:	3718      	adds	r7, #24
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}

08000704 <LCD_setRotation>:

	LCD_SendData(data[size-1] & 0xFF);
}

//13. Set screen rotation
void LCD_setRotation(uint8_t rotate) {
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	71fb      	strb	r3, [r7, #7]
	switch (rotate) {
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	3b01      	subs	r3, #1
 8000712:	2b03      	cmp	r3, #3
 8000714:	d832      	bhi.n	800077c <LCD_setRotation+0x78>
 8000716:	a201      	add	r2, pc, #4	; (adr r2, 800071c <LCD_setRotation+0x18>)
 8000718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800071c:	0800072d 	.word	0x0800072d
 8000720:	08000741 	.word	0x08000741
 8000724:	08000755 	.word	0x08000755
 8000728:	08000769 	.word	0x08000769
	case 1:
		rotationNum = 1;
 800072c:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <LCD_setRotation+0x94>)
 800072e:	2201      	movs	r2, #1
 8000730:	701a      	strb	r2, [r3, #0]
		LCD_SendCommand(HX8357_MADCTL);
 8000732:	2036      	movs	r0, #54	; 0x36
 8000734:	f7ff fd0a 	bl	800014c <LCD_SendCommand>
		LCD_SendData(MADCTL_MX | MADCTL_MY | MADCTL_RGB);
 8000738:	20c0      	movs	r0, #192	; 0xc0
 800073a:	f7ff fd3b 	bl	80001b4 <LCD_SendData>
		break;
 800073e:	e027      	b.n	8000790 <LCD_setRotation+0x8c>
	case 2:
		rotationNum = 2;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <LCD_setRotation+0x94>)
 8000742:	2202      	movs	r2, #2
 8000744:	701a      	strb	r2, [r3, #0]
		LCD_SendCommand(HX8357_MADCTL);
 8000746:	2036      	movs	r0, #54	; 0x36
 8000748:	f7ff fd00 	bl	800014c <LCD_SendCommand>
		LCD_SendData(MADCTL_MV | MADCTL_MY | MADCTL_RGB);
 800074c:	20a0      	movs	r0, #160	; 0xa0
 800074e:	f7ff fd31 	bl	80001b4 <LCD_SendData>
		break;
 8000752:	e01d      	b.n	8000790 <LCD_setRotation+0x8c>
	case 3:
		rotationNum = 3;
 8000754:	4b10      	ldr	r3, [pc, #64]	; (8000798 <LCD_setRotation+0x94>)
 8000756:	2203      	movs	r2, #3
 8000758:	701a      	strb	r2, [r3, #0]
		LCD_SendCommand(HX8357_MADCTL);
 800075a:	2036      	movs	r0, #54	; 0x36
 800075c:	f7ff fcf6 	bl	800014c <LCD_SendCommand>
		LCD_SendData(MADCTL_RGB);
 8000760:	2000      	movs	r0, #0
 8000762:	f7ff fd27 	bl	80001b4 <LCD_SendData>
		break;
 8000766:	e013      	b.n	8000790 <LCD_setRotation+0x8c>
	case 4:
		rotationNum = 4;
 8000768:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <LCD_setRotation+0x94>)
 800076a:	2204      	movs	r2, #4
 800076c:	701a      	strb	r2, [r3, #0]
		LCD_SendCommand(HX8357_MADCTL);
 800076e:	2036      	movs	r0, #54	; 0x36
 8000770:	f7ff fcec 	bl	800014c <LCD_SendCommand>
		LCD_SendData(MADCTL_MX | MADCTL_MV | MADCTL_RGB);
 8000774:	2060      	movs	r0, #96	; 0x60
 8000776:	f7ff fd1d 	bl	80001b4 <LCD_SendData>
		break;
 800077a:	e009      	b.n	8000790 <LCD_setRotation+0x8c>
	default:
		rotationNum = 1;
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <LCD_setRotation+0x94>)
 800077e:	2201      	movs	r2, #1
 8000780:	701a      	strb	r2, [r3, #0]
		LCD_SendCommand(HX8357_MADCTL);
 8000782:	2036      	movs	r0, #54	; 0x36
 8000784:	f7ff fce2 	bl	800014c <LCD_SendCommand>
		LCD_SendData(MADCTL_MY | MADCTL_BGR);
 8000788:	2088      	movs	r0, #136	; 0x88
 800078a:	f7ff fd13 	bl	80001b4 <LCD_SendData>
		break;
 800078e:	bf00      	nop
	}
}
 8000790:	bf00      	nop
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000000 	.word	0x20000000

0800079c <map>:
static uint16_t ym_PIN = YMIN_Pin;
static uint16_t xm_PIN = XMIN_Pin;
static uint16_t yp_PIN = YPLUS_Pin;
static uint16_t xp_PIN = XPLUS_Pin;

int map(int x, int in_min, int in_max, int out_min, int out_max) {
 800079c:	b480      	push	{r7}
 800079e:	b085      	sub	sp, #20
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	60f8      	str	r0, [r7, #12]
 80007a4:	60b9      	str	r1, [r7, #8]
 80007a6:	607a      	str	r2, [r7, #4]
 80007a8:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80007aa:	68fa      	ldr	r2, [r7, #12]
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	1ad3      	subs	r3, r2, r3
 80007b0:	69b9      	ldr	r1, [r7, #24]
 80007b2:	683a      	ldr	r2, [r7, #0]
 80007b4:	1a8a      	subs	r2, r1, r2
 80007b6:	fb02 f203 	mul.w	r2, r2, r3
 80007ba:	6879      	ldr	r1, [r7, #4]
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	1acb      	subs	r3, r1, r3
 80007c0:	fb92 f2f3 	sdiv	r2, r2, r3
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	4413      	add	r3, r2
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	3714      	adds	r7, #20
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bc80      	pop	{r7}
 80007d0:	4770      	bx	lr
	...

080007d4 <Touch_Init>:

void Touch_Init(ADC_HandleTypeDef *adc) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
	memcpy(&adcHandle, adc, sizeof(*adc));
 80007dc:	2230      	movs	r2, #48	; 0x30
 80007de:	6879      	ldr	r1, [r7, #4]
 80007e0:	4803      	ldr	r0, [pc, #12]	; (80007f0 <Touch_Init+0x1c>)
 80007e2:	f002 fb7f 	bl	8002ee4 <memcpy>
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	200000f0 	.word	0x200000f0

080007f4 <setupForReadY>:

bool isTouch();
uint16_t getPressure();

void setupForReadY() {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.Pin = yp_PIN;
 80007fa:	4b2c      	ldr	r3, [pc, #176]	; (80008ac <setupForReadY+0xb8>)
 80007fc:	881b      	ldrh	r3, [r3, #0]
 80007fe:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000800:	2301      	movs	r3, #1
 8000802:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 8000804:	2301      	movs	r3, #1
 8000806:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000808:	2303      	movs	r3, #3
 800080a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init( yp , &GPIO_InitStructure );
 800080c:	4b28      	ldr	r3, [pc, #160]	; (80008b0 <setupForReadY+0xbc>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	463a      	mov	r2, r7
 8000812:	4611      	mov	r1, r2
 8000814:	4618      	mov	r0, r3
 8000816:	f001 fa37 	bl	8001c88 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(yp, yp_PIN, GPIO_PIN_SET);
 800081a:	4b25      	ldr	r3, [pc, #148]	; (80008b0 <setupForReadY+0xbc>)
 800081c:	6818      	ldr	r0, [r3, #0]
 800081e:	4b23      	ldr	r3, [pc, #140]	; (80008ac <setupForReadY+0xb8>)
 8000820:	881b      	ldrh	r3, [r3, #0]
 8000822:	2201      	movs	r2, #1
 8000824:	4619      	mov	r1, r3
 8000826:	f001 fb89 	bl	8001f3c <HAL_GPIO_WritePin>

	GPIO_InitStructure.Pin = ym_PIN;
 800082a:	4b22      	ldr	r3, [pc, #136]	; (80008b4 <setupForReadY+0xc0>)
 800082c:	881b      	ldrh	r3, [r3, #0]
 800082e:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000830:	2301      	movs	r3, #1
 8000832:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 8000834:	2302      	movs	r3, #2
 8000836:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000838:	2303      	movs	r3, #3
 800083a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init( ym , &GPIO_InitStructure );
 800083c:	4b1e      	ldr	r3, [pc, #120]	; (80008b8 <setupForReadY+0xc4>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	463a      	mov	r2, r7
 8000842:	4611      	mov	r1, r2
 8000844:	4618      	mov	r0, r3
 8000846:	f001 fa1f 	bl	8001c88 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(ym, ym_PIN, GPIO_PIN_RESET);
 800084a:	4b1b      	ldr	r3, [pc, #108]	; (80008b8 <setupForReadY+0xc4>)
 800084c:	6818      	ldr	r0, [r3, #0]
 800084e:	4b19      	ldr	r3, [pc, #100]	; (80008b4 <setupForReadY+0xc0>)
 8000850:	881b      	ldrh	r3, [r3, #0]
 8000852:	2200      	movs	r2, #0
 8000854:	4619      	mov	r1, r3
 8000856:	f001 fb71 	bl	8001f3c <HAL_GPIO_WritePin>

	GPIO_InitStructure.Pin = xp_PIN;
 800085a:	4b18      	ldr	r3, [pc, #96]	; (80008bc <setupForReadY+0xc8>)
 800085c:	881b      	ldrh	r3, [r3, #0]
 800085e:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8000860:	2300      	movs	r3, #0
 8000862:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 8000864:	2302      	movs	r3, #2
 8000866:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init( xp , &GPIO_InitStructure );
 8000868:	4b15      	ldr	r3, [pc, #84]	; (80008c0 <setupForReadY+0xcc>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	463a      	mov	r2, r7
 800086e:	4611      	mov	r1, r2
 8000870:	4618      	mov	r0, r3
 8000872:	f001 fa09 	bl	8001c88 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(xp, xp_PIN, GPIO_PIN_RESET);
 8000876:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <setupForReadY+0xcc>)
 8000878:	6818      	ldr	r0, [r3, #0]
 800087a:	4b10      	ldr	r3, [pc, #64]	; (80008bc <setupForReadY+0xc8>)
 800087c:	881b      	ldrh	r3, [r3, #0]
 800087e:	2200      	movs	r2, #0
 8000880:	4619      	mov	r1, r3
 8000882:	f001 fb5b 	bl	8001f3c <HAL_GPIO_WritePin>

	GPIO_InitStructure.Pin = xm_PIN;
 8000886:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <setupForReadY+0xd0>)
 8000888:	881b      	ldrh	r3, [r3, #0]
 800088a:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 800088c:	2303      	movs	r3, #3
 800088e:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init( xm , &GPIO_InitStructure );
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <setupForReadY+0xd4>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	463a      	mov	r2, r7
 800089a:	4611      	mov	r1, r2
 800089c:	4618      	mov	r0, r3
 800089e:	f001 f9f3 	bl	8001c88 <HAL_GPIO_Init>
}
 80008a2:	bf00      	nop
 80008a4:	3710      	adds	r7, #16
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000018 	.word	0x20000018
 80008b0:	2000000c 	.word	0x2000000c
 80008b4:	20000014 	.word	0x20000014
 80008b8:	20000004 	.word	0x20000004
 80008bc:	2000001a 	.word	0x2000001a
 80008c0:	20000010 	.word	0x20000010
 80008c4:	20000016 	.word	0x20000016
 80008c8:	20000008 	.word	0x20000008

080008cc <setupForReadX>:

void setupForReadX() {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.Pin = xp_PIN;
 80008d2:	4b2c      	ldr	r3, [pc, #176]	; (8000984 <setupForReadX+0xb8>)
 80008d4:	881b      	ldrh	r3, [r3, #0]
 80008d6:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80008d8:	2301      	movs	r3, #1
 80008da:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 80008dc:	2301      	movs	r3, #1
 80008de:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80008e0:	2303      	movs	r3, #3
 80008e2:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init( xp , &GPIO_InitStructure );
 80008e4:	4b28      	ldr	r3, [pc, #160]	; (8000988 <setupForReadX+0xbc>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	463a      	mov	r2, r7
 80008ea:	4611      	mov	r1, r2
 80008ec:	4618      	mov	r0, r3
 80008ee:	f001 f9cb 	bl	8001c88 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(xp, xp_PIN, GPIO_PIN_SET);
 80008f2:	4b25      	ldr	r3, [pc, #148]	; (8000988 <setupForReadX+0xbc>)
 80008f4:	6818      	ldr	r0, [r3, #0]
 80008f6:	4b23      	ldr	r3, [pc, #140]	; (8000984 <setupForReadX+0xb8>)
 80008f8:	881b      	ldrh	r3, [r3, #0]
 80008fa:	2201      	movs	r2, #1
 80008fc:	4619      	mov	r1, r3
 80008fe:	f001 fb1d 	bl	8001f3c <HAL_GPIO_WritePin>

	GPIO_InitStructure.Pin = xm_PIN;
 8000902:	4b22      	ldr	r3, [pc, #136]	; (800098c <setupForReadX+0xc0>)
 8000904:	881b      	ldrh	r3, [r3, #0]
 8000906:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000908:	2301      	movs	r3, #1
 800090a:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 800090c:	2302      	movs	r3, #2
 800090e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000910:	2303      	movs	r3, #3
 8000912:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init( xm , &GPIO_InitStructure );
 8000914:	4b1e      	ldr	r3, [pc, #120]	; (8000990 <setupForReadX+0xc4>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	463a      	mov	r2, r7
 800091a:	4611      	mov	r1, r2
 800091c:	4618      	mov	r0, r3
 800091e:	f001 f9b3 	bl	8001c88 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(xm, xm_PIN, GPIO_PIN_RESET);
 8000922:	4b1b      	ldr	r3, [pc, #108]	; (8000990 <setupForReadX+0xc4>)
 8000924:	6818      	ldr	r0, [r3, #0]
 8000926:	4b19      	ldr	r3, [pc, #100]	; (800098c <setupForReadX+0xc0>)
 8000928:	881b      	ldrh	r3, [r3, #0]
 800092a:	2200      	movs	r2, #0
 800092c:	4619      	mov	r1, r3
 800092e:	f001 fb05 	bl	8001f3c <HAL_GPIO_WritePin>

	GPIO_InitStructure.Pin = ym_PIN;
 8000932:	4b18      	ldr	r3, [pc, #96]	; (8000994 <setupForReadX+0xc8>)
 8000934:	881b      	ldrh	r3, [r3, #0]
 8000936:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8000938:	2300      	movs	r3, #0
 800093a:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 800093c:	2302      	movs	r3, #2
 800093e:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init( ym , &GPIO_InitStructure );
 8000940:	4b15      	ldr	r3, [pc, #84]	; (8000998 <setupForReadX+0xcc>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	463a      	mov	r2, r7
 8000946:	4611      	mov	r1, r2
 8000948:	4618      	mov	r0, r3
 800094a:	f001 f99d 	bl	8001c88 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(ym, ym_PIN, GPIO_PIN_RESET);
 800094e:	4b12      	ldr	r3, [pc, #72]	; (8000998 <setupForReadX+0xcc>)
 8000950:	6818      	ldr	r0, [r3, #0]
 8000952:	4b10      	ldr	r3, [pc, #64]	; (8000994 <setupForReadX+0xc8>)
 8000954:	881b      	ldrh	r3, [r3, #0]
 8000956:	2200      	movs	r2, #0
 8000958:	4619      	mov	r1, r3
 800095a:	f001 faef 	bl	8001f3c <HAL_GPIO_WritePin>

	GPIO_InitStructure.Pin = yp_PIN;
 800095e:	4b0f      	ldr	r3, [pc, #60]	; (800099c <setupForReadX+0xd0>)
 8000960:	881b      	ldrh	r3, [r3, #0]
 8000962:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 8000964:	2303      	movs	r3, #3
 8000966:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init( yp , &GPIO_InitStructure );
 800096c:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <setupForReadX+0xd4>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	463a      	mov	r2, r7
 8000972:	4611      	mov	r1, r2
 8000974:	4618      	mov	r0, r3
 8000976:	f001 f987 	bl	8001c88 <HAL_GPIO_Init>
}
 800097a:	bf00      	nop
 800097c:	3710      	adds	r7, #16
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	2000001a 	.word	0x2000001a
 8000988:	20000010 	.word	0x20000010
 800098c:	20000016 	.word	0x20000016
 8000990:	20000008 	.word	0x20000008
 8000994:	20000014 	.word	0x20000014
 8000998:	20000004 	.word	0x20000004
 800099c:	20000018 	.word	0x20000018
 80009a0:	2000000c 	.word	0x2000000c

080009a4 <readChannelXMin>:

int readChannelXMin() {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b086      	sub	sp, #24
 80009a8:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig;
	sConfig.Channel = ADC_CHANNEL_13;
 80009aa:	230d      	movs	r3, #13
 80009ac:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80009ae:	2301      	movs	r3, #1
 80009b0:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009b2:	2300      	movs	r3, #0
 80009b4:	60fb      	str	r3, [r7, #12]
	int config = HAL_ADC_ConfigChannel(&adcHandle, &sConfig);
 80009b6:	1d3b      	adds	r3, r7, #4
 80009b8:	4619      	mov	r1, r3
 80009ba:	480f      	ldr	r0, [pc, #60]	; (80009f8 <readChannelXMin+0x54>)
 80009bc:	f000 fefc 	bl	80017b8 <HAL_ADC_ConfigChannel>
 80009c0:	4603      	mov	r3, r0
 80009c2:	613b      	str	r3, [r7, #16]
	if (config != HAL_OK)
	{
		//
	}
	HAL_Delay(10);
 80009c4:	200a      	movs	r0, #10
 80009c6:	f000 fc1d 	bl	8001204 <HAL_Delay>
	HAL_ADC_Start(&adcHandle);
 80009ca:	480b      	ldr	r0, [pc, #44]	; (80009f8 <readChannelXMin+0x54>)
 80009cc:	f000 fd14 	bl	80013f8 <HAL_ADC_Start>
	uint32_t ADCValue;
	if(HAL_ADC_PollForConversion(&adcHandle, 5) == HAL_OK) {
 80009d0:	2105      	movs	r1, #5
 80009d2:	4809      	ldr	r0, [pc, #36]	; (80009f8 <readChannelXMin+0x54>)
 80009d4:	f000 fdea 	bl	80015ac <HAL_ADC_PollForConversion>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d103      	bne.n	80009e6 <readChannelXMin+0x42>
		ADCValue = HAL_ADC_GetValue(&adcHandle);
 80009de:	4806      	ldr	r0, [pc, #24]	; (80009f8 <readChannelXMin+0x54>)
 80009e0:	f000 fede 	bl	80017a0 <HAL_ADC_GetValue>
 80009e4:	6178      	str	r0, [r7, #20]
	}
	HAL_ADC_Stop(&adcHandle);
 80009e6:	4804      	ldr	r0, [pc, #16]	; (80009f8 <readChannelXMin+0x54>)
 80009e8:	f000 fdb4 	bl	8001554 <HAL_ADC_Stop>
	return ADCValue;
 80009ec:	697b      	ldr	r3, [r7, #20]
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3718      	adds	r7, #24
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	200000f0 	.word	0x200000f0

080009fc <readTouchY>:

int readTouchY() {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af02      	add	r7, sp, #8
	setupForReadY();
 8000a02:	f7ff fef7 	bl	80007f4 <setupForReadY>
	//return readChannelXMin();
	return map(readChannelXMin(), TS_MINY, TS_MAXY, 0, 480);
 8000a06:	f7ff ffcd 	bl	80009a4 <readChannelXMin>
 8000a0a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000a0e:	9300      	str	r3, [sp, #0]
 8000a10:	2300      	movs	r3, #0
 8000a12:	f640 629c 	movw	r2, #3740	; 0xe9c
 8000a16:	f240 1127 	movw	r1, #295	; 0x127
 8000a1a:	f7ff febf 	bl	800079c <map>
 8000a1e:	4603      	mov	r3, r0
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
	...

08000a28 <readChannelYPlus>:

int readChannelYPlus() {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig;
	sConfig.Channel = ADC_CHANNEL_12;
 8000a2e:	230c      	movs	r3, #12
 8000a30:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a32:	2301      	movs	r3, #1
 8000a34:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a36:	2300      	movs	r3, #0
 8000a38:	60fb      	str	r3, [r7, #12]
	int config = HAL_ADC_ConfigChannel(&adcHandle, &sConfig);
 8000a3a:	1d3b      	adds	r3, r7, #4
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	480f      	ldr	r0, [pc, #60]	; (8000a7c <readChannelYPlus+0x54>)
 8000a40:	f000 feba 	bl	80017b8 <HAL_ADC_ConfigChannel>
 8000a44:	4603      	mov	r3, r0
 8000a46:	613b      	str	r3, [r7, #16]
	if (config != HAL_OK)
	{
		//
	}
	HAL_Delay(10);
 8000a48:	200a      	movs	r0, #10
 8000a4a:	f000 fbdb 	bl	8001204 <HAL_Delay>
	HAL_ADC_Start(&adcHandle);
 8000a4e:	480b      	ldr	r0, [pc, #44]	; (8000a7c <readChannelYPlus+0x54>)
 8000a50:	f000 fcd2 	bl	80013f8 <HAL_ADC_Start>
	uint32_t ADCValue;
	if(HAL_ADC_PollForConversion(&adcHandle, 5) == HAL_OK) {
 8000a54:	2105      	movs	r1, #5
 8000a56:	4809      	ldr	r0, [pc, #36]	; (8000a7c <readChannelYPlus+0x54>)
 8000a58:	f000 fda8 	bl	80015ac <HAL_ADC_PollForConversion>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d103      	bne.n	8000a6a <readChannelYPlus+0x42>
		ADCValue = HAL_ADC_GetValue(&adcHandle);
 8000a62:	4806      	ldr	r0, [pc, #24]	; (8000a7c <readChannelYPlus+0x54>)
 8000a64:	f000 fe9c 	bl	80017a0 <HAL_ADC_GetValue>
 8000a68:	6178      	str	r0, [r7, #20]
	}
	HAL_ADC_Stop(&adcHandle);
 8000a6a:	4804      	ldr	r0, [pc, #16]	; (8000a7c <readChannelYPlus+0x54>)
 8000a6c:	f000 fd72 	bl	8001554 <HAL_ADC_Stop>
	return ADCValue;
 8000a70:	697b      	ldr	r3, [r7, #20]
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3718      	adds	r7, #24
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	200000f0 	.word	0x200000f0

08000a80 <readTouchX>:

int readTouchX() {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af02      	add	r7, sp, #8
	setupForReadX();
 8000a86:	f7ff ff21 	bl	80008cc <setupForReadX>
	//return readChannelYPlus();
	return map(readChannelYPlus(), TS_MINX, TS_MAXX, 0, 320);
 8000a8a:	f7ff ffcd 	bl	8000a28 <readChannelYPlus>
 8000a8e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000a92:	9300      	str	r3, [sp, #0]
 8000a94:	2300      	movs	r3, #0
 8000a96:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000a9a:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8000a9e:	f7ff fe7d 	bl	800079c <map>
 8000aa2:	4603      	mov	r3, r0
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <drawStruct>:
struct Button {
	int start_x, start_y, end_x, end_y, action;
	uint16_t icon[];
};

void drawStruct(struct Button * p) {
 8000aaa:	b590      	push	{r4, r7, lr}
 8000aac:	b087      	sub	sp, #28
 8000aae:	af02      	add	r7, sp, #8
 8000ab0:	6078      	str	r0, [r7, #4]
	uint16_t color;
	switch(p->action) {
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	691b      	ldr	r3, [r3, #16]
 8000ab6:	2b02      	cmp	r3, #2
 8000ab8:	d006      	beq.n	8000ac8 <drawStruct+0x1e>
 8000aba:	2b03      	cmp	r3, #3
 8000abc:	d008      	beq.n	8000ad0 <drawStruct+0x26>
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	d10a      	bne.n	8000ad8 <drawStruct+0x2e>
	case 1: color = HX8357_BLUE; break;
 8000ac2:	231f      	movs	r3, #31
 8000ac4:	81fb      	strh	r3, [r7, #14]
 8000ac6:	e00b      	b.n	8000ae0 <drawStruct+0x36>
	case 2: color= HX8357_RED; break;
 8000ac8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000acc:	81fb      	strh	r3, [r7, #14]
 8000ace:	e007      	b.n	8000ae0 <drawStruct+0x36>
	case 3: color = HX8357_GREEN; break;
 8000ad0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000ad4:	81fb      	strh	r3, [r7, #14]
 8000ad6:	e003      	b.n	8000ae0 <drawStruct+0x36>
	default: color = HX8357_YELLOW; break;
 8000ad8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000adc:	81fb      	strh	r3, [r7, #14]
 8000ade:	bf00      	nop
	}
	LCD_Fill_Rect(p->start_x, p->start_y, p->end_x, p->end_y, color);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	4619      	mov	r1, r3
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	689b      	ldr	r3, [r3, #8]
 8000af0:	461a      	mov	r2, r3
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	68db      	ldr	r3, [r3, #12]
 8000af6:	461c      	mov	r4, r3
 8000af8:	89fb      	ldrh	r3, [r7, #14]
 8000afa:	9300      	str	r3, [sp, #0]
 8000afc:	4623      	mov	r3, r4
 8000afe:	f7ff fdc7 	bl	8000690 <LCD_Fill_Rect>
}
 8000b02:	bf00      	nop
 8000b04:	3714      	adds	r7, #20
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd90      	pop	{r4, r7, pc}
	...

08000b0c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08a      	sub	sp, #40	; 0x28
 8000b10:	af04      	add	r7, sp, #16


	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000b12:	f000 fb15 	bl	8001140 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000b16:	f000 f859 	bl	8000bcc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000b1a:	f000 f927 	bl	8000d6c <MX_GPIO_Init>
	MX_ADC1_Init();
 8000b1e:	f000 f8b1 	bl	8000c84 <MX_ADC1_Init>
	MX_SPI1_Init();
 8000b22:	f000 f8ed 	bl	8000d00 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	Touch_Init(&hadc1);
 8000b26:	4821      	ldr	r0, [pc, #132]	; (8000bac <main+0xa0>)
 8000b28:	f7ff fe54 	bl	80007d4 <Touch_Init>
	LCD_Init(&hspi1, LCD_CS_GPIO_Port, LCD_CS_Pin, LCD_DC_GPIO_Port, LCD_DC_Pin, LCD_RST_GPIO_Port, LCD_RST_Pin);
 8000b2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b30:	9302      	str	r3, [sp, #8]
 8000b32:	4b1f      	ldr	r3, [pc, #124]	; (8000bb0 <main+0xa4>)
 8000b34:	9301      	str	r3, [sp, #4]
 8000b36:	2380      	movs	r3, #128	; 0x80
 8000b38:	9300      	str	r3, [sp, #0]
 8000b3a:	4b1e      	ldr	r3, [pc, #120]	; (8000bb4 <main+0xa8>)
 8000b3c:	2240      	movs	r2, #64	; 0x40
 8000b3e:	491e      	ldr	r1, [pc, #120]	; (8000bb8 <main+0xac>)
 8000b40:	481e      	ldr	r0, [pc, #120]	; (8000bbc <main+0xb0>)
 8000b42:	f7ff fbeb 	bl	800031c <LCD_Init>
	LCD_setRotation(3);
 8000b46:	2003      	movs	r0, #3
 8000b48:	f7ff fddc 	bl	8000704 <LCD_setRotation>
	LCD_Fill(HX8357_BLACK);
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	f7ff fd5b 	bl	8000608 <LCD_Fill>
	drawStruct(&line_button);
 8000b52:	481b      	ldr	r0, [pc, #108]	; (8000bc0 <main+0xb4>)
 8000b54:	f7ff ffa9 	bl	8000aaa <drawStruct>
	drawStruct(&circle_button);
 8000b58:	481a      	ldr	r0, [pc, #104]	; (8000bc4 <main+0xb8>)
 8000b5a:	f7ff ffa6 	bl	8000aaa <drawStruct>
	drawStruct(&polygon_button);
 8000b5e:	481a      	ldr	r0, [pc, #104]	; (8000bc8 <main+0xbc>)
 8000b60:	f7ff ffa3 	bl	8000aaa <drawStruct>
	int current_x, current_y;
	int previous_x, previous_y = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]
	int enabled_action = 0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	613b      	str	r3, [r7, #16]
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		current_x = readTouchX();
 8000b6c:	f7ff ff88 	bl	8000a80 <readTouchX>
 8000b70:	60f8      	str	r0, [r7, #12]
		current_y = readTouchY();
 8000b72:	f7ff ff43 	bl	80009fc <readTouchY>
 8000b76:	60b8      	str	r0, [r7, #8]
		if(current_x > 0 && current_y > 0) {
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	dd12      	ble.n	8000ba4 <main+0x98>
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	dd0f      	ble.n	8000ba4 <main+0x98>


			// 1. Check if in boundary of button
			uint8_t in_button = 1;
 8000b84:	2301      	movs	r3, #1
 8000b86:	71fb      	strb	r3, [r7, #7]


			}

			switch(enabled_action) {
			default: LCD_DrawPixel(current_x, current_y, HX8357_WHITE); break;
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	b29b      	uxth	r3, r3
 8000b8c:	68ba      	ldr	r2, [r7, #8]
 8000b8e:	b291      	uxth	r1, r2
 8000b90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff fd17 	bl	80005c8 <LCD_DrawPixel>
 8000b9a:	bf00      	nop
			}

			previous_x = current_x;
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	603b      	str	r3, [r7, #0]
			previous_y = current_y;
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	617b      	str	r3, [r7, #20]
		}
		HAL_Delay(10);
 8000ba4:	200a      	movs	r0, #10
 8000ba6:	f000 fb2d 	bl	8001204 <HAL_Delay>
		current_x = readTouchX();
 8000baa:	e7df      	b.n	8000b6c <main+0x60>
 8000bac:	20000120 	.word	0x20000120
 8000bb0:	40010800 	.word	0x40010800
 8000bb4:	40011000 	.word	0x40011000
 8000bb8:	40010c00 	.word	0x40010c00
 8000bbc:	20000150 	.word	0x20000150
 8000bc0:	2000001c 	.word	0x2000001c
 8000bc4:	20000030 	.word	0x20000030
 8000bc8:	20000044 	.word	0x20000044

08000bcc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b094      	sub	sp, #80	; 0x50
 8000bd0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bd6:	2228      	movs	r2, #40	; 0x28
 8000bd8:	2100      	movs	r1, #0
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f002 f98d 	bl	8002efa <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
 8000bfa:	60da      	str	r2, [r3, #12]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c04:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c06:	2300      	movs	r3, #0
 8000c08:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c16:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c18:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c1c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c22:	4618      	mov	r0, r3
 8000c24:	f001 f9a2 	bl	8001f6c <HAL_RCC_OscConfig>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <SystemClock_Config+0x66>
	{
		Error_Handler();
 8000c2e:	f000 f945 	bl	8000ebc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c32:	230f      	movs	r3, #15
 8000c34:	617b      	str	r3, [r7, #20]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c36:	2302      	movs	r3, #2
 8000c38:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c42:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c44:	2300      	movs	r3, #0
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	2102      	movs	r1, #2
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f001 fc0c 	bl	800246c <HAL_RCC_ClockConfig>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <SystemClock_Config+0x92>
	{
		Error_Handler();
 8000c5a:	f000 f92f 	bl	8000ebc <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000c62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c66:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f001 fd86 	bl	800277c <HAL_RCCEx_PeriphCLKConfig>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <SystemClock_Config+0xae>
	{
		Error_Handler();
 8000c76:	f000 f921 	bl	8000ebc <Error_Handler>
	}
}
 8000c7a:	bf00      	nop
 8000c7c:	3750      	adds	r7, #80	; 0x50
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
	...

08000c84 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8000c8a:	1d3b      	adds	r3, r7, #4
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000c94:	4b18      	ldr	r3, [pc, #96]	; (8000cf8 <MX_ADC1_Init+0x74>)
 8000c96:	4a19      	ldr	r2, [pc, #100]	; (8000cfc <MX_ADC1_Init+0x78>)
 8000c98:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c9a:	4b17      	ldr	r3, [pc, #92]	; (8000cf8 <MX_ADC1_Init+0x74>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000ca0:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <MX_ADC1_Init+0x74>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ca6:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <MX_ADC1_Init+0x74>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cac:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <MX_ADC1_Init+0x74>)
 8000cae:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000cb2:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cb4:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <MX_ADC1_Init+0x74>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 8000cba:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <MX_ADC1_Init+0x74>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cc0:	480d      	ldr	r0, [pc, #52]	; (8000cf8 <MX_ADC1_Init+0x74>)
 8000cc2:	f000 fac1 	bl	8001248 <HAL_ADC_Init>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_ADC1_Init+0x4c>
	{
		Error_Handler();
 8000ccc:	f000 f8f6 	bl	8000ebc <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_12;
 8000cd0:	230c      	movs	r3, #12
 8000cd2:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cdc:	1d3b      	adds	r3, r7, #4
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <MX_ADC1_Init+0x74>)
 8000ce2:	f000 fd69 	bl	80017b8 <HAL_ADC_ConfigChannel>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_ADC1_Init+0x6c>
	{
		Error_Handler();
 8000cec:	f000 f8e6 	bl	8000ebc <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000cf0:	bf00      	nop
 8000cf2:	3710      	adds	r7, #16
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20000120 	.word	0x20000120
 8000cfc:	40012400 	.word	0x40012400

08000d00 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000d04:	4b17      	ldr	r3, [pc, #92]	; (8000d64 <MX_SPI1_Init+0x64>)
 8000d06:	4a18      	ldr	r2, [pc, #96]	; (8000d68 <MX_SPI1_Init+0x68>)
 8000d08:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d0a:	4b16      	ldr	r3, [pc, #88]	; (8000d64 <MX_SPI1_Init+0x64>)
 8000d0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d10:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d12:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <MX_SPI1_Init+0x64>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d18:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <MX_SPI1_Init+0x64>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d1e:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <MX_SPI1_Init+0x64>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d24:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <MX_SPI1_Init+0x64>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <MX_SPI1_Init+0x64>)
 8000d2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d30:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000d32:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <MX_SPI1_Init+0x64>)
 8000d34:	2208      	movs	r2, #8
 8000d36:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d38:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <MX_SPI1_Init+0x64>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d3e:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <MX_SPI1_Init+0x64>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d44:	4b07      	ldr	r3, [pc, #28]	; (8000d64 <MX_SPI1_Init+0x64>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000d4a:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <MX_SPI1_Init+0x64>)
 8000d4c:	220a      	movs	r2, #10
 8000d4e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d50:	4804      	ldr	r0, [pc, #16]	; (8000d64 <MX_SPI1_Init+0x64>)
 8000d52:	f001 fe85 	bl	8002a60 <HAL_SPI_Init>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 8000d5c:	f000 f8ae 	bl	8000ebc <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000d60:	bf00      	nop
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20000150 	.word	0x20000150
 8000d68:	40013000 	.word	0x40013000

08000d6c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b088      	sub	sp, #32
 8000d70:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d72:	f107 0310 	add.w	r3, r7, #16
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]
 8000d7c:	609a      	str	r2, [r3, #8]
 8000d7e:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000d80:	4b4a      	ldr	r3, [pc, #296]	; (8000eac <MX_GPIO_Init+0x140>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	4a49      	ldr	r2, [pc, #292]	; (8000eac <MX_GPIO_Init+0x140>)
 8000d86:	f043 0320 	orr.w	r3, r3, #32
 8000d8a:	6193      	str	r3, [r2, #24]
 8000d8c:	4b47      	ldr	r3, [pc, #284]	; (8000eac <MX_GPIO_Init+0x140>)
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	f003 0320 	and.w	r3, r3, #32
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000d98:	4b44      	ldr	r3, [pc, #272]	; (8000eac <MX_GPIO_Init+0x140>)
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	4a43      	ldr	r2, [pc, #268]	; (8000eac <MX_GPIO_Init+0x140>)
 8000d9e:	f043 0310 	orr.w	r3, r3, #16
 8000da2:	6193      	str	r3, [r2, #24]
 8000da4:	4b41      	ldr	r3, [pc, #260]	; (8000eac <MX_GPIO_Init+0x140>)
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	f003 0310 	and.w	r3, r3, #16
 8000dac:	60bb      	str	r3, [r7, #8]
 8000dae:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000db0:	4b3e      	ldr	r3, [pc, #248]	; (8000eac <MX_GPIO_Init+0x140>)
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	4a3d      	ldr	r2, [pc, #244]	; (8000eac <MX_GPIO_Init+0x140>)
 8000db6:	f043 0304 	orr.w	r3, r3, #4
 8000dba:	6193      	str	r3, [r2, #24]
 8000dbc:	4b3b      	ldr	r3, [pc, #236]	; (8000eac <MX_GPIO_Init+0x140>)
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	f003 0304 	and.w	r3, r3, #4
 8000dc4:	607b      	str	r3, [r7, #4]
 8000dc6:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc8:	4b38      	ldr	r3, [pc, #224]	; (8000eac <MX_GPIO_Init+0x140>)
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	4a37      	ldr	r2, [pc, #220]	; (8000eac <MX_GPIO_Init+0x140>)
 8000dce:	f043 0308 	orr.w	r3, r3, #8
 8000dd2:	6193      	str	r3, [r2, #24]
 8000dd4:	4b35      	ldr	r3, [pc, #212]	; (8000eac <MX_GPIO_Init+0x140>)
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	f003 0308 	and.w	r3, r3, #8
 8000ddc:	603b      	str	r3, [r7, #0]
 8000dde:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8000de0:	2200      	movs	r2, #0
 8000de2:	2180      	movs	r1, #128	; 0x80
 8000de4:	4832      	ldr	r0, [pc, #200]	; (8000eb0 <MX_GPIO_Init+0x144>)
 8000de6:	f001 f8a9 	bl	8001f3c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LCD_RST_Pin|YMIN_Pin, GPIO_PIN_RESET);
 8000dea:	2200      	movs	r2, #0
 8000dec:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000df0:	4830      	ldr	r0, [pc, #192]	; (8000eb4 <MX_GPIO_Init+0x148>)
 8000df2:	f001 f8a3 	bl	8001f3c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2140      	movs	r1, #64	; 0x40
 8000dfa:	482f      	ldr	r0, [pc, #188]	; (8000eb8 <MX_GPIO_Init+0x14c>)
 8000dfc:	f001 f89e 	bl	8001f3c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : XMIN_Pin */
	GPIO_InitStruct.Pin = XMIN_Pin;
 8000e00:	2308      	movs	r3, #8
 8000e02:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(XMIN_GPIO_Port, &GPIO_InitStruct);
 8000e0c:	f107 0310 	add.w	r3, r7, #16
 8000e10:	4619      	mov	r1, r3
 8000e12:	4827      	ldr	r0, [pc, #156]	; (8000eb0 <MX_GPIO_Init+0x144>)
 8000e14:	f000 ff38 	bl	8001c88 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_DC_Pin */
	GPIO_InitStruct.Pin = LCD_DC_Pin;
 8000e18:	2380      	movs	r3, #128	; 0x80
 8000e1a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e24:	2302      	movs	r3, #2
 8000e26:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 8000e28:	f107 0310 	add.w	r3, r7, #16
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4820      	ldr	r0, [pc, #128]	; (8000eb0 <MX_GPIO_Init+0x144>)
 8000e30:	f000 ff2a 	bl	8001c88 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_RST_Pin */
	GPIO_InitStruct.Pin = LCD_RST_Pin;
 8000e34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e38:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2302      	movs	r3, #2
 8000e44:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8000e46:	f107 0310 	add.w	r3, r7, #16
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4819      	ldr	r0, [pc, #100]	; (8000eb4 <MX_GPIO_Init+0x148>)
 8000e4e:	f000 ff1b 	bl	8001c88 <HAL_GPIO_Init>

	/*Configure GPIO pin : YMIN_Pin */
	GPIO_InitStruct.Pin = YMIN_Pin;
 8000e52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e56:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e60:	2303      	movs	r3, #3
 8000e62:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(YMIN_GPIO_Port, &GPIO_InitStruct);
 8000e64:	f107 0310 	add.w	r3, r7, #16
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4812      	ldr	r0, [pc, #72]	; (8000eb4 <MX_GPIO_Init+0x148>)
 8000e6c:	f000 ff0c 	bl	8001c88 <HAL_GPIO_Init>

	/*Configure GPIO pin : XPLUS_Pin */
	GPIO_InitStruct.Pin = XPLUS_Pin;
 8000e70:	2320      	movs	r3, #32
 8000e72:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(XPLUS_GPIO_Port, &GPIO_InitStruct);
 8000e7c:	f107 0310 	add.w	r3, r7, #16
 8000e80:	4619      	mov	r1, r3
 8000e82:	480d      	ldr	r0, [pc, #52]	; (8000eb8 <MX_GPIO_Init+0x14c>)
 8000e84:	f000 ff00 	bl	8001c88 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_CS_Pin */
	GPIO_InitStruct.Pin = LCD_CS_Pin;
 8000e88:	2340      	movs	r3, #64	; 0x40
 8000e8a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e94:	2302      	movs	r3, #2
 8000e96:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8000e98:	f107 0310 	add.w	r3, r7, #16
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4806      	ldr	r0, [pc, #24]	; (8000eb8 <MX_GPIO_Init+0x14c>)
 8000ea0:	f000 fef2 	bl	8001c88 <HAL_GPIO_Init>

}
 8000ea4:	bf00      	nop
 8000ea6:	3720      	adds	r7, #32
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	40011000 	.word	0x40011000
 8000eb4:	40010800 	.word	0x40010800
 8000eb8:	40010c00 	.word	0x40010c00

08000ebc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bc80      	pop	{r7}
 8000ec6:	4770      	bx	lr

08000ec8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ece:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <HAL_MspInit+0x5c>)
 8000ed0:	699b      	ldr	r3, [r3, #24]
 8000ed2:	4a14      	ldr	r2, [pc, #80]	; (8000f24 <HAL_MspInit+0x5c>)
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	6193      	str	r3, [r2, #24]
 8000eda:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <HAL_MspInit+0x5c>)
 8000edc:	699b      	ldr	r3, [r3, #24]
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	60bb      	str	r3, [r7, #8]
 8000ee4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee6:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <HAL_MspInit+0x5c>)
 8000ee8:	69db      	ldr	r3, [r3, #28]
 8000eea:	4a0e      	ldr	r2, [pc, #56]	; (8000f24 <HAL_MspInit+0x5c>)
 8000eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef0:	61d3      	str	r3, [r2, #28]
 8000ef2:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <HAL_MspInit+0x5c>)
 8000ef4:	69db      	ldr	r3, [r3, #28]
 8000ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000efe:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <HAL_MspInit+0x60>)
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	4a04      	ldr	r2, [pc, #16]	; (8000f28 <HAL_MspInit+0x60>)
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	3714      	adds	r7, #20
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bc80      	pop	{r7}
 8000f22:	4770      	bx	lr
 8000f24:	40021000 	.word	0x40021000
 8000f28:	40010000 	.word	0x40010000

08000f2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b088      	sub	sp, #32
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f34:	f107 0310 	add.w	r3, r7, #16
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a14      	ldr	r2, [pc, #80]	; (8000f98 <HAL_ADC_MspInit+0x6c>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d121      	bne.n	8000f90 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f4c:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <HAL_ADC_MspInit+0x70>)
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	4a12      	ldr	r2, [pc, #72]	; (8000f9c <HAL_ADC_MspInit+0x70>)
 8000f52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f56:	6193      	str	r3, [r2, #24]
 8000f58:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <HAL_ADC_MspInit+0x70>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f64:	4b0d      	ldr	r3, [pc, #52]	; (8000f9c <HAL_ADC_MspInit+0x70>)
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	4a0c      	ldr	r2, [pc, #48]	; (8000f9c <HAL_ADC_MspInit+0x70>)
 8000f6a:	f043 0310 	orr.w	r3, r3, #16
 8000f6e:	6193      	str	r3, [r2, #24]
 8000f70:	4b0a      	ldr	r3, [pc, #40]	; (8000f9c <HAL_ADC_MspInit+0x70>)
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	f003 0310 	and.w	r3, r3, #16
 8000f78:	60bb      	str	r3, [r7, #8]
 8000f7a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PC2     ------> ADC1_IN12 
    */
    GPIO_InitStruct.Pin = YPLUS_Pin;
 8000f7c:	2304      	movs	r3, #4
 8000f7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f80:	2303      	movs	r3, #3
 8000f82:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(YPLUS_GPIO_Port, &GPIO_InitStruct);
 8000f84:	f107 0310 	add.w	r3, r7, #16
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4805      	ldr	r0, [pc, #20]	; (8000fa0 <HAL_ADC_MspInit+0x74>)
 8000f8c:	f000 fe7c 	bl	8001c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f90:	bf00      	nop
 8000f92:	3720      	adds	r7, #32
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40012400 	.word	0x40012400
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	40011000 	.word	0x40011000

08000fa4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b088      	sub	sp, #32
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	f107 0310 	add.w	r3, r7, #16
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a1b      	ldr	r2, [pc, #108]	; (800102c <HAL_SPI_MspInit+0x88>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d12f      	bne.n	8001024 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fc4:	4b1a      	ldr	r3, [pc, #104]	; (8001030 <HAL_SPI_MspInit+0x8c>)
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	4a19      	ldr	r2, [pc, #100]	; (8001030 <HAL_SPI_MspInit+0x8c>)
 8000fca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fce:	6193      	str	r3, [r2, #24]
 8000fd0:	4b17      	ldr	r3, [pc, #92]	; (8001030 <HAL_SPI_MspInit+0x8c>)
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fdc:	4b14      	ldr	r3, [pc, #80]	; (8001030 <HAL_SPI_MspInit+0x8c>)
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	4a13      	ldr	r2, [pc, #76]	; (8001030 <HAL_SPI_MspInit+0x8c>)
 8000fe2:	f043 0304 	orr.w	r3, r3, #4
 8000fe6:	6193      	str	r3, [r2, #24]
 8000fe8:	4b11      	ldr	r3, [pc, #68]	; (8001030 <HAL_SPI_MspInit+0x8c>)
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	f003 0304 	and.w	r3, r3, #4
 8000ff0:	60bb      	str	r3, [r7, #8]
 8000ff2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000ff4:	23a0      	movs	r3, #160	; 0xa0
 8000ff6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001000:	f107 0310 	add.w	r3, r7, #16
 8001004:	4619      	mov	r1, r3
 8001006:	480b      	ldr	r0, [pc, #44]	; (8001034 <HAL_SPI_MspInit+0x90>)
 8001008:	f000 fe3e 	bl	8001c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800100c:	2340      	movs	r3, #64	; 0x40
 800100e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001018:	f107 0310 	add.w	r3, r7, #16
 800101c:	4619      	mov	r1, r3
 800101e:	4805      	ldr	r0, [pc, #20]	; (8001034 <HAL_SPI_MspInit+0x90>)
 8001020:	f000 fe32 	bl	8001c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001024:	bf00      	nop
 8001026:	3720      	adds	r7, #32
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40013000 	.word	0x40013000
 8001030:	40021000 	.word	0x40021000
 8001034:	40010800 	.word	0x40010800

08001038 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	bc80      	pop	{r7}
 8001042:	4770      	bx	lr

08001044 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001048:	e7fe      	b.n	8001048 <HardFault_Handler+0x4>

0800104a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800104e:	e7fe      	b.n	800104e <MemManage_Handler+0x4>

08001050 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001054:	e7fe      	b.n	8001054 <BusFault_Handler+0x4>

08001056 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800105a:	e7fe      	b.n	800105a <UsageFault_Handler+0x4>

0800105c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr

08001068 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr

08001074 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr

08001080 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001084:	f000 f8a2 	bl	80011cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}

0800108c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001090:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <SystemInit+0x5c>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a14      	ldr	r2, [pc, #80]	; (80010e8 <SystemInit+0x5c>)
 8001096:	f043 0301 	orr.w	r3, r3, #1
 800109a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800109c:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <SystemInit+0x5c>)
 800109e:	685a      	ldr	r2, [r3, #4]
 80010a0:	4911      	ldr	r1, [pc, #68]	; (80010e8 <SystemInit+0x5c>)
 80010a2:	4b12      	ldr	r3, [pc, #72]	; (80010ec <SystemInit+0x60>)
 80010a4:	4013      	ands	r3, r2
 80010a6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80010a8:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <SystemInit+0x5c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a0e      	ldr	r2, [pc, #56]	; (80010e8 <SystemInit+0x5c>)
 80010ae:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80010b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010b6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010b8:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <SystemInit+0x5c>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a0a      	ldr	r2, [pc, #40]	; (80010e8 <SystemInit+0x5c>)
 80010be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010c2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80010c4:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <SystemInit+0x5c>)
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	4a07      	ldr	r2, [pc, #28]	; (80010e8 <SystemInit+0x5c>)
 80010ca:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80010ce:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80010d0:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <SystemInit+0x5c>)
 80010d2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80010d6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80010d8:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <SystemInit+0x64>)
 80010da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010de:	609a      	str	r2, [r3, #8]
#endif 
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr
 80010e8:	40021000 	.word	0x40021000
 80010ec:	f8ff0000 	.word	0xf8ff0000
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80010f4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80010f6:	e003      	b.n	8001100 <LoopCopyDataInit>

080010f8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80010f8:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80010fa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80010fc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80010fe:	3104      	adds	r1, #4

08001100 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001100:	480a      	ldr	r0, [pc, #40]	; (800112c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001102:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001104:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001106:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001108:	d3f6      	bcc.n	80010f8 <CopyDataInit>
  ldr r2, =_sbss
 800110a:	4a0a      	ldr	r2, [pc, #40]	; (8001134 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800110c:	e002      	b.n	8001114 <LoopFillZerobss>

0800110e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800110e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001110:	f842 3b04 	str.w	r3, [r2], #4

08001114 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001114:	4b08      	ldr	r3, [pc, #32]	; (8001138 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001116:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001118:	d3f9      	bcc.n	800110e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800111a:	f7ff ffb7 	bl	800108c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800111e:	f001 febd 	bl	8002e9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001122:	f7ff fcf3 	bl	8000b0c <main>
  bx lr
 8001126:	4770      	bx	lr
  ldr r3, =_sidata
 8001128:	08002f6c 	.word	0x08002f6c
  ldr r0, =_sdata
 800112c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001130:	20000064 	.word	0x20000064
  ldr r2, =_sbss
 8001134:	20000064 	.word	0x20000064
  ldr r3, = _ebss
 8001138:	200001ac 	.word	0x200001ac

0800113c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800113c:	e7fe      	b.n	800113c <ADC1_2_IRQHandler>
	...

08001140 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001144:	4b08      	ldr	r3, [pc, #32]	; (8001168 <HAL_Init+0x28>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a07      	ldr	r2, [pc, #28]	; (8001168 <HAL_Init+0x28>)
 800114a:	f043 0310 	orr.w	r3, r3, #16
 800114e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001150:	2003      	movs	r0, #3
 8001152:	f000 fd65 	bl	8001c20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001156:	2000      	movs	r0, #0
 8001158:	f000 f808 	bl	800116c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800115c:	f7ff feb4 	bl	8000ec8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40022000 	.word	0x40022000

0800116c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001174:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <HAL_InitTick+0x54>)
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <HAL_InitTick+0x58>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	4619      	mov	r1, r3
 800117e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001182:	fbb3 f3f1 	udiv	r3, r3, r1
 8001186:	fbb2 f3f3 	udiv	r3, r2, r3
 800118a:	4618      	mov	r0, r3
 800118c:	f000 fd6f 	bl	8001c6e <HAL_SYSTICK_Config>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e00e      	b.n	80011b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2b0f      	cmp	r3, #15
 800119e:	d80a      	bhi.n	80011b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a0:	2200      	movs	r2, #0
 80011a2:	6879      	ldr	r1, [r7, #4]
 80011a4:	f04f 30ff 	mov.w	r0, #4294967295
 80011a8:	f000 fd45 	bl	8001c36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011ac:	4a06      	ldr	r2, [pc, #24]	; (80011c8 <HAL_InitTick+0x5c>)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011b2:	2300      	movs	r3, #0
 80011b4:	e000      	b.n	80011b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000058 	.word	0x20000058
 80011c4:	20000060 	.word	0x20000060
 80011c8:	2000005c 	.word	0x2000005c

080011cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011d0:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <HAL_IncTick+0x1c>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	461a      	mov	r2, r3
 80011d6:	4b05      	ldr	r3, [pc, #20]	; (80011ec <HAL_IncTick+0x20>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4413      	add	r3, r2
 80011dc:	4a03      	ldr	r2, [pc, #12]	; (80011ec <HAL_IncTick+0x20>)
 80011de:	6013      	str	r3, [r2, #0]
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bc80      	pop	{r7}
 80011e6:	4770      	bx	lr
 80011e8:	20000060 	.word	0x20000060
 80011ec:	200001a8 	.word	0x200001a8

080011f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  return uwTick;
 80011f4:	4b02      	ldr	r3, [pc, #8]	; (8001200 <HAL_GetTick+0x10>)
 80011f6:	681b      	ldr	r3, [r3, #0]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bc80      	pop	{r7}
 80011fe:	4770      	bx	lr
 8001200:	200001a8 	.word	0x200001a8

08001204 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800120c:	f7ff fff0 	bl	80011f0 <HAL_GetTick>
 8001210:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800121c:	d005      	beq.n	800122a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <HAL_Delay+0x40>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	461a      	mov	r2, r3
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	4413      	add	r3, r2
 8001228:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800122a:	bf00      	nop
 800122c:	f7ff ffe0 	bl	80011f0 <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	68fa      	ldr	r2, [r7, #12]
 8001238:	429a      	cmp	r2, r3
 800123a:	d8f7      	bhi.n	800122c <HAL_Delay+0x28>
  {
  }
}
 800123c:	bf00      	nop
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20000060 	.word	0x20000060

08001248 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001250:	2300      	movs	r3, #0
 8001252:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001254:	2300      	movs	r3, #0
 8001256:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001258:	2300      	movs	r3, #0
 800125a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800125c:	2300      	movs	r3, #0
 800125e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d101      	bne.n	800126a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e0be      	b.n	80013e8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001274:	2b00      	cmp	r3, #0
 8001276:	d109      	bne.n	800128c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2200      	movs	r2, #0
 8001282:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff fe50 	bl	8000f2c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f000 fbdd 	bl	8001a4c <ADC_ConversionStop_Disable>
 8001292:	4603      	mov	r3, r0
 8001294:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800129a:	f003 0310 	and.w	r3, r3, #16
 800129e:	2b00      	cmp	r3, #0
 80012a0:	f040 8099 	bne.w	80013d6 <HAL_ADC_Init+0x18e>
 80012a4:	7dfb      	ldrb	r3, [r7, #23]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	f040 8095 	bne.w	80013d6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012b4:	f023 0302 	bic.w	r3, r3, #2
 80012b8:	f043 0202 	orr.w	r2, r3, #2
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012c8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	7b1b      	ldrb	r3, [r3, #12]
 80012ce:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80012d0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012d2:	68ba      	ldr	r2, [r7, #8]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012e0:	d003      	beq.n	80012ea <HAL_ADC_Init+0xa2>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d102      	bne.n	80012f0 <HAL_ADC_Init+0xa8>
 80012ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012ee:	e000      	b.n	80012f2 <HAL_ADC_Init+0xaa>
 80012f0:	2300      	movs	r3, #0
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	7d1b      	ldrb	r3, [r3, #20]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d119      	bne.n	8001334 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	7b1b      	ldrb	r3, [r3, #12]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d109      	bne.n	800131c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	3b01      	subs	r3, #1
 800130e:	035a      	lsls	r2, r3, #13
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	4313      	orrs	r3, r2
 8001314:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001318:	613b      	str	r3, [r7, #16]
 800131a:	e00b      	b.n	8001334 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001320:	f043 0220 	orr.w	r2, r3, #32
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800132c:	f043 0201 	orr.w	r2, r3, #1
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	430a      	orrs	r2, r1
 8001346:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	689a      	ldr	r2, [r3, #8]
 800134e:	4b28      	ldr	r3, [pc, #160]	; (80013f0 <HAL_ADC_Init+0x1a8>)
 8001350:	4013      	ands	r3, r2
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	6812      	ldr	r2, [r2, #0]
 8001356:	68b9      	ldr	r1, [r7, #8]
 8001358:	430b      	orrs	r3, r1
 800135a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001364:	d003      	beq.n	800136e <HAL_ADC_Init+0x126>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d104      	bne.n	8001378 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	691b      	ldr	r3, [r3, #16]
 8001372:	3b01      	subs	r3, #1
 8001374:	051b      	lsls	r3, r3, #20
 8001376:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800137e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	68fa      	ldr	r2, [r7, #12]
 8001388:	430a      	orrs	r2, r1
 800138a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	689a      	ldr	r2, [r3, #8]
 8001392:	4b18      	ldr	r3, [pc, #96]	; (80013f4 <HAL_ADC_Init+0x1ac>)
 8001394:	4013      	ands	r3, r2
 8001396:	68ba      	ldr	r2, [r7, #8]
 8001398:	429a      	cmp	r2, r3
 800139a:	d10b      	bne.n	80013b4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a6:	f023 0303 	bic.w	r3, r3, #3
 80013aa:	f043 0201 	orr.w	r2, r3, #1
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80013b2:	e018      	b.n	80013e6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b8:	f023 0312 	bic.w	r3, r3, #18
 80013bc:	f043 0210 	orr.w	r2, r3, #16
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c8:	f043 0201 	orr.w	r2, r3, #1
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80013d4:	e007      	b.n	80013e6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013da:	f043 0210 	orr.w	r2, r3, #16
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80013e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3718      	adds	r7, #24
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	ffe1f7fd 	.word	0xffe1f7fd
 80013f4:	ff1f0efe 	.word	0xff1f0efe

080013f8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001400:	2300      	movs	r3, #0
 8001402:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800140a:	2b01      	cmp	r3, #1
 800140c:	d101      	bne.n	8001412 <HAL_ADC_Start+0x1a>
 800140e:	2302      	movs	r3, #2
 8001410:	e098      	b.n	8001544 <HAL_ADC_Start+0x14c>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2201      	movs	r2, #1
 8001416:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f000 fac4 	bl	80019a8 <ADC_Enable>
 8001420:	4603      	mov	r3, r0
 8001422:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001424:	7bfb      	ldrb	r3, [r7, #15]
 8001426:	2b00      	cmp	r3, #0
 8001428:	f040 8087 	bne.w	800153a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001430:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001434:	f023 0301 	bic.w	r3, r3, #1
 8001438:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a41      	ldr	r2, [pc, #260]	; (800154c <HAL_ADC_Start+0x154>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d105      	bne.n	8001456 <HAL_ADC_Start+0x5e>
 800144a:	4b41      	ldr	r3, [pc, #260]	; (8001550 <HAL_ADC_Start+0x158>)
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d115      	bne.n	8001482 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800145a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800146c:	2b00      	cmp	r3, #0
 800146e:	d026      	beq.n	80014be <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001474:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001478:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001480:	e01d      	b.n	80014be <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001486:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a2f      	ldr	r2, [pc, #188]	; (8001550 <HAL_ADC_Start+0x158>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d004      	beq.n	80014a2 <HAL_ADC_Start+0xaa>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a2b      	ldr	r2, [pc, #172]	; (800154c <HAL_ADC_Start+0x154>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d10d      	bne.n	80014be <HAL_ADC_Start+0xc6>
 80014a2:	4b2b      	ldr	r3, [pc, #172]	; (8001550 <HAL_ADC_Start+0x158>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d007      	beq.n	80014be <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014b6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d006      	beq.n	80014d8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ce:	f023 0206 	bic.w	r2, r3, #6
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80014d6:	e002      	b.n	80014de <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2200      	movs	r2, #0
 80014dc:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2200      	movs	r2, #0
 80014e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f06f 0202 	mvn.w	r2, #2
 80014ee:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80014fa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80014fe:	d113      	bne.n	8001528 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001504:	4a11      	ldr	r2, [pc, #68]	; (800154c <HAL_ADC_Start+0x154>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d105      	bne.n	8001516 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800150a:	4b11      	ldr	r3, [pc, #68]	; (8001550 <HAL_ADC_Start+0x158>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001512:	2b00      	cmp	r3, #0
 8001514:	d108      	bne.n	8001528 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	689a      	ldr	r2, [r3, #8]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001524:	609a      	str	r2, [r3, #8]
 8001526:	e00c      	b.n	8001542 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	689a      	ldr	r2, [r3, #8]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	e003      	b.n	8001542 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2200      	movs	r2, #0
 800153e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001542:	7bfb      	ldrb	r3, [r7, #15]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3710      	adds	r7, #16
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40012800 	.word	0x40012800
 8001550:	40012400 	.word	0x40012400

08001554 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800155c:	2300      	movs	r3, #0
 800155e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001566:	2b01      	cmp	r3, #1
 8001568:	d101      	bne.n	800156e <HAL_ADC_Stop+0x1a>
 800156a:	2302      	movs	r3, #2
 800156c:	e01a      	b.n	80015a4 <HAL_ADC_Stop+0x50>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2201      	movs	r2, #1
 8001572:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f000 fa68 	bl	8001a4c <ADC_ConversionStop_Disable>
 800157c:	4603      	mov	r3, r0
 800157e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001580:	7bfb      	ldrb	r3, [r7, #15]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d109      	bne.n	800159a <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800158a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800158e:	f023 0301 	bic.w	r3, r3, #1
 8001592:	f043 0201 	orr.w	r2, r3, #1
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2200      	movs	r2, #0
 800159e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80015ac:	b590      	push	{r4, r7, lr}
 80015ae:	b087      	sub	sp, #28
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80015b6:	2300      	movs	r3, #0
 80015b8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80015ba:	2300      	movs	r3, #0
 80015bc:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80015be:	2300      	movs	r3, #0
 80015c0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80015c2:	f7ff fe15 	bl	80011f0 <HAL_GetTick>
 80015c6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d00b      	beq.n	80015ee <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015da:	f043 0220 	orr.w	r2, r3, #32
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e0c8      	b.n	8001780 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d12a      	bne.n	8001652 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001602:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001606:	2b00      	cmp	r3, #0
 8001608:	d123      	bne.n	8001652 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800160a:	e01a      	b.n	8001642 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001612:	d016      	beq.n	8001642 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d007      	beq.n	800162a <HAL_ADC_PollForConversion+0x7e>
 800161a:	f7ff fde9 	bl	80011f0 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	429a      	cmp	r2, r3
 8001628:	d20b      	bcs.n	8001642 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162e:	f043 0204 	orr.w	r2, r3, #4
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e09e      	b.n	8001780 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d0dd      	beq.n	800160c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001650:	e06c      	b.n	800172c <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001652:	4b4d      	ldr	r3, [pc, #308]	; (8001788 <HAL_ADC_PollForConversion+0x1dc>)
 8001654:	681c      	ldr	r4, [r3, #0]
 8001656:	2002      	movs	r0, #2
 8001658:	f001 f946 	bl	80028e8 <HAL_RCCEx_GetPeriphCLKFreq>
 800165c:	4603      	mov	r3, r0
 800165e:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	6919      	ldr	r1, [r3, #16]
 8001668:	4b48      	ldr	r3, [pc, #288]	; (800178c <HAL_ADC_PollForConversion+0x1e0>)
 800166a:	400b      	ands	r3, r1
 800166c:	2b00      	cmp	r3, #0
 800166e:	d118      	bne.n	80016a2 <HAL_ADC_PollForConversion+0xf6>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	68d9      	ldr	r1, [r3, #12]
 8001676:	4b46      	ldr	r3, [pc, #280]	; (8001790 <HAL_ADC_PollForConversion+0x1e4>)
 8001678:	400b      	ands	r3, r1
 800167a:	2b00      	cmp	r3, #0
 800167c:	d111      	bne.n	80016a2 <HAL_ADC_PollForConversion+0xf6>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	6919      	ldr	r1, [r3, #16]
 8001684:	4b43      	ldr	r3, [pc, #268]	; (8001794 <HAL_ADC_PollForConversion+0x1e8>)
 8001686:	400b      	ands	r3, r1
 8001688:	2b00      	cmp	r3, #0
 800168a:	d108      	bne.n	800169e <HAL_ADC_PollForConversion+0xf2>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	68d9      	ldr	r1, [r3, #12]
 8001692:	4b41      	ldr	r3, [pc, #260]	; (8001798 <HAL_ADC_PollForConversion+0x1ec>)
 8001694:	400b      	ands	r3, r1
 8001696:	2b00      	cmp	r3, #0
 8001698:	d101      	bne.n	800169e <HAL_ADC_PollForConversion+0xf2>
 800169a:	2314      	movs	r3, #20
 800169c:	e020      	b.n	80016e0 <HAL_ADC_PollForConversion+0x134>
 800169e:	2329      	movs	r3, #41	; 0x29
 80016a0:	e01e      	b.n	80016e0 <HAL_ADC_PollForConversion+0x134>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	6919      	ldr	r1, [r3, #16]
 80016a8:	4b3a      	ldr	r3, [pc, #232]	; (8001794 <HAL_ADC_PollForConversion+0x1e8>)
 80016aa:	400b      	ands	r3, r1
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d106      	bne.n	80016be <HAL_ADC_PollForConversion+0x112>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	68d9      	ldr	r1, [r3, #12]
 80016b6:	4b38      	ldr	r3, [pc, #224]	; (8001798 <HAL_ADC_PollForConversion+0x1ec>)
 80016b8:	400b      	ands	r3, r1
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d00d      	beq.n	80016da <HAL_ADC_PollForConversion+0x12e>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6919      	ldr	r1, [r3, #16]
 80016c4:	4b35      	ldr	r3, [pc, #212]	; (800179c <HAL_ADC_PollForConversion+0x1f0>)
 80016c6:	400b      	ands	r3, r1
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d108      	bne.n	80016de <HAL_ADC_PollForConversion+0x132>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	68d9      	ldr	r1, [r3, #12]
 80016d2:	4b32      	ldr	r3, [pc, #200]	; (800179c <HAL_ADC_PollForConversion+0x1f0>)
 80016d4:	400b      	ands	r3, r1
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d101      	bne.n	80016de <HAL_ADC_PollForConversion+0x132>
 80016da:	2354      	movs	r3, #84	; 0x54
 80016dc:	e000      	b.n	80016e0 <HAL_ADC_PollForConversion+0x134>
 80016de:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80016e0:	fb02 f303 	mul.w	r3, r2, r3
 80016e4:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80016e6:	e01d      	b.n	8001724 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016ee:	d016      	beq.n	800171e <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d007      	beq.n	8001706 <HAL_ADC_PollForConversion+0x15a>
 80016f6:	f7ff fd7b 	bl	80011f0 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	683a      	ldr	r2, [r7, #0]
 8001702:	429a      	cmp	r2, r3
 8001704:	d20b      	bcs.n	800171e <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170a:	f043 0204 	orr.w	r2, r3, #4
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e030      	b.n	8001780 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	3301      	adds	r3, #1
 8001722:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	429a      	cmp	r2, r3
 800172a:	d8dd      	bhi.n	80016e8 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f06f 0212 	mvn.w	r2, #18
 8001734:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800174c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001750:	d115      	bne.n	800177e <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001756:	2b00      	cmp	r3, #0
 8001758:	d111      	bne.n	800177e <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d105      	bne.n	800177e <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001776:	f043 0201 	orr.w	r2, r3, #1
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800177e:	2300      	movs	r3, #0
}
 8001780:	4618      	mov	r0, r3
 8001782:	371c      	adds	r7, #28
 8001784:	46bd      	mov	sp, r7
 8001786:	bd90      	pop	{r4, r7, pc}
 8001788:	20000058 	.word	0x20000058
 800178c:	24924924 	.word	0x24924924
 8001790:	00924924 	.word	0x00924924
 8001794:	12492492 	.word	0x12492492
 8001798:	00492492 	.word	0x00492492
 800179c:	00249249 	.word	0x00249249

080017a0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr

080017b8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017c2:	2300      	movs	r3, #0
 80017c4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80017c6:	2300      	movs	r3, #0
 80017c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d101      	bne.n	80017d8 <HAL_ADC_ConfigChannel+0x20>
 80017d4:	2302      	movs	r3, #2
 80017d6:	e0dc      	b.n	8001992 <HAL_ADC_ConfigChannel+0x1da>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2201      	movs	r2, #1
 80017dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	2b06      	cmp	r3, #6
 80017e6:	d81c      	bhi.n	8001822 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685a      	ldr	r2, [r3, #4]
 80017f2:	4613      	mov	r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	4413      	add	r3, r2
 80017f8:	3b05      	subs	r3, #5
 80017fa:	221f      	movs	r2, #31
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	43db      	mvns	r3, r3
 8001802:	4019      	ands	r1, r3
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	6818      	ldr	r0, [r3, #0]
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685a      	ldr	r2, [r3, #4]
 800180c:	4613      	mov	r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	4413      	add	r3, r2
 8001812:	3b05      	subs	r3, #5
 8001814:	fa00 f203 	lsl.w	r2, r0, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	430a      	orrs	r2, r1
 800181e:	635a      	str	r2, [r3, #52]	; 0x34
 8001820:	e03c      	b.n	800189c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2b0c      	cmp	r3, #12
 8001828:	d81c      	bhi.n	8001864 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685a      	ldr	r2, [r3, #4]
 8001834:	4613      	mov	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	4413      	add	r3, r2
 800183a:	3b23      	subs	r3, #35	; 0x23
 800183c:	221f      	movs	r2, #31
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43db      	mvns	r3, r3
 8001844:	4019      	ands	r1, r3
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	6818      	ldr	r0, [r3, #0]
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685a      	ldr	r2, [r3, #4]
 800184e:	4613      	mov	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	4413      	add	r3, r2
 8001854:	3b23      	subs	r3, #35	; 0x23
 8001856:	fa00 f203 	lsl.w	r2, r0, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	430a      	orrs	r2, r1
 8001860:	631a      	str	r2, [r3, #48]	; 0x30
 8001862:	e01b      	b.n	800189c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685a      	ldr	r2, [r3, #4]
 800186e:	4613      	mov	r3, r2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	4413      	add	r3, r2
 8001874:	3b41      	subs	r3, #65	; 0x41
 8001876:	221f      	movs	r2, #31
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	43db      	mvns	r3, r3
 800187e:	4019      	ands	r1, r3
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	6818      	ldr	r0, [r3, #0]
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685a      	ldr	r2, [r3, #4]
 8001888:	4613      	mov	r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	4413      	add	r3, r2
 800188e:	3b41      	subs	r3, #65	; 0x41
 8001890:	fa00 f203 	lsl.w	r2, r0, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	430a      	orrs	r2, r1
 800189a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2b09      	cmp	r3, #9
 80018a2:	d91c      	bls.n	80018de <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	68d9      	ldr	r1, [r3, #12]
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	4613      	mov	r3, r2
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	4413      	add	r3, r2
 80018b4:	3b1e      	subs	r3, #30
 80018b6:	2207      	movs	r2, #7
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	43db      	mvns	r3, r3
 80018be:	4019      	ands	r1, r3
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	6898      	ldr	r0, [r3, #8]
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	4613      	mov	r3, r2
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	4413      	add	r3, r2
 80018ce:	3b1e      	subs	r3, #30
 80018d0:	fa00 f203 	lsl.w	r2, r0, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	430a      	orrs	r2, r1
 80018da:	60da      	str	r2, [r3, #12]
 80018dc:	e019      	b.n	8001912 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	6919      	ldr	r1, [r3, #16]
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	4613      	mov	r3, r2
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	4413      	add	r3, r2
 80018ee:	2207      	movs	r2, #7
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43db      	mvns	r3, r3
 80018f6:	4019      	ands	r1, r3
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	6898      	ldr	r0, [r3, #8]
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	4613      	mov	r3, r2
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	4413      	add	r3, r2
 8001906:	fa00 f203 	lsl.w	r2, r0, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	430a      	orrs	r2, r1
 8001910:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2b10      	cmp	r3, #16
 8001918:	d003      	beq.n	8001922 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800191e:	2b11      	cmp	r3, #17
 8001920:	d132      	bne.n	8001988 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a1d      	ldr	r2, [pc, #116]	; (800199c <HAL_ADC_ConfigChannel+0x1e4>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d125      	bne.n	8001978 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d126      	bne.n	8001988 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	689a      	ldr	r2, [r3, #8]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001948:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2b10      	cmp	r3, #16
 8001950:	d11a      	bne.n	8001988 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001952:	4b13      	ldr	r3, [pc, #76]	; (80019a0 <HAL_ADC_ConfigChannel+0x1e8>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a13      	ldr	r2, [pc, #76]	; (80019a4 <HAL_ADC_ConfigChannel+0x1ec>)
 8001958:	fba2 2303 	umull	r2, r3, r2, r3
 800195c:	0c9a      	lsrs	r2, r3, #18
 800195e:	4613      	mov	r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	4413      	add	r3, r2
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001968:	e002      	b.n	8001970 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	3b01      	subs	r3, #1
 800196e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1f9      	bne.n	800196a <HAL_ADC_ConfigChannel+0x1b2>
 8001976:	e007      	b.n	8001988 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197c:	f043 0220 	orr.w	r2, r3, #32
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001990:	7bfb      	ldrb	r3, [r7, #15]
}
 8001992:	4618      	mov	r0, r3
 8001994:	3714      	adds	r7, #20
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr
 800199c:	40012400 	.word	0x40012400
 80019a0:	20000058 	.word	0x20000058
 80019a4:	431bde83 	.word	0x431bde83

080019a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019b0:	2300      	movs	r3, #0
 80019b2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80019b4:	2300      	movs	r3, #0
 80019b6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d039      	beq.n	8001a3a <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	689a      	ldr	r2, [r3, #8]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f042 0201 	orr.w	r2, r2, #1
 80019d4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80019d6:	4b1b      	ldr	r3, [pc, #108]	; (8001a44 <ADC_Enable+0x9c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a1b      	ldr	r2, [pc, #108]	; (8001a48 <ADC_Enable+0xa0>)
 80019dc:	fba2 2303 	umull	r2, r3, r2, r3
 80019e0:	0c9b      	lsrs	r3, r3, #18
 80019e2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80019e4:	e002      	b.n	80019ec <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	3b01      	subs	r3, #1
 80019ea:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1f9      	bne.n	80019e6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80019f2:	f7ff fbfd 	bl	80011f0 <HAL_GetTick>
 80019f6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80019f8:	e018      	b.n	8001a2c <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80019fa:	f7ff fbf9 	bl	80011f0 <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d911      	bls.n	8001a2c <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0c:	f043 0210 	orr.w	r2, r3, #16
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a18:	f043 0201 	orr.w	r2, r3, #1
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e007      	b.n	8001a3c <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d1df      	bne.n	80019fa <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3710      	adds	r7, #16
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	20000058 	.word	0x20000058
 8001a48:	431bde83 	.word	0x431bde83

08001a4c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a54:	2300      	movs	r3, #0
 8001a56:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d127      	bne.n	8001ab6 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	689a      	ldr	r2, [r3, #8]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f022 0201 	bic.w	r2, r2, #1
 8001a74:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a76:	f7ff fbbb 	bl	80011f0 <HAL_GetTick>
 8001a7a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a7c:	e014      	b.n	8001aa8 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a7e:	f7ff fbb7 	bl	80011f0 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d90d      	bls.n	8001aa8 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a90:	f043 0210 	orr.w	r2, r3, #16
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9c:	f043 0201 	orr.w	r2, r3, #1
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e007      	b.n	8001ab8 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d0e3      	beq.n	8001a7e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ad0:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ad6:	68ba      	ldr	r2, [r7, #8]
 8001ad8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001adc:	4013      	ands	r3, r2
 8001ade:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ae8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001af0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001af2:	4a04      	ldr	r2, [pc, #16]	; (8001b04 <__NVIC_SetPriorityGrouping+0x44>)
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	60d3      	str	r3, [r2, #12]
}
 8001af8:	bf00      	nop
 8001afa:	3714      	adds	r7, #20
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bc80      	pop	{r7}
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b0c:	4b04      	ldr	r3, [pc, #16]	; (8001b20 <__NVIC_GetPriorityGrouping+0x18>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	0a1b      	lsrs	r3, r3, #8
 8001b12:	f003 0307 	and.w	r3, r3, #7
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc80      	pop	{r7}
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	6039      	str	r1, [r7, #0]
 8001b2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	db0a      	blt.n	8001b4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	b2da      	uxtb	r2, r3
 8001b3c:	490c      	ldr	r1, [pc, #48]	; (8001b70 <__NVIC_SetPriority+0x4c>)
 8001b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b42:	0112      	lsls	r2, r2, #4
 8001b44:	b2d2      	uxtb	r2, r2
 8001b46:	440b      	add	r3, r1
 8001b48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b4c:	e00a      	b.n	8001b64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	b2da      	uxtb	r2, r3
 8001b52:	4908      	ldr	r1, [pc, #32]	; (8001b74 <__NVIC_SetPriority+0x50>)
 8001b54:	79fb      	ldrb	r3, [r7, #7]
 8001b56:	f003 030f 	and.w	r3, r3, #15
 8001b5a:	3b04      	subs	r3, #4
 8001b5c:	0112      	lsls	r2, r2, #4
 8001b5e:	b2d2      	uxtb	r2, r2
 8001b60:	440b      	add	r3, r1
 8001b62:	761a      	strb	r2, [r3, #24]
}
 8001b64:	bf00      	nop
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bc80      	pop	{r7}
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	e000e100 	.word	0xe000e100
 8001b74:	e000ed00 	.word	0xe000ed00

08001b78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b089      	sub	sp, #36	; 0x24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	f1c3 0307 	rsb	r3, r3, #7
 8001b92:	2b04      	cmp	r3, #4
 8001b94:	bf28      	it	cs
 8001b96:	2304      	movcs	r3, #4
 8001b98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	3304      	adds	r3, #4
 8001b9e:	2b06      	cmp	r3, #6
 8001ba0:	d902      	bls.n	8001ba8 <NVIC_EncodePriority+0x30>
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	3b03      	subs	r3, #3
 8001ba6:	e000      	b.n	8001baa <NVIC_EncodePriority+0x32>
 8001ba8:	2300      	movs	r3, #0
 8001baa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bac:	f04f 32ff 	mov.w	r2, #4294967295
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	43da      	mvns	r2, r3
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	401a      	ands	r2, r3
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bca:	43d9      	mvns	r1, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd0:	4313      	orrs	r3, r2
         );
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3724      	adds	r7, #36	; 0x24
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr

08001bdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	3b01      	subs	r3, #1
 8001be8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bec:	d301      	bcc.n	8001bf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e00f      	b.n	8001c12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bf2:	4a0a      	ldr	r2, [pc, #40]	; (8001c1c <SysTick_Config+0x40>)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bfa:	210f      	movs	r1, #15
 8001bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001c00:	f7ff ff90 	bl	8001b24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c04:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <SysTick_Config+0x40>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c0a:	4b04      	ldr	r3, [pc, #16]	; (8001c1c <SysTick_Config+0x40>)
 8001c0c:	2207      	movs	r2, #7
 8001c0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	e000e010 	.word	0xe000e010

08001c20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f7ff ff49 	bl	8001ac0 <__NVIC_SetPriorityGrouping>
}
 8001c2e:	bf00      	nop
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b086      	sub	sp, #24
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	60b9      	str	r1, [r7, #8]
 8001c40:	607a      	str	r2, [r7, #4]
 8001c42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c44:	2300      	movs	r3, #0
 8001c46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c48:	f7ff ff5e 	bl	8001b08 <__NVIC_GetPriorityGrouping>
 8001c4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	68b9      	ldr	r1, [r7, #8]
 8001c52:	6978      	ldr	r0, [r7, #20]
 8001c54:	f7ff ff90 	bl	8001b78 <NVIC_EncodePriority>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c5e:	4611      	mov	r1, r2
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff ff5f 	bl	8001b24 <__NVIC_SetPriority>
}
 8001c66:	bf00      	nop
 8001c68:	3718      	adds	r7, #24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b082      	sub	sp, #8
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f7ff ffb0 	bl	8001bdc <SysTick_Config>
 8001c7c:	4603      	mov	r3, r0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
	...

08001c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b08b      	sub	sp, #44	; 0x2c
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c92:	2300      	movs	r3, #0
 8001c94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c96:	2300      	movs	r3, #0
 8001c98:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c9a:	e127      	b.n	8001eec <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	69fa      	ldr	r2, [r7, #28]
 8001cac:	4013      	ands	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	f040 8116 	bne.w	8001ee6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	2b12      	cmp	r3, #18
 8001cc0:	d034      	beq.n	8001d2c <HAL_GPIO_Init+0xa4>
 8001cc2:	2b12      	cmp	r3, #18
 8001cc4:	d80d      	bhi.n	8001ce2 <HAL_GPIO_Init+0x5a>
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d02b      	beq.n	8001d22 <HAL_GPIO_Init+0x9a>
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d804      	bhi.n	8001cd8 <HAL_GPIO_Init+0x50>
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d031      	beq.n	8001d36 <HAL_GPIO_Init+0xae>
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d01c      	beq.n	8001d10 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001cd6:	e048      	b.n	8001d6a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001cd8:	2b03      	cmp	r3, #3
 8001cda:	d043      	beq.n	8001d64 <HAL_GPIO_Init+0xdc>
 8001cdc:	2b11      	cmp	r3, #17
 8001cde:	d01b      	beq.n	8001d18 <HAL_GPIO_Init+0x90>
          break;
 8001ce0:	e043      	b.n	8001d6a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001ce2:	4a89      	ldr	r2, [pc, #548]	; (8001f08 <HAL_GPIO_Init+0x280>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d026      	beq.n	8001d36 <HAL_GPIO_Init+0xae>
 8001ce8:	4a87      	ldr	r2, [pc, #540]	; (8001f08 <HAL_GPIO_Init+0x280>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d806      	bhi.n	8001cfc <HAL_GPIO_Init+0x74>
 8001cee:	4a87      	ldr	r2, [pc, #540]	; (8001f0c <HAL_GPIO_Init+0x284>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d020      	beq.n	8001d36 <HAL_GPIO_Init+0xae>
 8001cf4:	4a86      	ldr	r2, [pc, #536]	; (8001f10 <HAL_GPIO_Init+0x288>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d01d      	beq.n	8001d36 <HAL_GPIO_Init+0xae>
          break;
 8001cfa:	e036      	b.n	8001d6a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001cfc:	4a85      	ldr	r2, [pc, #532]	; (8001f14 <HAL_GPIO_Init+0x28c>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d019      	beq.n	8001d36 <HAL_GPIO_Init+0xae>
 8001d02:	4a85      	ldr	r2, [pc, #532]	; (8001f18 <HAL_GPIO_Init+0x290>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d016      	beq.n	8001d36 <HAL_GPIO_Init+0xae>
 8001d08:	4a84      	ldr	r2, [pc, #528]	; (8001f1c <HAL_GPIO_Init+0x294>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d013      	beq.n	8001d36 <HAL_GPIO_Init+0xae>
          break;
 8001d0e:	e02c      	b.n	8001d6a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	623b      	str	r3, [r7, #32]
          break;
 8001d16:	e028      	b.n	8001d6a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	3304      	adds	r3, #4
 8001d1e:	623b      	str	r3, [r7, #32]
          break;
 8001d20:	e023      	b.n	8001d6a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	3308      	adds	r3, #8
 8001d28:	623b      	str	r3, [r7, #32]
          break;
 8001d2a:	e01e      	b.n	8001d6a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	330c      	adds	r3, #12
 8001d32:	623b      	str	r3, [r7, #32]
          break;
 8001d34:	e019      	b.n	8001d6a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d102      	bne.n	8001d44 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d3e:	2304      	movs	r3, #4
 8001d40:	623b      	str	r3, [r7, #32]
          break;
 8001d42:	e012      	b.n	8001d6a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d105      	bne.n	8001d58 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d4c:	2308      	movs	r3, #8
 8001d4e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	69fa      	ldr	r2, [r7, #28]
 8001d54:	611a      	str	r2, [r3, #16]
          break;
 8001d56:	e008      	b.n	8001d6a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d58:	2308      	movs	r3, #8
 8001d5a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	69fa      	ldr	r2, [r7, #28]
 8001d60:	615a      	str	r2, [r3, #20]
          break;
 8001d62:	e002      	b.n	8001d6a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d64:	2300      	movs	r3, #0
 8001d66:	623b      	str	r3, [r7, #32]
          break;
 8001d68:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	2bff      	cmp	r3, #255	; 0xff
 8001d6e:	d801      	bhi.n	8001d74 <HAL_GPIO_Init+0xec>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	e001      	b.n	8001d78 <HAL_GPIO_Init+0xf0>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	3304      	adds	r3, #4
 8001d78:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	2bff      	cmp	r3, #255	; 0xff
 8001d7e:	d802      	bhi.n	8001d86 <HAL_GPIO_Init+0xfe>
 8001d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	e002      	b.n	8001d8c <HAL_GPIO_Init+0x104>
 8001d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d88:	3b08      	subs	r3, #8
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	210f      	movs	r1, #15
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	401a      	ands	r2, r3
 8001d9e:	6a39      	ldr	r1, [r7, #32]
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	fa01 f303 	lsl.w	r3, r1, r3
 8001da6:	431a      	orrs	r2, r3
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	f000 8096 	beq.w	8001ee6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001dba:	4b59      	ldr	r3, [pc, #356]	; (8001f20 <HAL_GPIO_Init+0x298>)
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	4a58      	ldr	r2, [pc, #352]	; (8001f20 <HAL_GPIO_Init+0x298>)
 8001dc0:	f043 0301 	orr.w	r3, r3, #1
 8001dc4:	6193      	str	r3, [r2, #24]
 8001dc6:	4b56      	ldr	r3, [pc, #344]	; (8001f20 <HAL_GPIO_Init+0x298>)
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	60bb      	str	r3, [r7, #8]
 8001dd0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001dd2:	4a54      	ldr	r2, [pc, #336]	; (8001f24 <HAL_GPIO_Init+0x29c>)
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd6:	089b      	lsrs	r3, r3, #2
 8001dd8:	3302      	adds	r3, #2
 8001dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dde:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de2:	f003 0303 	and.w	r3, r3, #3
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	220f      	movs	r2, #15
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	43db      	mvns	r3, r3
 8001df0:	68fa      	ldr	r2, [r7, #12]
 8001df2:	4013      	ands	r3, r2
 8001df4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a4b      	ldr	r2, [pc, #300]	; (8001f28 <HAL_GPIO_Init+0x2a0>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d013      	beq.n	8001e26 <HAL_GPIO_Init+0x19e>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a4a      	ldr	r2, [pc, #296]	; (8001f2c <HAL_GPIO_Init+0x2a4>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d00d      	beq.n	8001e22 <HAL_GPIO_Init+0x19a>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a49      	ldr	r2, [pc, #292]	; (8001f30 <HAL_GPIO_Init+0x2a8>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d007      	beq.n	8001e1e <HAL_GPIO_Init+0x196>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a48      	ldr	r2, [pc, #288]	; (8001f34 <HAL_GPIO_Init+0x2ac>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d101      	bne.n	8001e1a <HAL_GPIO_Init+0x192>
 8001e16:	2303      	movs	r3, #3
 8001e18:	e006      	b.n	8001e28 <HAL_GPIO_Init+0x1a0>
 8001e1a:	2304      	movs	r3, #4
 8001e1c:	e004      	b.n	8001e28 <HAL_GPIO_Init+0x1a0>
 8001e1e:	2302      	movs	r3, #2
 8001e20:	e002      	b.n	8001e28 <HAL_GPIO_Init+0x1a0>
 8001e22:	2301      	movs	r3, #1
 8001e24:	e000      	b.n	8001e28 <HAL_GPIO_Init+0x1a0>
 8001e26:	2300      	movs	r3, #0
 8001e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e2a:	f002 0203 	and.w	r2, r2, #3
 8001e2e:	0092      	lsls	r2, r2, #2
 8001e30:	4093      	lsls	r3, r2
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e38:	493a      	ldr	r1, [pc, #232]	; (8001f24 <HAL_GPIO_Init+0x29c>)
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	089b      	lsrs	r3, r3, #2
 8001e3e:	3302      	adds	r3, #2
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d006      	beq.n	8001e60 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e52:	4b39      	ldr	r3, [pc, #228]	; (8001f38 <HAL_GPIO_Init+0x2b0>)
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	4938      	ldr	r1, [pc, #224]	; (8001f38 <HAL_GPIO_Init+0x2b0>)
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	600b      	str	r3, [r1, #0]
 8001e5e:	e006      	b.n	8001e6e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e60:	4b35      	ldr	r3, [pc, #212]	; (8001f38 <HAL_GPIO_Init+0x2b0>)
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	43db      	mvns	r3, r3
 8001e68:	4933      	ldr	r1, [pc, #204]	; (8001f38 <HAL_GPIO_Init+0x2b0>)
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d006      	beq.n	8001e88 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e7a:	4b2f      	ldr	r3, [pc, #188]	; (8001f38 <HAL_GPIO_Init+0x2b0>)
 8001e7c:	685a      	ldr	r2, [r3, #4]
 8001e7e:	492e      	ldr	r1, [pc, #184]	; (8001f38 <HAL_GPIO_Init+0x2b0>)
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	604b      	str	r3, [r1, #4]
 8001e86:	e006      	b.n	8001e96 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e88:	4b2b      	ldr	r3, [pc, #172]	; (8001f38 <HAL_GPIO_Init+0x2b0>)
 8001e8a:	685a      	ldr	r2, [r3, #4]
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	4929      	ldr	r1, [pc, #164]	; (8001f38 <HAL_GPIO_Init+0x2b0>)
 8001e92:	4013      	ands	r3, r2
 8001e94:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d006      	beq.n	8001eb0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ea2:	4b25      	ldr	r3, [pc, #148]	; (8001f38 <HAL_GPIO_Init+0x2b0>)
 8001ea4:	689a      	ldr	r2, [r3, #8]
 8001ea6:	4924      	ldr	r1, [pc, #144]	; (8001f38 <HAL_GPIO_Init+0x2b0>)
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	608b      	str	r3, [r1, #8]
 8001eae:	e006      	b.n	8001ebe <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001eb0:	4b21      	ldr	r3, [pc, #132]	; (8001f38 <HAL_GPIO_Init+0x2b0>)
 8001eb2:	689a      	ldr	r2, [r3, #8]
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	491f      	ldr	r1, [pc, #124]	; (8001f38 <HAL_GPIO_Init+0x2b0>)
 8001eba:	4013      	ands	r3, r2
 8001ebc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d006      	beq.n	8001ed8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001eca:	4b1b      	ldr	r3, [pc, #108]	; (8001f38 <HAL_GPIO_Init+0x2b0>)
 8001ecc:	68da      	ldr	r2, [r3, #12]
 8001ece:	491a      	ldr	r1, [pc, #104]	; (8001f38 <HAL_GPIO_Init+0x2b0>)
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	60cb      	str	r3, [r1, #12]
 8001ed6:	e006      	b.n	8001ee6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ed8:	4b17      	ldr	r3, [pc, #92]	; (8001f38 <HAL_GPIO_Init+0x2b0>)
 8001eda:	68da      	ldr	r2, [r3, #12]
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	4915      	ldr	r1, [pc, #84]	; (8001f38 <HAL_GPIO_Init+0x2b0>)
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee8:	3301      	adds	r3, #1
 8001eea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f47f aed0 	bne.w	8001c9c <HAL_GPIO_Init+0x14>
  }
}
 8001efc:	bf00      	nop
 8001efe:	372c      	adds	r7, #44	; 0x2c
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bc80      	pop	{r7}
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	10210000 	.word	0x10210000
 8001f0c:	10110000 	.word	0x10110000
 8001f10:	10120000 	.word	0x10120000
 8001f14:	10310000 	.word	0x10310000
 8001f18:	10320000 	.word	0x10320000
 8001f1c:	10220000 	.word	0x10220000
 8001f20:	40021000 	.word	0x40021000
 8001f24:	40010000 	.word	0x40010000
 8001f28:	40010800 	.word	0x40010800
 8001f2c:	40010c00 	.word	0x40010c00
 8001f30:	40011000 	.word	0x40011000
 8001f34:	40011400 	.word	0x40011400
 8001f38:	40010400 	.word	0x40010400

08001f3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	460b      	mov	r3, r1
 8001f46:	807b      	strh	r3, [r7, #2]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f4c:	787b      	ldrb	r3, [r7, #1]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d003      	beq.n	8001f5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f52:	887a      	ldrh	r2, [r7, #2]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f58:	e003      	b.n	8001f62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f5a:	887b      	ldrh	r3, [r7, #2]
 8001f5c:	041a      	lsls	r2, r3, #16
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	611a      	str	r2, [r3, #16]
}
 8001f62:	bf00      	nop
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bc80      	pop	{r7}
 8001f6a:	4770      	bx	lr

08001f6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e26c      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f000 8087 	beq.w	800209a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f8c:	4b92      	ldr	r3, [pc, #584]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f003 030c 	and.w	r3, r3, #12
 8001f94:	2b04      	cmp	r3, #4
 8001f96:	d00c      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f98:	4b8f      	ldr	r3, [pc, #572]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f003 030c 	and.w	r3, r3, #12
 8001fa0:	2b08      	cmp	r3, #8
 8001fa2:	d112      	bne.n	8001fca <HAL_RCC_OscConfig+0x5e>
 8001fa4:	4b8c      	ldr	r3, [pc, #560]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fb0:	d10b      	bne.n	8001fca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb2:	4b89      	ldr	r3, [pc, #548]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d06c      	beq.n	8002098 <HAL_RCC_OscConfig+0x12c>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d168      	bne.n	8002098 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e246      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fd2:	d106      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x76>
 8001fd4:	4b80      	ldr	r3, [pc, #512]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a7f      	ldr	r2, [pc, #508]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001fda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fde:	6013      	str	r3, [r2, #0]
 8001fe0:	e02e      	b.n	8002040 <HAL_RCC_OscConfig+0xd4>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d10c      	bne.n	8002004 <HAL_RCC_OscConfig+0x98>
 8001fea:	4b7b      	ldr	r3, [pc, #492]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a7a      	ldr	r2, [pc, #488]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ff4:	6013      	str	r3, [r2, #0]
 8001ff6:	4b78      	ldr	r3, [pc, #480]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a77      	ldr	r2, [pc, #476]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001ffc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002000:	6013      	str	r3, [r2, #0]
 8002002:	e01d      	b.n	8002040 <HAL_RCC_OscConfig+0xd4>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800200c:	d10c      	bne.n	8002028 <HAL_RCC_OscConfig+0xbc>
 800200e:	4b72      	ldr	r3, [pc, #456]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a71      	ldr	r2, [pc, #452]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8002014:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002018:	6013      	str	r3, [r2, #0]
 800201a:	4b6f      	ldr	r3, [pc, #444]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a6e      	ldr	r2, [pc, #440]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8002020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002024:	6013      	str	r3, [r2, #0]
 8002026:	e00b      	b.n	8002040 <HAL_RCC_OscConfig+0xd4>
 8002028:	4b6b      	ldr	r3, [pc, #428]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a6a      	ldr	r2, [pc, #424]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 800202e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002032:	6013      	str	r3, [r2, #0]
 8002034:	4b68      	ldr	r3, [pc, #416]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a67      	ldr	r2, [pc, #412]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 800203a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800203e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d013      	beq.n	8002070 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002048:	f7ff f8d2 	bl	80011f0 <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002050:	f7ff f8ce 	bl	80011f0 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b64      	cmp	r3, #100	; 0x64
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e1fa      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002062:	4b5d      	ldr	r3, [pc, #372]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d0f0      	beq.n	8002050 <HAL_RCC_OscConfig+0xe4>
 800206e:	e014      	b.n	800209a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002070:	f7ff f8be 	bl	80011f0 <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002078:	f7ff f8ba 	bl	80011f0 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b64      	cmp	r3, #100	; 0x64
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e1e6      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800208a:	4b53      	ldr	r3, [pc, #332]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1f0      	bne.n	8002078 <HAL_RCC_OscConfig+0x10c>
 8002096:	e000      	b.n	800209a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002098:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d063      	beq.n	800216e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020a6:	4b4c      	ldr	r3, [pc, #304]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f003 030c 	and.w	r3, r3, #12
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00b      	beq.n	80020ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020b2:	4b49      	ldr	r3, [pc, #292]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f003 030c 	and.w	r3, r3, #12
 80020ba:	2b08      	cmp	r3, #8
 80020bc:	d11c      	bne.n	80020f8 <HAL_RCC_OscConfig+0x18c>
 80020be:	4b46      	ldr	r3, [pc, #280]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d116      	bne.n	80020f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ca:	4b43      	ldr	r3, [pc, #268]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d005      	beq.n	80020e2 <HAL_RCC_OscConfig+0x176>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d001      	beq.n	80020e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e1ba      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e2:	4b3d      	ldr	r3, [pc, #244]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	4939      	ldr	r1, [pc, #228]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020f6:	e03a      	b.n	800216e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d020      	beq.n	8002142 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002100:	4b36      	ldr	r3, [pc, #216]	; (80021dc <HAL_RCC_OscConfig+0x270>)
 8002102:	2201      	movs	r2, #1
 8002104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002106:	f7ff f873 	bl	80011f0 <HAL_GetTick>
 800210a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800210c:	e008      	b.n	8002120 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800210e:	f7ff f86f 	bl	80011f0 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d901      	bls.n	8002120 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e19b      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002120:	4b2d      	ldr	r3, [pc, #180]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d0f0      	beq.n	800210e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800212c:	4b2a      	ldr	r3, [pc, #168]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	695b      	ldr	r3, [r3, #20]
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	4927      	ldr	r1, [pc, #156]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 800213c:	4313      	orrs	r3, r2
 800213e:	600b      	str	r3, [r1, #0]
 8002140:	e015      	b.n	800216e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002142:	4b26      	ldr	r3, [pc, #152]	; (80021dc <HAL_RCC_OscConfig+0x270>)
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002148:	f7ff f852 	bl	80011f0 <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002150:	f7ff f84e 	bl	80011f0 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e17a      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002162:	4b1d      	ldr	r3, [pc, #116]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1f0      	bne.n	8002150 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0308 	and.w	r3, r3, #8
 8002176:	2b00      	cmp	r3, #0
 8002178:	d03a      	beq.n	80021f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d019      	beq.n	80021b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002182:	4b17      	ldr	r3, [pc, #92]	; (80021e0 <HAL_RCC_OscConfig+0x274>)
 8002184:	2201      	movs	r2, #1
 8002186:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002188:	f7ff f832 	bl	80011f0 <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002190:	f7ff f82e 	bl	80011f0 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e15a      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021a2:	4b0d      	ldr	r3, [pc, #52]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 80021a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d0f0      	beq.n	8002190 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021ae:	2001      	movs	r0, #1
 80021b0:	f000 fac6 	bl	8002740 <RCC_Delay>
 80021b4:	e01c      	b.n	80021f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021b6:	4b0a      	ldr	r3, [pc, #40]	; (80021e0 <HAL_RCC_OscConfig+0x274>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021bc:	f7ff f818 	bl	80011f0 <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021c2:	e00f      	b.n	80021e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021c4:	f7ff f814 	bl	80011f0 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d908      	bls.n	80021e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e140      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
 80021d6:	bf00      	nop
 80021d8:	40021000 	.word	0x40021000
 80021dc:	42420000 	.word	0x42420000
 80021e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021e4:	4b9e      	ldr	r3, [pc, #632]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 80021e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1e9      	bne.n	80021c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0304 	and.w	r3, r3, #4
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f000 80a6 	beq.w	800234a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021fe:	2300      	movs	r3, #0
 8002200:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002202:	4b97      	ldr	r3, [pc, #604]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d10d      	bne.n	800222a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800220e:	4b94      	ldr	r3, [pc, #592]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	4a93      	ldr	r2, [pc, #588]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 8002214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002218:	61d3      	str	r3, [r2, #28]
 800221a:	4b91      	ldr	r3, [pc, #580]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002222:	60bb      	str	r3, [r7, #8]
 8002224:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002226:	2301      	movs	r3, #1
 8002228:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800222a:	4b8e      	ldr	r3, [pc, #568]	; (8002464 <HAL_RCC_OscConfig+0x4f8>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002232:	2b00      	cmp	r3, #0
 8002234:	d118      	bne.n	8002268 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002236:	4b8b      	ldr	r3, [pc, #556]	; (8002464 <HAL_RCC_OscConfig+0x4f8>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a8a      	ldr	r2, [pc, #552]	; (8002464 <HAL_RCC_OscConfig+0x4f8>)
 800223c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002240:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002242:	f7fe ffd5 	bl	80011f0 <HAL_GetTick>
 8002246:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002248:	e008      	b.n	800225c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800224a:	f7fe ffd1 	bl	80011f0 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b64      	cmp	r3, #100	; 0x64
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e0fd      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800225c:	4b81      	ldr	r3, [pc, #516]	; (8002464 <HAL_RCC_OscConfig+0x4f8>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002264:	2b00      	cmp	r3, #0
 8002266:	d0f0      	beq.n	800224a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d106      	bne.n	800227e <HAL_RCC_OscConfig+0x312>
 8002270:	4b7b      	ldr	r3, [pc, #492]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	4a7a      	ldr	r2, [pc, #488]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 8002276:	f043 0301 	orr.w	r3, r3, #1
 800227a:	6213      	str	r3, [r2, #32]
 800227c:	e02d      	b.n	80022da <HAL_RCC_OscConfig+0x36e>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d10c      	bne.n	80022a0 <HAL_RCC_OscConfig+0x334>
 8002286:	4b76      	ldr	r3, [pc, #472]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 8002288:	6a1b      	ldr	r3, [r3, #32]
 800228a:	4a75      	ldr	r2, [pc, #468]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 800228c:	f023 0301 	bic.w	r3, r3, #1
 8002290:	6213      	str	r3, [r2, #32]
 8002292:	4b73      	ldr	r3, [pc, #460]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	4a72      	ldr	r2, [pc, #456]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 8002298:	f023 0304 	bic.w	r3, r3, #4
 800229c:	6213      	str	r3, [r2, #32]
 800229e:	e01c      	b.n	80022da <HAL_RCC_OscConfig+0x36e>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	2b05      	cmp	r3, #5
 80022a6:	d10c      	bne.n	80022c2 <HAL_RCC_OscConfig+0x356>
 80022a8:	4b6d      	ldr	r3, [pc, #436]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 80022aa:	6a1b      	ldr	r3, [r3, #32]
 80022ac:	4a6c      	ldr	r2, [pc, #432]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 80022ae:	f043 0304 	orr.w	r3, r3, #4
 80022b2:	6213      	str	r3, [r2, #32]
 80022b4:	4b6a      	ldr	r3, [pc, #424]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	4a69      	ldr	r2, [pc, #420]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 80022ba:	f043 0301 	orr.w	r3, r3, #1
 80022be:	6213      	str	r3, [r2, #32]
 80022c0:	e00b      	b.n	80022da <HAL_RCC_OscConfig+0x36e>
 80022c2:	4b67      	ldr	r3, [pc, #412]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 80022c4:	6a1b      	ldr	r3, [r3, #32]
 80022c6:	4a66      	ldr	r2, [pc, #408]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 80022c8:	f023 0301 	bic.w	r3, r3, #1
 80022cc:	6213      	str	r3, [r2, #32]
 80022ce:	4b64      	ldr	r3, [pc, #400]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 80022d0:	6a1b      	ldr	r3, [r3, #32]
 80022d2:	4a63      	ldr	r2, [pc, #396]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 80022d4:	f023 0304 	bic.w	r3, r3, #4
 80022d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d015      	beq.n	800230e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022e2:	f7fe ff85 	bl	80011f0 <HAL_GetTick>
 80022e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022e8:	e00a      	b.n	8002300 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ea:	f7fe ff81 	bl	80011f0 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e0ab      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002300:	4b57      	ldr	r3, [pc, #348]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d0ee      	beq.n	80022ea <HAL_RCC_OscConfig+0x37e>
 800230c:	e014      	b.n	8002338 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800230e:	f7fe ff6f 	bl	80011f0 <HAL_GetTick>
 8002312:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002314:	e00a      	b.n	800232c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002316:	f7fe ff6b 	bl	80011f0 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	f241 3288 	movw	r2, #5000	; 0x1388
 8002324:	4293      	cmp	r3, r2
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e095      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800232c:	4b4c      	ldr	r3, [pc, #304]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d1ee      	bne.n	8002316 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002338:	7dfb      	ldrb	r3, [r7, #23]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d105      	bne.n	800234a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800233e:	4b48      	ldr	r3, [pc, #288]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	4a47      	ldr	r2, [pc, #284]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 8002344:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002348:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	2b00      	cmp	r3, #0
 8002350:	f000 8081 	beq.w	8002456 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002354:	4b42      	ldr	r3, [pc, #264]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f003 030c 	and.w	r3, r3, #12
 800235c:	2b08      	cmp	r3, #8
 800235e:	d061      	beq.n	8002424 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	69db      	ldr	r3, [r3, #28]
 8002364:	2b02      	cmp	r3, #2
 8002366:	d146      	bne.n	80023f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002368:	4b3f      	ldr	r3, [pc, #252]	; (8002468 <HAL_RCC_OscConfig+0x4fc>)
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236e:	f7fe ff3f 	bl	80011f0 <HAL_GetTick>
 8002372:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002374:	e008      	b.n	8002388 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002376:	f7fe ff3b 	bl	80011f0 <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d901      	bls.n	8002388 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e067      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002388:	4b35      	ldr	r3, [pc, #212]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d1f0      	bne.n	8002376 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a1b      	ldr	r3, [r3, #32]
 8002398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800239c:	d108      	bne.n	80023b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800239e:	4b30      	ldr	r3, [pc, #192]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	492d      	ldr	r1, [pc, #180]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023b0:	4b2b      	ldr	r3, [pc, #172]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a19      	ldr	r1, [r3, #32]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c0:	430b      	orrs	r3, r1
 80023c2:	4927      	ldr	r1, [pc, #156]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023c8:	4b27      	ldr	r3, [pc, #156]	; (8002468 <HAL_RCC_OscConfig+0x4fc>)
 80023ca:	2201      	movs	r2, #1
 80023cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ce:	f7fe ff0f 	bl	80011f0 <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023d4:	e008      	b.n	80023e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d6:	f7fe ff0b 	bl	80011f0 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e037      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023e8:	4b1d      	ldr	r3, [pc, #116]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d0f0      	beq.n	80023d6 <HAL_RCC_OscConfig+0x46a>
 80023f4:	e02f      	b.n	8002456 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f6:	4b1c      	ldr	r3, [pc, #112]	; (8002468 <HAL_RCC_OscConfig+0x4fc>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023fc:	f7fe fef8 	bl	80011f0 <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002404:	f7fe fef4 	bl	80011f0 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e020      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002416:	4b12      	ldr	r3, [pc, #72]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d1f0      	bne.n	8002404 <HAL_RCC_OscConfig+0x498>
 8002422:	e018      	b.n	8002456 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	69db      	ldr	r3, [r3, #28]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d101      	bne.n	8002430 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e013      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002430:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	429a      	cmp	r2, r3
 8002442:	d106      	bne.n	8002452 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800244e:	429a      	cmp	r2, r3
 8002450:	d001      	beq.n	8002456 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e000      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	3718      	adds	r7, #24
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40021000 	.word	0x40021000
 8002464:	40007000 	.word	0x40007000
 8002468:	42420060 	.word	0x42420060

0800246c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d101      	bne.n	8002480 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e0d0      	b.n	8002622 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002480:	4b6a      	ldr	r3, [pc, #424]	; (800262c <HAL_RCC_ClockConfig+0x1c0>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0307 	and.w	r3, r3, #7
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	429a      	cmp	r2, r3
 800248c:	d910      	bls.n	80024b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800248e:	4b67      	ldr	r3, [pc, #412]	; (800262c <HAL_RCC_ClockConfig+0x1c0>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f023 0207 	bic.w	r2, r3, #7
 8002496:	4965      	ldr	r1, [pc, #404]	; (800262c <HAL_RCC_ClockConfig+0x1c0>)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	4313      	orrs	r3, r2
 800249c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800249e:	4b63      	ldr	r3, [pc, #396]	; (800262c <HAL_RCC_ClockConfig+0x1c0>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0307 	and.w	r3, r3, #7
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d001      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e0b8      	b.n	8002622 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d020      	beq.n	80024fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0304 	and.w	r3, r3, #4
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d005      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024c8:	4b59      	ldr	r3, [pc, #356]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	4a58      	ldr	r2, [pc, #352]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80024ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0308 	and.w	r3, r3, #8
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d005      	beq.n	80024ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024e0:	4b53      	ldr	r3, [pc, #332]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	4a52      	ldr	r2, [pc, #328]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80024e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80024ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024ec:	4b50      	ldr	r3, [pc, #320]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	494d      	ldr	r1, [pc, #308]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b00      	cmp	r3, #0
 8002508:	d040      	beq.n	800258c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d107      	bne.n	8002522 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002512:	4b47      	ldr	r3, [pc, #284]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d115      	bne.n	800254a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e07f      	b.n	8002622 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b02      	cmp	r3, #2
 8002528:	d107      	bne.n	800253a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800252a:	4b41      	ldr	r3, [pc, #260]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d109      	bne.n	800254a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e073      	b.n	8002622 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800253a:	4b3d      	ldr	r3, [pc, #244]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e06b      	b.n	8002622 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800254a:	4b39      	ldr	r3, [pc, #228]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f023 0203 	bic.w	r2, r3, #3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	4936      	ldr	r1, [pc, #216]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 8002558:	4313      	orrs	r3, r2
 800255a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800255c:	f7fe fe48 	bl	80011f0 <HAL_GetTick>
 8002560:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002562:	e00a      	b.n	800257a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002564:	f7fe fe44 	bl	80011f0 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002572:	4293      	cmp	r3, r2
 8002574:	d901      	bls.n	800257a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e053      	b.n	8002622 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800257a:	4b2d      	ldr	r3, [pc, #180]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f003 020c 	and.w	r2, r3, #12
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	429a      	cmp	r2, r3
 800258a:	d1eb      	bne.n	8002564 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800258c:	4b27      	ldr	r3, [pc, #156]	; (800262c <HAL_RCC_ClockConfig+0x1c0>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0307 	and.w	r3, r3, #7
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	429a      	cmp	r2, r3
 8002598:	d210      	bcs.n	80025bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800259a:	4b24      	ldr	r3, [pc, #144]	; (800262c <HAL_RCC_ClockConfig+0x1c0>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f023 0207 	bic.w	r2, r3, #7
 80025a2:	4922      	ldr	r1, [pc, #136]	; (800262c <HAL_RCC_ClockConfig+0x1c0>)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025aa:	4b20      	ldr	r3, [pc, #128]	; (800262c <HAL_RCC_ClockConfig+0x1c0>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d001      	beq.n	80025bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e032      	b.n	8002622 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d008      	beq.n	80025da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025c8:	4b19      	ldr	r3, [pc, #100]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	4916      	ldr	r1, [pc, #88]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0308 	and.w	r3, r3, #8
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d009      	beq.n	80025fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025e6:	4b12      	ldr	r3, [pc, #72]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	490e      	ldr	r1, [pc, #56]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025fa:	f000 f821 	bl	8002640 <HAL_RCC_GetSysClockFreq>
 80025fe:	4601      	mov	r1, r0
 8002600:	4b0b      	ldr	r3, [pc, #44]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	091b      	lsrs	r3, r3, #4
 8002606:	f003 030f 	and.w	r3, r3, #15
 800260a:	4a0a      	ldr	r2, [pc, #40]	; (8002634 <HAL_RCC_ClockConfig+0x1c8>)
 800260c:	5cd3      	ldrb	r3, [r2, r3]
 800260e:	fa21 f303 	lsr.w	r3, r1, r3
 8002612:	4a09      	ldr	r2, [pc, #36]	; (8002638 <HAL_RCC_ClockConfig+0x1cc>)
 8002614:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002616:	4b09      	ldr	r3, [pc, #36]	; (800263c <HAL_RCC_ClockConfig+0x1d0>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f7fe fda6 	bl	800116c <HAL_InitTick>

  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40022000 	.word	0x40022000
 8002630:	40021000 	.word	0x40021000
 8002634:	08002f4c 	.word	0x08002f4c
 8002638:	20000058 	.word	0x20000058
 800263c:	2000005c 	.word	0x2000005c

08002640 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002640:	b490      	push	{r4, r7}
 8002642:	b08a      	sub	sp, #40	; 0x28
 8002644:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002646:	4b2a      	ldr	r3, [pc, #168]	; (80026f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002648:	1d3c      	adds	r4, r7, #4
 800264a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800264c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002650:	4b28      	ldr	r3, [pc, #160]	; (80026f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002652:	881b      	ldrh	r3, [r3, #0]
 8002654:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002656:	2300      	movs	r3, #0
 8002658:	61fb      	str	r3, [r7, #28]
 800265a:	2300      	movs	r3, #0
 800265c:	61bb      	str	r3, [r7, #24]
 800265e:	2300      	movs	r3, #0
 8002660:	627b      	str	r3, [r7, #36]	; 0x24
 8002662:	2300      	movs	r3, #0
 8002664:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002666:	2300      	movs	r3, #0
 8002668:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800266a:	4b23      	ldr	r3, [pc, #140]	; (80026f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	f003 030c 	and.w	r3, r3, #12
 8002676:	2b04      	cmp	r3, #4
 8002678:	d002      	beq.n	8002680 <HAL_RCC_GetSysClockFreq+0x40>
 800267a:	2b08      	cmp	r3, #8
 800267c:	d003      	beq.n	8002686 <HAL_RCC_GetSysClockFreq+0x46>
 800267e:	e02d      	b.n	80026dc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002680:	4b1e      	ldr	r3, [pc, #120]	; (80026fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002682:	623b      	str	r3, [r7, #32]
      break;
 8002684:	e02d      	b.n	80026e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	0c9b      	lsrs	r3, r3, #18
 800268a:	f003 030f 	and.w	r3, r3, #15
 800268e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002692:	4413      	add	r3, r2
 8002694:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002698:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d013      	beq.n	80026cc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026a4:	4b14      	ldr	r3, [pc, #80]	; (80026f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	0c5b      	lsrs	r3, r3, #17
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80026b2:	4413      	add	r3, r2
 80026b4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80026b8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	4a0f      	ldr	r2, [pc, #60]	; (80026fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80026be:	fb02 f203 	mul.w	r2, r2, r3
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c8:	627b      	str	r3, [r7, #36]	; 0x24
 80026ca:	e004      	b.n	80026d6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	4a0c      	ldr	r2, [pc, #48]	; (8002700 <HAL_RCC_GetSysClockFreq+0xc0>)
 80026d0:	fb02 f303 	mul.w	r3, r2, r3
 80026d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80026d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d8:	623b      	str	r3, [r7, #32]
      break;
 80026da:	e002      	b.n	80026e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026dc:	4b07      	ldr	r3, [pc, #28]	; (80026fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80026de:	623b      	str	r3, [r7, #32]
      break;
 80026e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026e2:	6a3b      	ldr	r3, [r7, #32]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3728      	adds	r7, #40	; 0x28
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bc90      	pop	{r4, r7}
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	08002f24 	.word	0x08002f24
 80026f4:	08002f34 	.word	0x08002f34
 80026f8:	40021000 	.word	0x40021000
 80026fc:	007a1200 	.word	0x007a1200
 8002700:	003d0900 	.word	0x003d0900

08002704 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002708:	4b02      	ldr	r3, [pc, #8]	; (8002714 <HAL_RCC_GetHCLKFreq+0x10>)
 800270a:	681b      	ldr	r3, [r3, #0]
}
 800270c:	4618      	mov	r0, r3
 800270e:	46bd      	mov	sp, r7
 8002710:	bc80      	pop	{r7}
 8002712:	4770      	bx	lr
 8002714:	20000058 	.word	0x20000058

08002718 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800271c:	f7ff fff2 	bl	8002704 <HAL_RCC_GetHCLKFreq>
 8002720:	4601      	mov	r1, r0
 8002722:	4b05      	ldr	r3, [pc, #20]	; (8002738 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	0adb      	lsrs	r3, r3, #11
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	4a03      	ldr	r2, [pc, #12]	; (800273c <HAL_RCC_GetPCLK2Freq+0x24>)
 800272e:	5cd3      	ldrb	r3, [r2, r3]
 8002730:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002734:	4618      	mov	r0, r3
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40021000 	.word	0x40021000
 800273c:	08002f5c 	.word	0x08002f5c

08002740 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002748:	4b0a      	ldr	r3, [pc, #40]	; (8002774 <RCC_Delay+0x34>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a0a      	ldr	r2, [pc, #40]	; (8002778 <RCC_Delay+0x38>)
 800274e:	fba2 2303 	umull	r2, r3, r2, r3
 8002752:	0a5b      	lsrs	r3, r3, #9
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	fb02 f303 	mul.w	r3, r2, r3
 800275a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800275c:	bf00      	nop
  }
  while (Delay --);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	1e5a      	subs	r2, r3, #1
 8002762:	60fa      	str	r2, [r7, #12]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1f9      	bne.n	800275c <RCC_Delay+0x1c>
}
 8002768:	bf00      	nop
 800276a:	3714      	adds	r7, #20
 800276c:	46bd      	mov	sp, r7
 800276e:	bc80      	pop	{r7}
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	20000058 	.word	0x20000058
 8002778:	10624dd3 	.word	0x10624dd3

0800277c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002784:	2300      	movs	r3, #0
 8002786:	613b      	str	r3, [r7, #16]
 8002788:	2300      	movs	r3, #0
 800278a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	2b00      	cmp	r3, #0
 8002796:	d07d      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002798:	2300      	movs	r3, #0
 800279a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800279c:	4b4f      	ldr	r3, [pc, #316]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800279e:	69db      	ldr	r3, [r3, #28]
 80027a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d10d      	bne.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027a8:	4b4c      	ldr	r3, [pc, #304]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027aa:	69db      	ldr	r3, [r3, #28]
 80027ac:	4a4b      	ldr	r2, [pc, #300]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027b2:	61d3      	str	r3, [r2, #28]
 80027b4:	4b49      	ldr	r3, [pc, #292]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027b6:	69db      	ldr	r3, [r3, #28]
 80027b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027bc:	60bb      	str	r3, [r7, #8]
 80027be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027c0:	2301      	movs	r3, #1
 80027c2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c4:	4b46      	ldr	r3, [pc, #280]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d118      	bne.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027d0:	4b43      	ldr	r3, [pc, #268]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a42      	ldr	r2, [pc, #264]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027dc:	f7fe fd08 	bl	80011f0 <HAL_GetTick>
 80027e0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e2:	e008      	b.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027e4:	f7fe fd04 	bl	80011f0 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b64      	cmp	r3, #100	; 0x64
 80027f0:	d901      	bls.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e06d      	b.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f6:	4b3a      	ldr	r3, [pc, #232]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d0f0      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002802:	4b36      	ldr	r3, [pc, #216]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002804:	6a1b      	ldr	r3, [r3, #32]
 8002806:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800280a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d02e      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	429a      	cmp	r2, r3
 800281e:	d027      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002820:	4b2e      	ldr	r3, [pc, #184]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002828:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800282a:	4b2e      	ldr	r3, [pc, #184]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800282c:	2201      	movs	r2, #1
 800282e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002830:	4b2c      	ldr	r3, [pc, #176]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002832:	2200      	movs	r2, #0
 8002834:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002836:	4a29      	ldr	r2, [pc, #164]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	2b00      	cmp	r3, #0
 8002844:	d014      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002846:	f7fe fcd3 	bl	80011f0 <HAL_GetTick>
 800284a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800284c:	e00a      	b.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800284e:	f7fe fccf 	bl	80011f0 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	f241 3288 	movw	r2, #5000	; 0x1388
 800285c:	4293      	cmp	r3, r2
 800285e:	d901      	bls.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e036      	b.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002864:	4b1d      	ldr	r3, [pc, #116]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002866:	6a1b      	ldr	r3, [r3, #32]
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d0ee      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002870:	4b1a      	ldr	r3, [pc, #104]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002872:	6a1b      	ldr	r3, [r3, #32]
 8002874:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	4917      	ldr	r1, [pc, #92]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800287e:	4313      	orrs	r3, r2
 8002880:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002882:	7dfb      	ldrb	r3, [r7, #23]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d105      	bne.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002888:	4b14      	ldr	r3, [pc, #80]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800288a:	69db      	ldr	r3, [r3, #28]
 800288c:	4a13      	ldr	r2, [pc, #76]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800288e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002892:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d008      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80028a0:	4b0e      	ldr	r3, [pc, #56]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	490b      	ldr	r1, [pc, #44]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0310 	and.w	r3, r3, #16
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d008      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028be:	4b07      	ldr	r3, [pc, #28]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	4904      	ldr	r1, [pc, #16]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3718      	adds	r7, #24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	40021000 	.word	0x40021000
 80028e0:	40007000 	.word	0x40007000
 80028e4:	42420440 	.word	0x42420440

080028e8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80028e8:	b590      	push	{r4, r7, lr}
 80028ea:	b08d      	sub	sp, #52	; 0x34
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80028f0:	4b55      	ldr	r3, [pc, #340]	; (8002a48 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80028f2:	f107 040c 	add.w	r4, r7, #12
 80028f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80028fc:	4b53      	ldr	r3, [pc, #332]	; (8002a4c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80028fe:	881b      	ldrh	r3, [r3, #0]
 8002900:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002902:	2300      	movs	r3, #0
 8002904:	627b      	str	r3, [r7, #36]	; 0x24
 8002906:	2300      	movs	r3, #0
 8002908:	62fb      	str	r3, [r7, #44]	; 0x2c
 800290a:	2300      	movs	r3, #0
 800290c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800290e:	2300      	movs	r3, #0
 8002910:	61fb      	str	r3, [r7, #28]
 8002912:	2300      	movs	r3, #0
 8002914:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2b02      	cmp	r3, #2
 800291a:	d07f      	beq.n	8002a1c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800291c:	2b10      	cmp	r3, #16
 800291e:	d002      	beq.n	8002926 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8002920:	2b01      	cmp	r3, #1
 8002922:	d048      	beq.n	80029b6 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002924:	e08b      	b.n	8002a3e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8002926:	4b4a      	ldr	r3, [pc, #296]	; (8002a50 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800292c:	4b48      	ldr	r3, [pc, #288]	; (8002a50 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d07f      	beq.n	8002a38 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	0c9b      	lsrs	r3, r3, #18
 800293c:	f003 030f 	and.w	r3, r3, #15
 8002940:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002944:	4413      	add	r3, r2
 8002946:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800294a:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d018      	beq.n	8002988 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002956:	4b3e      	ldr	r3, [pc, #248]	; (8002a50 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	0c5b      	lsrs	r3, r3, #17
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002964:	4413      	add	r3, r2
 8002966:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800296a:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00d      	beq.n	8002992 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002976:	4a37      	ldr	r2, [pc, #220]	; (8002a54 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8002978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297a:	fbb2 f2f3 	udiv	r2, r2, r3
 800297e:	6a3b      	ldr	r3, [r7, #32]
 8002980:	fb02 f303 	mul.w	r3, r2, r3
 8002984:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002986:	e004      	b.n	8002992 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002988:	6a3b      	ldr	r3, [r7, #32]
 800298a:	4a33      	ldr	r2, [pc, #204]	; (8002a58 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800298c:	fb02 f303 	mul.w	r3, r2, r3
 8002990:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002992:	4b2f      	ldr	r3, [pc, #188]	; (8002a50 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800299a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800299e:	d102      	bne.n	80029a6 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 80029a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80029a4:	e048      	b.n	8002a38 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 80029a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	4a2c      	ldr	r2, [pc, #176]	; (8002a5c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80029ac:	fba2 2303 	umull	r2, r3, r2, r3
 80029b0:	085b      	lsrs	r3, r3, #1
 80029b2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80029b4:	e040      	b.n	8002a38 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 80029b6:	4b26      	ldr	r3, [pc, #152]	; (8002a50 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029c6:	d108      	bne.n	80029da <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d003      	beq.n	80029da <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 80029d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80029d8:	e01f      	b.n	8002a1a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029e4:	d109      	bne.n	80029fa <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 80029e6:	4b1a      	ldr	r3, [pc, #104]	; (8002a50 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80029e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 80029f2:	f649 4340 	movw	r3, #40000	; 0x9c40
 80029f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80029f8:	e00f      	b.n	8002a1a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a04:	d11a      	bne.n	8002a3c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8002a06:	4b12      	ldr	r3, [pc, #72]	; (8002a50 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d014      	beq.n	8002a3c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8002a12:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002a16:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002a18:	e010      	b.n	8002a3c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8002a1a:	e00f      	b.n	8002a3c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002a1c:	f7ff fe7c 	bl	8002718 <HAL_RCC_GetPCLK2Freq>
 8002a20:	4602      	mov	r2, r0
 8002a22:	4b0b      	ldr	r3, [pc, #44]	; (8002a50 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	0b9b      	lsrs	r3, r3, #14
 8002a28:	f003 0303 	and.w	r3, r3, #3
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a34:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002a36:	e002      	b.n	8002a3e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002a38:	bf00      	nop
 8002a3a:	e000      	b.n	8002a3e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002a3c:	bf00      	nop
    }
  }
  return (frequency);
 8002a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3734      	adds	r7, #52	; 0x34
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd90      	pop	{r4, r7, pc}
 8002a48:	08002f38 	.word	0x08002f38
 8002a4c:	08002f48 	.word	0x08002f48
 8002a50:	40021000 	.word	0x40021000
 8002a54:	007a1200 	.word	0x007a1200
 8002a58:	003d0900 	.word	0x003d0900
 8002a5c:	aaaaaaab 	.word	0xaaaaaaab

08002a60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e053      	b.n	8002b1a <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d106      	bne.n	8002a92 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f7fe fa89 	bl	8000fa4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2202      	movs	r2, #2
 8002a96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002aa8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685a      	ldr	r2, [r3, #4]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	431a      	orrs	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	695b      	ldr	r3, [r3, #20]
 8002ac4:	431a      	orrs	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	69db      	ldr	r3, [r3, #28]
 8002ad4:	431a      	orrs	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	ea42 0103 	orr.w	r1, r2, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	0c1a      	lsrs	r2, r3, #16
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f002 0204 	and.w	r2, r2, #4
 8002af8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	69da      	ldr	r2, [r3, #28]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b08:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3708      	adds	r7, #8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b088      	sub	sp, #32
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	60f8      	str	r0, [r7, #12]
 8002b2a:	60b9      	str	r1, [r7, #8]
 8002b2c:	603b      	str	r3, [r7, #0]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b32:	2300      	movs	r3, #0
 8002b34:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d101      	bne.n	8002b44 <HAL_SPI_Transmit+0x22>
 8002b40:	2302      	movs	r3, #2
 8002b42:	e11e      	b.n	8002d82 <HAL_SPI_Transmit+0x260>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b4c:	f7fe fb50 	bl	80011f0 <HAL_GetTick>
 8002b50:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002b52:	88fb      	ldrh	r3, [r7, #6]
 8002b54:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d002      	beq.n	8002b68 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002b62:	2302      	movs	r3, #2
 8002b64:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002b66:	e103      	b.n	8002d70 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d002      	beq.n	8002b74 <HAL_SPI_Transmit+0x52>
 8002b6e:	88fb      	ldrh	r3, [r7, #6]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d102      	bne.n	8002b7a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002b78:	e0fa      	b.n	8002d70 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2203      	movs	r2, #3
 8002b7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	68ba      	ldr	r2, [r7, #8]
 8002b8c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	88fa      	ldrh	r2, [r7, #6]
 8002b92:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	88fa      	ldrh	r2, [r7, #6]
 8002b98:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bc0:	d107      	bne.n	8002bd2 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bd0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bdc:	2b40      	cmp	r3, #64	; 0x40
 8002bde:	d007      	beq.n	8002bf0 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bf8:	d14b      	bne.n	8002c92 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d002      	beq.n	8002c08 <HAL_SPI_Transmit+0xe6>
 8002c02:	8afb      	ldrh	r3, [r7, #22]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d13e      	bne.n	8002c86 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0c:	881a      	ldrh	r2, [r3, #0]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c18:	1c9a      	adds	r2, r3, #2
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	3b01      	subs	r3, #1
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002c2c:	e02b      	b.n	8002c86 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d112      	bne.n	8002c62 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c40:	881a      	ldrh	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4c:	1c9a      	adds	r2, r3, #2
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002c60:	e011      	b.n	8002c86 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c62:	f7fe fac5 	bl	80011f0 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d803      	bhi.n	8002c7a <HAL_SPI_Transmit+0x158>
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c78:	d102      	bne.n	8002c80 <HAL_SPI_Transmit+0x15e>
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d102      	bne.n	8002c86 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002c84:	e074      	b.n	8002d70 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d1ce      	bne.n	8002c2e <HAL_SPI_Transmit+0x10c>
 8002c90:	e04c      	b.n	8002d2c <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d002      	beq.n	8002ca0 <HAL_SPI_Transmit+0x17e>
 8002c9a:	8afb      	ldrh	r3, [r7, #22]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d140      	bne.n	8002d22 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	330c      	adds	r3, #12
 8002caa:	7812      	ldrb	r2, [r2, #0]
 8002cac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb2:	1c5a      	adds	r2, r3, #1
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	b29a      	uxth	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002cc6:	e02c      	b.n	8002d22 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d113      	bne.n	8002cfe <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	330c      	adds	r3, #12
 8002ce0:	7812      	ldrb	r2, [r2, #0]
 8002ce2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce8:	1c5a      	adds	r2, r3, #1
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	86da      	strh	r2, [r3, #54]	; 0x36
 8002cfc:	e011      	b.n	8002d22 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cfe:	f7fe fa77 	bl	80011f0 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	683a      	ldr	r2, [r7, #0]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d803      	bhi.n	8002d16 <HAL_SPI_Transmit+0x1f4>
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d14:	d102      	bne.n	8002d1c <HAL_SPI_Transmit+0x1fa>
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d102      	bne.n	8002d22 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002d20:	e026      	b.n	8002d70 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1cd      	bne.n	8002cc8 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	6839      	ldr	r1, [r7, #0]
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f000 f894 	bl	8002e5e <SPI_EndRxTxTransaction>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d002      	beq.n	8002d42 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2220      	movs	r2, #32
 8002d40:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d10a      	bne.n	8002d60 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	613b      	str	r3, [r7, #16]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	613b      	str	r3, [r7, #16]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	613b      	str	r3, [r7, #16]
 8002d5e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d002      	beq.n	8002d6e <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	77fb      	strb	r3, [r7, #31]
 8002d6c:	e000      	b.n	8002d70 <HAL_SPI_Transmit+0x24e>
  }

error:
 8002d6e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002d80:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3720      	adds	r7, #32
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b084      	sub	sp, #16
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	60f8      	str	r0, [r7, #12]
 8002d92:	60b9      	str	r1, [r7, #8]
 8002d94:	603b      	str	r3, [r7, #0]
 8002d96:	4613      	mov	r3, r2
 8002d98:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d9a:	e04c      	b.n	8002e36 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da2:	d048      	beq.n	8002e36 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002da4:	f7fe fa24 	bl	80011f0 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	683a      	ldr	r2, [r7, #0]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d902      	bls.n	8002dba <SPI_WaitFlagStateUntilTimeout+0x30>
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d13d      	bne.n	8002e36 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	685a      	ldr	r2, [r3, #4]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002dc8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002dd2:	d111      	bne.n	8002df8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ddc:	d004      	beq.n	8002de8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002de6:	d107      	bne.n	8002df8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002df6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e00:	d10f      	bne.n	8002e22 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e10:	601a      	str	r2, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e20:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e00f      	b.n	8002e56 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	689a      	ldr	r2, [r3, #8]
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	68ba      	ldr	r2, [r7, #8]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	bf0c      	ite	eq
 8002e46:	2301      	moveq	r3, #1
 8002e48:	2300      	movne	r3, #0
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	79fb      	ldrb	r3, [r7, #7]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d1a3      	bne.n	8002d9c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b086      	sub	sp, #24
 8002e62:	af02      	add	r7, sp, #8
 8002e64:	60f8      	str	r0, [r7, #12]
 8002e66:	60b9      	str	r1, [r7, #8]
 8002e68:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	9300      	str	r3, [sp, #0]
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	2200      	movs	r2, #0
 8002e72:	2180      	movs	r1, #128	; 0x80
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f7ff ff88 	bl	8002d8a <SPI_WaitFlagStateUntilTimeout>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d007      	beq.n	8002e90 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e84:	f043 0220 	orr.w	r2, r3, #32
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e000      	b.n	8002e92 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
	...

08002e9c <__libc_init_array>:
 8002e9c:	b570      	push	{r4, r5, r6, lr}
 8002e9e:	2500      	movs	r5, #0
 8002ea0:	4e0c      	ldr	r6, [pc, #48]	; (8002ed4 <__libc_init_array+0x38>)
 8002ea2:	4c0d      	ldr	r4, [pc, #52]	; (8002ed8 <__libc_init_array+0x3c>)
 8002ea4:	1ba4      	subs	r4, r4, r6
 8002ea6:	10a4      	asrs	r4, r4, #2
 8002ea8:	42a5      	cmp	r5, r4
 8002eaa:	d109      	bne.n	8002ec0 <__libc_init_array+0x24>
 8002eac:	f000 f82e 	bl	8002f0c <_init>
 8002eb0:	2500      	movs	r5, #0
 8002eb2:	4e0a      	ldr	r6, [pc, #40]	; (8002edc <__libc_init_array+0x40>)
 8002eb4:	4c0a      	ldr	r4, [pc, #40]	; (8002ee0 <__libc_init_array+0x44>)
 8002eb6:	1ba4      	subs	r4, r4, r6
 8002eb8:	10a4      	asrs	r4, r4, #2
 8002eba:	42a5      	cmp	r5, r4
 8002ebc:	d105      	bne.n	8002eca <__libc_init_array+0x2e>
 8002ebe:	bd70      	pop	{r4, r5, r6, pc}
 8002ec0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ec4:	4798      	blx	r3
 8002ec6:	3501      	adds	r5, #1
 8002ec8:	e7ee      	b.n	8002ea8 <__libc_init_array+0xc>
 8002eca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ece:	4798      	blx	r3
 8002ed0:	3501      	adds	r5, #1
 8002ed2:	e7f2      	b.n	8002eba <__libc_init_array+0x1e>
 8002ed4:	08002f64 	.word	0x08002f64
 8002ed8:	08002f64 	.word	0x08002f64
 8002edc:	08002f64 	.word	0x08002f64
 8002ee0:	08002f68 	.word	0x08002f68

08002ee4 <memcpy>:
 8002ee4:	b510      	push	{r4, lr}
 8002ee6:	1e43      	subs	r3, r0, #1
 8002ee8:	440a      	add	r2, r1
 8002eea:	4291      	cmp	r1, r2
 8002eec:	d100      	bne.n	8002ef0 <memcpy+0xc>
 8002eee:	bd10      	pop	{r4, pc}
 8002ef0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002ef4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002ef8:	e7f7      	b.n	8002eea <memcpy+0x6>

08002efa <memset>:
 8002efa:	4603      	mov	r3, r0
 8002efc:	4402      	add	r2, r0
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d100      	bne.n	8002f04 <memset+0xa>
 8002f02:	4770      	bx	lr
 8002f04:	f803 1b01 	strb.w	r1, [r3], #1
 8002f08:	e7f9      	b.n	8002efe <memset+0x4>
	...

08002f0c <_init>:
 8002f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f0e:	bf00      	nop
 8002f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f12:	bc08      	pop	{r3}
 8002f14:	469e      	mov	lr, r3
 8002f16:	4770      	bx	lr

08002f18 <_fini>:
 8002f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f1a:	bf00      	nop
 8002f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f1e:	bc08      	pop	{r3}
 8002f20:	469e      	mov	lr, r3
 8002f22:	4770      	bx	lr
