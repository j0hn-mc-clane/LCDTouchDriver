
lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006658  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ec8  08006768  08006768  00016768  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009630  08009630  00020108  2**0
                  CONTENTS
  4 .ARM          00000000  08009630  08009630  00020108  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009630  08009630  00020108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009630  08009630  00019630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009634  08009634  00019634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  08009638  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  20000108  08009740  00020108  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08009740  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b563  00000000  00000000  00020131  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001dcc  00000000  00000000  0002b694  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000908  00000000  00000000  0002d460  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000810  00000000  00000000  0002dd68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000051e4  00000000  00000000  0002e578  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00002d3c  00000000  00000000  0003375c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  00036498  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002eb4  00000000  00000000  00036514  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000108 	.word	0x20000108
 800012c:	00000000 	.word	0x00000000
 8000130:	08006750 	.word	0x08006750

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000010c 	.word	0x2000010c
 800014c:	08006750 	.word	0x08006750

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <LCD_SendCommand>:


//***** Functions prototypes *****//

//1. Write Command to LCD
void LCD_SendCommand(uint8_t com) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60000000) = com;
	uint8_t tmpCmd = com;
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	73fb      	strb	r3, [r7, #15]
	//Set DC HIGH for COMMAND mode
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_RESET);
 8000a86:	4b11      	ldr	r3, [pc, #68]	; (8000acc <LCD_SendCommand+0x54>)
 8000a88:	6818      	ldr	r0, [r3, #0]
 8000a8a:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <LCD_SendCommand+0x58>)
 8000a8c:	881b      	ldrh	r3, [r3, #0]
 8000a8e:	2200      	movs	r2, #0
 8000a90:	4619      	mov	r1, r3
 8000a92:	f002 fea1 	bl	80037d8 <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 8000a96:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <LCD_SendCommand+0x5c>)
 8000a98:	6818      	ldr	r0, [r3, #0]
 8000a9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <LCD_SendCommand+0x60>)
 8000a9c:	881b      	ldrh	r3, [r3, #0]
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	f002 fe99 	bl	80037d8 <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpCmd, 1, 5);
 8000aa6:	f107 010f 	add.w	r1, r7, #15
 8000aaa:	2305      	movs	r3, #5
 8000aac:	2201      	movs	r2, #1
 8000aae:	480b      	ldr	r0, [pc, #44]	; (8000adc <LCD_SendCommand+0x64>)
 8000ab0:	f003 fc85 	bl	80043be <HAL_SPI_Transmit>
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 8000ab4:	4b07      	ldr	r3, [pc, #28]	; (8000ad4 <LCD_SendCommand+0x5c>)
 8000ab6:	6818      	ldr	r0, [r3, #0]
 8000ab8:	4b07      	ldr	r3, [pc, #28]	; (8000ad8 <LCD_SendCommand+0x60>)
 8000aba:	881b      	ldrh	r3, [r3, #0]
 8000abc:	2201      	movs	r2, #1
 8000abe:	4619      	mov	r1, r3
 8000ac0:	f002 fe8a 	bl	80037d8 <HAL_GPIO_WritePin>
}
 8000ac4:	bf00      	nop
 8000ac6:	3710      	adds	r7, #16
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20000188 	.word	0x20000188
 8000ad0:	2000018c 	.word	0x2000018c
 8000ad4:	20000180 	.word	0x20000180
 8000ad8:	20000184 	.word	0x20000184
 8000adc:	20000128 	.word	0x20000128

08000ae0 <LCD_SendData>:

//2. Write data to LCD
void LCD_SendData(uint8_t data) {
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60040000) = data;
	uint8_t tmpCmd = data;
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	73fb      	strb	r3, [r7, #15]
	//Set DC LOW for DATA mode
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
 8000aee:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <LCD_SendData+0x54>)
 8000af0:	6818      	ldr	r0, [r3, #0]
 8000af2:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <LCD_SendData+0x58>)
 8000af4:	881b      	ldrh	r3, [r3, #0]
 8000af6:	2201      	movs	r2, #1
 8000af8:	4619      	mov	r1, r3
 8000afa:	f002 fe6d 	bl	80037d8 <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 8000afe:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <LCD_SendData+0x5c>)
 8000b00:	6818      	ldr	r0, [r3, #0]
 8000b02:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <LCD_SendData+0x60>)
 8000b04:	881b      	ldrh	r3, [r3, #0]
 8000b06:	2200      	movs	r2, #0
 8000b08:	4619      	mov	r1, r3
 8000b0a:	f002 fe65 	bl	80037d8 <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpCmd, 1, 5);
 8000b0e:	f107 010f 	add.w	r1, r7, #15
 8000b12:	2305      	movs	r3, #5
 8000b14:	2201      	movs	r2, #1
 8000b16:	480b      	ldr	r0, [pc, #44]	; (8000b44 <LCD_SendData+0x64>)
 8000b18:	f003 fc51 	bl	80043be <HAL_SPI_Transmit>
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 8000b1c:	4b07      	ldr	r3, [pc, #28]	; (8000b3c <LCD_SendData+0x5c>)
 8000b1e:	6818      	ldr	r0, [r3, #0]
 8000b20:	4b07      	ldr	r3, [pc, #28]	; (8000b40 <LCD_SendData+0x60>)
 8000b22:	881b      	ldrh	r3, [r3, #0]
 8000b24:	2201      	movs	r2, #1
 8000b26:	4619      	mov	r1, r3
 8000b28:	f002 fe56 	bl	80037d8 <HAL_GPIO_WritePin>
}
 8000b2c:	bf00      	nop
 8000b2e:	3710      	adds	r7, #16
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000188 	.word	0x20000188
 8000b38:	2000018c 	.word	0x2000018c
 8000b3c:	20000180 	.word	0x20000180
 8000b40:	20000184 	.word	0x20000184
 8000b44:	20000128 	.word	0x20000128

08000b48 <LCD_SendDataMulti>:
//2.2 Write multiple/DMA
void LCD_SendDataMulti(uint16_t Colordata, uint32_t size) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	6039      	str	r1, [r7, #0]
 8000b52:	80fb      	strh	r3, [r7, #6]
	uint8_t colorL, colorH;

	//Set DC LOW for DATA mode
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
 8000b54:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <LCD_SendDataMulti+0x54>)
 8000b56:	6818      	ldr	r0, [r3, #0]
 8000b58:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <LCD_SendDataMulti+0x58>)
 8000b5a:	881b      	ldrh	r3, [r3, #0]
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	4619      	mov	r1, r3
 8000b60:	f002 fe3a 	bl	80037d8 <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 8000b64:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <LCD_SendDataMulti+0x5c>)
 8000b66:	6818      	ldr	r0, [r3, #0]
 8000b68:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <LCD_SendDataMulti+0x60>)
 8000b6a:	881b      	ldrh	r3, [r3, #0]
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	4619      	mov	r1, r3
 8000b70:	f002 fe32 	bl	80037d8 <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&lcdSPIhandle, (uint8_t*) &Colordata, size, 1000);
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	b29a      	uxth	r2, r3
 8000b78:	1db9      	adds	r1, r7, #6
 8000b7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b7e:	480b      	ldr	r0, [pc, #44]	; (8000bac <LCD_SendDataMulti+0x64>)
 8000b80:	f003 fc1d 	bl	80043be <HAL_SPI_Transmit>
	//Wait for end of DMA transfer
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 8000b84:	4b07      	ldr	r3, [pc, #28]	; (8000ba4 <LCD_SendDataMulti+0x5c>)
 8000b86:	6818      	ldr	r0, [r3, #0]
 8000b88:	4b07      	ldr	r3, [pc, #28]	; (8000ba8 <LCD_SendDataMulti+0x60>)
 8000b8a:	881b      	ldrh	r3, [r3, #0]
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	4619      	mov	r1, r3
 8000b90:	f002 fe22 	bl	80037d8 <HAL_GPIO_WritePin>
}
 8000b94:	bf00      	nop
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20000188 	.word	0x20000188
 8000ba0:	2000018c 	.word	0x2000018c
 8000ba4:	20000180 	.word	0x20000180
 8000ba8:	20000184 	.word	0x20000184
 8000bac:	20000128 	.word	0x20000128

08000bb0 <LCD_SetCursorPosition>:

//3. Set cursor position
void LCD_SetCursorPosition(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8000bb0:	b590      	push	{r4, r7, lr}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4604      	mov	r4, r0
 8000bb8:	4608      	mov	r0, r1
 8000bba:	4611      	mov	r1, r2
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	4623      	mov	r3, r4
 8000bc0:	80fb      	strh	r3, [r7, #6]
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	80bb      	strh	r3, [r7, #4]
 8000bc6:	460b      	mov	r3, r1
 8000bc8:	807b      	strh	r3, [r7, #2]
 8000bca:	4613      	mov	r3, r2
 8000bcc:	803b      	strh	r3, [r7, #0]

	LCD_SendCommand(HX8357_CASET);
 8000bce:	202a      	movs	r0, #42	; 0x2a
 8000bd0:	f7ff ff52 	bl	8000a78 <LCD_SendCommand>
	LCD_SendData(x1 >> 8);
 8000bd4:	88fb      	ldrh	r3, [r7, #6]
 8000bd6:	0a1b      	lsrs	r3, r3, #8
 8000bd8:	b29b      	uxth	r3, r3
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff ff7f 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(x1 & 0xFF);
 8000be2:	88fb      	ldrh	r3, [r7, #6]
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff ff7a 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(x2 >> 8);
 8000bec:	887b      	ldrh	r3, [r7, #2]
 8000bee:	0a1b      	lsrs	r3, r3, #8
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff ff73 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(x2 & 0xFF);
 8000bfa:	887b      	ldrh	r3, [r7, #2]
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff ff6e 	bl	8000ae0 <LCD_SendData>

	LCD_SendCommand(HX8357_PASET);
 8000c04:	202b      	movs	r0, #43	; 0x2b
 8000c06:	f7ff ff37 	bl	8000a78 <LCD_SendCommand>
	LCD_SendData(y1 >> 8);
 8000c0a:	88bb      	ldrh	r3, [r7, #4]
 8000c0c:	0a1b      	lsrs	r3, r3, #8
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff ff64 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(y1 & 0xFF);
 8000c18:	88bb      	ldrh	r3, [r7, #4]
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff ff5f 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(y2 >> 8);
 8000c22:	883b      	ldrh	r3, [r7, #0]
 8000c24:	0a1b      	lsrs	r3, r3, #8
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff ff58 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(y2 & 0xFF);
 8000c30:	883b      	ldrh	r3, [r7, #0]
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff ff53 	bl	8000ae0 <LCD_SendData>
	LCD_SendCommand(HX8357_RAMWR);
 8000c3a:	202c      	movs	r0, #44	; 0x2c
 8000c3c:	f7ff ff1c 	bl	8000a78 <LCD_SendCommand>
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd90      	pop	{r4, r7, pc}

08000c48 <LCD_Init>:
//4. Initialise function
void LCD_Init(SPI_HandleTypeDef *spiLcdHandle, GPIO_TypeDef *csPORT,
		uint16_t csPIN, GPIO_TypeDef *dcPORT, uint16_t dcPIN,
		GPIO_TypeDef *resetPORT, uint16_t resetPIN) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	603b      	str	r3, [r7, #0]
 8000c54:	4613      	mov	r3, r2
 8000c56:	80fb      	strh	r3, [r7, #6]
	//Copy SPI settings
	memcpy(&lcdSPIhandle, spiLcdHandle, sizeof(*spiLcdHandle));
 8000c58:	2258      	movs	r2, #88	; 0x58
 8000c5a:	68f9      	ldr	r1, [r7, #12]
 8000c5c:	489e      	ldr	r0, [pc, #632]	; (8000ed8 <LCD_Init+0x290>)
 8000c5e:	f003 fd95 	bl	800478c <memcpy>
	//CS pin
	tftCS_GPIO = csPORT;
 8000c62:	4a9e      	ldr	r2, [pc, #632]	; (8000edc <LCD_Init+0x294>)
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	6013      	str	r3, [r2, #0]
	tftCS_PIN = csPIN;
 8000c68:	4a9d      	ldr	r2, [pc, #628]	; (8000ee0 <LCD_Init+0x298>)
 8000c6a:	88fb      	ldrh	r3, [r7, #6]
 8000c6c:	8013      	strh	r3, [r2, #0]
	//DC pin
	tftDC_GPIO = dcPORT;
 8000c6e:	4a9d      	ldr	r2, [pc, #628]	; (8000ee4 <LCD_Init+0x29c>)
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	6013      	str	r3, [r2, #0]
	tftDC_PIN = dcPIN;
 8000c74:	4a9c      	ldr	r2, [pc, #624]	; (8000ee8 <LCD_Init+0x2a0>)
 8000c76:	8b3b      	ldrh	r3, [r7, #24]
 8000c78:	8013      	strh	r3, [r2, #0]
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 8000c7a:	4b98      	ldr	r3, [pc, #608]	; (8000edc <LCD_Init+0x294>)
 8000c7c:	6818      	ldr	r0, [r3, #0]
 8000c7e:	4b98      	ldr	r3, [pc, #608]	; (8000ee0 <LCD_Init+0x298>)
 8000c80:	881b      	ldrh	r3, [r3, #0]
 8000c82:	2201      	movs	r2, #1
 8000c84:	4619      	mov	r1, r3
 8000c86:	f002 fda7 	bl	80037d8 <HAL_GPIO_WritePin>
	//RESET pin
	tftRESET_GPIO = resetPORT;
 8000c8a:	4a98      	ldr	r2, [pc, #608]	; (8000eec <LCD_Init+0x2a4>)
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	6013      	str	r3, [r2, #0]
	tftRESET_PIN = resetPIN;
 8000c90:	4a97      	ldr	r2, [pc, #604]	; (8000ef0 <LCD_Init+0x2a8>)
 8000c92:	8c3b      	ldrh	r3, [r7, #32]
 8000c94:	8013      	strh	r3, [r2, #0]
	HAL_GPIO_WritePin(resetPORT, resetPIN, GPIO_PIN_SET);  //Turn LCD ON
 8000c96:	8c3b      	ldrh	r3, [r7, #32]
 8000c98:	2201      	movs	r2, #1
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	69f8      	ldr	r0, [r7, #28]
 8000c9e:	f002 fd9b 	bl	80037d8 <HAL_GPIO_WritePin>

	LCD_SendCommand(HX8357_SWRESET);
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	f7ff fee8 	bl	8000a78 <LCD_SendCommand>
	LCD_SendCommand(0x80);
 8000ca8:	2080      	movs	r0, #128	; 0x80
 8000caa:	f7ff fee5 	bl	8000a78 <LCD_SendCommand>
	HAL_Delay(10);
 8000cae:	200a      	movs	r0, #10
 8000cb0:	f001 fef6 	bl	8002aa0 <HAL_Delay>
	LCD_SendCommand(HX8357D_SETC);
 8000cb4:	20b9      	movs	r0, #185	; 0xb9
 8000cb6:	f7ff fedf 	bl	8000a78 <LCD_SendCommand>
	LCD_SendData(0xFF);
 8000cba:	20ff      	movs	r0, #255	; 0xff
 8000cbc:	f7ff ff10 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x83);
 8000cc0:	2083      	movs	r0, #131	; 0x83
 8000cc2:	f7ff ff0d 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x57);
 8000cc6:	2057      	movs	r0, #87	; 0x57
 8000cc8:	f7ff ff0a 	bl	8000ae0 <LCD_SendData>
	LCD_SendCommand(0xFF);
 8000ccc:	20ff      	movs	r0, #255	; 0xff
 8000cce:	f7ff fed3 	bl	8000a78 <LCD_SendCommand>
	LCD_SendCommand(0x80);
 8000cd2:	2080      	movs	r0, #128	; 0x80
 8000cd4:	f7ff fed0 	bl	8000a78 <LCD_SendCommand>
	HAL_Delay(300);
 8000cd8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000cdc:	f001 fee0 	bl	8002aa0 <HAL_Delay>
	LCD_SendCommand(HX8357_SETRGB);
 8000ce0:	20b3      	movs	r0, #179	; 0xb3
 8000ce2:	f7ff fec9 	bl	8000a78 <LCD_SendCommand>
	LCD_SendData(0x80);
 8000ce6:	2080      	movs	r0, #128	; 0x80
 8000ce8:	f7ff fefa 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x00);
 8000cec:	2000      	movs	r0, #0
 8000cee:	f7ff fef7 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x06);
 8000cf2:	2006      	movs	r0, #6
 8000cf4:	f7ff fef4 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x06);
 8000cf8:	2006      	movs	r0, #6
 8000cfa:	f7ff fef1 	bl	8000ae0 <LCD_SendData>
	LCD_SendCommand(HX8357D_SETCOM);
 8000cfe:	20b6      	movs	r0, #182	; 0xb6
 8000d00:	f7ff feba 	bl	8000a78 <LCD_SendCommand>
	LCD_SendData(0x25);
 8000d04:	2025      	movs	r0, #37	; 0x25
 8000d06:	f7ff feeb 	bl	8000ae0 <LCD_SendData>
	LCD_SendCommand(HX8357_SETOSC);
 8000d0a:	20b0      	movs	r0, #176	; 0xb0
 8000d0c:	f7ff feb4 	bl	8000a78 <LCD_SendCommand>
	LCD_SendData(0x68);
 8000d10:	2068      	movs	r0, #104	; 0x68
 8000d12:	f7ff fee5 	bl	8000ae0 <LCD_SendData>
	LCD_SendCommand(HX8357_SETPANEL);
 8000d16:	20cc      	movs	r0, #204	; 0xcc
 8000d18:	f7ff feae 	bl	8000a78 <LCD_SendCommand>
	LCD_SendData(0x05);
 8000d1c:	2005      	movs	r0, #5
 8000d1e:	f7ff fedf 	bl	8000ae0 <LCD_SendData>
	LCD_SendCommand(HX8357_SETPWR1);
 8000d22:	20b1      	movs	r0, #177	; 0xb1
 8000d24:	f7ff fea8 	bl	8000a78 <LCD_SendCommand>
	LCD_SendData(0x00);
 8000d28:	2000      	movs	r0, #0
 8000d2a:	f7ff fed9 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x15);
 8000d2e:	2015      	movs	r0, #21
 8000d30:	f7ff fed6 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x1C);
 8000d34:	201c      	movs	r0, #28
 8000d36:	f7ff fed3 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x1C);
 8000d3a:	201c      	movs	r0, #28
 8000d3c:	f7ff fed0 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x83);
 8000d40:	2083      	movs	r0, #131	; 0x83
 8000d42:	f7ff fecd 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0xAA);
 8000d46:	20aa      	movs	r0, #170	; 0xaa
 8000d48:	f7ff feca 	bl	8000ae0 <LCD_SendData>
	LCD_SendCommand(HX8357D_SETSTBA);
 8000d4c:	20c0      	movs	r0, #192	; 0xc0
 8000d4e:	f7ff fe93 	bl	8000a78 <LCD_SendCommand>
	LCD_SendData(0x50);
 8000d52:	2050      	movs	r0, #80	; 0x50
 8000d54:	f7ff fec4 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x50);
 8000d58:	2050      	movs	r0, #80	; 0x50
 8000d5a:	f7ff fec1 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x01);
 8000d5e:	2001      	movs	r0, #1
 8000d60:	f7ff febe 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x3C);
 8000d64:	203c      	movs	r0, #60	; 0x3c
 8000d66:	f7ff febb 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x1E);
 8000d6a:	201e      	movs	r0, #30
 8000d6c:	f7ff feb8 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x08);
 8000d70:	2008      	movs	r0, #8
 8000d72:	f7ff feb5 	bl	8000ae0 <LCD_SendData>
	LCD_SendCommand(HX8357D_SETCYC);
 8000d76:	20b4      	movs	r0, #180	; 0xb4
 8000d78:	f7ff fe7e 	bl	8000a78 <LCD_SendCommand>
	LCD_SendData(0x02);
 8000d7c:	2002      	movs	r0, #2
 8000d7e:	f7ff feaf 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x40);
 8000d82:	2040      	movs	r0, #64	; 0x40
 8000d84:	f7ff feac 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x00);
 8000d88:	2000      	movs	r0, #0
 8000d8a:	f7ff fea9 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x2A);
 8000d8e:	202a      	movs	r0, #42	; 0x2a
 8000d90:	f7ff fea6 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x2A);
 8000d94:	202a      	movs	r0, #42	; 0x2a
 8000d96:	f7ff fea3 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x0D);
 8000d9a:	200d      	movs	r0, #13
 8000d9c:	f7ff fea0 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x78);
 8000da0:	2078      	movs	r0, #120	; 0x78
 8000da2:	f7ff fe9d 	bl	8000ae0 <LCD_SendData>
	LCD_SendCommand(HX8357D_SETGAMMA);
 8000da6:	20e0      	movs	r0, #224	; 0xe0
 8000da8:	f7ff fe66 	bl	8000a78 <LCD_SendCommand>

	LCD_SendData(0x02);
 8000dac:	2002      	movs	r0, #2
 8000dae:	f7ff fe97 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x0A);
 8000db2:	200a      	movs	r0, #10
 8000db4:	f7ff fe94 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x11);
 8000db8:	2011      	movs	r0, #17
 8000dba:	f7ff fe91 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x1D);
 8000dbe:	201d      	movs	r0, #29
 8000dc0:	f7ff fe8e 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x23);
 8000dc4:	2023      	movs	r0, #35	; 0x23
 8000dc6:	f7ff fe8b 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x35);
 8000dca:	2035      	movs	r0, #53	; 0x35
 8000dcc:	f7ff fe88 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x41);
 8000dd0:	2041      	movs	r0, #65	; 0x41
 8000dd2:	f7ff fe85 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x4b);
 8000dd6:	204b      	movs	r0, #75	; 0x4b
 8000dd8:	f7ff fe82 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x4b);
 8000ddc:	204b      	movs	r0, #75	; 0x4b
 8000dde:	f7ff fe7f 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x42);
 8000de2:	2042      	movs	r0, #66	; 0x42
 8000de4:	f7ff fe7c 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x3A);
 8000de8:	203a      	movs	r0, #58	; 0x3a
 8000dea:	f7ff fe79 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x27);
 8000dee:	2027      	movs	r0, #39	; 0x27
 8000df0:	f7ff fe76 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x1B);
 8000df4:	201b      	movs	r0, #27
 8000df6:	f7ff fe73 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x08);
 8000dfa:	2008      	movs	r0, #8
 8000dfc:	f7ff fe70 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x09);
 8000e00:	2009      	movs	r0, #9
 8000e02:	f7ff fe6d 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x03);
 8000e06:	2003      	movs	r0, #3
 8000e08:	f7ff fe6a 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x02);
 8000e0c:	2002      	movs	r0, #2
 8000e0e:	f7ff fe67 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x0A);
 8000e12:	200a      	movs	r0, #10
 8000e14:	f7ff fe64 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x11);
 8000e18:	2011      	movs	r0, #17
 8000e1a:	f7ff fe61 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x1d);
 8000e1e:	201d      	movs	r0, #29
 8000e20:	f7ff fe5e 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x23);
 8000e24:	2023      	movs	r0, #35	; 0x23
 8000e26:	f7ff fe5b 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x35);
 8000e2a:	2035      	movs	r0, #53	; 0x35
 8000e2c:	f7ff fe58 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x41);
 8000e30:	2041      	movs	r0, #65	; 0x41
 8000e32:	f7ff fe55 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x4b);
 8000e36:	204b      	movs	r0, #75	; 0x4b
 8000e38:	f7ff fe52 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x4b);
 8000e3c:	204b      	movs	r0, #75	; 0x4b
 8000e3e:	f7ff fe4f 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x42);
 8000e42:	2042      	movs	r0, #66	; 0x42
 8000e44:	f7ff fe4c 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x3A);
 8000e48:	203a      	movs	r0, #58	; 0x3a
 8000e4a:	f7ff fe49 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x27);
 8000e4e:	2027      	movs	r0, #39	; 0x27
 8000e50:	f7ff fe46 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x1B);
 8000e54:	201b      	movs	r0, #27
 8000e56:	f7ff fe43 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x08);
 8000e5a:	2008      	movs	r0, #8
 8000e5c:	f7ff fe40 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x09);
 8000e60:	2009      	movs	r0, #9
 8000e62:	f7ff fe3d 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x03);
 8000e66:	2003      	movs	r0, #3
 8000e68:	f7ff fe3a 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x00);
 8000e6c:	2000      	movs	r0, #0
 8000e6e:	f7ff fe37 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(0x01);
 8000e72:	2001      	movs	r0, #1
 8000e74:	f7ff fe34 	bl	8000ae0 <LCD_SendData>

	LCD_SendCommand(HX8357_COLMOD);
 8000e78:	203a      	movs	r0, #58	; 0x3a
 8000e7a:	f7ff fdfd 	bl	8000a78 <LCD_SendCommand>
	LCD_SendData(0x55);
 8000e7e:	2055      	movs	r0, #85	; 0x55
 8000e80:	f7ff fe2e 	bl	8000ae0 <LCD_SendData>
	LCD_SendCommand(HX8357_MADCTL);
 8000e84:	2036      	movs	r0, #54	; 0x36
 8000e86:	f7ff fdf7 	bl	8000a78 <LCD_SendCommand>
	LCD_SendData(0xC0);
 8000e8a:	20c0      	movs	r0, #192	; 0xc0
 8000e8c:	f7ff fe28 	bl	8000ae0 <LCD_SendData>
	LCD_SendCommand(HX8357_TEON);
 8000e90:	2035      	movs	r0, #53	; 0x35
 8000e92:	f7ff fdf1 	bl	8000a78 <LCD_SendCommand>
	LCD_SendData(0x00);
 8000e96:	2000      	movs	r0, #0
 8000e98:	f7ff fe22 	bl	8000ae0 <LCD_SendData>
	LCD_SendCommand(HX8357_TEARLINE);
 8000e9c:	2044      	movs	r0, #68	; 0x44
 8000e9e:	f7ff fdeb 	bl	8000a78 <LCD_SendCommand>
	LCD_SendDataMulti(0x00, 0x02);
 8000ea2:	2102      	movs	r1, #2
 8000ea4:	2000      	movs	r0, #0
 8000ea6:	f7ff fe4f 	bl	8000b48 <LCD_SendDataMulti>
	LCD_SendCommand(HX8357_SLPOUT);
 8000eaa:	2011      	movs	r0, #17
 8000eac:	f7ff fde4 	bl	8000a78 <LCD_SendCommand>
	LCD_SendCommand(0x80);
 8000eb0:	2080      	movs	r0, #128	; 0x80
 8000eb2:	f7ff fde1 	bl	8000a78 <LCD_SendCommand>
	HAL_Delay(150);
 8000eb6:	2096      	movs	r0, #150	; 0x96
 8000eb8:	f001 fdf2 	bl	8002aa0 <HAL_Delay>
	LCD_SendCommand(HX8357_DISPON);
 8000ebc:	2029      	movs	r0, #41	; 0x29
 8000ebe:	f7ff fddb 	bl	8000a78 <LCD_SendCommand>
	LCD_SendCommand(0x80);
 8000ec2:	2080      	movs	r0, #128	; 0x80
 8000ec4:	f7ff fdd8 	bl	8000a78 <LCD_SendCommand>
	HAL_Delay(50);
 8000ec8:	2032      	movs	r0, #50	; 0x32
 8000eca:	f001 fde9 	bl	8002aa0 <HAL_Delay>
}
 8000ece:	bf00      	nop
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000128 	.word	0x20000128
 8000edc:	20000180 	.word	0x20000180
 8000ee0:	20000184 	.word	0x20000184
 8000ee4:	20000188 	.word	0x20000188
 8000ee8:	2000018c 	.word	0x2000018c
 8000eec:	20000190 	.word	0x20000190
 8000ef0:	20000194 	.word	0x20000194

08000ef4 <LCD_DrawPixel>:

//5. Write data to a single pixel
void LCD_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	80fb      	strh	r3, [r7, #6]
 8000efe:	460b      	mov	r3, r1
 8000f00:	80bb      	strh	r3, [r7, #4]
 8000f02:	4613      	mov	r3, r2
 8000f04:	807b      	strh	r3, [r7, #2]
	LCD_SetCursorPosition(x, y, x, y);
 8000f06:	88bb      	ldrh	r3, [r7, #4]
 8000f08:	88fa      	ldrh	r2, [r7, #6]
 8000f0a:	88b9      	ldrh	r1, [r7, #4]
 8000f0c:	88f8      	ldrh	r0, [r7, #6]
 8000f0e:	f7ff fe4f 	bl	8000bb0 <LCD_SetCursorPosition>
	LCD_SendData(color >> 8);
 8000f12:	887b      	ldrh	r3, [r7, #2]
 8000f14:	0a1b      	lsrs	r3, r3, #8
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff fde0 	bl	8000ae0 <LCD_SendData>
	LCD_SendData(color & 0xFF);
 8000f20:	887b      	ldrh	r3, [r7, #2]
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff fddb 	bl	8000ae0 <LCD_SendData>
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <LCD_Fill>:

//6. Fill the entire screen with a background color
void LCD_Fill(uint16_t color) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	80fb      	strh	r3, [r7, #6]
	uint32_t n = LCD_PIXEL_COUNT;
 8000f3e:	f44f 3316 	mov.w	r3, #153600	; 0x25800
 8000f42:	60fb      	str	r3, [r7, #12]
	uint16_t myColor = 0xFF;
 8000f44:	23ff      	movs	r3, #255	; 0xff
 8000f46:	817b      	strh	r3, [r7, #10]

	if (rotationNum == 1 || rotationNum == 3) {
 8000f48:	4b1b      	ldr	r3, [pc, #108]	; (8000fb8 <LCD_Fill+0x84>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d003      	beq.n	8000f58 <LCD_Fill+0x24>
 8000f50:	4b19      	ldr	r3, [pc, #100]	; (8000fb8 <LCD_Fill+0x84>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	2b03      	cmp	r3, #3
 8000f56:	d108      	bne.n	8000f6a <LCD_Fill+0x36>
		LCD_SetCursorPosition(0, 0, HX8357_TFTWIDTH - 1, HX8357_TFTHEIGHT - 1);
 8000f58:	f240 13df 	movw	r3, #479	; 0x1df
 8000f5c:	f240 123f 	movw	r2, #319	; 0x13f
 8000f60:	2100      	movs	r1, #0
 8000f62:	2000      	movs	r0, #0
 8000f64:	f7ff fe24 	bl	8000bb0 <LCD_SetCursorPosition>
 8000f68:	e00f      	b.n	8000f8a <LCD_Fill+0x56>
	} else if (rotationNum == 2 || rotationNum == 4) {
 8000f6a:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <LCD_Fill+0x84>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	d003      	beq.n	8000f7a <LCD_Fill+0x46>
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <LCD_Fill+0x84>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	2b04      	cmp	r3, #4
 8000f78:	d117      	bne.n	8000faa <LCD_Fill+0x76>
		LCD_SetCursorPosition(0, 0, HX8357_TFTHEIGHT - 1, HX8357_TFTWIDTH - 1);
 8000f7a:	f240 133f 	movw	r3, #319	; 0x13f
 8000f7e:	f240 12df 	movw	r2, #479	; 0x1df
 8000f82:	2100      	movs	r1, #0
 8000f84:	2000      	movs	r0, #0
 8000f86:	f7ff fe13 	bl	8000bb0 <LCD_SetCursorPosition>
	}

	while (n) {
 8000f8a:	e00e      	b.n	8000faa <LCD_Fill+0x76>
		n--;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	60fb      	str	r3, [r7, #12]
		LCD_SendData(color >> 8);
 8000f92:	88fb      	ldrh	r3, [r7, #6]
 8000f94:	0a1b      	lsrs	r3, r3, #8
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff fda0 	bl	8000ae0 <LCD_SendData>
		LCD_SendData(color & 0xff);
 8000fa0:	88fb      	ldrh	r3, [r7, #6]
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fd9b 	bl	8000ae0 <LCD_SendData>
	while (n) {
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d1ed      	bne.n	8000f8c <LCD_Fill+0x58>
	}
}
 8000fb0:	bf00      	nop
 8000fb2:	3710      	adds	r7, #16
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000000 	.word	0x20000000

08000fbc <LCD_Fill_Rect>:
//7. Rectangle drawing functions
void LCD_Fill_Rect(unsigned int x0, unsigned int y0, unsigned int x1,
		unsigned int y1, uint16_t color) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
 8000fc8:	603b      	str	r3, [r7, #0]
	uint32_t n = ((x1 + 1) - x0) * ((y1 + 1) - y0);
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	6839      	ldr	r1, [r7, #0]
 8000fd4:	68ba      	ldr	r2, [r7, #8]
 8000fd6:	1a8a      	subs	r2, r1, r2
 8000fd8:	3201      	adds	r2, #1
 8000fda:	fb02 f303 	mul.w	r3, r2, r3
 8000fde:	617b      	str	r3, [r7, #20]
	if (n > LCD_PIXEL_COUNT)
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	f5b3 3f16 	cmp.w	r3, #153600	; 0x25800
 8000fe6:	d902      	bls.n	8000fee <LCD_Fill_Rect+0x32>
		n = LCD_PIXEL_COUNT;
 8000fe8:	f44f 3316 	mov.w	r3, #153600	; 0x25800
 8000fec:	617b      	str	r3, [r7, #20]
	LCD_SetCursorPosition(x0, y0, x1, y1);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	b298      	uxth	r0, r3
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	b299      	uxth	r1, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	b29a      	uxth	r2, r3
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	f7ff fdd7 	bl	8000bb0 <LCD_SetCursorPosition>
	while (n) {
 8001002:	e00e      	b.n	8001022 <LCD_Fill_Rect+0x66>
		n--;
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	3b01      	subs	r3, #1
 8001008:	617b      	str	r3, [r7, #20]
		LCD_SendData(color >> 8);
 800100a:	8c3b      	ldrh	r3, [r7, #32]
 800100c:	0a1b      	lsrs	r3, r3, #8
 800100e:	b29b      	uxth	r3, r3
 8001010:	b2db      	uxtb	r3, r3
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff fd64 	bl	8000ae0 <LCD_SendData>
		LCD_SendData(color & 0xff);
 8001018:	8c3b      	ldrh	r3, [r7, #32]
 800101a:	b2db      	uxtb	r3, r3
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff fd5f 	bl	8000ae0 <LCD_SendData>
	while (n) {
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d1ed      	bne.n	8001004 <LCD_Fill_Rect+0x48>
	}
}
 8001028:	bf00      	nop
 800102a:	3718      	adds	r7, #24
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <LCD_drawCircle>:

//8. Circle drawing functions
void LCD_drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 8001030:	b590      	push	{r4, r7, lr}
 8001032:	b087      	sub	sp, #28
 8001034:	af00      	add	r7, sp, #0
 8001036:	4604      	mov	r4, r0
 8001038:	4608      	mov	r0, r1
 800103a:	4611      	mov	r1, r2
 800103c:	461a      	mov	r2, r3
 800103e:	4623      	mov	r3, r4
 8001040:	80fb      	strh	r3, [r7, #6]
 8001042:	4603      	mov	r3, r0
 8001044:	80bb      	strh	r3, [r7, #4]
 8001046:	460b      	mov	r3, r1
 8001048:	807b      	strh	r3, [r7, #2]
 800104a:	4613      	mov	r3, r2
 800104c:	803b      	strh	r3, [r7, #0]
	int16_t f = 1 - r;
 800104e:	887b      	ldrh	r3, [r7, #2]
 8001050:	f1c3 0301 	rsb	r3, r3, #1
 8001054:	b29b      	uxth	r3, r3
 8001056:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8001058:	2301      	movs	r3, #1
 800105a:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 800105c:	887b      	ldrh	r3, [r7, #2]
 800105e:	461a      	mov	r2, r3
 8001060:	03d2      	lsls	r2, r2, #15
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	b29b      	uxth	r3, r3
 8001068:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 800106e:	887b      	ldrh	r3, [r7, #2]
 8001070:	81fb      	strh	r3, [r7, #14]

	LCD_DrawPixel(x0, y0 + r, color);
 8001072:	88f8      	ldrh	r0, [r7, #6]
 8001074:	88ba      	ldrh	r2, [r7, #4]
 8001076:	887b      	ldrh	r3, [r7, #2]
 8001078:	4413      	add	r3, r2
 800107a:	b29b      	uxth	r3, r3
 800107c:	883a      	ldrh	r2, [r7, #0]
 800107e:	4619      	mov	r1, r3
 8001080:	f7ff ff38 	bl	8000ef4 <LCD_DrawPixel>
	LCD_DrawPixel(x0, y0 - r, color);
 8001084:	88f8      	ldrh	r0, [r7, #6]
 8001086:	88ba      	ldrh	r2, [r7, #4]
 8001088:	887b      	ldrh	r3, [r7, #2]
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	b29b      	uxth	r3, r3
 800108e:	883a      	ldrh	r2, [r7, #0]
 8001090:	4619      	mov	r1, r3
 8001092:	f7ff ff2f 	bl	8000ef4 <LCD_DrawPixel>
	LCD_DrawPixel(x0 + r, y0, color);
 8001096:	88fa      	ldrh	r2, [r7, #6]
 8001098:	887b      	ldrh	r3, [r7, #2]
 800109a:	4413      	add	r3, r2
 800109c:	b29b      	uxth	r3, r3
 800109e:	88b9      	ldrh	r1, [r7, #4]
 80010a0:	883a      	ldrh	r2, [r7, #0]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff ff26 	bl	8000ef4 <LCD_DrawPixel>
	LCD_DrawPixel(x0 - r, y0, color);
 80010a8:	88fa      	ldrh	r2, [r7, #6]
 80010aa:	887b      	ldrh	r3, [r7, #2]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	88b9      	ldrh	r1, [r7, #4]
 80010b2:	883a      	ldrh	r2, [r7, #0]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff1d 	bl	8000ef4 <LCD_DrawPixel>

	while (x < y) {
 80010ba:	e081      	b.n	80011c0 <LCD_drawCircle+0x190>
		if (f >= 0) {
 80010bc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	db0e      	blt.n	80010e2 <LCD_drawCircle+0xb2>
			y--;
 80010c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	3b01      	subs	r3, #1
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 80010d0:	8a7b      	ldrh	r3, [r7, #18]
 80010d2:	3302      	adds	r3, #2
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 80010d8:	8afa      	ldrh	r2, [r7, #22]
 80010da:	8a7b      	ldrh	r3, [r7, #18]
 80010dc:	4413      	add	r3, r2
 80010de:	b29b      	uxth	r3, r3
 80010e0:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 80010e2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80010e6:	b29b      	uxth	r3, r3
 80010e8:	3301      	adds	r3, #1
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 80010ee:	8abb      	ldrh	r3, [r7, #20]
 80010f0:	3302      	adds	r3, #2
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 80010f6:	8afa      	ldrh	r2, [r7, #22]
 80010f8:	8abb      	ldrh	r3, [r7, #20]
 80010fa:	4413      	add	r3, r2
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	82fb      	strh	r3, [r7, #22]

		LCD_DrawPixel(x0 + x, y0 + y, color);
 8001100:	88fa      	ldrh	r2, [r7, #6]
 8001102:	8a3b      	ldrh	r3, [r7, #16]
 8001104:	4413      	add	r3, r2
 8001106:	b298      	uxth	r0, r3
 8001108:	88ba      	ldrh	r2, [r7, #4]
 800110a:	89fb      	ldrh	r3, [r7, #14]
 800110c:	4413      	add	r3, r2
 800110e:	b29b      	uxth	r3, r3
 8001110:	883a      	ldrh	r2, [r7, #0]
 8001112:	4619      	mov	r1, r3
 8001114:	f7ff feee 	bl	8000ef4 <LCD_DrawPixel>
		LCD_DrawPixel(x0 - x, y0 + y, color);
 8001118:	88fa      	ldrh	r2, [r7, #6]
 800111a:	8a3b      	ldrh	r3, [r7, #16]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	b298      	uxth	r0, r3
 8001120:	88ba      	ldrh	r2, [r7, #4]
 8001122:	89fb      	ldrh	r3, [r7, #14]
 8001124:	4413      	add	r3, r2
 8001126:	b29b      	uxth	r3, r3
 8001128:	883a      	ldrh	r2, [r7, #0]
 800112a:	4619      	mov	r1, r3
 800112c:	f7ff fee2 	bl	8000ef4 <LCD_DrawPixel>
		LCD_DrawPixel(x0 + x, y0 - y, color);
 8001130:	88fa      	ldrh	r2, [r7, #6]
 8001132:	8a3b      	ldrh	r3, [r7, #16]
 8001134:	4413      	add	r3, r2
 8001136:	b298      	uxth	r0, r3
 8001138:	88ba      	ldrh	r2, [r7, #4]
 800113a:	89fb      	ldrh	r3, [r7, #14]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	b29b      	uxth	r3, r3
 8001140:	883a      	ldrh	r2, [r7, #0]
 8001142:	4619      	mov	r1, r3
 8001144:	f7ff fed6 	bl	8000ef4 <LCD_DrawPixel>
		LCD_DrawPixel(x0 - x, y0 - y, color);
 8001148:	88fa      	ldrh	r2, [r7, #6]
 800114a:	8a3b      	ldrh	r3, [r7, #16]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	b298      	uxth	r0, r3
 8001150:	88ba      	ldrh	r2, [r7, #4]
 8001152:	89fb      	ldrh	r3, [r7, #14]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	b29b      	uxth	r3, r3
 8001158:	883a      	ldrh	r2, [r7, #0]
 800115a:	4619      	mov	r1, r3
 800115c:	f7ff feca 	bl	8000ef4 <LCD_DrawPixel>
		LCD_DrawPixel(x0 + y, y0 + x, color);
 8001160:	88fa      	ldrh	r2, [r7, #6]
 8001162:	89fb      	ldrh	r3, [r7, #14]
 8001164:	4413      	add	r3, r2
 8001166:	b298      	uxth	r0, r3
 8001168:	88ba      	ldrh	r2, [r7, #4]
 800116a:	8a3b      	ldrh	r3, [r7, #16]
 800116c:	4413      	add	r3, r2
 800116e:	b29b      	uxth	r3, r3
 8001170:	883a      	ldrh	r2, [r7, #0]
 8001172:	4619      	mov	r1, r3
 8001174:	f7ff febe 	bl	8000ef4 <LCD_DrawPixel>
		LCD_DrawPixel(x0 - y, y0 + x, color);
 8001178:	88fa      	ldrh	r2, [r7, #6]
 800117a:	89fb      	ldrh	r3, [r7, #14]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	b298      	uxth	r0, r3
 8001180:	88ba      	ldrh	r2, [r7, #4]
 8001182:	8a3b      	ldrh	r3, [r7, #16]
 8001184:	4413      	add	r3, r2
 8001186:	b29b      	uxth	r3, r3
 8001188:	883a      	ldrh	r2, [r7, #0]
 800118a:	4619      	mov	r1, r3
 800118c:	f7ff feb2 	bl	8000ef4 <LCD_DrawPixel>
		LCD_DrawPixel(x0 + y, y0 - x, color);
 8001190:	88fa      	ldrh	r2, [r7, #6]
 8001192:	89fb      	ldrh	r3, [r7, #14]
 8001194:	4413      	add	r3, r2
 8001196:	b298      	uxth	r0, r3
 8001198:	88ba      	ldrh	r2, [r7, #4]
 800119a:	8a3b      	ldrh	r3, [r7, #16]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	b29b      	uxth	r3, r3
 80011a0:	883a      	ldrh	r2, [r7, #0]
 80011a2:	4619      	mov	r1, r3
 80011a4:	f7ff fea6 	bl	8000ef4 <LCD_DrawPixel>
		LCD_DrawPixel(x0 - y, y0 - x, color);
 80011a8:	88fa      	ldrh	r2, [r7, #6]
 80011aa:	89fb      	ldrh	r3, [r7, #14]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	b298      	uxth	r0, r3
 80011b0:	88ba      	ldrh	r2, [r7, #4]
 80011b2:	8a3b      	ldrh	r3, [r7, #16]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	883a      	ldrh	r2, [r7, #0]
 80011ba:	4619      	mov	r1, r3
 80011bc:	f7ff fe9a 	bl	8000ef4 <LCD_DrawPixel>
	while (x < y) {
 80011c0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80011c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	f6ff af77 	blt.w	80010bc <LCD_drawCircle+0x8c>
	}
}
 80011ce:	bf00      	nop
 80011d0:	371c      	adds	r7, #28
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd90      	pop	{r4, r7, pc}

080011d6 <LCD_drawLine>:
	fillCircleHelper(x0, y0, r, 3, 0, color);
}

//9. Line drawing functions
void LCD_drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
		uint16_t color) {
 80011d6:	b590      	push	{r4, r7, lr}
 80011d8:	b089      	sub	sp, #36	; 0x24
 80011da:	af00      	add	r7, sp, #0
 80011dc:	4604      	mov	r4, r0
 80011de:	4608      	mov	r0, r1
 80011e0:	4611      	mov	r1, r2
 80011e2:	461a      	mov	r2, r3
 80011e4:	4623      	mov	r3, r4
 80011e6:	80fb      	strh	r3, [r7, #6]
 80011e8:	4603      	mov	r3, r0
 80011ea:	80bb      	strh	r3, [r7, #4]
 80011ec:	460b      	mov	r3, r1
 80011ee:	807b      	strh	r3, [r7, #2]
 80011f0:	4613      	mov	r3, r2
 80011f2:	803b      	strh	r3, [r7, #0]
	int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80011f4:	f9b7 2000 	ldrsh.w	r2, [r7]
 80011f8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001202:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001206:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800120a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800120e:	1acb      	subs	r3, r1, r3
 8001210:	2b00      	cmp	r3, #0
 8001212:	bfb8      	it	lt
 8001214:	425b      	neglt	r3, r3
 8001216:	429a      	cmp	r2, r3
 8001218:	bfcc      	ite	gt
 800121a:	2301      	movgt	r3, #1
 800121c:	2300      	movle	r3, #0
 800121e:	b2db      	uxtb	r3, r3
 8001220:	837b      	strh	r3, [r7, #26]
	if (steep) {
 8001222:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d00b      	beq.n	8001242 <LCD_drawLine+0x6c>
		swap(x0, y0);
 800122a:	88fb      	ldrh	r3, [r7, #6]
 800122c:	833b      	strh	r3, [r7, #24]
 800122e:	88bb      	ldrh	r3, [r7, #4]
 8001230:	80fb      	strh	r3, [r7, #6]
 8001232:	8b3b      	ldrh	r3, [r7, #24]
 8001234:	80bb      	strh	r3, [r7, #4]
		swap(x1, y1);
 8001236:	887b      	ldrh	r3, [r7, #2]
 8001238:	82fb      	strh	r3, [r7, #22]
 800123a:	883b      	ldrh	r3, [r7, #0]
 800123c:	807b      	strh	r3, [r7, #2]
 800123e:	8afb      	ldrh	r3, [r7, #22]
 8001240:	803b      	strh	r3, [r7, #0]
	}

	if (x0 > x1) {
 8001242:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001246:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800124a:	429a      	cmp	r2, r3
 800124c:	dd0b      	ble.n	8001266 <LCD_drawLine+0x90>
		swap(x0, x1);
 800124e:	88fb      	ldrh	r3, [r7, #6]
 8001250:	82bb      	strh	r3, [r7, #20]
 8001252:	887b      	ldrh	r3, [r7, #2]
 8001254:	80fb      	strh	r3, [r7, #6]
 8001256:	8abb      	ldrh	r3, [r7, #20]
 8001258:	807b      	strh	r3, [r7, #2]
		swap(y0, y1);
 800125a:	88bb      	ldrh	r3, [r7, #4]
 800125c:	827b      	strh	r3, [r7, #18]
 800125e:	883b      	ldrh	r3, [r7, #0]
 8001260:	80bb      	strh	r3, [r7, #4]
 8001262:	8a7b      	ldrh	r3, [r7, #18]
 8001264:	803b      	strh	r3, [r7, #0]
	}

	int16_t dx, dy;
	dx = x1 - x0;
 8001266:	887a      	ldrh	r2, [r7, #2]
 8001268:	88fb      	ldrh	r3, [r7, #6]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	b29b      	uxth	r3, r3
 800126e:	823b      	strh	r3, [r7, #16]
	dy = abs(y1 - y0);
 8001270:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001274:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b00      	cmp	r3, #0
 800127c:	bfb8      	it	lt
 800127e:	425b      	neglt	r3, r3
 8001280:	81fb      	strh	r3, [r7, #14]

	int16_t err = dx / 2;
 8001282:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001286:	0fda      	lsrs	r2, r3, #31
 8001288:	4413      	add	r3, r2
 800128a:	105b      	asrs	r3, r3, #1
 800128c:	83fb      	strh	r3, [r7, #30]
	int16_t ystep;

	if (y0 < y1) {
 800128e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001292:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001296:	429a      	cmp	r2, r3
 8001298:	da02      	bge.n	80012a0 <LCD_drawLine+0xca>
		ystep = 1;
 800129a:	2301      	movs	r3, #1
 800129c:	83bb      	strh	r3, [r7, #28]
 800129e:	e02d      	b.n	80012fc <LCD_drawLine+0x126>
	} else {
		ystep = -1;
 80012a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012a4:	83bb      	strh	r3, [r7, #28]
	}

	for (; x0 <= x1; x0++) {
 80012a6:	e029      	b.n	80012fc <LCD_drawLine+0x126>
		if (steep) {
 80012a8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d006      	beq.n	80012be <LCD_drawLine+0xe8>
			LCD_DrawPixel(y0, x0, color);
 80012b0:	88bb      	ldrh	r3, [r7, #4]
 80012b2:	88f9      	ldrh	r1, [r7, #6]
 80012b4:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff fe1c 	bl	8000ef4 <LCD_DrawPixel>
 80012bc:	e005      	b.n	80012ca <LCD_drawLine+0xf4>
		} else {
			LCD_DrawPixel(x0, y0, color);
 80012be:	88fb      	ldrh	r3, [r7, #6]
 80012c0:	88b9      	ldrh	r1, [r7, #4]
 80012c2:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fe15 	bl	8000ef4 <LCD_DrawPixel>
		}
		err -= dy;
 80012ca:	8bfa      	ldrh	r2, [r7, #30]
 80012cc:	89fb      	ldrh	r3, [r7, #14]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	83fb      	strh	r3, [r7, #30]
		if (err < 0) {
 80012d4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	da09      	bge.n	80012f0 <LCD_drawLine+0x11a>
			y0 += ystep;
 80012dc:	88ba      	ldrh	r2, [r7, #4]
 80012de:	8bbb      	ldrh	r3, [r7, #28]
 80012e0:	4413      	add	r3, r2
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	80bb      	strh	r3, [r7, #4]
			err += dx;
 80012e6:	8bfa      	ldrh	r2, [r7, #30]
 80012e8:	8a3b      	ldrh	r3, [r7, #16]
 80012ea:	4413      	add	r3, r2
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	83fb      	strh	r3, [r7, #30]
	for (; x0 <= x1; x0++) {
 80012f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	3301      	adds	r3, #1
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	80fb      	strh	r3, [r7, #6]
 80012fc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001300:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001304:	429a      	cmp	r2, r3
 8001306:	ddcf      	ble.n	80012a8 <LCD_drawLine+0xd2>
		}
	}
}
 8001308:	bf00      	nop
 800130a:	3724      	adds	r7, #36	; 0x24
 800130c:	46bd      	mov	sp, r7
 800130e:	bd90      	pop	{r4, r7, pc}

08001310 <LCD_drawFastHLine>:

void LCD_drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 8001310:	b590      	push	{r4, r7, lr}
 8001312:	b085      	sub	sp, #20
 8001314:	af02      	add	r7, sp, #8
 8001316:	4604      	mov	r4, r0
 8001318:	4608      	mov	r0, r1
 800131a:	4611      	mov	r1, r2
 800131c:	461a      	mov	r2, r3
 800131e:	4623      	mov	r3, r4
 8001320:	80fb      	strh	r3, [r7, #6]
 8001322:	4603      	mov	r3, r0
 8001324:	80bb      	strh	r3, [r7, #4]
 8001326:	460b      	mov	r3, r1
 8001328:	807b      	strh	r3, [r7, #2]
 800132a:	4613      	mov	r3, r2
 800132c:	803b      	strh	r3, [r7, #0]
	LCD_drawLine(x, y, x + w - 1, y, color);
 800132e:	88fa      	ldrh	r2, [r7, #6]
 8001330:	887b      	ldrh	r3, [r7, #2]
 8001332:	4413      	add	r3, r2
 8001334:	b29b      	uxth	r3, r3
 8001336:	3b01      	subs	r3, #1
 8001338:	b29b      	uxth	r3, r3
 800133a:	b21a      	sxth	r2, r3
 800133c:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8001340:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001344:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001348:	883b      	ldrh	r3, [r7, #0]
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	4623      	mov	r3, r4
 800134e:	f7ff ff42 	bl	80011d6 <LCD_drawLine>
}
 8001352:	bf00      	nop
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	bd90      	pop	{r4, r7, pc}

0800135a <LCD_fillTriangle>:
	LCD_drawLine(x0, y0, x1, y1, color);
	LCD_drawLine(x1, y1, x2, y2, color);
	LCD_drawLine(x2, y2, x0, y0, color);
}
void LCD_fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
		int16_t x2, int16_t y2, uint16_t color) {
 800135a:	b590      	push	{r4, r7, lr}
 800135c:	b08d      	sub	sp, #52	; 0x34
 800135e:	af00      	add	r7, sp, #0
 8001360:	4604      	mov	r4, r0
 8001362:	4608      	mov	r0, r1
 8001364:	4611      	mov	r1, r2
 8001366:	461a      	mov	r2, r3
 8001368:	4623      	mov	r3, r4
 800136a:	80fb      	strh	r3, [r7, #6]
 800136c:	4603      	mov	r3, r0
 800136e:	80bb      	strh	r3, [r7, #4]
 8001370:	460b      	mov	r3, r1
 8001372:	807b      	strh	r3, [r7, #2]
 8001374:	4613      	mov	r3, r2
 8001376:	803b      	strh	r3, [r7, #0]
	int16_t a, b, y, last;

	// Sort coordinates by Y order (y2 >= y1 >= y0)
	if (y0 > y1) {
 8001378:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800137c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001380:	429a      	cmp	r2, r3
 8001382:	dd0b      	ble.n	800139c <LCD_fillTriangle+0x42>
		swap(y0, y1);
 8001384:	88bb      	ldrh	r3, [r7, #4]
 8001386:	847b      	strh	r3, [r7, #34]	; 0x22
 8001388:	883b      	ldrh	r3, [r7, #0]
 800138a:	80bb      	strh	r3, [r7, #4]
 800138c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800138e:	803b      	strh	r3, [r7, #0]
		swap(x0, x1);
 8001390:	88fb      	ldrh	r3, [r7, #6]
 8001392:	843b      	strh	r3, [r7, #32]
 8001394:	887b      	ldrh	r3, [r7, #2]
 8001396:	80fb      	strh	r3, [r7, #6]
 8001398:	8c3b      	ldrh	r3, [r7, #32]
 800139a:	807b      	strh	r3, [r7, #2]
	}
	if (y1 > y2) {
 800139c:	f9b7 2000 	ldrsh.w	r2, [r7]
 80013a0:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80013a4:	429a      	cmp	r2, r3
 80013a6:	dd0f      	ble.n	80013c8 <LCD_fillTriangle+0x6e>
		swap(y2, y1);
 80013a8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80013ac:	83fb      	strh	r3, [r7, #30]
 80013ae:	883b      	ldrh	r3, [r7, #0]
 80013b0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80013b4:	8bfb      	ldrh	r3, [r7, #30]
 80013b6:	803b      	strh	r3, [r7, #0]
		swap(x2, x1);
 80013b8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80013bc:	83bb      	strh	r3, [r7, #28]
 80013be:	887b      	ldrh	r3, [r7, #2]
 80013c0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80013c4:	8bbb      	ldrh	r3, [r7, #28]
 80013c6:	807b      	strh	r3, [r7, #2]
	}
	if (y0 > y1) {
 80013c8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80013cc:	f9b7 3000 	ldrsh.w	r3, [r7]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	dd0b      	ble.n	80013ec <LCD_fillTriangle+0x92>
		swap(y0, y1);
 80013d4:	88bb      	ldrh	r3, [r7, #4]
 80013d6:	837b      	strh	r3, [r7, #26]
 80013d8:	883b      	ldrh	r3, [r7, #0]
 80013da:	80bb      	strh	r3, [r7, #4]
 80013dc:	8b7b      	ldrh	r3, [r7, #26]
 80013de:	803b      	strh	r3, [r7, #0]
		swap(x0, x1);
 80013e0:	88fb      	ldrh	r3, [r7, #6]
 80013e2:	833b      	strh	r3, [r7, #24]
 80013e4:	887b      	ldrh	r3, [r7, #2]
 80013e6:	80fb      	strh	r3, [r7, #6]
 80013e8:	8b3b      	ldrh	r3, [r7, #24]
 80013ea:	807b      	strh	r3, [r7, #2]
	}

	if (y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 80013ec:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80013f0:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d137      	bne.n	8001468 <LCD_fillTriangle+0x10e>
		a = b = x0;
 80013f8:	88fb      	ldrh	r3, [r7, #6]
 80013fa:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80013fc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80013fe:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (x1 < a)
 8001400:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001404:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001408:	429a      	cmp	r2, r3
 800140a:	da02      	bge.n	8001412 <LCD_fillTriangle+0xb8>
			a = x1;
 800140c:	887b      	ldrh	r3, [r7, #2]
 800140e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001410:	e007      	b.n	8001422 <LCD_fillTriangle+0xc8>
		else if (x1 > b)
 8001412:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001416:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800141a:	429a      	cmp	r2, r3
 800141c:	dd01      	ble.n	8001422 <LCD_fillTriangle+0xc8>
			b = x1;
 800141e:	887b      	ldrh	r3, [r7, #2]
 8001420:	85bb      	strh	r3, [r7, #44]	; 0x2c
		if (x2 < a)
 8001422:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 8001426:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800142a:	429a      	cmp	r2, r3
 800142c:	da03      	bge.n	8001436 <LCD_fillTriangle+0xdc>
			a = x2;
 800142e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001432:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001434:	e008      	b.n	8001448 <LCD_fillTriangle+0xee>
		else if (x2 > b)
 8001436:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 800143a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800143e:	429a      	cmp	r2, r3
 8001440:	dd02      	ble.n	8001448 <LCD_fillTriangle+0xee>
			b = x2;
 8001442:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001446:	85bb      	strh	r3, [r7, #44]	; 0x2c
		LCD_drawFastHLine(a, y0, b - a + 1, color);
 8001448:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800144a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	b29b      	uxth	r3, r3
 8001450:	3301      	adds	r3, #1
 8001452:	b29b      	uxth	r3, r3
 8001454:	b21a      	sxth	r2, r3
 8001456:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800145a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800145e:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8001462:	f7ff ff55 	bl	8001310 <LCD_drawFastHLine>
		return;
 8001466:	e0da      	b.n	800161e <LCD_fillTriangle+0x2c4>
	}

	int16_t dx01 = x1 - x0, dy01 = y1 - y0, dx02 = x2 - x0, dy02 = y2 - y0,
 8001468:	887a      	ldrh	r2, [r7, #2]
 800146a:	88fb      	ldrh	r3, [r7, #6]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	b29b      	uxth	r3, r3
 8001470:	82fb      	strh	r3, [r7, #22]
 8001472:	883a      	ldrh	r2, [r7, #0]
 8001474:	88bb      	ldrh	r3, [r7, #4]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	b29b      	uxth	r3, r3
 800147a:	82bb      	strh	r3, [r7, #20]
 800147c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8001480:	88fb      	ldrh	r3, [r7, #6]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	b29b      	uxth	r3, r3
 8001486:	827b      	strh	r3, [r7, #18]
 8001488:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800148c:	88bb      	ldrh	r3, [r7, #4]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	b29b      	uxth	r3, r3
 8001492:	823b      	strh	r3, [r7, #16]
			dx12 = x2 - x1, dy12 = y2 - y1, sa = 0, sb = 0;
 8001494:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8001498:	887b      	ldrh	r3, [r7, #2]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	b29b      	uxth	r3, r3
 800149e:	81fb      	strh	r3, [r7, #14]
 80014a0:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80014a4:	883b      	ldrh	r3, [r7, #0]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	81bb      	strh	r3, [r7, #12]
 80014ac:	2300      	movs	r3, #0
 80014ae:	84fb      	strh	r3, [r7, #38]	; 0x26
 80014b0:	2300      	movs	r3, #0
 80014b2:	84bb      	strh	r3, [r7, #36]	; 0x24
	// 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
	// is included here (and second loop will be skipped, avoiding a /0
	// error there), otherwise scanline y1 is skipped here and handled
	// in the second loop...which also avoids a /0 error here if y0=y1
	// (flat-topped triangle).
	if (y1 == y2)
 80014b4:	f9b7 2000 	ldrsh.w	r2, [r7]
 80014b8:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80014bc:	429a      	cmp	r2, r3
 80014be:	d102      	bne.n	80014c6 <LCD_fillTriangle+0x16c>
		last = y1;   // Include y1 scanline
 80014c0:	883b      	ldrh	r3, [r7, #0]
 80014c2:	853b      	strh	r3, [r7, #40]	; 0x28
 80014c4:	e003      	b.n	80014ce <LCD_fillTriangle+0x174>
	else
		last = y1 - 1; // Skip it
 80014c6:	883b      	ldrh	r3, [r7, #0]
 80014c8:	3b01      	subs	r3, #1
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	853b      	strh	r3, [r7, #40]	; 0x28

	for (y = y0; y <= last; y++) {
 80014ce:	88bb      	ldrh	r3, [r7, #4]
 80014d0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80014d2:	e040      	b.n	8001556 <LCD_fillTriangle+0x1fc>
		a = x0 + sa / dy01;
 80014d4:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80014d8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80014dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80014e0:	b29a      	uxth	r2, r3
 80014e2:	88fb      	ldrh	r3, [r7, #6]
 80014e4:	4413      	add	r3, r2
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		b = x0 + sb / dy02;
 80014ea:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 80014ee:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80014f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80014f6:	b29a      	uxth	r2, r3
 80014f8:	88fb      	ldrh	r3, [r7, #6]
 80014fa:	4413      	add	r3, r2
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	85bb      	strh	r3, [r7, #44]	; 0x2c
		sa += dx01;
 8001500:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001502:	8afb      	ldrh	r3, [r7, #22]
 8001504:	4413      	add	r3, r2
 8001506:	b29b      	uxth	r3, r3
 8001508:	84fb      	strh	r3, [r7, #38]	; 0x26
		sb += dx02;
 800150a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800150c:	8a7b      	ldrh	r3, [r7, #18]
 800150e:	4413      	add	r3, r2
 8001510:	b29b      	uxth	r3, r3
 8001512:	84bb      	strh	r3, [r7, #36]	; 0x24

		if (a > b)
 8001514:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8001518:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800151c:	429a      	cmp	r2, r3
 800151e:	dd05      	ble.n	800152c <LCD_fillTriangle+0x1d2>
			swap(a, b);
 8001520:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001522:	813b      	strh	r3, [r7, #8]
 8001524:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001526:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001528:	893b      	ldrh	r3, [r7, #8]
 800152a:	85bb      	strh	r3, [r7, #44]	; 0x2c
		LCD_drawFastHLine(a, y, b - a + 1, color);
 800152c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800152e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	b29b      	uxth	r3, r3
 8001534:	3301      	adds	r3, #1
 8001536:	b29b      	uxth	r3, r3
 8001538:	b21a      	sxth	r2, r3
 800153a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800153e:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	; 0x2a
 8001542:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8001546:	f7ff fee3 	bl	8001310 <LCD_drawFastHLine>
	for (y = y0; y <= last; y++) {
 800154a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800154e:	b29b      	uxth	r3, r3
 8001550:	3301      	adds	r3, #1
 8001552:	b29b      	uxth	r3, r3
 8001554:	857b      	strh	r3, [r7, #42]	; 0x2a
 8001556:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800155a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800155e:	429a      	cmp	r2, r3
 8001560:	ddb8      	ble.n	80014d4 <LCD_fillTriangle+0x17a>
	}

	// For lower part of triangle, find scanline crossings for segments
	// 0-2 and 1-2.  This loop is skipped if y1=y2.
	sa = dx12 * (y - y1);
 8001562:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8001566:	f9b7 3000 	ldrsh.w	r3, [r7]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	b29b      	uxth	r3, r3
 800156e:	89fa      	ldrh	r2, [r7, #14]
 8001570:	fb02 f303 	mul.w	r3, r2, r3
 8001574:	b29b      	uxth	r3, r3
 8001576:	84fb      	strh	r3, [r7, #38]	; 0x26
	sb = dx02 * (y - y0);
 8001578:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800157c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	b29b      	uxth	r3, r3
 8001584:	8a7a      	ldrh	r2, [r7, #18]
 8001586:	fb02 f303 	mul.w	r3, r2, r3
 800158a:	b29b      	uxth	r3, r3
 800158c:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (; y <= y2; y++) {
 800158e:	e040      	b.n	8001612 <LCD_fillTriangle+0x2b8>
		a = x1 + sa / dy12;
 8001590:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8001594:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001598:	fb92 f3f3 	sdiv	r3, r2, r3
 800159c:	b29a      	uxth	r2, r3
 800159e:	887b      	ldrh	r3, [r7, #2]
 80015a0:	4413      	add	r3, r2
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		b = x0 + sb / dy02;
 80015a6:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 80015aa:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80015ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	88fb      	ldrh	r3, [r7, #6]
 80015b6:	4413      	add	r3, r2
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	85bb      	strh	r3, [r7, #44]	; 0x2c
		sa += dx12;
 80015bc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80015be:	89fb      	ldrh	r3, [r7, #14]
 80015c0:	4413      	add	r3, r2
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	84fb      	strh	r3, [r7, #38]	; 0x26
		sb += dx02;
 80015c6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80015c8:	8a7b      	ldrh	r3, [r7, #18]
 80015ca:	4413      	add	r3, r2
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	84bb      	strh	r3, [r7, #36]	; 0x24

		if (a > b)
 80015d0:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 80015d4:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80015d8:	429a      	cmp	r2, r3
 80015da:	dd05      	ble.n	80015e8 <LCD_fillTriangle+0x28e>
			swap(a, b);
 80015dc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80015de:	817b      	strh	r3, [r7, #10]
 80015e0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80015e2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80015e4:	897b      	ldrh	r3, [r7, #10]
 80015e6:	85bb      	strh	r3, [r7, #44]	; 0x2c
		LCD_drawFastHLine(a, y, b - a + 1, color);
 80015e8:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80015ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	3301      	adds	r3, #1
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	b21a      	sxth	r2, r3
 80015f6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80015fa:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	; 0x2a
 80015fe:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8001602:	f7ff fe85 	bl	8001310 <LCD_drawFastHLine>
	for (; y <= y2; y++) {
 8001606:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800160a:	b29b      	uxth	r3, r3
 800160c:	3301      	adds	r3, #1
 800160e:	b29b      	uxth	r3, r3
 8001610:	857b      	strh	r3, [r7, #42]	; 0x2a
 8001612:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8001616:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800161a:	429a      	cmp	r2, r3
 800161c:	ddb8      	ble.n	8001590 <LCD_fillTriangle+0x236>
	}
}
 800161e:	3734      	adds	r7, #52	; 0x34
 8001620:	46bd      	mov	sp, r7
 8001622:	bd90      	pop	{r4, r7, pc}

08001624 <LCD_drawChar>:

//11. Text printing functions
void LCD_drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size)
{
 8001624:	b5b0      	push	{r4, r5, r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af02      	add	r7, sp, #8
 800162a:	4604      	mov	r4, r0
 800162c:	4608      	mov	r0, r1
 800162e:	4611      	mov	r1, r2
 8001630:	461a      	mov	r2, r3
 8001632:	4623      	mov	r3, r4
 8001634:	80fb      	strh	r3, [r7, #6]
 8001636:	4603      	mov	r3, r0
 8001638:	80bb      	strh	r3, [r7, #4]
 800163a:	460b      	mov	r3, r1
 800163c:	70fb      	strb	r3, [r7, #3]
 800163e:	4613      	mov	r3, r2
 8001640:	803b      	strh	r3, [r7, #0]
	if(rotationNum == 1 || rotationNum ==3)
 8001642:	4b9b      	ldr	r3, [pc, #620]	; (80018b0 <LCD_drawChar+0x28c>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d003      	beq.n	8001652 <LCD_drawChar+0x2e>
 800164a:	4b99      	ldr	r3, [pc, #612]	; (80018b0 <LCD_drawChar+0x28c>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	2b03      	cmp	r3, #3
 8001650:	d122      	bne.n	8001698 <LCD_drawChar+0x74>
	{
		if((x >= HX8357_TFTWIDTH)            || // Clip right
 8001652:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001656:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800165a:	f280 8122 	bge.w	80018a2 <LCD_drawChar+0x27e>
 800165e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001662:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001666:	f280 811c 	bge.w	80018a2 <LCD_drawChar+0x27e>
     (y >= HX8357_TFTHEIGHT)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
 800166a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800166e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001672:	4613      	mov	r3, r2
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	4413      	add	r3, r2
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	440b      	add	r3, r1
 800167c:	3b01      	subs	r3, #1
     (y >= HX8357_TFTHEIGHT)           || // Clip bottom
 800167e:	2b00      	cmp	r3, #0
 8001680:	f2c0 810f 	blt.w	80018a2 <LCD_drawChar+0x27e>
     ((y + 8 * size - 1) < 0))   // Clip top
 8001684:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001688:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	4413      	add	r3, r2
 8001690:	3b01      	subs	r3, #1
     ((x + 6 * size - 1) < 0) || // Clip left
 8001692:	2b00      	cmp	r3, #0
 8001694:	da24      	bge.n	80016e0 <LCD_drawChar+0xbc>
    return;
 8001696:	e104      	b.n	80018a2 <LCD_drawChar+0x27e>
	}
	else
	{
		if((y >= HX8357_TFTWIDTH)            || // Clip right
 8001698:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800169c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80016a0:	f280 8101 	bge.w	80018a6 <LCD_drawChar+0x282>
 80016a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016a8:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80016ac:	f280 80fb 	bge.w	80018a6 <LCD_drawChar+0x282>
     (x >= HX8357_TFTHEIGHT)           || // Clip bottom
     ((y + 6 * size - 1) < 0) || // Clip left
 80016b0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80016b4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80016b8:	4613      	mov	r3, r2
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	4413      	add	r3, r2
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	440b      	add	r3, r1
 80016c2:	3b01      	subs	r3, #1
     (x >= HX8357_TFTHEIGHT)           || // Clip bottom
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	f2c0 80ee 	blt.w	80018a6 <LCD_drawChar+0x282>
     ((x + 8 * size - 1) < 0))   // Clip top
 80016ca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80016ce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80016d2:	00db      	lsls	r3, r3, #3
 80016d4:	4413      	add	r3, r2
 80016d6:	3b01      	subs	r3, #1
     ((y + 6 * size - 1) < 0) || // Clip left
 80016d8:	2b00      	cmp	r3, #0
 80016da:	f2c0 80e4 	blt.w	80018a6 <LCD_drawChar+0x282>
 80016de:	e000      	b.n	80016e2 <LCD_drawChar+0xbe>
		if((x >= HX8357_TFTWIDTH)            || // Clip right
 80016e0:	bf00      	nop
    return;
	}


  if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
 80016e2:	4b74      	ldr	r3, [pc, #464]	; (80018b4 <LCD_drawChar+0x290>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	f083 0301 	eor.w	r3, r3, #1
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d005      	beq.n	80016fc <LCD_drawChar+0xd8>
 80016f0:	78fb      	ldrb	r3, [r7, #3]
 80016f2:	2baf      	cmp	r3, #175	; 0xaf
 80016f4:	d902      	bls.n	80016fc <LCD_drawChar+0xd8>
 80016f6:	78fb      	ldrb	r3, [r7, #3]
 80016f8:	3301      	adds	r3, #1
 80016fa:	70fb      	strb	r3, [r7, #3]

  for (int8_t i=0; i<6; i++ ) {
 80016fc:	2300      	movs	r3, #0
 80016fe:	73fb      	strb	r3, [r7, #15]
 8001700:	e0c9      	b.n	8001896 <LCD_drawChar+0x272>
    uint8_t line;
    if (i == 5)
 8001702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001706:	2b05      	cmp	r3, #5
 8001708:	d102      	bne.n	8001710 <LCD_drawChar+0xec>
      line = 0x0;
 800170a:	2300      	movs	r3, #0
 800170c:	73bb      	strb	r3, [r7, #14]
 800170e:	e00b      	b.n	8001728 <LCD_drawChar+0x104>
    else
      line = pgm_read_byte(font1+(c*5)+i);
 8001710:	78fa      	ldrb	r2, [r7, #3]
 8001712:	4613      	mov	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	4413      	add	r3, r2
 8001718:	461a      	mov	r2, r3
 800171a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800171e:	4413      	add	r3, r2
 8001720:	4a65      	ldr	r2, [pc, #404]	; (80018b8 <LCD_drawChar+0x294>)
 8001722:	4413      	add	r3, r2
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 8001728:	2300      	movs	r3, #0
 800172a:	737b      	strb	r3, [r7, #13]
 800172c:	e0a8      	b.n	8001880 <LCD_drawChar+0x25c>
      if (line & 0x1) {
 800172e:	7bbb      	ldrb	r3, [r7, #14]
 8001730:	f003 0301 	and.w	r3, r3, #1
 8001734:	2b00      	cmp	r3, #0
 8001736:	d04b      	beq.n	80017d0 <LCD_drawChar+0x1ac>
        if (size == 1) // default size
 8001738:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800173c:	2b01      	cmp	r3, #1
 800173e:	d110      	bne.n	8001762 <LCD_drawChar+0x13e>
          LCD_DrawPixel(x+i, y+j, color);
 8001740:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001744:	b29a      	uxth	r2, r3
 8001746:	88fb      	ldrh	r3, [r7, #6]
 8001748:	4413      	add	r3, r2
 800174a:	b298      	uxth	r0, r3
 800174c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001750:	b29a      	uxth	r2, r3
 8001752:	88bb      	ldrh	r3, [r7, #4]
 8001754:	4413      	add	r3, r2
 8001756:	b29b      	uxth	r3, r3
 8001758:	883a      	ldrh	r2, [r7, #0]
 800175a:	4619      	mov	r1, r3
 800175c:	f7ff fbca 	bl	8000ef4 <LCD_DrawPixel>
 8001760:	e085      	b.n	800186e <LCD_drawChar+0x24a>
        else {  // big size
          LCD_Fill_Rect(x+(i*size), y+(j*size), size + x+(i*size), size+1 + y+(j*size), color);
 8001762:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001766:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800176a:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 800176e:	fb01 f303 	mul.w	r3, r1, r3
 8001772:	4413      	add	r3, r2
 8001774:	4618      	mov	r0, r3
 8001776:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800177a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800177e:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8001782:	fb01 f303 	mul.w	r3, r1, r3
 8001786:	4413      	add	r3, r2
 8001788:	461c      	mov	r4, r3
 800178a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800178e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001792:	441a      	add	r2, r3
 8001794:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001798:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 800179c:	fb01 f303 	mul.w	r3, r1, r3
 80017a0:	4413      	add	r3, r2
 80017a2:	461d      	mov	r5, r3
 80017a4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80017a8:	1c5a      	adds	r2, r3, #1
 80017aa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017ae:	441a      	add	r2, r3
 80017b0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80017b4:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80017b8:	fb01 f303 	mul.w	r3, r1, r3
 80017bc:	4413      	add	r3, r2
 80017be:	461a      	mov	r2, r3
 80017c0:	883b      	ldrh	r3, [r7, #0]
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	4613      	mov	r3, r2
 80017c6:	462a      	mov	r2, r5
 80017c8:	4621      	mov	r1, r4
 80017ca:	f7ff fbf7 	bl	8000fbc <LCD_Fill_Rect>
 80017ce:	e04e      	b.n	800186e <LCD_drawChar+0x24a>
        }
      } else if (bg != color) {
 80017d0:	8c3a      	ldrh	r2, [r7, #32]
 80017d2:	883b      	ldrh	r3, [r7, #0]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d04a      	beq.n	800186e <LCD_drawChar+0x24a>
        if (size == 1) // default size
 80017d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d110      	bne.n	8001802 <LCD_drawChar+0x1de>
          LCD_DrawPixel(x+i, y+j, bg);
 80017e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	88fb      	ldrh	r3, [r7, #6]
 80017e8:	4413      	add	r3, r2
 80017ea:	b298      	uxth	r0, r3
 80017ec:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	88bb      	ldrh	r3, [r7, #4]
 80017f4:	4413      	add	r3, r2
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	8c3a      	ldrh	r2, [r7, #32]
 80017fa:	4619      	mov	r1, r3
 80017fc:	f7ff fb7a 	bl	8000ef4 <LCD_DrawPixel>
 8001800:	e035      	b.n	800186e <LCD_drawChar+0x24a>
        else {  // big size
          LCD_Fill_Rect(x+i*size, y+j*size, size + x+i*size, size+1 + y+j*size, bg);
 8001802:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800180a:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 800180e:	fb01 f303 	mul.w	r3, r1, r3
 8001812:	4413      	add	r3, r2
 8001814:	4618      	mov	r0, r3
 8001816:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800181a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800181e:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8001822:	fb01 f303 	mul.w	r3, r1, r3
 8001826:	4413      	add	r3, r2
 8001828:	461c      	mov	r4, r3
 800182a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800182e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001832:	441a      	add	r2, r3
 8001834:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001838:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 800183c:	fb01 f303 	mul.w	r3, r1, r3
 8001840:	4413      	add	r3, r2
 8001842:	461d      	mov	r5, r3
 8001844:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001848:	1c5a      	adds	r2, r3, #1
 800184a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800184e:	441a      	add	r2, r3
 8001850:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001854:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8001858:	fb01 f303 	mul.w	r3, r1, r3
 800185c:	4413      	add	r3, r2
 800185e:	461a      	mov	r2, r3
 8001860:	8c3b      	ldrh	r3, [r7, #32]
 8001862:	9300      	str	r3, [sp, #0]
 8001864:	4613      	mov	r3, r2
 8001866:	462a      	mov	r2, r5
 8001868:	4621      	mov	r1, r4
 800186a:	f7ff fba7 	bl	8000fbc <LCD_Fill_Rect>
        }
      }
      line >>= 1;
 800186e:	7bbb      	ldrb	r3, [r7, #14]
 8001870:	085b      	lsrs	r3, r3, #1
 8001872:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 8001874:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001878:	b2db      	uxtb	r3, r3
 800187a:	3301      	adds	r3, #1
 800187c:	b2db      	uxtb	r3, r3
 800187e:	737b      	strb	r3, [r7, #13]
 8001880:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001884:	2b07      	cmp	r3, #7
 8001886:	f77f af52 	ble.w	800172e <LCD_drawChar+0x10a>
  for (int8_t i=0; i<6; i++ ) {
 800188a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800188e:	b2db      	uxtb	r3, r3
 8001890:	3301      	adds	r3, #1
 8001892:	b2db      	uxtb	r3, r3
 8001894:	73fb      	strb	r3, [r7, #15]
 8001896:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800189a:	2b05      	cmp	r3, #5
 800189c:	f77f af31 	ble.w	8001702 <LCD_drawChar+0xde>
 80018a0:	e002      	b.n	80018a8 <LCD_drawChar+0x284>
    return;
 80018a2:	bf00      	nop
 80018a4:	e000      	b.n	80018a8 <LCD_drawChar+0x284>
    return;
 80018a6:	bf00      	nop
    }
  }
}
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bdb0      	pop	{r4, r5, r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20000000 	.word	0x20000000
 80018b4:	20000124 	.word	0x20000124
 80018b8:	08006834 	.word	0x08006834

080018bc <LCD_printText>:
void LCD_printText(char text[], int16_t x, int16_t y, uint16_t color, uint16_t bg, uint8_t size)
{
 80018bc:	b590      	push	{r4, r7, lr}
 80018be:	b089      	sub	sp, #36	; 0x24
 80018c0:	af02      	add	r7, sp, #8
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	4608      	mov	r0, r1
 80018c6:	4611      	mov	r1, r2
 80018c8:	461a      	mov	r2, r3
 80018ca:	4603      	mov	r3, r0
 80018cc:	817b      	strh	r3, [r7, #10]
 80018ce:	460b      	mov	r3, r1
 80018d0:	813b      	strh	r3, [r7, #8]
 80018d2:	4613      	mov	r3, r2
 80018d4:	80fb      	strh	r3, [r7, #6]
	int16_t offset;
	offset = size*6;
 80018d6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80018da:	b29b      	uxth	r3, r3
 80018dc:	461a      	mov	r2, r3
 80018de:	0052      	lsls	r2, r2, #1
 80018e0:	4413      	add	r3, r2
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	82bb      	strh	r3, [r7, #20]
	for(uint16_t i=0; i<40 && text[i]!=NULL; i++)
 80018e8:	2300      	movs	r3, #0
 80018ea:	82fb      	strh	r3, [r7, #22]
 80018ec:	e01a      	b.n	8001924 <LCD_printText+0x68>
	{
		LCD_drawChar(x+(offset*i), y, text[i],color,bg,size);
 80018ee:	8abb      	ldrh	r3, [r7, #20]
 80018f0:	8afa      	ldrh	r2, [r7, #22]
 80018f2:	fb02 f303 	mul.w	r3, r2, r3
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	897b      	ldrh	r3, [r7, #10]
 80018fa:	4413      	add	r3, r2
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	b218      	sxth	r0, r3
 8001900:	8afb      	ldrh	r3, [r7, #22]
 8001902:	68fa      	ldr	r2, [r7, #12]
 8001904:	4413      	add	r3, r2
 8001906:	781a      	ldrb	r2, [r3, #0]
 8001908:	88fc      	ldrh	r4, [r7, #6]
 800190a:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 800190e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001912:	9301      	str	r3, [sp, #4]
 8001914:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	4623      	mov	r3, r4
 800191a:	f7ff fe83 	bl	8001624 <LCD_drawChar>
	for(uint16_t i=0; i<40 && text[i]!=NULL; i++)
 800191e:	8afb      	ldrh	r3, [r7, #22]
 8001920:	3301      	adds	r3, #1
 8001922:	82fb      	strh	r3, [r7, #22]
 8001924:	8afb      	ldrh	r3, [r7, #22]
 8001926:	2b27      	cmp	r3, #39	; 0x27
 8001928:	d805      	bhi.n	8001936 <LCD_printText+0x7a>
 800192a:	8afb      	ldrh	r3, [r7, #22]
 800192c:	68fa      	ldr	r2, [r7, #12]
 800192e:	4413      	add	r3, r2
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1db      	bne.n	80018ee <LCD_printText+0x32>
	}
}
 8001936:	bf00      	nop
 8001938:	371c      	adds	r7, #28
 800193a:	46bd      	mov	sp, r7
 800193c:	bd90      	pop	{r4, r7, pc}

0800193e <LCD_printIcon>:

void LCD_printIcon(uint16_t x, uint16_t y, uint16_t *data) {
 800193e:	b580      	push	{r7, lr}
 8001940:	b086      	sub	sp, #24
 8001942:	af00      	add	r7, sp, #0
 8001944:	4603      	mov	r3, r0
 8001946:	603a      	str	r2, [r7, #0]
 8001948:	80fb      	strh	r3, [r7, #6]
 800194a:	460b      	mov	r3, r1
 800194c:	80bb      	strh	r3, [r7, #4]
		int i;
		int rowCount = 0;
 800194e:	2300      	movs	r3, #0
 8001950:	613b      	str	r3, [r7, #16]
		int colCount = 0;
 8001952:	2300      	movs	r3, #0
 8001954:	60fb      	str	r3, [r7, #12]

		for(i = 0; i < 1024; i++) {
 8001956:	2300      	movs	r3, #0
 8001958:	617b      	str	r3, [r7, #20]
 800195a:	e024      	b.n	80019a6 <LCD_printIcon+0x68>
			uint32_t current_value = data[i];
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	4413      	add	r3, r2
 8001964:	881b      	ldrh	r3, [r3, #0]
 8001966:	60bb      	str	r3, [r7, #8]
			if(colCount == 32) {
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2b20      	cmp	r3, #32
 800196c:	d104      	bne.n	8001978 <LCD_printIcon+0x3a>
				colCount = 0;
 800196e:	2300      	movs	r3, #0
 8001970:	60fb      	str	r3, [r7, #12]
				rowCount++;
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	3301      	adds	r3, #1
 8001976:	613b      	str	r3, [r7, #16]
			}

			if(current_value  == 0) {
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d10d      	bne.n	800199a <LCD_printIcon+0x5c>
				LCD_DrawPixel(x - rowCount, y - colCount, HX8357_BLACK);
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	b29b      	uxth	r3, r3
 8001982:	88fa      	ldrh	r2, [r7, #6]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	b298      	uxth	r0, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	b29b      	uxth	r3, r3
 800198c:	88ba      	ldrh	r2, [r7, #4]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	b29b      	uxth	r3, r3
 8001992:	2200      	movs	r2, #0
 8001994:	4619      	mov	r1, r3
 8001996:	f7ff faad 	bl	8000ef4 <LCD_DrawPixel>
			}

			colCount++;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	3301      	adds	r3, #1
 800199e:	60fb      	str	r3, [r7, #12]
		for(i = 0; i < 1024; i++) {
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	3301      	adds	r3, #1
 80019a4:	617b      	str	r3, [r7, #20]
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019ac:	dbd6      	blt.n	800195c <LCD_printIcon+0x1e>
		}

}
 80019ae:	bf00      	nop
 80019b0:	3718      	adds	r7, #24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
	...

080019b8 <LCD_setRotation>:

	LCD_SendData(data[size-1] & 0xFF);
}

//13. Set screen rotation
void LCD_setRotation(uint8_t rotate) {
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	71fb      	strb	r3, [r7, #7]
	switch (rotate) {
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	3b01      	subs	r3, #1
 80019c6:	2b03      	cmp	r3, #3
 80019c8:	d832      	bhi.n	8001a30 <LCD_setRotation+0x78>
 80019ca:	a201      	add	r2, pc, #4	; (adr r2, 80019d0 <LCD_setRotation+0x18>)
 80019cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019d0:	080019e1 	.word	0x080019e1
 80019d4:	080019f5 	.word	0x080019f5
 80019d8:	08001a09 	.word	0x08001a09
 80019dc:	08001a1d 	.word	0x08001a1d
	case 1:
		rotationNum = 1;
 80019e0:	4b1a      	ldr	r3, [pc, #104]	; (8001a4c <LCD_setRotation+0x94>)
 80019e2:	2201      	movs	r2, #1
 80019e4:	701a      	strb	r2, [r3, #0]
		LCD_SendCommand(HX8357_MADCTL);
 80019e6:	2036      	movs	r0, #54	; 0x36
 80019e8:	f7ff f846 	bl	8000a78 <LCD_SendCommand>
		LCD_SendData(MADCTL_MX | MADCTL_MY | MADCTL_RGB);
 80019ec:	20c0      	movs	r0, #192	; 0xc0
 80019ee:	f7ff f877 	bl	8000ae0 <LCD_SendData>
		break;
 80019f2:	e027      	b.n	8001a44 <LCD_setRotation+0x8c>
	case 2:
		rotationNum = 2;
 80019f4:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <LCD_setRotation+0x94>)
 80019f6:	2202      	movs	r2, #2
 80019f8:	701a      	strb	r2, [r3, #0]
		LCD_SendCommand(HX8357_MADCTL);
 80019fa:	2036      	movs	r0, #54	; 0x36
 80019fc:	f7ff f83c 	bl	8000a78 <LCD_SendCommand>
		LCD_SendData(MADCTL_MV | MADCTL_MY | MADCTL_RGB);
 8001a00:	20a0      	movs	r0, #160	; 0xa0
 8001a02:	f7ff f86d 	bl	8000ae0 <LCD_SendData>
		break;
 8001a06:	e01d      	b.n	8001a44 <LCD_setRotation+0x8c>
	case 3:
		rotationNum = 3;
 8001a08:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <LCD_setRotation+0x94>)
 8001a0a:	2203      	movs	r2, #3
 8001a0c:	701a      	strb	r2, [r3, #0]
		LCD_SendCommand(HX8357_MADCTL);
 8001a0e:	2036      	movs	r0, #54	; 0x36
 8001a10:	f7ff f832 	bl	8000a78 <LCD_SendCommand>
		LCD_SendData(MADCTL_RGB);
 8001a14:	2000      	movs	r0, #0
 8001a16:	f7ff f863 	bl	8000ae0 <LCD_SendData>
		break;
 8001a1a:	e013      	b.n	8001a44 <LCD_setRotation+0x8c>
	case 4:
		rotationNum = 4;
 8001a1c:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <LCD_setRotation+0x94>)
 8001a1e:	2204      	movs	r2, #4
 8001a20:	701a      	strb	r2, [r3, #0]
		LCD_SendCommand(HX8357_MADCTL);
 8001a22:	2036      	movs	r0, #54	; 0x36
 8001a24:	f7ff f828 	bl	8000a78 <LCD_SendCommand>
		LCD_SendData(MADCTL_MX | MADCTL_MV | MADCTL_RGB);
 8001a28:	2060      	movs	r0, #96	; 0x60
 8001a2a:	f7ff f859 	bl	8000ae0 <LCD_SendData>
		break;
 8001a2e:	e009      	b.n	8001a44 <LCD_setRotation+0x8c>
	default:
		rotationNum = 1;
 8001a30:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <LCD_setRotation+0x94>)
 8001a32:	2201      	movs	r2, #1
 8001a34:	701a      	strb	r2, [r3, #0]
		LCD_SendCommand(HX8357_MADCTL);
 8001a36:	2036      	movs	r0, #54	; 0x36
 8001a38:	f7ff f81e 	bl	8000a78 <LCD_SendCommand>
		LCD_SendData(MADCTL_MY | MADCTL_BGR);
 8001a3c:	2088      	movs	r0, #136	; 0x88
 8001a3e:	f7ff f84f 	bl	8000ae0 <LCD_SendData>
		break;
 8001a42:	bf00      	nop
	}
}
 8001a44:	bf00      	nop
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	20000000 	.word	0x20000000

08001a50 <map>:
static uint16_t ym_PIN = YMIN_Pin;
static uint16_t xm_PIN = XMIN_Pin;
static uint16_t yp_PIN = YPLUS_Pin;
static uint16_t xp_PIN = XPLUS_Pin;

int map(int x, int in_min, int in_max, int out_min, int out_max) {
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
 8001a5c:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	69b9      	ldr	r1, [r7, #24]
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	1a8a      	subs	r2, r1, r2
 8001a6a:	fb02 f203 	mul.w	r2, r2, r3
 8001a6e:	6879      	ldr	r1, [r7, #4]
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	1acb      	subs	r3, r1, r3
 8001a74:	fb92 f2f3 	sdiv	r2, r2, r3
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	4413      	add	r3, r2
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bc80      	pop	{r7}
 8001a84:	4770      	bx	lr
	...

08001a88 <Touch_Init>:

void Touch_Init(ADC_HandleTypeDef *adc) {
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
	memcpy(&adcHandle, adc, sizeof(*adc));
 8001a90:	2230      	movs	r2, #48	; 0x30
 8001a92:	6879      	ldr	r1, [r7, #4]
 8001a94:	4803      	ldr	r0, [pc, #12]	; (8001aa4 <Touch_Init+0x1c>)
 8001a96:	f002 fe79 	bl	800478c <memcpy>
}
 8001a9a:	bf00      	nop
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000198 	.word	0x20000198

08001aa8 <setupForReadY>:

bool isTouch();
uint16_t getPressure();

void setupForReadY() {
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.Pin = yp_PIN;
 8001aae:	4b2c      	ldr	r3, [pc, #176]	; (8001b60 <setupForReadY+0xb8>)
 8001ab0:	881b      	ldrh	r3, [r3, #0]
 8001ab2:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001abc:	2303      	movs	r3, #3
 8001abe:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init( yp , &GPIO_InitStructure );
 8001ac0:	4b28      	ldr	r3, [pc, #160]	; (8001b64 <setupForReadY+0xbc>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	463a      	mov	r2, r7
 8001ac6:	4611      	mov	r1, r2
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f001 fd2b 	bl	8003524 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(yp, yp_PIN, GPIO_PIN_SET);
 8001ace:	4b25      	ldr	r3, [pc, #148]	; (8001b64 <setupForReadY+0xbc>)
 8001ad0:	6818      	ldr	r0, [r3, #0]
 8001ad2:	4b23      	ldr	r3, [pc, #140]	; (8001b60 <setupForReadY+0xb8>)
 8001ad4:	881b      	ldrh	r3, [r3, #0]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	4619      	mov	r1, r3
 8001ada:	f001 fe7d 	bl	80037d8 <HAL_GPIO_WritePin>

	GPIO_InitStructure.Pin = ym_PIN;
 8001ade:	4b22      	ldr	r3, [pc, #136]	; (8001b68 <setupForReadY+0xc0>)
 8001ae0:	881b      	ldrh	r3, [r3, #0]
 8001ae2:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aec:	2303      	movs	r3, #3
 8001aee:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init( ym , &GPIO_InitStructure );
 8001af0:	4b1e      	ldr	r3, [pc, #120]	; (8001b6c <setupForReadY+0xc4>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	463a      	mov	r2, r7
 8001af6:	4611      	mov	r1, r2
 8001af8:	4618      	mov	r0, r3
 8001afa:	f001 fd13 	bl	8003524 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(ym, ym_PIN, GPIO_PIN_RESET);
 8001afe:	4b1b      	ldr	r3, [pc, #108]	; (8001b6c <setupForReadY+0xc4>)
 8001b00:	6818      	ldr	r0, [r3, #0]
 8001b02:	4b19      	ldr	r3, [pc, #100]	; (8001b68 <setupForReadY+0xc0>)
 8001b04:	881b      	ldrh	r3, [r3, #0]
 8001b06:	2200      	movs	r2, #0
 8001b08:	4619      	mov	r1, r3
 8001b0a:	f001 fe65 	bl	80037d8 <HAL_GPIO_WritePin>

	GPIO_InitStructure.Pin = xp_PIN;
 8001b0e:	4b18      	ldr	r3, [pc, #96]	; (8001b70 <setupForReadY+0xc8>)
 8001b10:	881b      	ldrh	r3, [r3, #0]
 8001b12:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8001b14:	2300      	movs	r3, #0
 8001b16:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init( xp , &GPIO_InitStructure );
 8001b1c:	4b15      	ldr	r3, [pc, #84]	; (8001b74 <setupForReadY+0xcc>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	463a      	mov	r2, r7
 8001b22:	4611      	mov	r1, r2
 8001b24:	4618      	mov	r0, r3
 8001b26:	f001 fcfd 	bl	8003524 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(xp, xp_PIN, GPIO_PIN_RESET);
 8001b2a:	4b12      	ldr	r3, [pc, #72]	; (8001b74 <setupForReadY+0xcc>)
 8001b2c:	6818      	ldr	r0, [r3, #0]
 8001b2e:	4b10      	ldr	r3, [pc, #64]	; (8001b70 <setupForReadY+0xc8>)
 8001b30:	881b      	ldrh	r3, [r3, #0]
 8001b32:	2200      	movs	r2, #0
 8001b34:	4619      	mov	r1, r3
 8001b36:	f001 fe4f 	bl	80037d8 <HAL_GPIO_WritePin>

	GPIO_InitStructure.Pin = xm_PIN;
 8001b3a:	4b0f      	ldr	r3, [pc, #60]	; (8001b78 <setupForReadY+0xd0>)
 8001b3c:	881b      	ldrh	r3, [r3, #0]
 8001b3e:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 8001b40:	2303      	movs	r3, #3
 8001b42:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init( xm , &GPIO_InitStructure );
 8001b48:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <setupForReadY+0xd4>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	463a      	mov	r2, r7
 8001b4e:	4611      	mov	r1, r2
 8001b50:	4618      	mov	r0, r3
 8001b52:	f001 fce7 	bl	8003524 <HAL_GPIO_Init>
}
 8001b56:	bf00      	nop
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000018 	.word	0x20000018
 8001b64:	2000000c 	.word	0x2000000c
 8001b68:	20000014 	.word	0x20000014
 8001b6c:	20000004 	.word	0x20000004
 8001b70:	2000001a 	.word	0x2000001a
 8001b74:	20000010 	.word	0x20000010
 8001b78:	20000016 	.word	0x20000016
 8001b7c:	20000008 	.word	0x20000008

08001b80 <setupForReadX>:

void setupForReadX() {
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.Pin = xp_PIN;
 8001b86:	4b2c      	ldr	r3, [pc, #176]	; (8001c38 <setupForReadX+0xb8>)
 8001b88:	881b      	ldrh	r3, [r3, #0]
 8001b8a:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 8001b90:	2301      	movs	r3, #1
 8001b92:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b94:	2303      	movs	r3, #3
 8001b96:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init( xp , &GPIO_InitStructure );
 8001b98:	4b28      	ldr	r3, [pc, #160]	; (8001c3c <setupForReadX+0xbc>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	463a      	mov	r2, r7
 8001b9e:	4611      	mov	r1, r2
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f001 fcbf 	bl	8003524 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(xp, xp_PIN, GPIO_PIN_SET);
 8001ba6:	4b25      	ldr	r3, [pc, #148]	; (8001c3c <setupForReadX+0xbc>)
 8001ba8:	6818      	ldr	r0, [r3, #0]
 8001baa:	4b23      	ldr	r3, [pc, #140]	; (8001c38 <setupForReadX+0xb8>)
 8001bac:	881b      	ldrh	r3, [r3, #0]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	f001 fe11 	bl	80037d8 <HAL_GPIO_WritePin>

	GPIO_InitStructure.Pin = xm_PIN;
 8001bb6:	4b22      	ldr	r3, [pc, #136]	; (8001c40 <setupForReadX+0xc0>)
 8001bb8:	881b      	ldrh	r3, [r3, #0]
 8001bba:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init( xm , &GPIO_InitStructure );
 8001bc8:	4b1e      	ldr	r3, [pc, #120]	; (8001c44 <setupForReadX+0xc4>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	463a      	mov	r2, r7
 8001bce:	4611      	mov	r1, r2
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f001 fca7 	bl	8003524 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(xm, xm_PIN, GPIO_PIN_RESET);
 8001bd6:	4b1b      	ldr	r3, [pc, #108]	; (8001c44 <setupForReadX+0xc4>)
 8001bd8:	6818      	ldr	r0, [r3, #0]
 8001bda:	4b19      	ldr	r3, [pc, #100]	; (8001c40 <setupForReadX+0xc0>)
 8001bdc:	881b      	ldrh	r3, [r3, #0]
 8001bde:	2200      	movs	r2, #0
 8001be0:	4619      	mov	r1, r3
 8001be2:	f001 fdf9 	bl	80037d8 <HAL_GPIO_WritePin>

	GPIO_InitStructure.Pin = ym_PIN;
 8001be6:	4b18      	ldr	r3, [pc, #96]	; (8001c48 <setupForReadX+0xc8>)
 8001be8:	881b      	ldrh	r3, [r3, #0]
 8001bea:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8001bec:	2300      	movs	r3, #0
 8001bee:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init( ym , &GPIO_InitStructure );
 8001bf4:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <setupForReadX+0xcc>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	463a      	mov	r2, r7
 8001bfa:	4611      	mov	r1, r2
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f001 fc91 	bl	8003524 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(ym, ym_PIN, GPIO_PIN_RESET);
 8001c02:	4b12      	ldr	r3, [pc, #72]	; (8001c4c <setupForReadX+0xcc>)
 8001c04:	6818      	ldr	r0, [r3, #0]
 8001c06:	4b10      	ldr	r3, [pc, #64]	; (8001c48 <setupForReadX+0xc8>)
 8001c08:	881b      	ldrh	r3, [r3, #0]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	f001 fde3 	bl	80037d8 <HAL_GPIO_WritePin>

	GPIO_InitStructure.Pin = yp_PIN;
 8001c12:	4b0f      	ldr	r3, [pc, #60]	; (8001c50 <setupForReadX+0xd0>)
 8001c14:	881b      	ldrh	r3, [r3, #0]
 8001c16:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init( yp , &GPIO_InitStructure );
 8001c20:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <setupForReadX+0xd4>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	463a      	mov	r2, r7
 8001c26:	4611      	mov	r1, r2
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f001 fc7b 	bl	8003524 <HAL_GPIO_Init>
}
 8001c2e:	bf00      	nop
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	2000001a 	.word	0x2000001a
 8001c3c:	20000010 	.word	0x20000010
 8001c40:	20000016 	.word	0x20000016
 8001c44:	20000008 	.word	0x20000008
 8001c48:	20000014 	.word	0x20000014
 8001c4c:	20000004 	.word	0x20000004
 8001c50:	20000018 	.word	0x20000018
 8001c54:	2000000c 	.word	0x2000000c

08001c58 <readChannelXMin>:

int readChannelXMin() {
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig;
	sConfig.Channel = ADC_CHANNEL_13;
 8001c5e:	230d      	movs	r3, #13
 8001c60:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c62:	2301      	movs	r3, #1
 8001c64:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001c66:	2307      	movs	r3, #7
 8001c68:	60fb      	str	r3, [r7, #12]
	int config = HAL_ADC_ConfigChannel(&adcHandle, &sConfig);
 8001c6a:	1d3b      	adds	r3, r7, #4
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	480f      	ldr	r0, [pc, #60]	; (8001cac <readChannelXMin+0x54>)
 8001c70:	f001 f9f0 	bl	8003054 <HAL_ADC_ConfigChannel>
 8001c74:	4603      	mov	r3, r0
 8001c76:	613b      	str	r3, [r7, #16]
	if (config != HAL_OK)
	{
		//
	}
	HAL_Delay(10);
 8001c78:	200a      	movs	r0, #10
 8001c7a:	f000 ff11 	bl	8002aa0 <HAL_Delay>
	HAL_ADC_Start(&adcHandle);
 8001c7e:	480b      	ldr	r0, [pc, #44]	; (8001cac <readChannelXMin+0x54>)
 8001c80:	f001 f808 	bl	8002c94 <HAL_ADC_Start>
	uint32_t ADCValue;
	if(HAL_ADC_PollForConversion(&adcHandle, 5) == HAL_OK) {
 8001c84:	2105      	movs	r1, #5
 8001c86:	4809      	ldr	r0, [pc, #36]	; (8001cac <readChannelXMin+0x54>)
 8001c88:	f001 f8de 	bl	8002e48 <HAL_ADC_PollForConversion>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d103      	bne.n	8001c9a <readChannelXMin+0x42>
		ADCValue = HAL_ADC_GetValue(&adcHandle);
 8001c92:	4806      	ldr	r0, [pc, #24]	; (8001cac <readChannelXMin+0x54>)
 8001c94:	f001 f9d2 	bl	800303c <HAL_ADC_GetValue>
 8001c98:	6178      	str	r0, [r7, #20]
	}
	HAL_ADC_Stop(&adcHandle);
 8001c9a:	4804      	ldr	r0, [pc, #16]	; (8001cac <readChannelXMin+0x54>)
 8001c9c:	f001 f8a8 	bl	8002df0 <HAL_ADC_Stop>
	return ADCValue;
 8001ca0:	697b      	ldr	r3, [r7, #20]
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3718      	adds	r7, #24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	20000198 	.word	0x20000198

08001cb0 <readTouchY>:

int readTouchY() {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af02      	add	r7, sp, #8
	setupForReadY();
 8001cb6:	f7ff fef7 	bl	8001aa8 <setupForReadY>
	//return readChannelXMin();
	return map(readChannelXMin(), TS_MINY, TS_MAXY, 0, 480);
 8001cba:	f7ff ffcd 	bl	8001c58 <readChannelXMin>
 8001cbe:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001cc2:	9300      	str	r3, [sp, #0]
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	f640 629c 	movw	r2, #3740	; 0xe9c
 8001cca:	f240 1127 	movw	r1, #295	; 0x127
 8001cce:	f7ff febf 	bl	8001a50 <map>
 8001cd2:	4603      	mov	r3, r0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
	...

08001cdc <readChannelYPlus>:

int readChannelYPlus() {
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig;
	sConfig.Channel = ADC_CHANNEL_12;
 8001ce2:	230c      	movs	r3, #12
 8001ce4:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001cea:	2307      	movs	r3, #7
 8001cec:	60fb      	str	r3, [r7, #12]
	int config = HAL_ADC_ConfigChannel(&adcHandle, &sConfig);
 8001cee:	1d3b      	adds	r3, r7, #4
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	480f      	ldr	r0, [pc, #60]	; (8001d30 <readChannelYPlus+0x54>)
 8001cf4:	f001 f9ae 	bl	8003054 <HAL_ADC_ConfigChannel>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	613b      	str	r3, [r7, #16]
	if (config != HAL_OK)
	{
		//
	}
	HAL_Delay(10);
 8001cfc:	200a      	movs	r0, #10
 8001cfe:	f000 fecf 	bl	8002aa0 <HAL_Delay>
	HAL_ADC_Start(&adcHandle);
 8001d02:	480b      	ldr	r0, [pc, #44]	; (8001d30 <readChannelYPlus+0x54>)
 8001d04:	f000 ffc6 	bl	8002c94 <HAL_ADC_Start>
	uint32_t ADCValue;
	if(HAL_ADC_PollForConversion(&adcHandle, 5) == HAL_OK) {
 8001d08:	2105      	movs	r1, #5
 8001d0a:	4809      	ldr	r0, [pc, #36]	; (8001d30 <readChannelYPlus+0x54>)
 8001d0c:	f001 f89c 	bl	8002e48 <HAL_ADC_PollForConversion>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d103      	bne.n	8001d1e <readChannelYPlus+0x42>
		ADCValue = HAL_ADC_GetValue(&adcHandle);
 8001d16:	4806      	ldr	r0, [pc, #24]	; (8001d30 <readChannelYPlus+0x54>)
 8001d18:	f001 f990 	bl	800303c <HAL_ADC_GetValue>
 8001d1c:	6178      	str	r0, [r7, #20]
	}
	HAL_ADC_Stop(&adcHandle);
 8001d1e:	4804      	ldr	r0, [pc, #16]	; (8001d30 <readChannelYPlus+0x54>)
 8001d20:	f001 f866 	bl	8002df0 <HAL_ADC_Stop>
	return ADCValue;
 8001d24:	697b      	ldr	r3, [r7, #20]
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3718      	adds	r7, #24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	20000198 	.word	0x20000198

08001d34 <readTouchX>:

int readTouchX() {
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af02      	add	r7, sp, #8
	setupForReadX();
 8001d3a:	f7ff ff21 	bl	8001b80 <setupForReadX>
	//return readChannelYPlus();
	return map(readChannelYPlus(), TS_MINX, TS_MAXX, 0, 320);
 8001d3e:	f7ff ffcd 	bl	8001cdc <readChannelYPlus>
 8001d42:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001d46:	9300      	str	r3, [sp, #0]
 8001d48:	2300      	movs	r3, #0
 8001d4a:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8001d4e:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8001d52:	f7ff fe7d 	bl	8001a50 <map>
 8001d56:	4603      	mov	r3, r0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	b083      	sub	sp, #12
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001d66:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001d6a:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d013      	beq.n	8001d9e <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001d76:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001d7a:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001d7e:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d00b      	beq.n	8001d9e <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001d86:	e000      	b.n	8001d8a <ITM_SendChar+0x2c>
    {
      __NOP();
 8001d88:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001d8a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d0f9      	beq.n	8001d88 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001d94:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	b2d2      	uxtb	r2, r2
 8001d9c:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001d9e:	687b      	ldr	r3, [r7, #4]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bc80      	pop	{r7}
 8001da8:	4770      	bx	lr

08001daa <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b086      	sub	sp, #24
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	60f8      	str	r0, [r7, #12]
 8001db2:	60b9      	str	r1, [r7, #8]
 8001db4:	607a      	str	r2, [r7, #4]
	int i = 0;
 8001db6:	2300      	movs	r3, #0
 8001db8:	617b      	str	r3, [r7, #20]
	for (i = 0; i < len; i++)
 8001dba:	2300      	movs	r3, #0
 8001dbc:	617b      	str	r3, [r7, #20]
 8001dbe:	e009      	b.n	8001dd4 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	1c5a      	adds	r2, r3, #1
 8001dc4:	60ba      	str	r2, [r7, #8]
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff ffc8 	bl	8001d5e <ITM_SendChar>
	for (i = 0; i < len; i++)
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	617b      	str	r3, [r7, #20]
 8001dd4:	697a      	ldr	r2, [r7, #20]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	dbf1      	blt.n	8001dc0 <_write+0x16>
	return len;
 8001ddc:	687b      	ldr	r3, [r7, #4]
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3718      	adds	r7, #24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
	...

08001de8 <drawStruct>:
	int start_x, start_y, end_x, end_y;
	uint8_t action;
	const uint16_t * icon;
};

void drawStruct(struct Button * p) {
 8001de8:	b590      	push	{r4, r7, lr}
 8001dea:	b089      	sub	sp, #36	; 0x24
 8001dec:	af02      	add	r7, sp, #8
 8001dee:	6078      	str	r0, [r7, #4]
	uint16_t color;
	switch(p->action) {
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	7c1b      	ldrb	r3, [r3, #16]
 8001df4:	3b01      	subs	r3, #1
 8001df6:	2b03      	cmp	r3, #3
 8001df8:	d825      	bhi.n	8001e46 <drawStruct+0x5e>
 8001dfa:	a201      	add	r2, pc, #4	; (adr r2, 8001e00 <drawStruct+0x18>)
 8001dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e00:	08001e11 	.word	0x08001e11
 8001e04:	08001e1d 	.word	0x08001e1d
 8001e08:	08001e2b 	.word	0x08001e2b
 8001e0c:	08001e39 	.word	0x08001e39
	case 1: color = HX8357_BLUE; p->icon = pencil_icon; break;
 8001e10:	231f      	movs	r3, #31
 8001e12:	82fb      	strh	r3, [r7, #22]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a2e      	ldr	r2, [pc, #184]	; (8001ed0 <drawStruct+0xe8>)
 8001e18:	615a      	str	r2, [r3, #20]
 8001e1a:	e01b      	b.n	8001e54 <drawStruct+0x6c>
	case 2: color= HX8357_RED;  p->icon = line_icon; break;
 8001e1c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001e20:	82fb      	strh	r3, [r7, #22]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a2b      	ldr	r2, [pc, #172]	; (8001ed4 <drawStruct+0xec>)
 8001e26:	615a      	str	r2, [r3, #20]
 8001e28:	e014      	b.n	8001e54 <drawStruct+0x6c>
	case 3: color= HX8357_CYAN;  p->icon = circle_icon; break;
 8001e2a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001e2e:	82fb      	strh	r3, [r7, #22]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4a29      	ldr	r2, [pc, #164]	; (8001ed8 <drawStruct+0xf0>)
 8001e34:	615a      	str	r2, [r3, #20]
 8001e36:	e00d      	b.n	8001e54 <drawStruct+0x6c>
	case 4: color= HX8357_GREEN;  p->icon = graph_icon; break;
 8001e38:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001e3c:	82fb      	strh	r3, [r7, #22]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a26      	ldr	r2, [pc, #152]	; (8001edc <drawStruct+0xf4>)
 8001e42:	615a      	str	r2, [r3, #20]
 8001e44:	e006      	b.n	8001e54 <drawStruct+0x6c>
	default: color = HX8357_YELLOW;  p->icon = trash_icon; break;
 8001e46:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001e4a:	82fb      	strh	r3, [r7, #22]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a24      	ldr	r2, [pc, #144]	; (8001ee0 <drawStruct+0xf8>)
 8001e50:	615a      	str	r2, [r3, #20]
 8001e52:	bf00      	nop
	}

	int center_x = abs(p->end_x - p->start_x) + p->start_x;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689a      	ldr	r2, [r3, #8]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001e62:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	613b      	str	r3, [r7, #16]
	int center_y = abs(p->end_y - p->start_y) + p->start_y;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68da      	ldr	r2, [r3, #12]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001e7c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	4413      	add	r3, r2
 8001e86:	60fb      	str	r3, [r7, #12]
	// 32 bit
	center_x -= 4;
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	3b04      	subs	r3, #4
 8001e8c:	613b      	str	r3, [r7, #16]
	center_y -= 4;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	3b04      	subs	r3, #4
 8001e92:	60fb      	str	r3, [r7, #12]
	LCD_Fill_Rect(p->start_x, p->start_y, p->end_x, p->end_y, color);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	461c      	mov	r4, r3
 8001eac:	8afb      	ldrh	r3, [r7, #22]
 8001eae:	9300      	str	r3, [sp, #0]
 8001eb0:	4623      	mov	r3, r4
 8001eb2:	f7ff f883 	bl	8000fbc <LCD_Fill_Rect>
	LCD_printIcon(center_x, center_y, p->icon);
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	b298      	uxth	r0, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	b299      	uxth	r1, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	695b      	ldr	r3, [r3, #20]
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	f7ff fd3b 	bl	800193e <LCD_printIcon>

}
 8001ec8:	bf00      	nop
 8001eca:	371c      	adds	r7, #28
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd90      	pop	{r4, r7, pc}
 8001ed0:	08008534 	.word	0x08008534
 8001ed4:	08007d34 	.word	0x08007d34
 8001ed8:	08007534 	.word	0x08007534
 8001edc:	08008d34 	.word	0x08008d34
 8001ee0:	08006d34 	.word	0x08006d34

08001ee4 <checkIfInBoundary>:

uint8_t checkIfInBoundary(struct Button * p, int x_coor) {
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
	if(x_coor >= p->start_x && x_coor <= p->end_x) {
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	683a      	ldr	r2, [r7, #0]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	db06      	blt.n	8001f06 <checkIfInBoundary+0x22>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	dc01      	bgt.n	8001f06 <checkIfInBoundary+0x22>
		return 1;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e000      	b.n	8001f08 <checkIfInBoundary+0x24>
	}

	return 0;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bc80      	pop	{r7}
 8001f10:	4770      	bx	lr
	...

08001f14 <default_screen>:
struct Button circle_button  = {140, 0, 180, 40, 3 };
struct Button line_button  = {200, 0, 240, 40, 2 };
struct Button pencil_button = {260, 0, 300, 40, 1 };


void default_screen() {
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
	LCD_Fill(HX8357_WHITE);
 8001f18:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001f1c:	f7ff f80a 	bl	8000f34 <LCD_Fill>
	drawStruct(&pencil_button);
 8001f20:	4808      	ldr	r0, [pc, #32]	; (8001f44 <default_screen+0x30>)
 8001f22:	f7ff ff61 	bl	8001de8 <drawStruct>
	drawStruct(&line_button);
 8001f26:	4808      	ldr	r0, [pc, #32]	; (8001f48 <default_screen+0x34>)
 8001f28:	f7ff ff5e 	bl	8001de8 <drawStruct>
	drawStruct(&circle_button);
 8001f2c:	4807      	ldr	r0, [pc, #28]	; (8001f4c <default_screen+0x38>)
 8001f2e:	f7ff ff5b 	bl	8001de8 <drawStruct>
	drawStruct(&polygon_button);
 8001f32:	4807      	ldr	r0, [pc, #28]	; (8001f50 <default_screen+0x3c>)
 8001f34:	f7ff ff58 	bl	8001de8 <drawStruct>
	drawStruct(&clear_button);
 8001f38:	4806      	ldr	r0, [pc, #24]	; (8001f54 <default_screen+0x40>)
 8001f3a:	f7ff ff55 	bl	8001de8 <drawStruct>
}
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	2000007c 	.word	0x2000007c
 8001f48:	20000064 	.word	0x20000064
 8001f4c:	2000004c 	.word	0x2000004c
 8001f50:	20000034 	.word	0x20000034
 8001f54:	2000001c 	.word	0x2000001c

08001f58 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f5a:	b099      	sub	sp, #100	; 0x64
 8001f5c:	af04      	add	r7, sp, #16


	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001f5e:	f000 fd3d 	bl	80029dc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001f62:	f000 fa07 	bl	8002374 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001f66:	f000 fad5 	bl	8002514 <MX_GPIO_Init>
	MX_ADC1_Init();
 8001f6a:	f000 fa5f 	bl	800242c <MX_ADC1_Init>
	MX_SPI1_Init();
 8001f6e:	f000 fa9b 	bl	80024a8 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	Touch_Init(&hadc1);
 8001f72:	48b5      	ldr	r0, [pc, #724]	; (8002248 <main+0x2f0>)
 8001f74:	f7ff fd88 	bl	8001a88 <Touch_Init>
	LCD_Init(&hspi1, LCD_CS_GPIO_Port, LCD_CS_Pin, LCD_DC_GPIO_Port, LCD_DC_Pin, LCD_RST_GPIO_Port, LCD_RST_Pin);
 8001f78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f7c:	9302      	str	r3, [sp, #8]
 8001f7e:	4bb3      	ldr	r3, [pc, #716]	; (800224c <main+0x2f4>)
 8001f80:	9301      	str	r3, [sp, #4]
 8001f82:	2380      	movs	r3, #128	; 0x80
 8001f84:	9300      	str	r3, [sp, #0]
 8001f86:	4bb2      	ldr	r3, [pc, #712]	; (8002250 <main+0x2f8>)
 8001f88:	2240      	movs	r2, #64	; 0x40
 8001f8a:	49b2      	ldr	r1, [pc, #712]	; (8002254 <main+0x2fc>)
 8001f8c:	48b2      	ldr	r0, [pc, #712]	; (8002258 <main+0x300>)
 8001f8e:	f7fe fe5b 	bl	8000c48 <LCD_Init>
	LCD_setRotation(3);
 8001f92:	2003      	movs	r0, #3
 8001f94:	f7ff fd10 	bl	80019b8 <LCD_setRotation>
	default_screen();
 8001f98:	f7ff ffbc 	bl	8001f14 <default_screen>
	int current_x, current_y, radius, x_diff, y_diff;
	int previous_x, previous_y = 0;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	64bb      	str	r3, [r7, #72]	; 0x48
	uint8_t enabled_action = 0;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint8_t in_button;
	int text_coords[2] = {0, 460};
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	61fb      	str	r3, [r7, #28]
 8001faa:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
 8001fae:	623b      	str	r3, [r7, #32]
	int triangle_coords[3][2] = {{0, 0}, {0, 0}, {0, 0}};
 8001fb0:	1d3b      	adds	r3, r7, #4
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	605a      	str	r2, [r3, #4]
 8001fb8:	609a      	str	r2, [r3, #8]
 8001fba:	60da      	str	r2, [r3, #12]
 8001fbc:	611a      	str	r2, [r3, #16]
 8001fbe:	615a      	str	r2, [r3, #20]
	uint8_t completeTriangle = 0;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	int triangle_coord_count = 0;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	643b      	str	r3, [r7, #64]	; 0x40
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		current_x = readTouchX();
 8001fca:	f7ff feb3 	bl	8001d34 <readTouchX>
 8001fce:	6378      	str	r0, [r7, #52]	; 0x34
		current_y = readTouchY();
 8001fd0:	f7ff fe6e 	bl	8001cb0 <readTouchY>
 8001fd4:	6338      	str	r0, [r7, #48]	; 0x30
		printf("TAPPED: (%d, %d)\n", current_x, current_y);
 8001fd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fd8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001fda:	48a0      	ldr	r0, [pc, #640]	; (800225c <main+0x304>)
 8001fdc:	f002 fbea 	bl	80047b4 <iprintf>
		if(current_x > 0 && current_y > 0) {
 8001fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f340 81c1 	ble.w	800236a <main+0x412>
 8001fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f340 81bd 	ble.w	800236a <main+0x412>
			// 1. Check if in boundary of button
			// 2. Also determine action
			if(current_y >= 0 && current_y <= 40) {
 8001ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f2c0 8093 	blt.w	800211e <main+0x1c6>
 8001ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ffa:	2b28      	cmp	r3, #40	; 0x28
 8001ffc:	f300 808f 	bgt.w	800211e <main+0x1c6>
				in_button = 0;
 8002000:	2300      	movs	r3, #0
 8002002:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				if(checkIfInBoundary(&pencil_button, current_x)) {
 8002006:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002008:	4895      	ldr	r0, [pc, #596]	; (8002260 <main+0x308>)
 800200a:	f7ff ff6b 	bl	8001ee4 <checkIfInBoundary>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d016      	beq.n	8002042 <main+0xea>
					in_button = 1;
 8002014:	2301      	movs	r3, #1
 8002016:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
					enabled_action = pencil_button.action;
 800201a:	4b91      	ldr	r3, [pc, #580]	; (8002260 <main+0x308>)
 800201c:	7c1b      	ldrb	r3, [r3, #16]
 800201e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					LCD_printText("PIXEL  ", text_coords[0], text_coords[1], HX8357_BLACK, HX8357_WHITE, 1);
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	b219      	sxth	r1, r3
 8002026:	6a3b      	ldr	r3, [r7, #32]
 8002028:	b21a      	sxth	r2, r3
 800202a:	2301      	movs	r3, #1
 800202c:	9301      	str	r3, [sp, #4]
 800202e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	2300      	movs	r3, #0
 8002036:	488b      	ldr	r0, [pc, #556]	; (8002264 <main+0x30c>)
 8002038:	f7ff fc40 	bl	80018bc <LCD_printText>
					printf("User tapped line button\n");
 800203c:	488a      	ldr	r0, [pc, #552]	; (8002268 <main+0x310>)
 800203e:	f002 fc2d 	bl	800489c <puts>
				}
				if(checkIfInBoundary(&line_button, current_x)) {
 8002042:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002044:	4889      	ldr	r0, [pc, #548]	; (800226c <main+0x314>)
 8002046:	f7ff ff4d 	bl	8001ee4 <checkIfInBoundary>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d016      	beq.n	800207e <main+0x126>
					in_button = 1;
 8002050:	2301      	movs	r3, #1
 8002052:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
					enabled_action = line_button.action;
 8002056:	4b85      	ldr	r3, [pc, #532]	; (800226c <main+0x314>)
 8002058:	7c1b      	ldrb	r3, [r3, #16]
 800205a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					LCD_printText("LINE   ", text_coords[0], text_coords[1], HX8357_BLACK, HX8357_WHITE, 1);
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	b219      	sxth	r1, r3
 8002062:	6a3b      	ldr	r3, [r7, #32]
 8002064:	b21a      	sxth	r2, r3
 8002066:	2301      	movs	r3, #1
 8002068:	9301      	str	r3, [sp, #4]
 800206a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800206e:	9300      	str	r3, [sp, #0]
 8002070:	2300      	movs	r3, #0
 8002072:	487f      	ldr	r0, [pc, #508]	; (8002270 <main+0x318>)
 8002074:	f7ff fc22 	bl	80018bc <LCD_printText>
					printf("User tapped line button\n");
 8002078:	487b      	ldr	r0, [pc, #492]	; (8002268 <main+0x310>)
 800207a:	f002 fc0f 	bl	800489c <puts>
				}

				if(checkIfInBoundary(&circle_button, current_x)) {
 800207e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002080:	487c      	ldr	r0, [pc, #496]	; (8002274 <main+0x31c>)
 8002082:	f7ff ff2f 	bl	8001ee4 <checkIfInBoundary>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d016      	beq.n	80020ba <main+0x162>
					in_button = 1;
 800208c:	2301      	movs	r3, #1
 800208e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
					enabled_action = circle_button.action;
 8002092:	4b78      	ldr	r3, [pc, #480]	; (8002274 <main+0x31c>)
 8002094:	7c1b      	ldrb	r3, [r3, #16]
 8002096:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					LCD_printText("CIRCLE  ", text_coords[0], text_coords[1], HX8357_BLACK, HX8357_WHITE, 1);
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	b219      	sxth	r1, r3
 800209e:	6a3b      	ldr	r3, [r7, #32]
 80020a0:	b21a      	sxth	r2, r3
 80020a2:	2301      	movs	r3, #1
 80020a4:	9301      	str	r3, [sp, #4]
 80020a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	2300      	movs	r3, #0
 80020ae:	4872      	ldr	r0, [pc, #456]	; (8002278 <main+0x320>)
 80020b0:	f7ff fc04 	bl	80018bc <LCD_printText>
					printf("User tapped circle button\n");
 80020b4:	4871      	ldr	r0, [pc, #452]	; (800227c <main+0x324>)
 80020b6:	f002 fbf1 	bl	800489c <puts>
				}

				if(checkIfInBoundary(&polygon_button, current_x)) {
 80020ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80020bc:	4870      	ldr	r0, [pc, #448]	; (8002280 <main+0x328>)
 80020be:	f7ff ff11 	bl	8001ee4 <checkIfInBoundary>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d016      	beq.n	80020f6 <main+0x19e>
					in_button = 1;
 80020c8:	2301      	movs	r3, #1
 80020ca:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
					enabled_action = polygon_button.action;
 80020ce:	4b6c      	ldr	r3, [pc, #432]	; (8002280 <main+0x328>)
 80020d0:	7c1b      	ldrb	r3, [r3, #16]
 80020d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					LCD_printText("POLYGON", text_coords[0], text_coords[1], HX8357_BLACK, HX8357_WHITE, 1);
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	b219      	sxth	r1, r3
 80020da:	6a3b      	ldr	r3, [r7, #32]
 80020dc:	b21a      	sxth	r2, r3
 80020de:	2301      	movs	r3, #1
 80020e0:	9301      	str	r3, [sp, #4]
 80020e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	2300      	movs	r3, #0
 80020ea:	4866      	ldr	r0, [pc, #408]	; (8002284 <main+0x32c>)
 80020ec:	f7ff fbe6 	bl	80018bc <LCD_printText>
					printf("User tapped polygon button\n");
 80020f0:	4865      	ldr	r0, [pc, #404]	; (8002288 <main+0x330>)
 80020f2:	f002 fbd3 	bl	800489c <puts>
				}
				if(checkIfInBoundary(&clear_button, current_x)) {
 80020f6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80020f8:	4864      	ldr	r0, [pc, #400]	; (800228c <main+0x334>)
 80020fa:	f7ff fef3 	bl	8001ee4 <checkIfInBoundary>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d00f      	beq.n	8002124 <main+0x1cc>
					in_button = 1;
 8002104:	2301      	movs	r3, #1
 8002106:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
					enabled_action = clear_button.action;
 800210a:	4b60      	ldr	r3, [pc, #384]	; (800228c <main+0x334>)
 800210c:	7c1b      	ldrb	r3, [r3, #16]
 800210e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					default_screen();
 8002112:	f7ff feff 	bl	8001f14 <default_screen>
					printf("User tapped clear button\n");
 8002116:	485e      	ldr	r0, [pc, #376]	; (8002290 <main+0x338>)
 8002118:	f002 fbc0 	bl	800489c <puts>
				if(checkIfInBoundary(&clear_button, current_x)) {
 800211c:	e002      	b.n	8002124 <main+0x1cc>
				}

			} else {
				in_button = 0;
 800211e:	2300      	movs	r3, #0
 8002120:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
			}

			if(in_button) {
 8002124:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002128:	2b00      	cmp	r3, #0
 800212a:	d004      	beq.n	8002136 <main+0x1de>
				previous_x = 0;
 800212c:	2300      	movs	r3, #0
 800212e:	64fb      	str	r3, [r7, #76]	; 0x4c
				previous_y = 0;
 8002130:	2300      	movs	r3, #0
 8002132:	64bb      	str	r3, [r7, #72]	; 0x48
 8002134:	e119      	b.n	800236a <main+0x412>
			} else {
				if(previous_x > 0 && previous_y > 0) {
 8002136:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002138:	2b00      	cmp	r3, #0
 800213a:	f340 8112 	ble.w	8002362 <main+0x40a>
 800213e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002140:	2b00      	cmp	r3, #0
 8002142:	f340 810e 	ble.w	8002362 <main+0x40a>
					switch(enabled_action) {
 8002146:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800214a:	3b01      	subs	r3, #1
 800214c:	2b04      	cmp	r3, #4
 800214e:	f200 80f9 	bhi.w	8002344 <main+0x3ec>
 8002152:	a201      	add	r2, pc, #4	; (adr r2, 8002158 <main+0x200>)
 8002154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002158:	0800216d 	.word	0x0800216d
 800215c:	0800217f 	.word	0x0800217f
 8002160:	0800219b 	.word	0x0800219b
 8002164:	08002237 	.word	0x08002237
 8002168:	08002357 	.word	0x08002357
					// 1 = line, 2 = circle, 3 = polygon
					case 1: LCD_DrawPixel(current_x, current_y, HX8357_BLACK); break;
 800216c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800216e:	b29b      	uxth	r3, r3
 8002170:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002172:	b291      	uxth	r1, r2
 8002174:	2200      	movs	r2, #0
 8002176:	4618      	mov	r0, r3
 8002178:	f7fe febc 	bl	8000ef4 <LCD_DrawPixel>
 800217c:	e0ec      	b.n	8002358 <main+0x400>
					case 2:
						LCD_drawLine(previous_x, previous_y, current_x, current_y, HX8357_BLACK);
 800217e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002180:	b218      	sxth	r0, r3
 8002182:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002184:	b219      	sxth	r1, r3
 8002186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002188:	b21a      	sxth	r2, r3
 800218a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800218c:	b21c      	sxth	r4, r3
 800218e:	2300      	movs	r3, #0
 8002190:	9300      	str	r3, [sp, #0]
 8002192:	4623      	mov	r3, r4
 8002194:	f7ff f81f 	bl	80011d6 <LCD_drawLine>
						break;
 8002198:	e0de      	b.n	8002358 <main+0x400>
					case 3:
						// Get distance
						x_diff = abs(current_x - previous_x);
 800219a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800219c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	bfb8      	it	lt
 80021a4:	425b      	neglt	r3, r3
 80021a6:	62fb      	str	r3, [r7, #44]	; 0x2c
						y_diff = abs(current_y - previous_y);
 80021a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	bfb8      	it	lt
 80021b2:	425b      	neglt	r3, r3
 80021b4:	62bb      	str	r3, [r7, #40]	; 0x28
						x_diff = pow(x_diff, 2);
 80021b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80021b8:	f7fe f91c 	bl	80003f4 <__aeabi_i2d>
 80021bc:	f04f 0200 	mov.w	r2, #0
 80021c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021c4:	f003 fa48 	bl	8005658 <pow>
 80021c8:	4603      	mov	r3, r0
 80021ca:	460c      	mov	r4, r1
 80021cc:	4618      	mov	r0, r3
 80021ce:	4621      	mov	r1, r4
 80021d0:	f7fe fc2a 	bl	8000a28 <__aeabi_d2iz>
 80021d4:	4603      	mov	r3, r0
 80021d6:	62fb      	str	r3, [r7, #44]	; 0x2c
						y_diff = pow(y_diff, 2);
 80021d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021da:	f7fe f90b 	bl	80003f4 <__aeabi_i2d>
 80021de:	f04f 0200 	mov.w	r2, #0
 80021e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021e6:	f003 fa37 	bl	8005658 <pow>
 80021ea:	4603      	mov	r3, r0
 80021ec:	460c      	mov	r4, r1
 80021ee:	4618      	mov	r0, r3
 80021f0:	4621      	mov	r1, r4
 80021f2:	f7fe fc19 	bl	8000a28 <__aeabi_d2iz>
 80021f6:	4603      	mov	r3, r0
 80021f8:	62bb      	str	r3, [r7, #40]	; 0x28
						radius = sqrt((x_diff + y_diff));
 80021fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021fe:	4413      	add	r3, r2
 8002200:	4618      	mov	r0, r3
 8002202:	f7fe f8f7 	bl	80003f4 <__aeabi_i2d>
 8002206:	4603      	mov	r3, r0
 8002208:	460c      	mov	r4, r1
 800220a:	4618      	mov	r0, r3
 800220c:	4621      	mov	r1, r4
 800220e:	f003 fb7f 	bl	8005910 <sqrt>
 8002212:	4603      	mov	r3, r0
 8002214:	460c      	mov	r4, r1
 8002216:	4618      	mov	r0, r3
 8002218:	4621      	mov	r1, r4
 800221a:	f7fe fc05 	bl	8000a28 <__aeabi_d2iz>
 800221e:	4603      	mov	r3, r0
 8002220:	627b      	str	r3, [r7, #36]	; 0x24
						LCD_drawCircle(previous_x, previous_y, radius, HX8357_BLACK);
 8002222:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002224:	b218      	sxth	r0, r3
 8002226:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002228:	b219      	sxth	r1, r3
 800222a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222c:	b21a      	sxth	r2, r3
 800222e:	2300      	movs	r3, #0
 8002230:	f7fe fefe 	bl	8001030 <LCD_drawCircle>
						break;
 8002234:	e090      	b.n	8002358 <main+0x400>
					case 4:
						completeTriangle = 1;
 8002236:	2301      	movs	r3, #1
 8002238:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
						for(int i = 0; i < 3; i++) {
 800223c:	2300      	movs	r3, #0
 800223e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002240:	e040      	b.n	80022c4 <main+0x36c>
							for(int j = 0; j < 2; j++) {
 8002242:	2300      	movs	r3, #0
 8002244:	63bb      	str	r3, [r7, #56]	; 0x38
 8002246:	e037      	b.n	80022b8 <main+0x360>
 8002248:	200001d4 	.word	0x200001d4
 800224c:	40010800 	.word	0x40010800
 8002250:	40011000 	.word	0x40011000
 8002254:	40010c00 	.word	0x40010c00
 8002258:	20000204 	.word	0x20000204
 800225c:	08006768 	.word	0x08006768
 8002260:	2000007c 	.word	0x2000007c
 8002264:	0800677c 	.word	0x0800677c
 8002268:	08006784 	.word	0x08006784
 800226c:	20000064 	.word	0x20000064
 8002270:	0800679c 	.word	0x0800679c
 8002274:	2000004c 	.word	0x2000004c
 8002278:	080067a4 	.word	0x080067a4
 800227c:	080067b0 	.word	0x080067b0
 8002280:	20000034 	.word	0x20000034
 8002284:	080067cc 	.word	0x080067cc
 8002288:	080067d4 	.word	0x080067d4
 800228c:	2000001c 	.word	0x2000001c
 8002290:	080067f0 	.word	0x080067f0
								if(triangle_coords[i][j] == 0) {
 8002294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002296:	005a      	lsls	r2, r3, #1
 8002298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800229a:	4413      	add	r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80022a2:	4413      	add	r3, r2
 80022a4:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d102      	bne.n	80022b2 <main+0x35a>
									completeTriangle = 0;
 80022ac:	2300      	movs	r3, #0
 80022ae:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
							for(int j = 0; j < 2; j++) {
 80022b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022b4:	3301      	adds	r3, #1
 80022b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80022b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	ddea      	ble.n	8002294 <main+0x33c>
						for(int i = 0; i < 3; i++) {
 80022be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022c0:	3301      	adds	r3, #1
 80022c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	ddbb      	ble.n	8002242 <main+0x2ea>
								}
							}
						}
						if(completeTriangle) {
 80022ca:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d024      	beq.n	800231c <main+0x3c4>
							LCD_fillTriangle(triangle_coords[0][0], triangle_coords[0][1], triangle_coords[1][0], triangle_coords[1][1],triangle_coords[2][0], triangle_coords[2][1], HX8357_MAGENTA);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	b218      	sxth	r0, r3
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	b21c      	sxth	r4, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	b21d      	sxth	r5, r3
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	b21e      	sxth	r6, r3
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	b21b      	sxth	r3, r3
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	b212      	sxth	r2, r2
 80022ea:	f64f 011f 	movw	r1, #63519	; 0xf81f
 80022ee:	9102      	str	r1, [sp, #8]
 80022f0:	9201      	str	r2, [sp, #4]
 80022f2:	9300      	str	r3, [sp, #0]
 80022f4:	4633      	mov	r3, r6
 80022f6:	462a      	mov	r2, r5
 80022f8:	4621      	mov	r1, r4
 80022fa:	f7ff f82e 	bl	800135a <LCD_fillTriangle>
							triangle_coord_count = 0;
 80022fe:	2300      	movs	r3, #0
 8002300:	643b      	str	r3, [r7, #64]	; 0x40
							triangle_coords[0][0] = 0;
 8002302:	2300      	movs	r3, #0
 8002304:	607b      	str	r3, [r7, #4]
							triangle_coords[0][1] = 0;
 8002306:	2300      	movs	r3, #0
 8002308:	60bb      	str	r3, [r7, #8]
							triangle_coords[1][0] = 0;
 800230a:	2300      	movs	r3, #0
 800230c:	60fb      	str	r3, [r7, #12]
							triangle_coords[1][1] = 0;
 800230e:	2300      	movs	r3, #0
 8002310:	613b      	str	r3, [r7, #16]
							triangle_coords[2][0] = 0;
 8002312:	2300      	movs	r3, #0
 8002314:	617b      	str	r3, [r7, #20]
							triangle_coords[2][1] = 0;
 8002316:	2300      	movs	r3, #0
 8002318:	61bb      	str	r3, [r7, #24]
						} else {
							triangle_coords[triangle_coord_count][0] = current_x;
							triangle_coords[triangle_coord_count][1] = current_y;
							triangle_coord_count++;
						}
						break;
 800231a:	e01d      	b.n	8002358 <main+0x400>
							triangle_coords[triangle_coord_count][0] = current_x;
 800231c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002324:	4413      	add	r3, r2
 8002326:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002328:	f843 2c4c 	str.w	r2, [r3, #-76]
							triangle_coords[triangle_coord_count][1] = current_y;
 800232c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002334:	4413      	add	r3, r2
 8002336:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002338:	f843 2c48 	str.w	r2, [r3, #-72]
							triangle_coord_count++;
 800233c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800233e:	3301      	adds	r3, #1
 8002340:	643b      	str	r3, [r7, #64]	; 0x40
						break;
 8002342:	e009      	b.n	8002358 <main+0x400>
					case 5:
						break;
					default: LCD_DrawPixel(current_x, current_y, HX8357_BLACK); break;
 8002344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002346:	b29b      	uxth	r3, r3
 8002348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800234a:	b291      	uxth	r1, r2
 800234c:	2200      	movs	r2, #0
 800234e:	4618      	mov	r0, r3
 8002350:	f7fe fdd0 	bl	8000ef4 <LCD_DrawPixel>
 8002354:	e000      	b.n	8002358 <main+0x400>
						break;
 8002356:	bf00      	nop
					}

					// Action finished
					previous_x = 0;
 8002358:	2300      	movs	r3, #0
 800235a:	64fb      	str	r3, [r7, #76]	; 0x4c
					previous_y = 0;
 800235c:	2300      	movs	r3, #0
 800235e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002360:	e003      	b.n	800236a <main+0x412>
				} else {
					previous_x = current_x;
 8002362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002364:	64fb      	str	r3, [r7, #76]	; 0x4c
					previous_y = current_y;
 8002366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002368:	64bb      	str	r3, [r7, #72]	; 0x48
				}
			}
		}

		// Kind of like dender relay for push button
		HAL_Delay(50);
 800236a:	2032      	movs	r0, #50	; 0x32
 800236c:	f000 fb98 	bl	8002aa0 <HAL_Delay>
		current_x = readTouchX();
 8002370:	e62b      	b.n	8001fca <main+0x72>
 8002372:	bf00      	nop

08002374 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b094      	sub	sp, #80	; 0x50
 8002378:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800237a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800237e:	2228      	movs	r2, #40	; 0x28
 8002380:	2100      	movs	r1, #0
 8002382:	4618      	mov	r0, r3
 8002384:	f002 fa0d 	bl	80047a2 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002388:	f107 0314 	add.w	r3, r7, #20
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	605a      	str	r2, [r3, #4]
 8002392:	609a      	str	r2, [r3, #8]
 8002394:	60da      	str	r2, [r3, #12]
 8002396:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002398:	1d3b      	adds	r3, r7, #4
 800239a:	2200      	movs	r2, #0
 800239c:	601a      	str	r2, [r3, #0]
 800239e:	605a      	str	r2, [r3, #4]
 80023a0:	609a      	str	r2, [r3, #8]
 80023a2:	60da      	str	r2, [r3, #12]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023a4:	2301      	movs	r3, #1
 80023a6:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80023ae:	2300      	movs	r3, #0
 80023b0:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023b2:	2301      	movs	r3, #1
 80023b4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023b6:	2302      	movs	r3, #2
 80023b8:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023be:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80023c0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80023c4:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023ca:	4618      	mov	r0, r3
 80023cc:	f001 fa1c 	bl	8003808 <HAL_RCC_OscConfig>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <SystemClock_Config+0x66>
	{
		Error_Handler();
 80023d6:	f000 f945 	bl	8002664 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023da:	230f      	movs	r3, #15
 80023dc:	617b      	str	r3, [r7, #20]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023de:	2302      	movs	r3, #2
 80023e0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023e2:	2300      	movs	r3, #0
 80023e4:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80023e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023ea:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023ec:	2300      	movs	r3, #0
 80023ee:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80023f0:	f107 0314 	add.w	r3, r7, #20
 80023f4:	2102      	movs	r1, #2
 80023f6:	4618      	mov	r0, r3
 80023f8:	f001 fc86 	bl	8003d08 <HAL_RCC_ClockConfig>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <SystemClock_Config+0x92>
	{
		Error_Handler();
 8002402:	f000 f92f 	bl	8002664 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002406:	2302      	movs	r3, #2
 8002408:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800240a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800240e:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002410:	1d3b      	adds	r3, r7, #4
 8002412:	4618      	mov	r0, r3
 8002414:	f001 fe00 	bl	8004018 <HAL_RCCEx_PeriphCLKConfig>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <SystemClock_Config+0xae>
	{
		Error_Handler();
 800241e:	f000 f921 	bl	8002664 <Error_Handler>
	}
}
 8002422:	bf00      	nop
 8002424:	3750      	adds	r7, #80	; 0x50
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
	...

0800242c <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8002432:	1d3b      	adds	r3, r7, #4
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	605a      	str	r2, [r3, #4]
 800243a:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 800243c:	4b18      	ldr	r3, [pc, #96]	; (80024a0 <MX_ADC1_Init+0x74>)
 800243e:	4a19      	ldr	r2, [pc, #100]	; (80024a4 <MX_ADC1_Init+0x78>)
 8002440:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002442:	4b17      	ldr	r3, [pc, #92]	; (80024a0 <MX_ADC1_Init+0x74>)
 8002444:	2200      	movs	r2, #0
 8002446:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8002448:	4b15      	ldr	r3, [pc, #84]	; (80024a0 <MX_ADC1_Init+0x74>)
 800244a:	2200      	movs	r2, #0
 800244c:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800244e:	4b14      	ldr	r3, [pc, #80]	; (80024a0 <MX_ADC1_Init+0x74>)
 8002450:	2200      	movs	r2, #0
 8002452:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002454:	4b12      	ldr	r3, [pc, #72]	; (80024a0 <MX_ADC1_Init+0x74>)
 8002456:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800245a:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800245c:	4b10      	ldr	r3, [pc, #64]	; (80024a0 <MX_ADC1_Init+0x74>)
 800245e:	2200      	movs	r2, #0
 8002460:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 8002462:	4b0f      	ldr	r3, [pc, #60]	; (80024a0 <MX_ADC1_Init+0x74>)
 8002464:	2201      	movs	r2, #1
 8002466:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002468:	480d      	ldr	r0, [pc, #52]	; (80024a0 <MX_ADC1_Init+0x74>)
 800246a:	f000 fb3b 	bl	8002ae4 <HAL_ADC_Init>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <MX_ADC1_Init+0x4c>
	{
		Error_Handler();
 8002474:	f000 f8f6 	bl	8002664 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_12;
 8002478:	230c      	movs	r3, #12
 800247a:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800247c:	2301      	movs	r3, #1
 800247e:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002480:	2300      	movs	r3, #0
 8002482:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002484:	1d3b      	adds	r3, r7, #4
 8002486:	4619      	mov	r1, r3
 8002488:	4805      	ldr	r0, [pc, #20]	; (80024a0 <MX_ADC1_Init+0x74>)
 800248a:	f000 fde3 	bl	8003054 <HAL_ADC_ConfigChannel>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <MX_ADC1_Init+0x6c>
	{
		Error_Handler();
 8002494:	f000 f8e6 	bl	8002664 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8002498:	bf00      	nop
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	200001d4 	.word	0x200001d4
 80024a4:	40012400 	.word	0x40012400

080024a8 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80024ac:	4b17      	ldr	r3, [pc, #92]	; (800250c <MX_SPI1_Init+0x64>)
 80024ae:	4a18      	ldr	r2, [pc, #96]	; (8002510 <MX_SPI1_Init+0x68>)
 80024b0:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80024b2:	4b16      	ldr	r3, [pc, #88]	; (800250c <MX_SPI1_Init+0x64>)
 80024b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80024b8:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80024ba:	4b14      	ldr	r3, [pc, #80]	; (800250c <MX_SPI1_Init+0x64>)
 80024bc:	2200      	movs	r2, #0
 80024be:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80024c0:	4b12      	ldr	r3, [pc, #72]	; (800250c <MX_SPI1_Init+0x64>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024c6:	4b11      	ldr	r3, [pc, #68]	; (800250c <MX_SPI1_Init+0x64>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024cc:	4b0f      	ldr	r3, [pc, #60]	; (800250c <MX_SPI1_Init+0x64>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80024d2:	4b0e      	ldr	r3, [pc, #56]	; (800250c <MX_SPI1_Init+0x64>)
 80024d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024d8:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80024da:	4b0c      	ldr	r3, [pc, #48]	; (800250c <MX_SPI1_Init+0x64>)
 80024dc:	2208      	movs	r2, #8
 80024de:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024e0:	4b0a      	ldr	r3, [pc, #40]	; (800250c <MX_SPI1_Init+0x64>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80024e6:	4b09      	ldr	r3, [pc, #36]	; (800250c <MX_SPI1_Init+0x64>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024ec:	4b07      	ldr	r3, [pc, #28]	; (800250c <MX_SPI1_Init+0x64>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 80024f2:	4b06      	ldr	r3, [pc, #24]	; (800250c <MX_SPI1_Init+0x64>)
 80024f4:	220a      	movs	r2, #10
 80024f6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80024f8:	4804      	ldr	r0, [pc, #16]	; (800250c <MX_SPI1_Init+0x64>)
 80024fa:	f001 feff 	bl	80042fc <HAL_SPI_Init>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 8002504:	f000 f8ae 	bl	8002664 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8002508:	bf00      	nop
 800250a:	bd80      	pop	{r7, pc}
 800250c:	20000204 	.word	0x20000204
 8002510:	40013000 	.word	0x40013000

08002514 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b088      	sub	sp, #32
 8002518:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800251a:	f107 0310 	add.w	r3, r7, #16
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	605a      	str	r2, [r3, #4]
 8002524:	609a      	str	r2, [r3, #8]
 8002526:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002528:	4b4a      	ldr	r3, [pc, #296]	; (8002654 <MX_GPIO_Init+0x140>)
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	4a49      	ldr	r2, [pc, #292]	; (8002654 <MX_GPIO_Init+0x140>)
 800252e:	f043 0320 	orr.w	r3, r3, #32
 8002532:	6193      	str	r3, [r2, #24]
 8002534:	4b47      	ldr	r3, [pc, #284]	; (8002654 <MX_GPIO_Init+0x140>)
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	f003 0320 	and.w	r3, r3, #32
 800253c:	60fb      	str	r3, [r7, #12]
 800253e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002540:	4b44      	ldr	r3, [pc, #272]	; (8002654 <MX_GPIO_Init+0x140>)
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	4a43      	ldr	r2, [pc, #268]	; (8002654 <MX_GPIO_Init+0x140>)
 8002546:	f043 0310 	orr.w	r3, r3, #16
 800254a:	6193      	str	r3, [r2, #24]
 800254c:	4b41      	ldr	r3, [pc, #260]	; (8002654 <MX_GPIO_Init+0x140>)
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	f003 0310 	and.w	r3, r3, #16
 8002554:	60bb      	str	r3, [r7, #8]
 8002556:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002558:	4b3e      	ldr	r3, [pc, #248]	; (8002654 <MX_GPIO_Init+0x140>)
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	4a3d      	ldr	r2, [pc, #244]	; (8002654 <MX_GPIO_Init+0x140>)
 800255e:	f043 0304 	orr.w	r3, r3, #4
 8002562:	6193      	str	r3, [r2, #24]
 8002564:	4b3b      	ldr	r3, [pc, #236]	; (8002654 <MX_GPIO_Init+0x140>)
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	f003 0304 	and.w	r3, r3, #4
 800256c:	607b      	str	r3, [r7, #4]
 800256e:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002570:	4b38      	ldr	r3, [pc, #224]	; (8002654 <MX_GPIO_Init+0x140>)
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	4a37      	ldr	r2, [pc, #220]	; (8002654 <MX_GPIO_Init+0x140>)
 8002576:	f043 0308 	orr.w	r3, r3, #8
 800257a:	6193      	str	r3, [r2, #24]
 800257c:	4b35      	ldr	r3, [pc, #212]	; (8002654 <MX_GPIO_Init+0x140>)
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	f003 0308 	and.w	r3, r3, #8
 8002584:	603b      	str	r3, [r7, #0]
 8002586:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8002588:	2200      	movs	r2, #0
 800258a:	2180      	movs	r1, #128	; 0x80
 800258c:	4832      	ldr	r0, [pc, #200]	; (8002658 <MX_GPIO_Init+0x144>)
 800258e:	f001 f923 	bl	80037d8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LCD_RST_Pin|YMIN_Pin, GPIO_PIN_RESET);
 8002592:	2200      	movs	r2, #0
 8002594:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002598:	4830      	ldr	r0, [pc, #192]	; (800265c <MX_GPIO_Init+0x148>)
 800259a:	f001 f91d 	bl	80037d8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800259e:	2200      	movs	r2, #0
 80025a0:	2140      	movs	r1, #64	; 0x40
 80025a2:	482f      	ldr	r0, [pc, #188]	; (8002660 <MX_GPIO_Init+0x14c>)
 80025a4:	f001 f918 	bl	80037d8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : XMIN_Pin */
	GPIO_InitStruct.Pin = XMIN_Pin;
 80025a8:	2308      	movs	r3, #8
 80025aa:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025ac:	2300      	movs	r3, #0
 80025ae:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b0:	2300      	movs	r3, #0
 80025b2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(XMIN_GPIO_Port, &GPIO_InitStruct);
 80025b4:	f107 0310 	add.w	r3, r7, #16
 80025b8:	4619      	mov	r1, r3
 80025ba:	4827      	ldr	r0, [pc, #156]	; (8002658 <MX_GPIO_Init+0x144>)
 80025bc:	f000 ffb2 	bl	8003524 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_DC_Pin */
	GPIO_InitStruct.Pin = LCD_DC_Pin;
 80025c0:	2380      	movs	r3, #128	; 0x80
 80025c2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025c4:	2301      	movs	r3, #1
 80025c6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c8:	2300      	movs	r3, #0
 80025ca:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025cc:	2302      	movs	r3, #2
 80025ce:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 80025d0:	f107 0310 	add.w	r3, r7, #16
 80025d4:	4619      	mov	r1, r3
 80025d6:	4820      	ldr	r0, [pc, #128]	; (8002658 <MX_GPIO_Init+0x144>)
 80025d8:	f000 ffa4 	bl	8003524 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_RST_Pin */
	GPIO_InitStruct.Pin = LCD_RST_Pin;
 80025dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025e0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025e2:	2301      	movs	r3, #1
 80025e4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e6:	2300      	movs	r3, #0
 80025e8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ea:	2302      	movs	r3, #2
 80025ec:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 80025ee:	f107 0310 	add.w	r3, r7, #16
 80025f2:	4619      	mov	r1, r3
 80025f4:	4819      	ldr	r0, [pc, #100]	; (800265c <MX_GPIO_Init+0x148>)
 80025f6:	f000 ff95 	bl	8003524 <HAL_GPIO_Init>

	/*Configure GPIO pin : YMIN_Pin */
	GPIO_InitStruct.Pin = YMIN_Pin;
 80025fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025fe:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002600:	2301      	movs	r3, #1
 8002602:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002604:	2302      	movs	r3, #2
 8002606:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002608:	2303      	movs	r3, #3
 800260a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(YMIN_GPIO_Port, &GPIO_InitStruct);
 800260c:	f107 0310 	add.w	r3, r7, #16
 8002610:	4619      	mov	r1, r3
 8002612:	4812      	ldr	r0, [pc, #72]	; (800265c <MX_GPIO_Init+0x148>)
 8002614:	f000 ff86 	bl	8003524 <HAL_GPIO_Init>

	/*Configure GPIO pin : XPLUS_Pin */
	GPIO_InitStruct.Pin = XPLUS_Pin;
 8002618:	2320      	movs	r3, #32
 800261a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800261c:	2300      	movs	r3, #0
 800261e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002620:	2302      	movs	r3, #2
 8002622:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(XPLUS_GPIO_Port, &GPIO_InitStruct);
 8002624:	f107 0310 	add.w	r3, r7, #16
 8002628:	4619      	mov	r1, r3
 800262a:	480d      	ldr	r0, [pc, #52]	; (8002660 <MX_GPIO_Init+0x14c>)
 800262c:	f000 ff7a 	bl	8003524 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_CS_Pin */
	GPIO_InitStruct.Pin = LCD_CS_Pin;
 8002630:	2340      	movs	r3, #64	; 0x40
 8002632:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002634:	2301      	movs	r3, #1
 8002636:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002638:	2300      	movs	r3, #0
 800263a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800263c:	2302      	movs	r3, #2
 800263e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8002640:	f107 0310 	add.w	r3, r7, #16
 8002644:	4619      	mov	r1, r3
 8002646:	4806      	ldr	r0, [pc, #24]	; (8002660 <MX_GPIO_Init+0x14c>)
 8002648:	f000 ff6c 	bl	8003524 <HAL_GPIO_Init>

}
 800264c:	bf00      	nop
 800264e:	3720      	adds	r7, #32
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	40021000 	.word	0x40021000
 8002658:	40011000 	.word	0x40011000
 800265c:	40010800 	.word	0x40010800
 8002660:	40010c00 	.word	0x40010c00

08002664 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8002668:	bf00      	nop
 800266a:	46bd      	mov	sp, r7
 800266c:	bc80      	pop	{r7}
 800266e:	4770      	bx	lr

08002670 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002670:	b480      	push	{r7}
 8002672:	b085      	sub	sp, #20
 8002674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002676:	4b15      	ldr	r3, [pc, #84]	; (80026cc <HAL_MspInit+0x5c>)
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	4a14      	ldr	r2, [pc, #80]	; (80026cc <HAL_MspInit+0x5c>)
 800267c:	f043 0301 	orr.w	r3, r3, #1
 8002680:	6193      	str	r3, [r2, #24]
 8002682:	4b12      	ldr	r3, [pc, #72]	; (80026cc <HAL_MspInit+0x5c>)
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	60bb      	str	r3, [r7, #8]
 800268c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800268e:	4b0f      	ldr	r3, [pc, #60]	; (80026cc <HAL_MspInit+0x5c>)
 8002690:	69db      	ldr	r3, [r3, #28]
 8002692:	4a0e      	ldr	r2, [pc, #56]	; (80026cc <HAL_MspInit+0x5c>)
 8002694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002698:	61d3      	str	r3, [r2, #28]
 800269a:	4b0c      	ldr	r3, [pc, #48]	; (80026cc <HAL_MspInit+0x5c>)
 800269c:	69db      	ldr	r3, [r3, #28]
 800269e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a2:	607b      	str	r3, [r7, #4]
 80026a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80026a6:	4b0a      	ldr	r3, [pc, #40]	; (80026d0 <HAL_MspInit+0x60>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	60fb      	str	r3, [r7, #12]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80026b2:	60fb      	str	r3, [r7, #12]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	4a04      	ldr	r2, [pc, #16]	; (80026d0 <HAL_MspInit+0x60>)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026c2:	bf00      	nop
 80026c4:	3714      	adds	r7, #20
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bc80      	pop	{r7}
 80026ca:	4770      	bx	lr
 80026cc:	40021000 	.word	0x40021000
 80026d0:	40010000 	.word	0x40010000

080026d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b088      	sub	sp, #32
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026dc:	f107 0310 	add.w	r3, r7, #16
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	605a      	str	r2, [r3, #4]
 80026e6:	609a      	str	r2, [r3, #8]
 80026e8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a14      	ldr	r2, [pc, #80]	; (8002740 <HAL_ADC_MspInit+0x6c>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d121      	bne.n	8002738 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80026f4:	4b13      	ldr	r3, [pc, #76]	; (8002744 <HAL_ADC_MspInit+0x70>)
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	4a12      	ldr	r2, [pc, #72]	; (8002744 <HAL_ADC_MspInit+0x70>)
 80026fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026fe:	6193      	str	r3, [r2, #24]
 8002700:	4b10      	ldr	r3, [pc, #64]	; (8002744 <HAL_ADC_MspInit+0x70>)
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002708:	60fb      	str	r3, [r7, #12]
 800270a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800270c:	4b0d      	ldr	r3, [pc, #52]	; (8002744 <HAL_ADC_MspInit+0x70>)
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	4a0c      	ldr	r2, [pc, #48]	; (8002744 <HAL_ADC_MspInit+0x70>)
 8002712:	f043 0310 	orr.w	r3, r3, #16
 8002716:	6193      	str	r3, [r2, #24]
 8002718:	4b0a      	ldr	r3, [pc, #40]	; (8002744 <HAL_ADC_MspInit+0x70>)
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	f003 0310 	and.w	r3, r3, #16
 8002720:	60bb      	str	r3, [r7, #8]
 8002722:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PC2     ------> ADC1_IN12 
    */
    GPIO_InitStruct.Pin = YPLUS_Pin;
 8002724:	2304      	movs	r3, #4
 8002726:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002728:	2303      	movs	r3, #3
 800272a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(YPLUS_GPIO_Port, &GPIO_InitStruct);
 800272c:	f107 0310 	add.w	r3, r7, #16
 8002730:	4619      	mov	r1, r3
 8002732:	4805      	ldr	r0, [pc, #20]	; (8002748 <HAL_ADC_MspInit+0x74>)
 8002734:	f000 fef6 	bl	8003524 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002738:	bf00      	nop
 800273a:	3720      	adds	r7, #32
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40012400 	.word	0x40012400
 8002744:	40021000 	.word	0x40021000
 8002748:	40011000 	.word	0x40011000

0800274c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b088      	sub	sp, #32
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002754:	f107 0310 	add.w	r3, r7, #16
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	605a      	str	r2, [r3, #4]
 800275e:	609a      	str	r2, [r3, #8]
 8002760:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a1b      	ldr	r2, [pc, #108]	; (80027d4 <HAL_SPI_MspInit+0x88>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d12f      	bne.n	80027cc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800276c:	4b1a      	ldr	r3, [pc, #104]	; (80027d8 <HAL_SPI_MspInit+0x8c>)
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	4a19      	ldr	r2, [pc, #100]	; (80027d8 <HAL_SPI_MspInit+0x8c>)
 8002772:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002776:	6193      	str	r3, [r2, #24]
 8002778:	4b17      	ldr	r3, [pc, #92]	; (80027d8 <HAL_SPI_MspInit+0x8c>)
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002784:	4b14      	ldr	r3, [pc, #80]	; (80027d8 <HAL_SPI_MspInit+0x8c>)
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	4a13      	ldr	r2, [pc, #76]	; (80027d8 <HAL_SPI_MspInit+0x8c>)
 800278a:	f043 0304 	orr.w	r3, r3, #4
 800278e:	6193      	str	r3, [r2, #24]
 8002790:	4b11      	ldr	r3, [pc, #68]	; (80027d8 <HAL_SPI_MspInit+0x8c>)
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	f003 0304 	and.w	r3, r3, #4
 8002798:	60bb      	str	r3, [r7, #8]
 800279a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800279c:	23a0      	movs	r3, #160	; 0xa0
 800279e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a0:	2302      	movs	r3, #2
 80027a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027a4:	2303      	movs	r3, #3
 80027a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027a8:	f107 0310 	add.w	r3, r7, #16
 80027ac:	4619      	mov	r1, r3
 80027ae:	480b      	ldr	r0, [pc, #44]	; (80027dc <HAL_SPI_MspInit+0x90>)
 80027b0:	f000 feb8 	bl	8003524 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80027b4:	2340      	movs	r3, #64	; 0x40
 80027b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027b8:	2300      	movs	r3, #0
 80027ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027bc:	2300      	movs	r3, #0
 80027be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027c0:	f107 0310 	add.w	r3, r7, #16
 80027c4:	4619      	mov	r1, r3
 80027c6:	4805      	ldr	r0, [pc, #20]	; (80027dc <HAL_SPI_MspInit+0x90>)
 80027c8:	f000 feac 	bl	8003524 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80027cc:	bf00      	nop
 80027ce:	3720      	adds	r7, #32
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40013000 	.word	0x40013000
 80027d8:	40021000 	.word	0x40021000
 80027dc:	40010800 	.word	0x40010800

080027e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80027e4:	bf00      	nop
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bc80      	pop	{r7}
 80027ea:	4770      	bx	lr

080027ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027f0:	e7fe      	b.n	80027f0 <HardFault_Handler+0x4>

080027f2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027f2:	b480      	push	{r7}
 80027f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027f6:	e7fe      	b.n	80027f6 <MemManage_Handler+0x4>

080027f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027fc:	e7fe      	b.n	80027fc <BusFault_Handler+0x4>

080027fe <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027fe:	b480      	push	{r7}
 8002800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002802:	e7fe      	b.n	8002802 <UsageFault_Handler+0x4>

08002804 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002808:	bf00      	nop
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr

08002810 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002814:	bf00      	nop
 8002816:	46bd      	mov	sp, r7
 8002818:	bc80      	pop	{r7}
 800281a:	4770      	bx	lr

0800281c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002820:	bf00      	nop
 8002822:	46bd      	mov	sp, r7
 8002824:	bc80      	pop	{r7}
 8002826:	4770      	bx	lr

08002828 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800282c:	f000 f91c 	bl	8002a68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002830:	bf00      	nop
 8002832:	bd80      	pop	{r7, pc}

08002834 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002840:	2300      	movs	r3, #0
 8002842:	617b      	str	r3, [r7, #20]
 8002844:	e00a      	b.n	800285c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002846:	f3af 8000 	nop.w
 800284a:	4601      	mov	r1, r0
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	1c5a      	adds	r2, r3, #1
 8002850:	60ba      	str	r2, [r7, #8]
 8002852:	b2ca      	uxtb	r2, r1
 8002854:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	3301      	adds	r3, #1
 800285a:	617b      	str	r3, [r7, #20]
 800285c:	697a      	ldr	r2, [r7, #20]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	429a      	cmp	r2, r3
 8002862:	dbf0      	blt.n	8002846 <_read+0x12>
	}

return len;
 8002864:	687b      	ldr	r3, [r7, #4]
}
 8002866:	4618      	mov	r0, r3
 8002868:	3718      	adds	r7, #24
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <_close>:
	}
	return len;
}

int _close(int file)
{
 800286e:	b480      	push	{r7}
 8002870:	b083      	sub	sp, #12
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
	return -1;
 8002876:	f04f 33ff 	mov.w	r3, #4294967295
}
 800287a:	4618      	mov	r0, r3
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr

08002884 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002894:	605a      	str	r2, [r3, #4]
	return 0;
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	bc80      	pop	{r7}
 80028a0:	4770      	bx	lr

080028a2 <_isatty>:

int _isatty(int file)
{
 80028a2:	b480      	push	{r7}
 80028a4:	b083      	sub	sp, #12
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
	return 1;
 80028aa:	2301      	movs	r3, #1
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bc80      	pop	{r7}
 80028b4:	4770      	bx	lr

080028b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028b6:	b480      	push	{r7}
 80028b8:	b085      	sub	sp, #20
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	60f8      	str	r0, [r7, #12]
 80028be:	60b9      	str	r1, [r7, #8]
 80028c0:	607a      	str	r2, [r7, #4]
	return 0;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3714      	adds	r7, #20
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bc80      	pop	{r7}
 80028cc:	4770      	bx	lr
	...

080028d0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80028d8:	4b11      	ldr	r3, [pc, #68]	; (8002920 <_sbrk+0x50>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d102      	bne.n	80028e6 <_sbrk+0x16>
		heap_end = &end;
 80028e0:	4b0f      	ldr	r3, [pc, #60]	; (8002920 <_sbrk+0x50>)
 80028e2:	4a10      	ldr	r2, [pc, #64]	; (8002924 <_sbrk+0x54>)
 80028e4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80028e6:	4b0e      	ldr	r3, [pc, #56]	; (8002920 <_sbrk+0x50>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80028ec:	4b0c      	ldr	r3, [pc, #48]	; (8002920 <_sbrk+0x50>)
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4413      	add	r3, r2
 80028f4:	466a      	mov	r2, sp
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d907      	bls.n	800290a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80028fa:	f001 ff1d 	bl	8004738 <__errno>
 80028fe:	4602      	mov	r2, r0
 8002900:	230c      	movs	r3, #12
 8002902:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002904:	f04f 33ff 	mov.w	r3, #4294967295
 8002908:	e006      	b.n	8002918 <_sbrk+0x48>
	}

	heap_end += incr;
 800290a:	4b05      	ldr	r3, [pc, #20]	; (8002920 <_sbrk+0x50>)
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4413      	add	r3, r2
 8002912:	4a03      	ldr	r2, [pc, #12]	; (8002920 <_sbrk+0x50>)
 8002914:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002916:	68fb      	ldr	r3, [r7, #12]
}
 8002918:	4618      	mov	r0, r3
 800291a:	3710      	adds	r7, #16
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	200001c8 	.word	0x200001c8
 8002924:	20000268 	.word	0x20000268

08002928 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800292c:	4b15      	ldr	r3, [pc, #84]	; (8002984 <SystemInit+0x5c>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a14      	ldr	r2, [pc, #80]	; (8002984 <SystemInit+0x5c>)
 8002932:	f043 0301 	orr.w	r3, r3, #1
 8002936:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002938:	4b12      	ldr	r3, [pc, #72]	; (8002984 <SystemInit+0x5c>)
 800293a:	685a      	ldr	r2, [r3, #4]
 800293c:	4911      	ldr	r1, [pc, #68]	; (8002984 <SystemInit+0x5c>)
 800293e:	4b12      	ldr	r3, [pc, #72]	; (8002988 <SystemInit+0x60>)
 8002940:	4013      	ands	r3, r2
 8002942:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002944:	4b0f      	ldr	r3, [pc, #60]	; (8002984 <SystemInit+0x5c>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a0e      	ldr	r2, [pc, #56]	; (8002984 <SystemInit+0x5c>)
 800294a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800294e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002952:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002954:	4b0b      	ldr	r3, [pc, #44]	; (8002984 <SystemInit+0x5c>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a0a      	ldr	r2, [pc, #40]	; (8002984 <SystemInit+0x5c>)
 800295a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800295e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002960:	4b08      	ldr	r3, [pc, #32]	; (8002984 <SystemInit+0x5c>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	4a07      	ldr	r2, [pc, #28]	; (8002984 <SystemInit+0x5c>)
 8002966:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800296a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800296c:	4b05      	ldr	r3, [pc, #20]	; (8002984 <SystemInit+0x5c>)
 800296e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002972:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002974:	4b05      	ldr	r3, [pc, #20]	; (800298c <SystemInit+0x64>)
 8002976:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800297a:	609a      	str	r2, [r3, #8]
#endif 
}
 800297c:	bf00      	nop
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr
 8002984:	40021000 	.word	0x40021000
 8002988:	f8ff0000 	.word	0xf8ff0000
 800298c:	e000ed00 	.word	0xe000ed00

08002990 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002990:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002992:	e003      	b.n	800299c <LoopCopyDataInit>

08002994 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002994:	4b0b      	ldr	r3, [pc, #44]	; (80029c4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002996:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002998:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800299a:	3104      	adds	r1, #4

0800299c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800299c:	480a      	ldr	r0, [pc, #40]	; (80029c8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800299e:	4b0b      	ldr	r3, [pc, #44]	; (80029cc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80029a0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80029a2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80029a4:	d3f6      	bcc.n	8002994 <CopyDataInit>
  ldr r2, =_sbss
 80029a6:	4a0a      	ldr	r2, [pc, #40]	; (80029d0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80029a8:	e002      	b.n	80029b0 <LoopFillZerobss>

080029aa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80029aa:	2300      	movs	r3, #0
  str r3, [r2], #4
 80029ac:	f842 3b04 	str.w	r3, [r2], #4

080029b0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80029b0:	4b08      	ldr	r3, [pc, #32]	; (80029d4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80029b2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80029b4:	d3f9      	bcc.n	80029aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80029b6:	f7ff ffb7 	bl	8002928 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029ba:	f001 fec3 	bl	8004744 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80029be:	f7ff facb 	bl	8001f58 <main>
  bx lr
 80029c2:	4770      	bx	lr
  ldr r3, =_sidata
 80029c4:	08009638 	.word	0x08009638
  ldr r0, =_sdata
 80029c8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80029cc:	20000108 	.word	0x20000108
  ldr r2, =_sbss
 80029d0:	20000108 	.word	0x20000108
  ldr r3, = _ebss
 80029d4:	20000264 	.word	0x20000264

080029d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80029d8:	e7fe      	b.n	80029d8 <ADC1_2_IRQHandler>
	...

080029dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029e0:	4b08      	ldr	r3, [pc, #32]	; (8002a04 <HAL_Init+0x28>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a07      	ldr	r2, [pc, #28]	; (8002a04 <HAL_Init+0x28>)
 80029e6:	f043 0310 	orr.w	r3, r3, #16
 80029ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029ec:	2003      	movs	r0, #3
 80029ee:	f000 fd65 	bl	80034bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029f2:	2000      	movs	r0, #0
 80029f4:	f000 f808 	bl	8002a08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029f8:	f7ff fe3a 	bl	8002670 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40022000 	.word	0x40022000

08002a08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a10:	4b12      	ldr	r3, [pc, #72]	; (8002a5c <HAL_InitTick+0x54>)
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	4b12      	ldr	r3, [pc, #72]	; (8002a60 <HAL_InitTick+0x58>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	4619      	mov	r1, r3
 8002a1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a26:	4618      	mov	r0, r3
 8002a28:	f000 fd6f 	bl	800350a <HAL_SYSTICK_Config>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e00e      	b.n	8002a54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2b0f      	cmp	r3, #15
 8002a3a:	d80a      	bhi.n	8002a52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	6879      	ldr	r1, [r7, #4]
 8002a40:	f04f 30ff 	mov.w	r0, #4294967295
 8002a44:	f000 fd45 	bl	80034d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a48:	4a06      	ldr	r2, [pc, #24]	; (8002a64 <HAL_InitTick+0x5c>)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	e000      	b.n	8002a54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3708      	adds	r7, #8
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	20000094 	.word	0x20000094
 8002a60:	2000009c 	.word	0x2000009c
 8002a64:	20000098 	.word	0x20000098

08002a68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a6c:	4b05      	ldr	r3, [pc, #20]	; (8002a84 <HAL_IncTick+0x1c>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	461a      	mov	r2, r3
 8002a72:	4b05      	ldr	r3, [pc, #20]	; (8002a88 <HAL_IncTick+0x20>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4413      	add	r3, r2
 8002a78:	4a03      	ldr	r2, [pc, #12]	; (8002a88 <HAL_IncTick+0x20>)
 8002a7a:	6013      	str	r3, [r2, #0]
}
 8002a7c:	bf00      	nop
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bc80      	pop	{r7}
 8002a82:	4770      	bx	lr
 8002a84:	2000009c 	.word	0x2000009c
 8002a88:	2000025c 	.word	0x2000025c

08002a8c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a90:	4b02      	ldr	r3, [pc, #8]	; (8002a9c <HAL_GetTick+0x10>)
 8002a92:	681b      	ldr	r3, [r3, #0]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bc80      	pop	{r7}
 8002a9a:	4770      	bx	lr
 8002a9c:	2000025c 	.word	0x2000025c

08002aa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002aa8:	f7ff fff0 	bl	8002a8c <HAL_GetTick>
 8002aac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab8:	d005      	beq.n	8002ac6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002aba:	4b09      	ldr	r3, [pc, #36]	; (8002ae0 <HAL_Delay+0x40>)
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	461a      	mov	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ac6:	bf00      	nop
 8002ac8:	f7ff ffe0 	bl	8002a8c <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d8f7      	bhi.n	8002ac8 <HAL_Delay+0x28>
  {
  }
}
 8002ad8:	bf00      	nop
 8002ada:	3710      	adds	r7, #16
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	2000009c 	.word	0x2000009c

08002ae4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002aec:	2300      	movs	r3, #0
 8002aee:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002af0:	2300      	movs	r3, #0
 8002af2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002af4:	2300      	movs	r3, #0
 8002af6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002af8:	2300      	movs	r3, #0
 8002afa:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e0be      	b.n	8002c84 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d109      	bne.n	8002b28 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f7ff fdd6 	bl	80026d4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f000 fbdd 	bl	80032e8 <ADC_ConversionStop_Disable>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b36:	f003 0310 	and.w	r3, r3, #16
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	f040 8099 	bne.w	8002c72 <HAL_ADC_Init+0x18e>
 8002b40:	7dfb      	ldrb	r3, [r7, #23]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f040 8095 	bne.w	8002c72 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b50:	f023 0302 	bic.w	r3, r3, #2
 8002b54:	f043 0202 	orr.w	r2, r3, #2
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002b64:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	7b1b      	ldrb	r3, [r3, #12]
 8002b6a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002b6c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b7c:	d003      	beq.n	8002b86 <HAL_ADC_Init+0xa2>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d102      	bne.n	8002b8c <HAL_ADC_Init+0xa8>
 8002b86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b8a:	e000      	b.n	8002b8e <HAL_ADC_Init+0xaa>
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	7d1b      	ldrb	r3, [r3, #20]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d119      	bne.n	8002bd0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	7b1b      	ldrb	r3, [r3, #12]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d109      	bne.n	8002bb8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	035a      	lsls	r2, r3, #13
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002bb4:	613b      	str	r3, [r7, #16]
 8002bb6:	e00b      	b.n	8002bd0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bbc:	f043 0220 	orr.w	r2, r3, #32
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc8:	f043 0201 	orr.w	r2, r3, #1
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	430a      	orrs	r2, r1
 8002be2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	689a      	ldr	r2, [r3, #8]
 8002bea:	4b28      	ldr	r3, [pc, #160]	; (8002c8c <HAL_ADC_Init+0x1a8>)
 8002bec:	4013      	ands	r3, r2
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	6812      	ldr	r2, [r2, #0]
 8002bf2:	68b9      	ldr	r1, [r7, #8]
 8002bf4:	430b      	orrs	r3, r1
 8002bf6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c00:	d003      	beq.n	8002c0a <HAL_ADC_Init+0x126>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d104      	bne.n	8002c14 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	051b      	lsls	r3, r3, #20
 8002c12:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	430a      	orrs	r2, r1
 8002c26:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689a      	ldr	r2, [r3, #8]
 8002c2e:	4b18      	ldr	r3, [pc, #96]	; (8002c90 <HAL_ADC_Init+0x1ac>)
 8002c30:	4013      	ands	r3, r2
 8002c32:	68ba      	ldr	r2, [r7, #8]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d10b      	bne.n	8002c50 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c42:	f023 0303 	bic.w	r3, r3, #3
 8002c46:	f043 0201 	orr.w	r2, r3, #1
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002c4e:	e018      	b.n	8002c82 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c54:	f023 0312 	bic.w	r3, r3, #18
 8002c58:	f043 0210 	orr.w	r2, r3, #16
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c64:	f043 0201 	orr.w	r2, r3, #1
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002c70:	e007      	b.n	8002c82 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c76:	f043 0210 	orr.w	r2, r3, #16
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002c82:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3718      	adds	r7, #24
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	ffe1f7fd 	.word	0xffe1f7fd
 8002c90:	ff1f0efe 	.word	0xff1f0efe

08002c94 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d101      	bne.n	8002cae <HAL_ADC_Start+0x1a>
 8002caa:	2302      	movs	r3, #2
 8002cac:	e098      	b.n	8002de0 <HAL_ADC_Start+0x14c>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 fac4 	bl	8003244 <ADC_Enable>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002cc0:	7bfb      	ldrb	r3, [r7, #15]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f040 8087 	bne.w	8002dd6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ccc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cd0:	f023 0301 	bic.w	r3, r3, #1
 8002cd4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a41      	ldr	r2, [pc, #260]	; (8002de8 <HAL_ADC_Start+0x154>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d105      	bne.n	8002cf2 <HAL_ADC_Start+0x5e>
 8002ce6:	4b41      	ldr	r3, [pc, #260]	; (8002dec <HAL_ADC_Start+0x158>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d115      	bne.n	8002d1e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d026      	beq.n	8002d5a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d10:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d14:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002d1c:	e01d      	b.n	8002d5a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d22:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a2f      	ldr	r2, [pc, #188]	; (8002dec <HAL_ADC_Start+0x158>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d004      	beq.n	8002d3e <HAL_ADC_Start+0xaa>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a2b      	ldr	r2, [pc, #172]	; (8002de8 <HAL_ADC_Start+0x154>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d10d      	bne.n	8002d5a <HAL_ADC_Start+0xc6>
 8002d3e:	4b2b      	ldr	r3, [pc, #172]	; (8002dec <HAL_ADC_Start+0x158>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d007      	beq.n	8002d5a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d52:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d006      	beq.n	8002d74 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6a:	f023 0206 	bic.w	r2, r3, #6
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d72:	e002      	b.n	8002d7a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f06f 0202 	mvn.w	r2, #2
 8002d8a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002d96:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002d9a:	d113      	bne.n	8002dc4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002da0:	4a11      	ldr	r2, [pc, #68]	; (8002de8 <HAL_ADC_Start+0x154>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d105      	bne.n	8002db2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002da6:	4b11      	ldr	r3, [pc, #68]	; (8002dec <HAL_ADC_Start+0x158>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d108      	bne.n	8002dc4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	689a      	ldr	r2, [r3, #8]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002dc0:	609a      	str	r2, [r3, #8]
 8002dc2:	e00c      	b.n	8002dde <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	689a      	ldr	r2, [r3, #8]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002dd2:	609a      	str	r2, [r3, #8]
 8002dd4:	e003      	b.n	8002dde <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	40012800 	.word	0x40012800
 8002dec:	40012400 	.word	0x40012400

08002df0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d101      	bne.n	8002e0a <HAL_ADC_Stop+0x1a>
 8002e06:	2302      	movs	r3, #2
 8002e08:	e01a      	b.n	8002e40 <HAL_ADC_Stop+0x50>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 fa68 	bl	80032e8 <ADC_ConversionStop_Disable>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002e1c:	7bfb      	ldrb	r3, [r7, #15]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d109      	bne.n	8002e36 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e26:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e2a:	f023 0301 	bic.w	r3, r3, #1
 8002e2e:	f043 0201 	orr.w	r2, r3, #1
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3710      	adds	r7, #16
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002e48:	b590      	push	{r4, r7, lr}
 8002e4a:	b087      	sub	sp, #28
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002e52:	2300      	movs	r3, #0
 8002e54:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002e56:	2300      	movs	r3, #0
 8002e58:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002e5e:	f7ff fe15 	bl	8002a8c <HAL_GetTick>
 8002e62:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00b      	beq.n	8002e8a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e76:	f043 0220 	orr.w	r2, r3, #32
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e0c8      	b.n	800301c <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d12a      	bne.n	8002eee <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d123      	bne.n	8002eee <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002ea6:	e01a      	b.n	8002ede <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eae:	d016      	beq.n	8002ede <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d007      	beq.n	8002ec6 <HAL_ADC_PollForConversion+0x7e>
 8002eb6:	f7ff fde9 	bl	8002a8c <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	683a      	ldr	r2, [r7, #0]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d20b      	bcs.n	8002ede <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eca:	f043 0204 	orr.w	r2, r3, #4
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e09e      	b.n	800301c <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d0dd      	beq.n	8002ea8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002eec:	e06c      	b.n	8002fc8 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002eee:	4b4d      	ldr	r3, [pc, #308]	; (8003024 <HAL_ADC_PollForConversion+0x1dc>)
 8002ef0:	681c      	ldr	r4, [r3, #0]
 8002ef2:	2002      	movs	r0, #2
 8002ef4:	f001 f946 	bl	8004184 <HAL_RCCEx_GetPeriphCLKFreq>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	6919      	ldr	r1, [r3, #16]
 8002f04:	4b48      	ldr	r3, [pc, #288]	; (8003028 <HAL_ADC_PollForConversion+0x1e0>)
 8002f06:	400b      	ands	r3, r1
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d118      	bne.n	8002f3e <HAL_ADC_PollForConversion+0xf6>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68d9      	ldr	r1, [r3, #12]
 8002f12:	4b46      	ldr	r3, [pc, #280]	; (800302c <HAL_ADC_PollForConversion+0x1e4>)
 8002f14:	400b      	ands	r3, r1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d111      	bne.n	8002f3e <HAL_ADC_PollForConversion+0xf6>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	6919      	ldr	r1, [r3, #16]
 8002f20:	4b43      	ldr	r3, [pc, #268]	; (8003030 <HAL_ADC_PollForConversion+0x1e8>)
 8002f22:	400b      	ands	r3, r1
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d108      	bne.n	8002f3a <HAL_ADC_PollForConversion+0xf2>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68d9      	ldr	r1, [r3, #12]
 8002f2e:	4b41      	ldr	r3, [pc, #260]	; (8003034 <HAL_ADC_PollForConversion+0x1ec>)
 8002f30:	400b      	ands	r3, r1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_ADC_PollForConversion+0xf2>
 8002f36:	2314      	movs	r3, #20
 8002f38:	e020      	b.n	8002f7c <HAL_ADC_PollForConversion+0x134>
 8002f3a:	2329      	movs	r3, #41	; 0x29
 8002f3c:	e01e      	b.n	8002f7c <HAL_ADC_PollForConversion+0x134>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	6919      	ldr	r1, [r3, #16]
 8002f44:	4b3a      	ldr	r3, [pc, #232]	; (8003030 <HAL_ADC_PollForConversion+0x1e8>)
 8002f46:	400b      	ands	r3, r1
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d106      	bne.n	8002f5a <HAL_ADC_PollForConversion+0x112>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68d9      	ldr	r1, [r3, #12]
 8002f52:	4b38      	ldr	r3, [pc, #224]	; (8003034 <HAL_ADC_PollForConversion+0x1ec>)
 8002f54:	400b      	ands	r3, r1
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00d      	beq.n	8002f76 <HAL_ADC_PollForConversion+0x12e>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	6919      	ldr	r1, [r3, #16]
 8002f60:	4b35      	ldr	r3, [pc, #212]	; (8003038 <HAL_ADC_PollForConversion+0x1f0>)
 8002f62:	400b      	ands	r3, r1
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d108      	bne.n	8002f7a <HAL_ADC_PollForConversion+0x132>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68d9      	ldr	r1, [r3, #12]
 8002f6e:	4b32      	ldr	r3, [pc, #200]	; (8003038 <HAL_ADC_PollForConversion+0x1f0>)
 8002f70:	400b      	ands	r3, r1
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_ADC_PollForConversion+0x132>
 8002f76:	2354      	movs	r3, #84	; 0x54
 8002f78:	e000      	b.n	8002f7c <HAL_ADC_PollForConversion+0x134>
 8002f7a:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002f7c:	fb02 f303 	mul.w	r3, r2, r3
 8002f80:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002f82:	e01d      	b.n	8002fc0 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f8a:	d016      	beq.n	8002fba <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d007      	beq.n	8002fa2 <HAL_ADC_PollForConversion+0x15a>
 8002f92:	f7ff fd7b 	bl	8002a8c <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d20b      	bcs.n	8002fba <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa6:	f043 0204 	orr.w	r2, r3, #4
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e030      	b.n	800301c <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d8dd      	bhi.n	8002f84 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f06f 0212 	mvn.w	r2, #18
 8002fd0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002fe8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002fec:	d115      	bne.n	800301a <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d111      	bne.n	800301a <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003006:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d105      	bne.n	800301a <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003012:	f043 0201 	orr.w	r2, r3, #1
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	371c      	adds	r7, #28
 8003020:	46bd      	mov	sp, r7
 8003022:	bd90      	pop	{r4, r7, pc}
 8003024:	20000094 	.word	0x20000094
 8003028:	24924924 	.word	0x24924924
 800302c:	00924924 	.word	0x00924924
 8003030:	12492492 	.word	0x12492492
 8003034:	00492492 	.word	0x00492492
 8003038:	00249249 	.word	0x00249249

0800303c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800304a:	4618      	mov	r0, r3
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	bc80      	pop	{r7}
 8003052:	4770      	bx	lr

08003054 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800305e:	2300      	movs	r3, #0
 8003060:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003062:	2300      	movs	r3, #0
 8003064:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800306c:	2b01      	cmp	r3, #1
 800306e:	d101      	bne.n	8003074 <HAL_ADC_ConfigChannel+0x20>
 8003070:	2302      	movs	r3, #2
 8003072:	e0dc      	b.n	800322e <HAL_ADC_ConfigChannel+0x1da>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	2b06      	cmp	r3, #6
 8003082:	d81c      	bhi.n	80030be <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685a      	ldr	r2, [r3, #4]
 800308e:	4613      	mov	r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	4413      	add	r3, r2
 8003094:	3b05      	subs	r3, #5
 8003096:	221f      	movs	r2, #31
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	43db      	mvns	r3, r3
 800309e:	4019      	ands	r1, r3
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	6818      	ldr	r0, [r3, #0]
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685a      	ldr	r2, [r3, #4]
 80030a8:	4613      	mov	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	4413      	add	r3, r2
 80030ae:	3b05      	subs	r3, #5
 80030b0:	fa00 f203 	lsl.w	r2, r0, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	430a      	orrs	r2, r1
 80030ba:	635a      	str	r2, [r3, #52]	; 0x34
 80030bc:	e03c      	b.n	8003138 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	2b0c      	cmp	r3, #12
 80030c4:	d81c      	bhi.n	8003100 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	4613      	mov	r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	4413      	add	r3, r2
 80030d6:	3b23      	subs	r3, #35	; 0x23
 80030d8:	221f      	movs	r2, #31
 80030da:	fa02 f303 	lsl.w	r3, r2, r3
 80030de:	43db      	mvns	r3, r3
 80030e0:	4019      	ands	r1, r3
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	6818      	ldr	r0, [r3, #0]
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	4613      	mov	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	4413      	add	r3, r2
 80030f0:	3b23      	subs	r3, #35	; 0x23
 80030f2:	fa00 f203 	lsl.w	r2, r0, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	430a      	orrs	r2, r1
 80030fc:	631a      	str	r2, [r3, #48]	; 0x30
 80030fe:	e01b      	b.n	8003138 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	685a      	ldr	r2, [r3, #4]
 800310a:	4613      	mov	r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	4413      	add	r3, r2
 8003110:	3b41      	subs	r3, #65	; 0x41
 8003112:	221f      	movs	r2, #31
 8003114:	fa02 f303 	lsl.w	r3, r2, r3
 8003118:	43db      	mvns	r3, r3
 800311a:	4019      	ands	r1, r3
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	6818      	ldr	r0, [r3, #0]
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685a      	ldr	r2, [r3, #4]
 8003124:	4613      	mov	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4413      	add	r3, r2
 800312a:	3b41      	subs	r3, #65	; 0x41
 800312c:	fa00 f203 	lsl.w	r2, r0, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	430a      	orrs	r2, r1
 8003136:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2b09      	cmp	r3, #9
 800313e:	d91c      	bls.n	800317a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68d9      	ldr	r1, [r3, #12]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	4613      	mov	r3, r2
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	4413      	add	r3, r2
 8003150:	3b1e      	subs	r3, #30
 8003152:	2207      	movs	r2, #7
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	43db      	mvns	r3, r3
 800315a:	4019      	ands	r1, r3
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	6898      	ldr	r0, [r3, #8]
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	4613      	mov	r3, r2
 8003166:	005b      	lsls	r3, r3, #1
 8003168:	4413      	add	r3, r2
 800316a:	3b1e      	subs	r3, #30
 800316c:	fa00 f203 	lsl.w	r2, r0, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	430a      	orrs	r2, r1
 8003176:	60da      	str	r2, [r3, #12]
 8003178:	e019      	b.n	80031ae <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6919      	ldr	r1, [r3, #16]
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	4613      	mov	r3, r2
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	4413      	add	r3, r2
 800318a:	2207      	movs	r2, #7
 800318c:	fa02 f303 	lsl.w	r3, r2, r3
 8003190:	43db      	mvns	r3, r3
 8003192:	4019      	ands	r1, r3
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	6898      	ldr	r0, [r3, #8]
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	4613      	mov	r3, r2
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	4413      	add	r3, r2
 80031a2:	fa00 f203 	lsl.w	r2, r0, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	430a      	orrs	r2, r1
 80031ac:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2b10      	cmp	r3, #16
 80031b4:	d003      	beq.n	80031be <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80031ba:	2b11      	cmp	r3, #17
 80031bc:	d132      	bne.n	8003224 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a1d      	ldr	r2, [pc, #116]	; (8003238 <HAL_ADC_ConfigChannel+0x1e4>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d125      	bne.n	8003214 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d126      	bne.n	8003224 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80031e4:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2b10      	cmp	r3, #16
 80031ec:	d11a      	bne.n	8003224 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80031ee:	4b13      	ldr	r3, [pc, #76]	; (800323c <HAL_ADC_ConfigChannel+0x1e8>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a13      	ldr	r2, [pc, #76]	; (8003240 <HAL_ADC_ConfigChannel+0x1ec>)
 80031f4:	fba2 2303 	umull	r2, r3, r2, r3
 80031f8:	0c9a      	lsrs	r2, r3, #18
 80031fa:	4613      	mov	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4413      	add	r3, r2
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003204:	e002      	b.n	800320c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	3b01      	subs	r3, #1
 800320a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1f9      	bne.n	8003206 <HAL_ADC_ConfigChannel+0x1b2>
 8003212:	e007      	b.n	8003224 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003218:	f043 0220 	orr.w	r2, r3, #32
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800322c:	7bfb      	ldrb	r3, [r7, #15]
}
 800322e:	4618      	mov	r0, r3
 8003230:	3714      	adds	r7, #20
 8003232:	46bd      	mov	sp, r7
 8003234:	bc80      	pop	{r7}
 8003236:	4770      	bx	lr
 8003238:	40012400 	.word	0x40012400
 800323c:	20000094 	.word	0x20000094
 8003240:	431bde83 	.word	0x431bde83

08003244 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800324c:	2300      	movs	r3, #0
 800324e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003250:	2300      	movs	r3, #0
 8003252:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b01      	cmp	r3, #1
 8003260:	d039      	beq.n	80032d6 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f042 0201 	orr.w	r2, r2, #1
 8003270:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003272:	4b1b      	ldr	r3, [pc, #108]	; (80032e0 <ADC_Enable+0x9c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a1b      	ldr	r2, [pc, #108]	; (80032e4 <ADC_Enable+0xa0>)
 8003278:	fba2 2303 	umull	r2, r3, r2, r3
 800327c:	0c9b      	lsrs	r3, r3, #18
 800327e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003280:	e002      	b.n	8003288 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	3b01      	subs	r3, #1
 8003286:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1f9      	bne.n	8003282 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800328e:	f7ff fbfd 	bl	8002a8c <HAL_GetTick>
 8003292:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003294:	e018      	b.n	80032c8 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003296:	f7ff fbf9 	bl	8002a8c <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d911      	bls.n	80032c8 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a8:	f043 0210 	orr.w	r2, r3, #16
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b4:	f043 0201 	orr.w	r2, r3, #1
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e007      	b.n	80032d8 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d1df      	bne.n	8003296 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3710      	adds	r7, #16
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	20000094 	.word	0x20000094
 80032e4:	431bde83 	.word	0x431bde83

080032e8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032f0:	2300      	movs	r3, #0
 80032f2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d127      	bne.n	8003352 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	689a      	ldr	r2, [r3, #8]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f022 0201 	bic.w	r2, r2, #1
 8003310:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003312:	f7ff fbbb 	bl	8002a8c <HAL_GetTick>
 8003316:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003318:	e014      	b.n	8003344 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800331a:	f7ff fbb7 	bl	8002a8c <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b02      	cmp	r3, #2
 8003326:	d90d      	bls.n	8003344 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332c:	f043 0210 	orr.w	r2, r3, #16
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003338:	f043 0201 	orr.w	r2, r3, #1
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e007      	b.n	8003354 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b01      	cmp	r3, #1
 8003350:	d0e3      	beq.n	800331a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <__NVIC_SetPriorityGrouping>:
{
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f003 0307 	and.w	r3, r3, #7
 800336a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800336c:	4b0c      	ldr	r3, [pc, #48]	; (80033a0 <__NVIC_SetPriorityGrouping+0x44>)
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003372:	68ba      	ldr	r2, [r7, #8]
 8003374:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003378:	4013      	ands	r3, r2
 800337a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003384:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003388:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800338c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800338e:	4a04      	ldr	r2, [pc, #16]	; (80033a0 <__NVIC_SetPriorityGrouping+0x44>)
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	60d3      	str	r3, [r2, #12]
}
 8003394:	bf00      	nop
 8003396:	3714      	adds	r7, #20
 8003398:	46bd      	mov	sp, r7
 800339a:	bc80      	pop	{r7}
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	e000ed00 	.word	0xe000ed00

080033a4 <__NVIC_GetPriorityGrouping>:
{
 80033a4:	b480      	push	{r7}
 80033a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033a8:	4b04      	ldr	r3, [pc, #16]	; (80033bc <__NVIC_GetPriorityGrouping+0x18>)
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	0a1b      	lsrs	r3, r3, #8
 80033ae:	f003 0307 	and.w	r3, r3, #7
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bc80      	pop	{r7}
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	e000ed00 	.word	0xe000ed00

080033c0 <__NVIC_SetPriority>:
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	4603      	mov	r3, r0
 80033c8:	6039      	str	r1, [r7, #0]
 80033ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	db0a      	blt.n	80033ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	b2da      	uxtb	r2, r3
 80033d8:	490c      	ldr	r1, [pc, #48]	; (800340c <__NVIC_SetPriority+0x4c>)
 80033da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033de:	0112      	lsls	r2, r2, #4
 80033e0:	b2d2      	uxtb	r2, r2
 80033e2:	440b      	add	r3, r1
 80033e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80033e8:	e00a      	b.n	8003400 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	b2da      	uxtb	r2, r3
 80033ee:	4908      	ldr	r1, [pc, #32]	; (8003410 <__NVIC_SetPriority+0x50>)
 80033f0:	79fb      	ldrb	r3, [r7, #7]
 80033f2:	f003 030f 	and.w	r3, r3, #15
 80033f6:	3b04      	subs	r3, #4
 80033f8:	0112      	lsls	r2, r2, #4
 80033fa:	b2d2      	uxtb	r2, r2
 80033fc:	440b      	add	r3, r1
 80033fe:	761a      	strb	r2, [r3, #24]
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	bc80      	pop	{r7}
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	e000e100 	.word	0xe000e100
 8003410:	e000ed00 	.word	0xe000ed00

08003414 <NVIC_EncodePriority>:
{
 8003414:	b480      	push	{r7}
 8003416:	b089      	sub	sp, #36	; 0x24
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f003 0307 	and.w	r3, r3, #7
 8003426:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	f1c3 0307 	rsb	r3, r3, #7
 800342e:	2b04      	cmp	r3, #4
 8003430:	bf28      	it	cs
 8003432:	2304      	movcs	r3, #4
 8003434:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	3304      	adds	r3, #4
 800343a:	2b06      	cmp	r3, #6
 800343c:	d902      	bls.n	8003444 <NVIC_EncodePriority+0x30>
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	3b03      	subs	r3, #3
 8003442:	e000      	b.n	8003446 <NVIC_EncodePriority+0x32>
 8003444:	2300      	movs	r3, #0
 8003446:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003448:	f04f 32ff 	mov.w	r2, #4294967295
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	fa02 f303 	lsl.w	r3, r2, r3
 8003452:	43da      	mvns	r2, r3
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	401a      	ands	r2, r3
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800345c:	f04f 31ff 	mov.w	r1, #4294967295
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	fa01 f303 	lsl.w	r3, r1, r3
 8003466:	43d9      	mvns	r1, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800346c:	4313      	orrs	r3, r2
}
 800346e:	4618      	mov	r0, r3
 8003470:	3724      	adds	r7, #36	; 0x24
 8003472:	46bd      	mov	sp, r7
 8003474:	bc80      	pop	{r7}
 8003476:	4770      	bx	lr

08003478 <SysTick_Config>:
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	3b01      	subs	r3, #1
 8003484:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003488:	d301      	bcc.n	800348e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800348a:	2301      	movs	r3, #1
 800348c:	e00f      	b.n	80034ae <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800348e:	4a0a      	ldr	r2, [pc, #40]	; (80034b8 <SysTick_Config+0x40>)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	3b01      	subs	r3, #1
 8003494:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003496:	210f      	movs	r1, #15
 8003498:	f04f 30ff 	mov.w	r0, #4294967295
 800349c:	f7ff ff90 	bl	80033c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034a0:	4b05      	ldr	r3, [pc, #20]	; (80034b8 <SysTick_Config+0x40>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034a6:	4b04      	ldr	r3, [pc, #16]	; (80034b8 <SysTick_Config+0x40>)
 80034a8:	2207      	movs	r2, #7
 80034aa:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	e000e010 	.word	0xe000e010

080034bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f7ff ff49 	bl	800335c <__NVIC_SetPriorityGrouping>
}
 80034ca:	bf00      	nop
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b086      	sub	sp, #24
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	4603      	mov	r3, r0
 80034da:	60b9      	str	r1, [r7, #8]
 80034dc:	607a      	str	r2, [r7, #4]
 80034de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034e0:	2300      	movs	r3, #0
 80034e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034e4:	f7ff ff5e 	bl	80033a4 <__NVIC_GetPriorityGrouping>
 80034e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	68b9      	ldr	r1, [r7, #8]
 80034ee:	6978      	ldr	r0, [r7, #20]
 80034f0:	f7ff ff90 	bl	8003414 <NVIC_EncodePriority>
 80034f4:	4602      	mov	r2, r0
 80034f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034fa:	4611      	mov	r1, r2
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7ff ff5f 	bl	80033c0 <__NVIC_SetPriority>
}
 8003502:	bf00      	nop
 8003504:	3718      	adds	r7, #24
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b082      	sub	sp, #8
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7ff ffb0 	bl	8003478 <SysTick_Config>
 8003518:	4603      	mov	r3, r0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
	...

08003524 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003524:	b480      	push	{r7}
 8003526:	b08b      	sub	sp, #44	; 0x2c
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800352e:	2300      	movs	r3, #0
 8003530:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003532:	2300      	movs	r3, #0
 8003534:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003536:	e127      	b.n	8003788 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003538:	2201      	movs	r2, #1
 800353a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353c:	fa02 f303 	lsl.w	r3, r2, r3
 8003540:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	69fa      	ldr	r2, [r7, #28]
 8003548:	4013      	ands	r3, r2
 800354a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	429a      	cmp	r2, r3
 8003552:	f040 8116 	bne.w	8003782 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	2b12      	cmp	r3, #18
 800355c:	d034      	beq.n	80035c8 <HAL_GPIO_Init+0xa4>
 800355e:	2b12      	cmp	r3, #18
 8003560:	d80d      	bhi.n	800357e <HAL_GPIO_Init+0x5a>
 8003562:	2b02      	cmp	r3, #2
 8003564:	d02b      	beq.n	80035be <HAL_GPIO_Init+0x9a>
 8003566:	2b02      	cmp	r3, #2
 8003568:	d804      	bhi.n	8003574 <HAL_GPIO_Init+0x50>
 800356a:	2b00      	cmp	r3, #0
 800356c:	d031      	beq.n	80035d2 <HAL_GPIO_Init+0xae>
 800356e:	2b01      	cmp	r3, #1
 8003570:	d01c      	beq.n	80035ac <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003572:	e048      	b.n	8003606 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003574:	2b03      	cmp	r3, #3
 8003576:	d043      	beq.n	8003600 <HAL_GPIO_Init+0xdc>
 8003578:	2b11      	cmp	r3, #17
 800357a:	d01b      	beq.n	80035b4 <HAL_GPIO_Init+0x90>
          break;
 800357c:	e043      	b.n	8003606 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800357e:	4a89      	ldr	r2, [pc, #548]	; (80037a4 <HAL_GPIO_Init+0x280>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d026      	beq.n	80035d2 <HAL_GPIO_Init+0xae>
 8003584:	4a87      	ldr	r2, [pc, #540]	; (80037a4 <HAL_GPIO_Init+0x280>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d806      	bhi.n	8003598 <HAL_GPIO_Init+0x74>
 800358a:	4a87      	ldr	r2, [pc, #540]	; (80037a8 <HAL_GPIO_Init+0x284>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d020      	beq.n	80035d2 <HAL_GPIO_Init+0xae>
 8003590:	4a86      	ldr	r2, [pc, #536]	; (80037ac <HAL_GPIO_Init+0x288>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d01d      	beq.n	80035d2 <HAL_GPIO_Init+0xae>
          break;
 8003596:	e036      	b.n	8003606 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003598:	4a85      	ldr	r2, [pc, #532]	; (80037b0 <HAL_GPIO_Init+0x28c>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d019      	beq.n	80035d2 <HAL_GPIO_Init+0xae>
 800359e:	4a85      	ldr	r2, [pc, #532]	; (80037b4 <HAL_GPIO_Init+0x290>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d016      	beq.n	80035d2 <HAL_GPIO_Init+0xae>
 80035a4:	4a84      	ldr	r2, [pc, #528]	; (80037b8 <HAL_GPIO_Init+0x294>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d013      	beq.n	80035d2 <HAL_GPIO_Init+0xae>
          break;
 80035aa:	e02c      	b.n	8003606 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	623b      	str	r3, [r7, #32]
          break;
 80035b2:	e028      	b.n	8003606 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	3304      	adds	r3, #4
 80035ba:	623b      	str	r3, [r7, #32]
          break;
 80035bc:	e023      	b.n	8003606 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	3308      	adds	r3, #8
 80035c4:	623b      	str	r3, [r7, #32]
          break;
 80035c6:	e01e      	b.n	8003606 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	330c      	adds	r3, #12
 80035ce:	623b      	str	r3, [r7, #32]
          break;
 80035d0:	e019      	b.n	8003606 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d102      	bne.n	80035e0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80035da:	2304      	movs	r3, #4
 80035dc:	623b      	str	r3, [r7, #32]
          break;
 80035de:	e012      	b.n	8003606 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d105      	bne.n	80035f4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80035e8:	2308      	movs	r3, #8
 80035ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	69fa      	ldr	r2, [r7, #28]
 80035f0:	611a      	str	r2, [r3, #16]
          break;
 80035f2:	e008      	b.n	8003606 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80035f4:	2308      	movs	r3, #8
 80035f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	69fa      	ldr	r2, [r7, #28]
 80035fc:	615a      	str	r2, [r3, #20]
          break;
 80035fe:	e002      	b.n	8003606 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003600:	2300      	movs	r3, #0
 8003602:	623b      	str	r3, [r7, #32]
          break;
 8003604:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	2bff      	cmp	r3, #255	; 0xff
 800360a:	d801      	bhi.n	8003610 <HAL_GPIO_Init+0xec>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	e001      	b.n	8003614 <HAL_GPIO_Init+0xf0>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	3304      	adds	r3, #4
 8003614:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	2bff      	cmp	r3, #255	; 0xff
 800361a:	d802      	bhi.n	8003622 <HAL_GPIO_Init+0xfe>
 800361c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	e002      	b.n	8003628 <HAL_GPIO_Init+0x104>
 8003622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003624:	3b08      	subs	r3, #8
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	210f      	movs	r1, #15
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	fa01 f303 	lsl.w	r3, r1, r3
 8003636:	43db      	mvns	r3, r3
 8003638:	401a      	ands	r2, r3
 800363a:	6a39      	ldr	r1, [r7, #32]
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	fa01 f303 	lsl.w	r3, r1, r3
 8003642:	431a      	orrs	r2, r3
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003650:	2b00      	cmp	r3, #0
 8003652:	f000 8096 	beq.w	8003782 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003656:	4b59      	ldr	r3, [pc, #356]	; (80037bc <HAL_GPIO_Init+0x298>)
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	4a58      	ldr	r2, [pc, #352]	; (80037bc <HAL_GPIO_Init+0x298>)
 800365c:	f043 0301 	orr.w	r3, r3, #1
 8003660:	6193      	str	r3, [r2, #24]
 8003662:	4b56      	ldr	r3, [pc, #344]	; (80037bc <HAL_GPIO_Init+0x298>)
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	f003 0301 	and.w	r3, r3, #1
 800366a:	60bb      	str	r3, [r7, #8]
 800366c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800366e:	4a54      	ldr	r2, [pc, #336]	; (80037c0 <HAL_GPIO_Init+0x29c>)
 8003670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003672:	089b      	lsrs	r3, r3, #2
 8003674:	3302      	adds	r3, #2
 8003676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800367a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800367c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367e:	f003 0303 	and.w	r3, r3, #3
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	220f      	movs	r2, #15
 8003686:	fa02 f303 	lsl.w	r3, r2, r3
 800368a:	43db      	mvns	r3, r3
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	4013      	ands	r3, r2
 8003690:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a4b      	ldr	r2, [pc, #300]	; (80037c4 <HAL_GPIO_Init+0x2a0>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d013      	beq.n	80036c2 <HAL_GPIO_Init+0x19e>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a4a      	ldr	r2, [pc, #296]	; (80037c8 <HAL_GPIO_Init+0x2a4>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d00d      	beq.n	80036be <HAL_GPIO_Init+0x19a>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a49      	ldr	r2, [pc, #292]	; (80037cc <HAL_GPIO_Init+0x2a8>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d007      	beq.n	80036ba <HAL_GPIO_Init+0x196>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a48      	ldr	r2, [pc, #288]	; (80037d0 <HAL_GPIO_Init+0x2ac>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d101      	bne.n	80036b6 <HAL_GPIO_Init+0x192>
 80036b2:	2303      	movs	r3, #3
 80036b4:	e006      	b.n	80036c4 <HAL_GPIO_Init+0x1a0>
 80036b6:	2304      	movs	r3, #4
 80036b8:	e004      	b.n	80036c4 <HAL_GPIO_Init+0x1a0>
 80036ba:	2302      	movs	r3, #2
 80036bc:	e002      	b.n	80036c4 <HAL_GPIO_Init+0x1a0>
 80036be:	2301      	movs	r3, #1
 80036c0:	e000      	b.n	80036c4 <HAL_GPIO_Init+0x1a0>
 80036c2:	2300      	movs	r3, #0
 80036c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036c6:	f002 0203 	and.w	r2, r2, #3
 80036ca:	0092      	lsls	r2, r2, #2
 80036cc:	4093      	lsls	r3, r2
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80036d4:	493a      	ldr	r1, [pc, #232]	; (80037c0 <HAL_GPIO_Init+0x29c>)
 80036d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d8:	089b      	lsrs	r3, r3, #2
 80036da:	3302      	adds	r3, #2
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d006      	beq.n	80036fc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80036ee:	4b39      	ldr	r3, [pc, #228]	; (80037d4 <HAL_GPIO_Init+0x2b0>)
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	4938      	ldr	r1, [pc, #224]	; (80037d4 <HAL_GPIO_Init+0x2b0>)
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	600b      	str	r3, [r1, #0]
 80036fa:	e006      	b.n	800370a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80036fc:	4b35      	ldr	r3, [pc, #212]	; (80037d4 <HAL_GPIO_Init+0x2b0>)
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	43db      	mvns	r3, r3
 8003704:	4933      	ldr	r1, [pc, #204]	; (80037d4 <HAL_GPIO_Init+0x2b0>)
 8003706:	4013      	ands	r3, r2
 8003708:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d006      	beq.n	8003724 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003716:	4b2f      	ldr	r3, [pc, #188]	; (80037d4 <HAL_GPIO_Init+0x2b0>)
 8003718:	685a      	ldr	r2, [r3, #4]
 800371a:	492e      	ldr	r1, [pc, #184]	; (80037d4 <HAL_GPIO_Init+0x2b0>)
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	4313      	orrs	r3, r2
 8003720:	604b      	str	r3, [r1, #4]
 8003722:	e006      	b.n	8003732 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003724:	4b2b      	ldr	r3, [pc, #172]	; (80037d4 <HAL_GPIO_Init+0x2b0>)
 8003726:	685a      	ldr	r2, [r3, #4]
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	43db      	mvns	r3, r3
 800372c:	4929      	ldr	r1, [pc, #164]	; (80037d4 <HAL_GPIO_Init+0x2b0>)
 800372e:	4013      	ands	r3, r2
 8003730:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d006      	beq.n	800374c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800373e:	4b25      	ldr	r3, [pc, #148]	; (80037d4 <HAL_GPIO_Init+0x2b0>)
 8003740:	689a      	ldr	r2, [r3, #8]
 8003742:	4924      	ldr	r1, [pc, #144]	; (80037d4 <HAL_GPIO_Init+0x2b0>)
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	4313      	orrs	r3, r2
 8003748:	608b      	str	r3, [r1, #8]
 800374a:	e006      	b.n	800375a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800374c:	4b21      	ldr	r3, [pc, #132]	; (80037d4 <HAL_GPIO_Init+0x2b0>)
 800374e:	689a      	ldr	r2, [r3, #8]
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	43db      	mvns	r3, r3
 8003754:	491f      	ldr	r1, [pc, #124]	; (80037d4 <HAL_GPIO_Init+0x2b0>)
 8003756:	4013      	ands	r3, r2
 8003758:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d006      	beq.n	8003774 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003766:	4b1b      	ldr	r3, [pc, #108]	; (80037d4 <HAL_GPIO_Init+0x2b0>)
 8003768:	68da      	ldr	r2, [r3, #12]
 800376a:	491a      	ldr	r1, [pc, #104]	; (80037d4 <HAL_GPIO_Init+0x2b0>)
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	4313      	orrs	r3, r2
 8003770:	60cb      	str	r3, [r1, #12]
 8003772:	e006      	b.n	8003782 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003774:	4b17      	ldr	r3, [pc, #92]	; (80037d4 <HAL_GPIO_Init+0x2b0>)
 8003776:	68da      	ldr	r2, [r3, #12]
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	43db      	mvns	r3, r3
 800377c:	4915      	ldr	r1, [pc, #84]	; (80037d4 <HAL_GPIO_Init+0x2b0>)
 800377e:	4013      	ands	r3, r2
 8003780:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	3301      	adds	r3, #1
 8003786:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378e:	fa22 f303 	lsr.w	r3, r2, r3
 8003792:	2b00      	cmp	r3, #0
 8003794:	f47f aed0 	bne.w	8003538 <HAL_GPIO_Init+0x14>
  }
}
 8003798:	bf00      	nop
 800379a:	372c      	adds	r7, #44	; 0x2c
 800379c:	46bd      	mov	sp, r7
 800379e:	bc80      	pop	{r7}
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	10210000 	.word	0x10210000
 80037a8:	10110000 	.word	0x10110000
 80037ac:	10120000 	.word	0x10120000
 80037b0:	10310000 	.word	0x10310000
 80037b4:	10320000 	.word	0x10320000
 80037b8:	10220000 	.word	0x10220000
 80037bc:	40021000 	.word	0x40021000
 80037c0:	40010000 	.word	0x40010000
 80037c4:	40010800 	.word	0x40010800
 80037c8:	40010c00 	.word	0x40010c00
 80037cc:	40011000 	.word	0x40011000
 80037d0:	40011400 	.word	0x40011400
 80037d4:	40010400 	.word	0x40010400

080037d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	460b      	mov	r3, r1
 80037e2:	807b      	strh	r3, [r7, #2]
 80037e4:	4613      	mov	r3, r2
 80037e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80037e8:	787b      	ldrb	r3, [r7, #1]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037ee:	887a      	ldrh	r2, [r7, #2]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80037f4:	e003      	b.n	80037fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80037f6:	887b      	ldrh	r3, [r7, #2]
 80037f8:	041a      	lsls	r2, r3, #16
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	611a      	str	r2, [r3, #16]
}
 80037fe:	bf00      	nop
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	bc80      	pop	{r7}
 8003806:	4770      	bx	lr

08003808 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b086      	sub	sp, #24
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e26c      	b.n	8003cf4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	2b00      	cmp	r3, #0
 8003824:	f000 8087 	beq.w	8003936 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003828:	4b92      	ldr	r3, [pc, #584]	; (8003a74 <HAL_RCC_OscConfig+0x26c>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f003 030c 	and.w	r3, r3, #12
 8003830:	2b04      	cmp	r3, #4
 8003832:	d00c      	beq.n	800384e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003834:	4b8f      	ldr	r3, [pc, #572]	; (8003a74 <HAL_RCC_OscConfig+0x26c>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f003 030c 	and.w	r3, r3, #12
 800383c:	2b08      	cmp	r3, #8
 800383e:	d112      	bne.n	8003866 <HAL_RCC_OscConfig+0x5e>
 8003840:	4b8c      	ldr	r3, [pc, #560]	; (8003a74 <HAL_RCC_OscConfig+0x26c>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800384c:	d10b      	bne.n	8003866 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800384e:	4b89      	ldr	r3, [pc, #548]	; (8003a74 <HAL_RCC_OscConfig+0x26c>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d06c      	beq.n	8003934 <HAL_RCC_OscConfig+0x12c>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d168      	bne.n	8003934 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e246      	b.n	8003cf4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800386e:	d106      	bne.n	800387e <HAL_RCC_OscConfig+0x76>
 8003870:	4b80      	ldr	r3, [pc, #512]	; (8003a74 <HAL_RCC_OscConfig+0x26c>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a7f      	ldr	r2, [pc, #508]	; (8003a74 <HAL_RCC_OscConfig+0x26c>)
 8003876:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800387a:	6013      	str	r3, [r2, #0]
 800387c:	e02e      	b.n	80038dc <HAL_RCC_OscConfig+0xd4>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d10c      	bne.n	80038a0 <HAL_RCC_OscConfig+0x98>
 8003886:	4b7b      	ldr	r3, [pc, #492]	; (8003a74 <HAL_RCC_OscConfig+0x26c>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a7a      	ldr	r2, [pc, #488]	; (8003a74 <HAL_RCC_OscConfig+0x26c>)
 800388c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003890:	6013      	str	r3, [r2, #0]
 8003892:	4b78      	ldr	r3, [pc, #480]	; (8003a74 <HAL_RCC_OscConfig+0x26c>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a77      	ldr	r2, [pc, #476]	; (8003a74 <HAL_RCC_OscConfig+0x26c>)
 8003898:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800389c:	6013      	str	r3, [r2, #0]
 800389e:	e01d      	b.n	80038dc <HAL_RCC_OscConfig+0xd4>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038a8:	d10c      	bne.n	80038c4 <HAL_RCC_OscConfig+0xbc>
 80038aa:	4b72      	ldr	r3, [pc, #456]	; (8003a74 <HAL_RCC_OscConfig+0x26c>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a71      	ldr	r2, [pc, #452]	; (8003a74 <HAL_RCC_OscConfig+0x26c>)
 80038b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038b4:	6013      	str	r3, [r2, #0]
 80038b6:	4b6f      	ldr	r3, [pc, #444]	; (8003a74 <HAL_RCC_OscConfig+0x26c>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a6e      	ldr	r2, [pc, #440]	; (8003a74 <HAL_RCC_OscConfig+0x26c>)
 80038bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038c0:	6013      	str	r3, [r2, #0]
 80038c2:	e00b      	b.n	80038dc <HAL_RCC_OscConfig+0xd4>
 80038c4:	4b6b      	ldr	r3, [pc, #428]	; (8003a74 <HAL_RCC_OscConfig+0x26c>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a6a      	ldr	r2, [pc, #424]	; (8003a74 <HAL_RCC_OscConfig+0x26c>)
 80038ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038ce:	6013      	str	r3, [r2, #0]
 80038d0:	4b68      	ldr	r3, [pc, #416]	; (8003a74 <HAL_RCC_OscConfig+0x26c>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a67      	ldr	r2, [pc, #412]	; (8003a74 <HAL_RCC_OscConfig+0x26c>)
 80038d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d013      	beq.n	800390c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e4:	f7ff f8d2 	bl	8002a8c <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038ec:	f7ff f8ce 	bl	8002a8c <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b64      	cmp	r3, #100	; 0x64
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e1fa      	b.n	8003cf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038fe:	4b5d      	ldr	r3, [pc, #372]	; (8003a74 <HAL_RCC_OscConfig+0x26c>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d0f0      	beq.n	80038ec <HAL_RCC_OscConfig+0xe4>
 800390a:	e014      	b.n	8003936 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800390c:	f7ff f8be 	bl	8002a8c <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003912:	e008      	b.n	8003926 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003914:	f7ff f8ba 	bl	8002a8c <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b64      	cmp	r3, #100	; 0x64
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e1e6      	b.n	8003cf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003926:	4b53      	ldr	r3, [pc, #332]	; (8003a74 <HAL_RCC_OscConfig+0x26c>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1f0      	bne.n	8003914 <HAL_RCC_OscConfig+0x10c>
 8003932:	e000      	b.n	8003936 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003934:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d063      	beq.n	8003a0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003942:	4b4c      	ldr	r3, [pc, #304]	; (8003a74 <HAL_RCC_OscConfig+0x26c>)
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f003 030c 	and.w	r3, r3, #12
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00b      	beq.n	8003966 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800394e:	4b49      	ldr	r3, [pc, #292]	; (8003a74 <HAL_RCC_OscConfig+0x26c>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f003 030c 	and.w	r3, r3, #12
 8003956:	2b08      	cmp	r3, #8
 8003958:	d11c      	bne.n	8003994 <HAL_RCC_OscConfig+0x18c>
 800395a:	4b46      	ldr	r3, [pc, #280]	; (8003a74 <HAL_RCC_OscConfig+0x26c>)
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d116      	bne.n	8003994 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003966:	4b43      	ldr	r3, [pc, #268]	; (8003a74 <HAL_RCC_OscConfig+0x26c>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d005      	beq.n	800397e <HAL_RCC_OscConfig+0x176>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d001      	beq.n	800397e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e1ba      	b.n	8003cf4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800397e:	4b3d      	ldr	r3, [pc, #244]	; (8003a74 <HAL_RCC_OscConfig+0x26c>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	00db      	lsls	r3, r3, #3
 800398c:	4939      	ldr	r1, [pc, #228]	; (8003a74 <HAL_RCC_OscConfig+0x26c>)
 800398e:	4313      	orrs	r3, r2
 8003990:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003992:	e03a      	b.n	8003a0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d020      	beq.n	80039de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800399c:	4b36      	ldr	r3, [pc, #216]	; (8003a78 <HAL_RCC_OscConfig+0x270>)
 800399e:	2201      	movs	r2, #1
 80039a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a2:	f7ff f873 	bl	8002a8c <HAL_GetTick>
 80039a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039a8:	e008      	b.n	80039bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039aa:	f7ff f86f 	bl	8002a8c <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d901      	bls.n	80039bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e19b      	b.n	8003cf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039bc:	4b2d      	ldr	r3, [pc, #180]	; (8003a74 <HAL_RCC_OscConfig+0x26c>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d0f0      	beq.n	80039aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039c8:	4b2a      	ldr	r3, [pc, #168]	; (8003a74 <HAL_RCC_OscConfig+0x26c>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	695b      	ldr	r3, [r3, #20]
 80039d4:	00db      	lsls	r3, r3, #3
 80039d6:	4927      	ldr	r1, [pc, #156]	; (8003a74 <HAL_RCC_OscConfig+0x26c>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	600b      	str	r3, [r1, #0]
 80039dc:	e015      	b.n	8003a0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039de:	4b26      	ldr	r3, [pc, #152]	; (8003a78 <HAL_RCC_OscConfig+0x270>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e4:	f7ff f852 	bl	8002a8c <HAL_GetTick>
 80039e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ea:	e008      	b.n	80039fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039ec:	f7ff f84e 	bl	8002a8c <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e17a      	b.n	8003cf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039fe:	4b1d      	ldr	r3, [pc, #116]	; (8003a74 <HAL_RCC_OscConfig+0x26c>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1f0      	bne.n	80039ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0308 	and.w	r3, r3, #8
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d03a      	beq.n	8003a8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d019      	beq.n	8003a52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a1e:	4b17      	ldr	r3, [pc, #92]	; (8003a7c <HAL_RCC_OscConfig+0x274>)
 8003a20:	2201      	movs	r2, #1
 8003a22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a24:	f7ff f832 	bl	8002a8c <HAL_GetTick>
 8003a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a2a:	e008      	b.n	8003a3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a2c:	f7ff f82e 	bl	8002a8c <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d901      	bls.n	8003a3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e15a      	b.n	8003cf4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a3e:	4b0d      	ldr	r3, [pc, #52]	; (8003a74 <HAL_RCC_OscConfig+0x26c>)
 8003a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a42:	f003 0302 	and.w	r3, r3, #2
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d0f0      	beq.n	8003a2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003a4a:	2001      	movs	r0, #1
 8003a4c:	f000 fac6 	bl	8003fdc <RCC_Delay>
 8003a50:	e01c      	b.n	8003a8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a52:	4b0a      	ldr	r3, [pc, #40]	; (8003a7c <HAL_RCC_OscConfig+0x274>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a58:	f7ff f818 	bl	8002a8c <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a5e:	e00f      	b.n	8003a80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a60:	f7ff f814 	bl	8002a8c <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d908      	bls.n	8003a80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e140      	b.n	8003cf4 <HAL_RCC_OscConfig+0x4ec>
 8003a72:	bf00      	nop
 8003a74:	40021000 	.word	0x40021000
 8003a78:	42420000 	.word	0x42420000
 8003a7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a80:	4b9e      	ldr	r3, [pc, #632]	; (8003cfc <HAL_RCC_OscConfig+0x4f4>)
 8003a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a84:	f003 0302 	and.w	r3, r3, #2
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d1e9      	bne.n	8003a60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0304 	and.w	r3, r3, #4
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f000 80a6 	beq.w	8003be6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a9e:	4b97      	ldr	r3, [pc, #604]	; (8003cfc <HAL_RCC_OscConfig+0x4f4>)
 8003aa0:	69db      	ldr	r3, [r3, #28]
 8003aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10d      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aaa:	4b94      	ldr	r3, [pc, #592]	; (8003cfc <HAL_RCC_OscConfig+0x4f4>)
 8003aac:	69db      	ldr	r3, [r3, #28]
 8003aae:	4a93      	ldr	r2, [pc, #588]	; (8003cfc <HAL_RCC_OscConfig+0x4f4>)
 8003ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ab4:	61d3      	str	r3, [r2, #28]
 8003ab6:	4b91      	ldr	r3, [pc, #580]	; (8003cfc <HAL_RCC_OscConfig+0x4f4>)
 8003ab8:	69db      	ldr	r3, [r3, #28]
 8003aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003abe:	60bb      	str	r3, [r7, #8]
 8003ac0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ac6:	4b8e      	ldr	r3, [pc, #568]	; (8003d00 <HAL_RCC_OscConfig+0x4f8>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d118      	bne.n	8003b04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ad2:	4b8b      	ldr	r3, [pc, #556]	; (8003d00 <HAL_RCC_OscConfig+0x4f8>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a8a      	ldr	r2, [pc, #552]	; (8003d00 <HAL_RCC_OscConfig+0x4f8>)
 8003ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003adc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ade:	f7fe ffd5 	bl	8002a8c <HAL_GetTick>
 8003ae2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ae4:	e008      	b.n	8003af8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ae6:	f7fe ffd1 	bl	8002a8c <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b64      	cmp	r3, #100	; 0x64
 8003af2:	d901      	bls.n	8003af8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e0fd      	b.n	8003cf4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003af8:	4b81      	ldr	r3, [pc, #516]	; (8003d00 <HAL_RCC_OscConfig+0x4f8>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d0f0      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d106      	bne.n	8003b1a <HAL_RCC_OscConfig+0x312>
 8003b0c:	4b7b      	ldr	r3, [pc, #492]	; (8003cfc <HAL_RCC_OscConfig+0x4f4>)
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	4a7a      	ldr	r2, [pc, #488]	; (8003cfc <HAL_RCC_OscConfig+0x4f4>)
 8003b12:	f043 0301 	orr.w	r3, r3, #1
 8003b16:	6213      	str	r3, [r2, #32]
 8003b18:	e02d      	b.n	8003b76 <HAL_RCC_OscConfig+0x36e>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10c      	bne.n	8003b3c <HAL_RCC_OscConfig+0x334>
 8003b22:	4b76      	ldr	r3, [pc, #472]	; (8003cfc <HAL_RCC_OscConfig+0x4f4>)
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	4a75      	ldr	r2, [pc, #468]	; (8003cfc <HAL_RCC_OscConfig+0x4f4>)
 8003b28:	f023 0301 	bic.w	r3, r3, #1
 8003b2c:	6213      	str	r3, [r2, #32]
 8003b2e:	4b73      	ldr	r3, [pc, #460]	; (8003cfc <HAL_RCC_OscConfig+0x4f4>)
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	4a72      	ldr	r2, [pc, #456]	; (8003cfc <HAL_RCC_OscConfig+0x4f4>)
 8003b34:	f023 0304 	bic.w	r3, r3, #4
 8003b38:	6213      	str	r3, [r2, #32]
 8003b3a:	e01c      	b.n	8003b76 <HAL_RCC_OscConfig+0x36e>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	2b05      	cmp	r3, #5
 8003b42:	d10c      	bne.n	8003b5e <HAL_RCC_OscConfig+0x356>
 8003b44:	4b6d      	ldr	r3, [pc, #436]	; (8003cfc <HAL_RCC_OscConfig+0x4f4>)
 8003b46:	6a1b      	ldr	r3, [r3, #32]
 8003b48:	4a6c      	ldr	r2, [pc, #432]	; (8003cfc <HAL_RCC_OscConfig+0x4f4>)
 8003b4a:	f043 0304 	orr.w	r3, r3, #4
 8003b4e:	6213      	str	r3, [r2, #32]
 8003b50:	4b6a      	ldr	r3, [pc, #424]	; (8003cfc <HAL_RCC_OscConfig+0x4f4>)
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	4a69      	ldr	r2, [pc, #420]	; (8003cfc <HAL_RCC_OscConfig+0x4f4>)
 8003b56:	f043 0301 	orr.w	r3, r3, #1
 8003b5a:	6213      	str	r3, [r2, #32]
 8003b5c:	e00b      	b.n	8003b76 <HAL_RCC_OscConfig+0x36e>
 8003b5e:	4b67      	ldr	r3, [pc, #412]	; (8003cfc <HAL_RCC_OscConfig+0x4f4>)
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	4a66      	ldr	r2, [pc, #408]	; (8003cfc <HAL_RCC_OscConfig+0x4f4>)
 8003b64:	f023 0301 	bic.w	r3, r3, #1
 8003b68:	6213      	str	r3, [r2, #32]
 8003b6a:	4b64      	ldr	r3, [pc, #400]	; (8003cfc <HAL_RCC_OscConfig+0x4f4>)
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	4a63      	ldr	r2, [pc, #396]	; (8003cfc <HAL_RCC_OscConfig+0x4f4>)
 8003b70:	f023 0304 	bic.w	r3, r3, #4
 8003b74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d015      	beq.n	8003baa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b7e:	f7fe ff85 	bl	8002a8c <HAL_GetTick>
 8003b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b84:	e00a      	b.n	8003b9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b86:	f7fe ff81 	bl	8002a8c <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d901      	bls.n	8003b9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e0ab      	b.n	8003cf4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b9c:	4b57      	ldr	r3, [pc, #348]	; (8003cfc <HAL_RCC_OscConfig+0x4f4>)
 8003b9e:	6a1b      	ldr	r3, [r3, #32]
 8003ba0:	f003 0302 	and.w	r3, r3, #2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d0ee      	beq.n	8003b86 <HAL_RCC_OscConfig+0x37e>
 8003ba8:	e014      	b.n	8003bd4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003baa:	f7fe ff6f 	bl	8002a8c <HAL_GetTick>
 8003bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bb0:	e00a      	b.n	8003bc8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bb2:	f7fe ff6b 	bl	8002a8c <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d901      	bls.n	8003bc8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e095      	b.n	8003cf4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bc8:	4b4c      	ldr	r3, [pc, #304]	; (8003cfc <HAL_RCC_OscConfig+0x4f4>)
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1ee      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003bd4:	7dfb      	ldrb	r3, [r7, #23]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d105      	bne.n	8003be6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bda:	4b48      	ldr	r3, [pc, #288]	; (8003cfc <HAL_RCC_OscConfig+0x4f4>)
 8003bdc:	69db      	ldr	r3, [r3, #28]
 8003bde:	4a47      	ldr	r2, [pc, #284]	; (8003cfc <HAL_RCC_OscConfig+0x4f4>)
 8003be0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003be4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	69db      	ldr	r3, [r3, #28]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	f000 8081 	beq.w	8003cf2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bf0:	4b42      	ldr	r3, [pc, #264]	; (8003cfc <HAL_RCC_OscConfig+0x4f4>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f003 030c 	and.w	r3, r3, #12
 8003bf8:	2b08      	cmp	r3, #8
 8003bfa:	d061      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	69db      	ldr	r3, [r3, #28]
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d146      	bne.n	8003c92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c04:	4b3f      	ldr	r3, [pc, #252]	; (8003d04 <HAL_RCC_OscConfig+0x4fc>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c0a:	f7fe ff3f 	bl	8002a8c <HAL_GetTick>
 8003c0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c10:	e008      	b.n	8003c24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c12:	f7fe ff3b 	bl	8002a8c <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d901      	bls.n	8003c24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e067      	b.n	8003cf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c24:	4b35      	ldr	r3, [pc, #212]	; (8003cfc <HAL_RCC_OscConfig+0x4f4>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1f0      	bne.n	8003c12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c38:	d108      	bne.n	8003c4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c3a:	4b30      	ldr	r3, [pc, #192]	; (8003cfc <HAL_RCC_OscConfig+0x4f4>)
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	492d      	ldr	r1, [pc, #180]	; (8003cfc <HAL_RCC_OscConfig+0x4f4>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c4c:	4b2b      	ldr	r3, [pc, #172]	; (8003cfc <HAL_RCC_OscConfig+0x4f4>)
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a19      	ldr	r1, [r3, #32]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5c:	430b      	orrs	r3, r1
 8003c5e:	4927      	ldr	r1, [pc, #156]	; (8003cfc <HAL_RCC_OscConfig+0x4f4>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c64:	4b27      	ldr	r3, [pc, #156]	; (8003d04 <HAL_RCC_OscConfig+0x4fc>)
 8003c66:	2201      	movs	r2, #1
 8003c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c6a:	f7fe ff0f 	bl	8002a8c <HAL_GetTick>
 8003c6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c70:	e008      	b.n	8003c84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c72:	f7fe ff0b 	bl	8002a8c <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d901      	bls.n	8003c84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e037      	b.n	8003cf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c84:	4b1d      	ldr	r3, [pc, #116]	; (8003cfc <HAL_RCC_OscConfig+0x4f4>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d0f0      	beq.n	8003c72 <HAL_RCC_OscConfig+0x46a>
 8003c90:	e02f      	b.n	8003cf2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c92:	4b1c      	ldr	r3, [pc, #112]	; (8003d04 <HAL_RCC_OscConfig+0x4fc>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c98:	f7fe fef8 	bl	8002a8c <HAL_GetTick>
 8003c9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c9e:	e008      	b.n	8003cb2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ca0:	f7fe fef4 	bl	8002a8c <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e020      	b.n	8003cf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cb2:	4b12      	ldr	r3, [pc, #72]	; (8003cfc <HAL_RCC_OscConfig+0x4f4>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1f0      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x498>
 8003cbe:	e018      	b.n	8003cf2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	69db      	ldr	r3, [r3, #28]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d101      	bne.n	8003ccc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e013      	b.n	8003cf4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ccc:	4b0b      	ldr	r3, [pc, #44]	; (8003cfc <HAL_RCC_OscConfig+0x4f4>)
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a1b      	ldr	r3, [r3, #32]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d106      	bne.n	8003cee <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d001      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e000      	b.n	8003cf4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3718      	adds	r7, #24
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	40021000 	.word	0x40021000
 8003d00:	40007000 	.word	0x40007000
 8003d04:	42420060 	.word	0x42420060

08003d08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d101      	bne.n	8003d1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e0d0      	b.n	8003ebe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d1c:	4b6a      	ldr	r3, [pc, #424]	; (8003ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0307 	and.w	r3, r3, #7
 8003d24:	683a      	ldr	r2, [r7, #0]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d910      	bls.n	8003d4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d2a:	4b67      	ldr	r3, [pc, #412]	; (8003ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f023 0207 	bic.w	r2, r3, #7
 8003d32:	4965      	ldr	r1, [pc, #404]	; (8003ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d3a:	4b63      	ldr	r3, [pc, #396]	; (8003ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0307 	and.w	r3, r3, #7
 8003d42:	683a      	ldr	r2, [r7, #0]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d001      	beq.n	8003d4c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e0b8      	b.n	8003ebe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d020      	beq.n	8003d9a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0304 	and.w	r3, r3, #4
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d005      	beq.n	8003d70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d64:	4b59      	ldr	r3, [pc, #356]	; (8003ecc <HAL_RCC_ClockConfig+0x1c4>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	4a58      	ldr	r2, [pc, #352]	; (8003ecc <HAL_RCC_ClockConfig+0x1c4>)
 8003d6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d6e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0308 	and.w	r3, r3, #8
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d005      	beq.n	8003d88 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d7c:	4b53      	ldr	r3, [pc, #332]	; (8003ecc <HAL_RCC_ClockConfig+0x1c4>)
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	4a52      	ldr	r2, [pc, #328]	; (8003ecc <HAL_RCC_ClockConfig+0x1c4>)
 8003d82:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003d86:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d88:	4b50      	ldr	r3, [pc, #320]	; (8003ecc <HAL_RCC_ClockConfig+0x1c4>)
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	494d      	ldr	r1, [pc, #308]	; (8003ecc <HAL_RCC_ClockConfig+0x1c4>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d040      	beq.n	8003e28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d107      	bne.n	8003dbe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dae:	4b47      	ldr	r3, [pc, #284]	; (8003ecc <HAL_RCC_ClockConfig+0x1c4>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d115      	bne.n	8003de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e07f      	b.n	8003ebe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d107      	bne.n	8003dd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dc6:	4b41      	ldr	r3, [pc, #260]	; (8003ecc <HAL_RCC_ClockConfig+0x1c4>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d109      	bne.n	8003de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e073      	b.n	8003ebe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dd6:	4b3d      	ldr	r3, [pc, #244]	; (8003ecc <HAL_RCC_ClockConfig+0x1c4>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d101      	bne.n	8003de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e06b      	b.n	8003ebe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003de6:	4b39      	ldr	r3, [pc, #228]	; (8003ecc <HAL_RCC_ClockConfig+0x1c4>)
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f023 0203 	bic.w	r2, r3, #3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	4936      	ldr	r1, [pc, #216]	; (8003ecc <HAL_RCC_ClockConfig+0x1c4>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003df8:	f7fe fe48 	bl	8002a8c <HAL_GetTick>
 8003dfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dfe:	e00a      	b.n	8003e16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e00:	f7fe fe44 	bl	8002a8c <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e053      	b.n	8003ebe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e16:	4b2d      	ldr	r3, [pc, #180]	; (8003ecc <HAL_RCC_ClockConfig+0x1c4>)
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f003 020c 	and.w	r2, r3, #12
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d1eb      	bne.n	8003e00 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e28:	4b27      	ldr	r3, [pc, #156]	; (8003ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0307 	and.w	r3, r3, #7
 8003e30:	683a      	ldr	r2, [r7, #0]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d210      	bcs.n	8003e58 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e36:	4b24      	ldr	r3, [pc, #144]	; (8003ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f023 0207 	bic.w	r2, r3, #7
 8003e3e:	4922      	ldr	r1, [pc, #136]	; (8003ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e46:	4b20      	ldr	r3, [pc, #128]	; (8003ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0307 	and.w	r3, r3, #7
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d001      	beq.n	8003e58 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e032      	b.n	8003ebe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0304 	and.w	r3, r3, #4
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d008      	beq.n	8003e76 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e64:	4b19      	ldr	r3, [pc, #100]	; (8003ecc <HAL_RCC_ClockConfig+0x1c4>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	4916      	ldr	r1, [pc, #88]	; (8003ecc <HAL_RCC_ClockConfig+0x1c4>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0308 	and.w	r3, r3, #8
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d009      	beq.n	8003e96 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e82:	4b12      	ldr	r3, [pc, #72]	; (8003ecc <HAL_RCC_ClockConfig+0x1c4>)
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	00db      	lsls	r3, r3, #3
 8003e90:	490e      	ldr	r1, [pc, #56]	; (8003ecc <HAL_RCC_ClockConfig+0x1c4>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e96:	f000 f821 	bl	8003edc <HAL_RCC_GetSysClockFreq>
 8003e9a:	4601      	mov	r1, r0
 8003e9c:	4b0b      	ldr	r3, [pc, #44]	; (8003ecc <HAL_RCC_ClockConfig+0x1c4>)
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	091b      	lsrs	r3, r3, #4
 8003ea2:	f003 030f 	and.w	r3, r3, #15
 8003ea6:	4a0a      	ldr	r2, [pc, #40]	; (8003ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8003ea8:	5cd3      	ldrb	r3, [r2, r3]
 8003eaa:	fa21 f303 	lsr.w	r3, r1, r3
 8003eae:	4a09      	ldr	r2, [pc, #36]	; (8003ed4 <HAL_RCC_ClockConfig+0x1cc>)
 8003eb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003eb2:	4b09      	ldr	r3, [pc, #36]	; (8003ed8 <HAL_RCC_ClockConfig+0x1d0>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7fe fda6 	bl	8002a08 <HAL_InitTick>

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	40022000 	.word	0x40022000
 8003ecc:	40021000 	.word	0x40021000
 8003ed0:	08009534 	.word	0x08009534
 8003ed4:	20000094 	.word	0x20000094
 8003ed8:	20000098 	.word	0x20000098

08003edc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003edc:	b490      	push	{r4, r7}
 8003ede:	b08a      	sub	sp, #40	; 0x28
 8003ee0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003ee2:	4b2a      	ldr	r3, [pc, #168]	; (8003f8c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003ee4:	1d3c      	adds	r4, r7, #4
 8003ee6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ee8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003eec:	4b28      	ldr	r3, [pc, #160]	; (8003f90 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003eee:	881b      	ldrh	r3, [r3, #0]
 8003ef0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	61fb      	str	r3, [r7, #28]
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	61bb      	str	r3, [r7, #24]
 8003efa:	2300      	movs	r3, #0
 8003efc:	627b      	str	r3, [r7, #36]	; 0x24
 8003efe:	2300      	movs	r3, #0
 8003f00:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003f02:	2300      	movs	r3, #0
 8003f04:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003f06:	4b23      	ldr	r3, [pc, #140]	; (8003f94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	f003 030c 	and.w	r3, r3, #12
 8003f12:	2b04      	cmp	r3, #4
 8003f14:	d002      	beq.n	8003f1c <HAL_RCC_GetSysClockFreq+0x40>
 8003f16:	2b08      	cmp	r3, #8
 8003f18:	d003      	beq.n	8003f22 <HAL_RCC_GetSysClockFreq+0x46>
 8003f1a:	e02d      	b.n	8003f78 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f1c:	4b1e      	ldr	r3, [pc, #120]	; (8003f98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003f1e:	623b      	str	r3, [r7, #32]
      break;
 8003f20:	e02d      	b.n	8003f7e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	0c9b      	lsrs	r3, r3, #18
 8003f26:	f003 030f 	and.w	r3, r3, #15
 8003f2a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003f2e:	4413      	add	r3, r2
 8003f30:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003f34:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d013      	beq.n	8003f68 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f40:	4b14      	ldr	r3, [pc, #80]	; (8003f94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	0c5b      	lsrs	r3, r3, #17
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003f4e:	4413      	add	r3, r2
 8003f50:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003f54:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	4a0f      	ldr	r2, [pc, #60]	; (8003f98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003f5a:	fb02 f203 	mul.w	r2, r2, r3
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f64:	627b      	str	r3, [r7, #36]	; 0x24
 8003f66:	e004      	b.n	8003f72 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	4a0c      	ldr	r2, [pc, #48]	; (8003f9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003f6c:	fb02 f303 	mul.w	r3, r2, r3
 8003f70:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f74:	623b      	str	r3, [r7, #32]
      break;
 8003f76:	e002      	b.n	8003f7e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f78:	4b07      	ldr	r3, [pc, #28]	; (8003f98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003f7a:	623b      	str	r3, [r7, #32]
      break;
 8003f7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f7e:	6a3b      	ldr	r3, [r7, #32]
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3728      	adds	r7, #40	; 0x28
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bc90      	pop	{r4, r7}
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	0800680c 	.word	0x0800680c
 8003f90:	0800681c 	.word	0x0800681c
 8003f94:	40021000 	.word	0x40021000
 8003f98:	007a1200 	.word	0x007a1200
 8003f9c:	003d0900 	.word	0x003d0900

08003fa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fa4:	4b02      	ldr	r3, [pc, #8]	; (8003fb0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bc80      	pop	{r7}
 8003fae:	4770      	bx	lr
 8003fb0:	20000094 	.word	0x20000094

08003fb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003fb8:	f7ff fff2 	bl	8003fa0 <HAL_RCC_GetHCLKFreq>
 8003fbc:	4601      	mov	r1, r0
 8003fbe:	4b05      	ldr	r3, [pc, #20]	; (8003fd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	0adb      	lsrs	r3, r3, #11
 8003fc4:	f003 0307 	and.w	r3, r3, #7
 8003fc8:	4a03      	ldr	r2, [pc, #12]	; (8003fd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fca:	5cd3      	ldrb	r3, [r2, r3]
 8003fcc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	40021000 	.word	0x40021000
 8003fd8:	08009544 	.word	0x08009544

08003fdc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003fe4:	4b0a      	ldr	r3, [pc, #40]	; (8004010 <RCC_Delay+0x34>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a0a      	ldr	r2, [pc, #40]	; (8004014 <RCC_Delay+0x38>)
 8003fea:	fba2 2303 	umull	r2, r3, r2, r3
 8003fee:	0a5b      	lsrs	r3, r3, #9
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	fb02 f303 	mul.w	r3, r2, r3
 8003ff6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ff8:	bf00      	nop
  }
  while (Delay --);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	1e5a      	subs	r2, r3, #1
 8003ffe:	60fa      	str	r2, [r7, #12]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1f9      	bne.n	8003ff8 <RCC_Delay+0x1c>
}
 8004004:	bf00      	nop
 8004006:	3714      	adds	r7, #20
 8004008:	46bd      	mov	sp, r7
 800400a:	bc80      	pop	{r7}
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	20000094 	.word	0x20000094
 8004014:	10624dd3 	.word	0x10624dd3

08004018 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b086      	sub	sp, #24
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004020:	2300      	movs	r3, #0
 8004022:	613b      	str	r3, [r7, #16]
 8004024:	2300      	movs	r3, #0
 8004026:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0301 	and.w	r3, r3, #1
 8004030:	2b00      	cmp	r3, #0
 8004032:	d07d      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004034:	2300      	movs	r3, #0
 8004036:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004038:	4b4f      	ldr	r3, [pc, #316]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800403a:	69db      	ldr	r3, [r3, #28]
 800403c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d10d      	bne.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004044:	4b4c      	ldr	r3, [pc, #304]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004046:	69db      	ldr	r3, [r3, #28]
 8004048:	4a4b      	ldr	r2, [pc, #300]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800404a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800404e:	61d3      	str	r3, [r2, #28]
 8004050:	4b49      	ldr	r3, [pc, #292]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004052:	69db      	ldr	r3, [r3, #28]
 8004054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004058:	60bb      	str	r3, [r7, #8]
 800405a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800405c:	2301      	movs	r3, #1
 800405e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004060:	4b46      	ldr	r3, [pc, #280]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004068:	2b00      	cmp	r3, #0
 800406a:	d118      	bne.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800406c:	4b43      	ldr	r3, [pc, #268]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a42      	ldr	r2, [pc, #264]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004076:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004078:	f7fe fd08 	bl	8002a8c <HAL_GetTick>
 800407c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800407e:	e008      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004080:	f7fe fd04 	bl	8002a8c <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b64      	cmp	r3, #100	; 0x64
 800408c:	d901      	bls.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e06d      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004092:	4b3a      	ldr	r3, [pc, #232]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800409a:	2b00      	cmp	r3, #0
 800409c:	d0f0      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800409e:	4b36      	ldr	r3, [pc, #216]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040a6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d02e      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d027      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040bc:	4b2e      	ldr	r3, [pc, #184]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040be:	6a1b      	ldr	r3, [r3, #32]
 80040c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040c4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040c6:	4b2e      	ldr	r3, [pc, #184]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80040c8:	2201      	movs	r2, #1
 80040ca:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040cc:	4b2c      	ldr	r3, [pc, #176]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80040ce:	2200      	movs	r2, #0
 80040d0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80040d2:	4a29      	ldr	r2, [pc, #164]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d014      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e2:	f7fe fcd3 	bl	8002a8c <HAL_GetTick>
 80040e6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040e8:	e00a      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ea:	f7fe fccf 	bl	8002a8c <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d901      	bls.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e036      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004100:	4b1d      	ldr	r3, [pc, #116]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004102:	6a1b      	ldr	r3, [r3, #32]
 8004104:	f003 0302 	and.w	r3, r3, #2
 8004108:	2b00      	cmp	r3, #0
 800410a:	d0ee      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800410c:	4b1a      	ldr	r3, [pc, #104]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800410e:	6a1b      	ldr	r3, [r3, #32]
 8004110:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	4917      	ldr	r1, [pc, #92]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800411a:	4313      	orrs	r3, r2
 800411c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800411e:	7dfb      	ldrb	r3, [r7, #23]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d105      	bne.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004124:	4b14      	ldr	r3, [pc, #80]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004126:	69db      	ldr	r3, [r3, #28]
 8004128:	4a13      	ldr	r2, [pc, #76]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800412a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800412e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0302 	and.w	r3, r3, #2
 8004138:	2b00      	cmp	r3, #0
 800413a:	d008      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800413c:	4b0e      	ldr	r3, [pc, #56]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	490b      	ldr	r1, [pc, #44]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800414a:	4313      	orrs	r3, r2
 800414c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0310 	and.w	r3, r3, #16
 8004156:	2b00      	cmp	r3, #0
 8004158:	d008      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800415a:	4b07      	ldr	r3, [pc, #28]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	4904      	ldr	r1, [pc, #16]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004168:	4313      	orrs	r3, r2
 800416a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3718      	adds	r7, #24
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	40021000 	.word	0x40021000
 800417c:	40007000 	.word	0x40007000
 8004180:	42420440 	.word	0x42420440

08004184 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004184:	b590      	push	{r4, r7, lr}
 8004186:	b08d      	sub	sp, #52	; 0x34
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800418c:	4b55      	ldr	r3, [pc, #340]	; (80042e4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800418e:	f107 040c 	add.w	r4, r7, #12
 8004192:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004194:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004198:	4b53      	ldr	r3, [pc, #332]	; (80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800419a:	881b      	ldrh	r3, [r3, #0]
 800419c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800419e:	2300      	movs	r3, #0
 80041a0:	627b      	str	r3, [r7, #36]	; 0x24
 80041a2:	2300      	movs	r3, #0
 80041a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041a6:	2300      	movs	r3, #0
 80041a8:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80041aa:	2300      	movs	r3, #0
 80041ac:	61fb      	str	r3, [r7, #28]
 80041ae:	2300      	movs	r3, #0
 80041b0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d07f      	beq.n	80042b8 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80041b8:	2b10      	cmp	r3, #16
 80041ba:	d002      	beq.n	80041c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d048      	beq.n	8004252 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80041c0:	e08b      	b.n	80042da <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 80041c2:	4b4a      	ldr	r3, [pc, #296]	; (80042ec <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80041c8:	4b48      	ldr	r3, [pc, #288]	; (80042ec <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d07f      	beq.n	80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	0c9b      	lsrs	r3, r3, #18
 80041d8:	f003 030f 	and.w	r3, r3, #15
 80041dc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80041e0:	4413      	add	r3, r2
 80041e2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80041e6:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d018      	beq.n	8004224 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80041f2:	4b3e      	ldr	r3, [pc, #248]	; (80042ec <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	0c5b      	lsrs	r3, r3, #17
 80041f8:	f003 0301 	and.w	r3, r3, #1
 80041fc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004200:	4413      	add	r3, r2
 8004202:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004206:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00d      	beq.n	800422e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004212:	4a37      	ldr	r2, [pc, #220]	; (80042f0 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8004214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004216:	fbb2 f2f3 	udiv	r2, r2, r3
 800421a:	6a3b      	ldr	r3, [r7, #32]
 800421c:	fb02 f303 	mul.w	r3, r2, r3
 8004220:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004222:	e004      	b.n	800422e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004224:	6a3b      	ldr	r3, [r7, #32]
 8004226:	4a33      	ldr	r2, [pc, #204]	; (80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004228:	fb02 f303 	mul.w	r3, r2, r3
 800422c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800422e:	4b2f      	ldr	r3, [pc, #188]	; (80042ec <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004236:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800423a:	d102      	bne.n	8004242 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 800423c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800423e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004240:	e048      	b.n	80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8004242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004244:	005b      	lsls	r3, r3, #1
 8004246:	4a2c      	ldr	r2, [pc, #176]	; (80042f8 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8004248:	fba2 2303 	umull	r2, r3, r2, r3
 800424c:	085b      	lsrs	r3, r3, #1
 800424e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004250:	e040      	b.n	80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8004252:	4b26      	ldr	r3, [pc, #152]	; (80042ec <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004254:	6a1b      	ldr	r3, [r3, #32]
 8004256:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800425e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004262:	d108      	bne.n	8004276 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d003      	beq.n	8004276 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 800426e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004272:	62bb      	str	r3, [r7, #40]	; 0x28
 8004274:	e01f      	b.n	80042b6 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800427c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004280:	d109      	bne.n	8004296 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8004282:	4b1a      	ldr	r3, [pc, #104]	; (80042ec <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d003      	beq.n	8004296 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 800428e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004292:	62bb      	str	r3, [r7, #40]	; 0x28
 8004294:	e00f      	b.n	80042b6 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800429c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042a0:	d11a      	bne.n	80042d8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80042a2:	4b12      	ldr	r3, [pc, #72]	; (80042ec <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d014      	beq.n	80042d8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 80042ae:	f24f 4324 	movw	r3, #62500	; 0xf424
 80042b2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80042b4:	e010      	b.n	80042d8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80042b6:	e00f      	b.n	80042d8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80042b8:	f7ff fe7c 	bl	8003fb4 <HAL_RCC_GetPCLK2Freq>
 80042bc:	4602      	mov	r2, r0
 80042be:	4b0b      	ldr	r3, [pc, #44]	; (80042ec <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	0b9b      	lsrs	r3, r3, #14
 80042c4:	f003 0303 	and.w	r3, r3, #3
 80042c8:	3301      	adds	r3, #1
 80042ca:	005b      	lsls	r3, r3, #1
 80042cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80042d2:	e002      	b.n	80042da <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80042d4:	bf00      	nop
 80042d6:	e000      	b.n	80042da <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80042d8:	bf00      	nop
    }
  }
  return (frequency);
 80042da:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3734      	adds	r7, #52	; 0x34
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd90      	pop	{r4, r7, pc}
 80042e4:	08006820 	.word	0x08006820
 80042e8:	08006830 	.word	0x08006830
 80042ec:	40021000 	.word	0x40021000
 80042f0:	007a1200 	.word	0x007a1200
 80042f4:	003d0900 	.word	0x003d0900
 80042f8:	aaaaaaab 	.word	0xaaaaaaab

080042fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e053      	b.n	80043b6 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800431a:	b2db      	uxtb	r3, r3
 800431c:	2b00      	cmp	r3, #0
 800431e:	d106      	bne.n	800432e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f7fe fa0f 	bl	800274c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2202      	movs	r2, #2
 8004332:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004344:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685a      	ldr	r2, [r3, #4]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	431a      	orrs	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	431a      	orrs	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	431a      	orrs	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	695b      	ldr	r3, [r3, #20]
 8004360:	431a      	orrs	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800436a:	431a      	orrs	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	69db      	ldr	r3, [r3, #28]
 8004370:	431a      	orrs	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	ea42 0103 	orr.w	r1, r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	430a      	orrs	r2, r1
 8004384:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	0c1a      	lsrs	r2, r3, #16
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f002 0204 	and.w	r2, r2, #4
 8004394:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	69da      	ldr	r2, [r3, #28]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3708      	adds	r7, #8
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	b088      	sub	sp, #32
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	60f8      	str	r0, [r7, #12]
 80043c6:	60b9      	str	r1, [r7, #8]
 80043c8:	603b      	str	r3, [r7, #0]
 80043ca:	4613      	mov	r3, r2
 80043cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80043ce:	2300      	movs	r3, #0
 80043d0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d101      	bne.n	80043e0 <HAL_SPI_Transmit+0x22>
 80043dc:	2302      	movs	r3, #2
 80043de:	e11e      	b.n	800461e <HAL_SPI_Transmit+0x260>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043e8:	f7fe fb50 	bl	8002a8c <HAL_GetTick>
 80043ec:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80043ee:	88fb      	ldrh	r3, [r7, #6]
 80043f0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d002      	beq.n	8004404 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80043fe:	2302      	movs	r3, #2
 8004400:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004402:	e103      	b.n	800460c <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d002      	beq.n	8004410 <HAL_SPI_Transmit+0x52>
 800440a:	88fb      	ldrh	r3, [r7, #6]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d102      	bne.n	8004416 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004414:	e0fa      	b.n	800460c <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2203      	movs	r2, #3
 800441a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	68ba      	ldr	r2, [r7, #8]
 8004428:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	88fa      	ldrh	r2, [r7, #6]
 800442e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	88fa      	ldrh	r2, [r7, #6]
 8004434:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800445c:	d107      	bne.n	800446e <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800446c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004478:	2b40      	cmp	r3, #64	; 0x40
 800447a:	d007      	beq.n	800448c <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800448a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004494:	d14b      	bne.n	800452e <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d002      	beq.n	80044a4 <HAL_SPI_Transmit+0xe6>
 800449e:	8afb      	ldrh	r3, [r7, #22]
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d13e      	bne.n	8004522 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a8:	881a      	ldrh	r2, [r3, #0]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b4:	1c9a      	adds	r2, r3, #2
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044be:	b29b      	uxth	r3, r3
 80044c0:	3b01      	subs	r3, #1
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80044c8:	e02b      	b.n	8004522 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f003 0302 	and.w	r3, r3, #2
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d112      	bne.n	80044fe <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044dc:	881a      	ldrh	r2, [r3, #0]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e8:	1c9a      	adds	r2, r3, #2
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	3b01      	subs	r3, #1
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	86da      	strh	r2, [r3, #54]	; 0x36
 80044fc:	e011      	b.n	8004522 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044fe:	f7fe fac5 	bl	8002a8c <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	683a      	ldr	r2, [r7, #0]
 800450a:	429a      	cmp	r2, r3
 800450c:	d803      	bhi.n	8004516 <HAL_SPI_Transmit+0x158>
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004514:	d102      	bne.n	800451c <HAL_SPI_Transmit+0x15e>
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d102      	bne.n	8004522 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004520:	e074      	b.n	800460c <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004526:	b29b      	uxth	r3, r3
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1ce      	bne.n	80044ca <HAL_SPI_Transmit+0x10c>
 800452c:	e04c      	b.n	80045c8 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d002      	beq.n	800453c <HAL_SPI_Transmit+0x17e>
 8004536:	8afb      	ldrh	r3, [r7, #22]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d140      	bne.n	80045be <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	330c      	adds	r3, #12
 8004546:	7812      	ldrb	r2, [r2, #0]
 8004548:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454e:	1c5a      	adds	r2, r3, #1
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004558:	b29b      	uxth	r3, r3
 800455a:	3b01      	subs	r3, #1
 800455c:	b29a      	uxth	r2, r3
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004562:	e02c      	b.n	80045be <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b02      	cmp	r3, #2
 8004570:	d113      	bne.n	800459a <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	330c      	adds	r3, #12
 800457c:	7812      	ldrb	r2, [r2, #0]
 800457e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004584:	1c5a      	adds	r2, r3, #1
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800458e:	b29b      	uxth	r3, r3
 8004590:	3b01      	subs	r3, #1
 8004592:	b29a      	uxth	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	86da      	strh	r2, [r3, #54]	; 0x36
 8004598:	e011      	b.n	80045be <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800459a:	f7fe fa77 	bl	8002a8c <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	683a      	ldr	r2, [r7, #0]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d803      	bhi.n	80045b2 <HAL_SPI_Transmit+0x1f4>
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b0:	d102      	bne.n	80045b8 <HAL_SPI_Transmit+0x1fa>
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d102      	bne.n	80045be <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	77fb      	strb	r3, [r7, #31]
          goto error;
 80045bc:	e026      	b.n	800460c <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1cd      	bne.n	8004564 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045c8:	69ba      	ldr	r2, [r7, #24]
 80045ca:	6839      	ldr	r1, [r7, #0]
 80045cc:	68f8      	ldr	r0, [r7, #12]
 80045ce:	f000 f894 	bl	80046fa <SPI_EndRxTxTransaction>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d002      	beq.n	80045de <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2220      	movs	r2, #32
 80045dc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d10a      	bne.n	80045fc <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045e6:	2300      	movs	r3, #0
 80045e8:	613b      	str	r3, [r7, #16]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	613b      	str	r3, [r7, #16]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	613b      	str	r3, [r7, #16]
 80045fa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004600:	2b00      	cmp	r3, #0
 8004602:	d002      	beq.n	800460a <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	77fb      	strb	r3, [r7, #31]
 8004608:	e000      	b.n	800460c <HAL_SPI_Transmit+0x24e>
  }

error:
 800460a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800461c:	7ffb      	ldrb	r3, [r7, #31]
}
 800461e:	4618      	mov	r0, r3
 8004620:	3720      	adds	r7, #32
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}

08004626 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004626:	b580      	push	{r7, lr}
 8004628:	b084      	sub	sp, #16
 800462a:	af00      	add	r7, sp, #0
 800462c:	60f8      	str	r0, [r7, #12]
 800462e:	60b9      	str	r1, [r7, #8]
 8004630:	603b      	str	r3, [r7, #0]
 8004632:	4613      	mov	r3, r2
 8004634:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004636:	e04c      	b.n	80046d2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800463e:	d048      	beq.n	80046d2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004640:	f7fe fa24 	bl	8002a8c <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	429a      	cmp	r2, r3
 800464e:	d902      	bls.n	8004656 <SPI_WaitFlagStateUntilTimeout+0x30>
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d13d      	bne.n	80046d2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	685a      	ldr	r2, [r3, #4]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004664:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800466e:	d111      	bne.n	8004694 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004678:	d004      	beq.n	8004684 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004682:	d107      	bne.n	8004694 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004692:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004698:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800469c:	d10f      	bne.n	80046be <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046ac:	601a      	str	r2, [r3, #0]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2201      	movs	r2, #1
 80046c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e00f      	b.n	80046f2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	689a      	ldr	r2, [r3, #8]
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	4013      	ands	r3, r2
 80046dc:	68ba      	ldr	r2, [r7, #8]
 80046de:	429a      	cmp	r2, r3
 80046e0:	bf0c      	ite	eq
 80046e2:	2301      	moveq	r3, #1
 80046e4:	2300      	movne	r3, #0
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	461a      	mov	r2, r3
 80046ea:	79fb      	ldrb	r3, [r7, #7]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d1a3      	bne.n	8004638 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3710      	adds	r7, #16
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b086      	sub	sp, #24
 80046fe:	af02      	add	r7, sp, #8
 8004700:	60f8      	str	r0, [r7, #12]
 8004702:	60b9      	str	r1, [r7, #8]
 8004704:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	9300      	str	r3, [sp, #0]
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	2200      	movs	r2, #0
 800470e:	2180      	movs	r1, #128	; 0x80
 8004710:	68f8      	ldr	r0, [r7, #12]
 8004712:	f7ff ff88 	bl	8004626 <SPI_WaitFlagStateUntilTimeout>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d007      	beq.n	800472c <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004720:	f043 0220 	orr.w	r2, r3, #32
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e000      	b.n	800472e <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3710      	adds	r7, #16
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
	...

08004738 <__errno>:
 8004738:	4b01      	ldr	r3, [pc, #4]	; (8004740 <__errno+0x8>)
 800473a:	6818      	ldr	r0, [r3, #0]
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	200000a0 	.word	0x200000a0

08004744 <__libc_init_array>:
 8004744:	b570      	push	{r4, r5, r6, lr}
 8004746:	2500      	movs	r5, #0
 8004748:	4e0c      	ldr	r6, [pc, #48]	; (800477c <__libc_init_array+0x38>)
 800474a:	4c0d      	ldr	r4, [pc, #52]	; (8004780 <__libc_init_array+0x3c>)
 800474c:	1ba4      	subs	r4, r4, r6
 800474e:	10a4      	asrs	r4, r4, #2
 8004750:	42a5      	cmp	r5, r4
 8004752:	d109      	bne.n	8004768 <__libc_init_array+0x24>
 8004754:	f001 fffc 	bl	8006750 <_init>
 8004758:	2500      	movs	r5, #0
 800475a:	4e0a      	ldr	r6, [pc, #40]	; (8004784 <__libc_init_array+0x40>)
 800475c:	4c0a      	ldr	r4, [pc, #40]	; (8004788 <__libc_init_array+0x44>)
 800475e:	1ba4      	subs	r4, r4, r6
 8004760:	10a4      	asrs	r4, r4, #2
 8004762:	42a5      	cmp	r5, r4
 8004764:	d105      	bne.n	8004772 <__libc_init_array+0x2e>
 8004766:	bd70      	pop	{r4, r5, r6, pc}
 8004768:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800476c:	4798      	blx	r3
 800476e:	3501      	adds	r5, #1
 8004770:	e7ee      	b.n	8004750 <__libc_init_array+0xc>
 8004772:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004776:	4798      	blx	r3
 8004778:	3501      	adds	r5, #1
 800477a:	e7f2      	b.n	8004762 <__libc_init_array+0x1e>
 800477c:	08009630 	.word	0x08009630
 8004780:	08009630 	.word	0x08009630
 8004784:	08009630 	.word	0x08009630
 8004788:	08009634 	.word	0x08009634

0800478c <memcpy>:
 800478c:	b510      	push	{r4, lr}
 800478e:	1e43      	subs	r3, r0, #1
 8004790:	440a      	add	r2, r1
 8004792:	4291      	cmp	r1, r2
 8004794:	d100      	bne.n	8004798 <memcpy+0xc>
 8004796:	bd10      	pop	{r4, pc}
 8004798:	f811 4b01 	ldrb.w	r4, [r1], #1
 800479c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047a0:	e7f7      	b.n	8004792 <memcpy+0x6>

080047a2 <memset>:
 80047a2:	4603      	mov	r3, r0
 80047a4:	4402      	add	r2, r0
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d100      	bne.n	80047ac <memset+0xa>
 80047aa:	4770      	bx	lr
 80047ac:	f803 1b01 	strb.w	r1, [r3], #1
 80047b0:	e7f9      	b.n	80047a6 <memset+0x4>
	...

080047b4 <iprintf>:
 80047b4:	b40f      	push	{r0, r1, r2, r3}
 80047b6:	4b0a      	ldr	r3, [pc, #40]	; (80047e0 <iprintf+0x2c>)
 80047b8:	b513      	push	{r0, r1, r4, lr}
 80047ba:	681c      	ldr	r4, [r3, #0]
 80047bc:	b124      	cbz	r4, 80047c8 <iprintf+0x14>
 80047be:	69a3      	ldr	r3, [r4, #24]
 80047c0:	b913      	cbnz	r3, 80047c8 <iprintf+0x14>
 80047c2:	4620      	mov	r0, r4
 80047c4:	f000 fa22 	bl	8004c0c <__sinit>
 80047c8:	ab05      	add	r3, sp, #20
 80047ca:	9a04      	ldr	r2, [sp, #16]
 80047cc:	68a1      	ldr	r1, [r4, #8]
 80047ce:	4620      	mov	r0, r4
 80047d0:	9301      	str	r3, [sp, #4]
 80047d2:	f000 fbd7 	bl	8004f84 <_vfiprintf_r>
 80047d6:	b002      	add	sp, #8
 80047d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047dc:	b004      	add	sp, #16
 80047de:	4770      	bx	lr
 80047e0:	200000a0 	.word	0x200000a0

080047e4 <_puts_r>:
 80047e4:	b570      	push	{r4, r5, r6, lr}
 80047e6:	460e      	mov	r6, r1
 80047e8:	4605      	mov	r5, r0
 80047ea:	b118      	cbz	r0, 80047f4 <_puts_r+0x10>
 80047ec:	6983      	ldr	r3, [r0, #24]
 80047ee:	b90b      	cbnz	r3, 80047f4 <_puts_r+0x10>
 80047f0:	f000 fa0c 	bl	8004c0c <__sinit>
 80047f4:	69ab      	ldr	r3, [r5, #24]
 80047f6:	68ac      	ldr	r4, [r5, #8]
 80047f8:	b913      	cbnz	r3, 8004800 <_puts_r+0x1c>
 80047fa:	4628      	mov	r0, r5
 80047fc:	f000 fa06 	bl	8004c0c <__sinit>
 8004800:	4b23      	ldr	r3, [pc, #140]	; (8004890 <_puts_r+0xac>)
 8004802:	429c      	cmp	r4, r3
 8004804:	d117      	bne.n	8004836 <_puts_r+0x52>
 8004806:	686c      	ldr	r4, [r5, #4]
 8004808:	89a3      	ldrh	r3, [r4, #12]
 800480a:	071b      	lsls	r3, r3, #28
 800480c:	d51d      	bpl.n	800484a <_puts_r+0x66>
 800480e:	6923      	ldr	r3, [r4, #16]
 8004810:	b1db      	cbz	r3, 800484a <_puts_r+0x66>
 8004812:	3e01      	subs	r6, #1
 8004814:	68a3      	ldr	r3, [r4, #8]
 8004816:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800481a:	3b01      	subs	r3, #1
 800481c:	60a3      	str	r3, [r4, #8]
 800481e:	b9e9      	cbnz	r1, 800485c <_puts_r+0x78>
 8004820:	2b00      	cmp	r3, #0
 8004822:	da2e      	bge.n	8004882 <_puts_r+0x9e>
 8004824:	4622      	mov	r2, r4
 8004826:	210a      	movs	r1, #10
 8004828:	4628      	mov	r0, r5
 800482a:	f000 f83f 	bl	80048ac <__swbuf_r>
 800482e:	3001      	adds	r0, #1
 8004830:	d011      	beq.n	8004856 <_puts_r+0x72>
 8004832:	200a      	movs	r0, #10
 8004834:	e011      	b.n	800485a <_puts_r+0x76>
 8004836:	4b17      	ldr	r3, [pc, #92]	; (8004894 <_puts_r+0xb0>)
 8004838:	429c      	cmp	r4, r3
 800483a:	d101      	bne.n	8004840 <_puts_r+0x5c>
 800483c:	68ac      	ldr	r4, [r5, #8]
 800483e:	e7e3      	b.n	8004808 <_puts_r+0x24>
 8004840:	4b15      	ldr	r3, [pc, #84]	; (8004898 <_puts_r+0xb4>)
 8004842:	429c      	cmp	r4, r3
 8004844:	bf08      	it	eq
 8004846:	68ec      	ldreq	r4, [r5, #12]
 8004848:	e7de      	b.n	8004808 <_puts_r+0x24>
 800484a:	4621      	mov	r1, r4
 800484c:	4628      	mov	r0, r5
 800484e:	f000 f87f 	bl	8004950 <__swsetup_r>
 8004852:	2800      	cmp	r0, #0
 8004854:	d0dd      	beq.n	8004812 <_puts_r+0x2e>
 8004856:	f04f 30ff 	mov.w	r0, #4294967295
 800485a:	bd70      	pop	{r4, r5, r6, pc}
 800485c:	2b00      	cmp	r3, #0
 800485e:	da04      	bge.n	800486a <_puts_r+0x86>
 8004860:	69a2      	ldr	r2, [r4, #24]
 8004862:	429a      	cmp	r2, r3
 8004864:	dc06      	bgt.n	8004874 <_puts_r+0x90>
 8004866:	290a      	cmp	r1, #10
 8004868:	d004      	beq.n	8004874 <_puts_r+0x90>
 800486a:	6823      	ldr	r3, [r4, #0]
 800486c:	1c5a      	adds	r2, r3, #1
 800486e:	6022      	str	r2, [r4, #0]
 8004870:	7019      	strb	r1, [r3, #0]
 8004872:	e7cf      	b.n	8004814 <_puts_r+0x30>
 8004874:	4622      	mov	r2, r4
 8004876:	4628      	mov	r0, r5
 8004878:	f000 f818 	bl	80048ac <__swbuf_r>
 800487c:	3001      	adds	r0, #1
 800487e:	d1c9      	bne.n	8004814 <_puts_r+0x30>
 8004880:	e7e9      	b.n	8004856 <_puts_r+0x72>
 8004882:	200a      	movs	r0, #10
 8004884:	6823      	ldr	r3, [r4, #0]
 8004886:	1c5a      	adds	r2, r3, #1
 8004888:	6022      	str	r2, [r4, #0]
 800488a:	7018      	strb	r0, [r3, #0]
 800488c:	e7e5      	b.n	800485a <_puts_r+0x76>
 800488e:	bf00      	nop
 8004890:	08009570 	.word	0x08009570
 8004894:	08009590 	.word	0x08009590
 8004898:	08009550 	.word	0x08009550

0800489c <puts>:
 800489c:	4b02      	ldr	r3, [pc, #8]	; (80048a8 <puts+0xc>)
 800489e:	4601      	mov	r1, r0
 80048a0:	6818      	ldr	r0, [r3, #0]
 80048a2:	f7ff bf9f 	b.w	80047e4 <_puts_r>
 80048a6:	bf00      	nop
 80048a8:	200000a0 	.word	0x200000a0

080048ac <__swbuf_r>:
 80048ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ae:	460e      	mov	r6, r1
 80048b0:	4614      	mov	r4, r2
 80048b2:	4605      	mov	r5, r0
 80048b4:	b118      	cbz	r0, 80048be <__swbuf_r+0x12>
 80048b6:	6983      	ldr	r3, [r0, #24]
 80048b8:	b90b      	cbnz	r3, 80048be <__swbuf_r+0x12>
 80048ba:	f000 f9a7 	bl	8004c0c <__sinit>
 80048be:	4b21      	ldr	r3, [pc, #132]	; (8004944 <__swbuf_r+0x98>)
 80048c0:	429c      	cmp	r4, r3
 80048c2:	d12a      	bne.n	800491a <__swbuf_r+0x6e>
 80048c4:	686c      	ldr	r4, [r5, #4]
 80048c6:	69a3      	ldr	r3, [r4, #24]
 80048c8:	60a3      	str	r3, [r4, #8]
 80048ca:	89a3      	ldrh	r3, [r4, #12]
 80048cc:	071a      	lsls	r2, r3, #28
 80048ce:	d52e      	bpl.n	800492e <__swbuf_r+0x82>
 80048d0:	6923      	ldr	r3, [r4, #16]
 80048d2:	b363      	cbz	r3, 800492e <__swbuf_r+0x82>
 80048d4:	6923      	ldr	r3, [r4, #16]
 80048d6:	6820      	ldr	r0, [r4, #0]
 80048d8:	b2f6      	uxtb	r6, r6
 80048da:	1ac0      	subs	r0, r0, r3
 80048dc:	6963      	ldr	r3, [r4, #20]
 80048de:	4637      	mov	r7, r6
 80048e0:	4283      	cmp	r3, r0
 80048e2:	dc04      	bgt.n	80048ee <__swbuf_r+0x42>
 80048e4:	4621      	mov	r1, r4
 80048e6:	4628      	mov	r0, r5
 80048e8:	f000 f926 	bl	8004b38 <_fflush_r>
 80048ec:	bb28      	cbnz	r0, 800493a <__swbuf_r+0x8e>
 80048ee:	68a3      	ldr	r3, [r4, #8]
 80048f0:	3001      	adds	r0, #1
 80048f2:	3b01      	subs	r3, #1
 80048f4:	60a3      	str	r3, [r4, #8]
 80048f6:	6823      	ldr	r3, [r4, #0]
 80048f8:	1c5a      	adds	r2, r3, #1
 80048fa:	6022      	str	r2, [r4, #0]
 80048fc:	701e      	strb	r6, [r3, #0]
 80048fe:	6963      	ldr	r3, [r4, #20]
 8004900:	4283      	cmp	r3, r0
 8004902:	d004      	beq.n	800490e <__swbuf_r+0x62>
 8004904:	89a3      	ldrh	r3, [r4, #12]
 8004906:	07db      	lsls	r3, r3, #31
 8004908:	d519      	bpl.n	800493e <__swbuf_r+0x92>
 800490a:	2e0a      	cmp	r6, #10
 800490c:	d117      	bne.n	800493e <__swbuf_r+0x92>
 800490e:	4621      	mov	r1, r4
 8004910:	4628      	mov	r0, r5
 8004912:	f000 f911 	bl	8004b38 <_fflush_r>
 8004916:	b190      	cbz	r0, 800493e <__swbuf_r+0x92>
 8004918:	e00f      	b.n	800493a <__swbuf_r+0x8e>
 800491a:	4b0b      	ldr	r3, [pc, #44]	; (8004948 <__swbuf_r+0x9c>)
 800491c:	429c      	cmp	r4, r3
 800491e:	d101      	bne.n	8004924 <__swbuf_r+0x78>
 8004920:	68ac      	ldr	r4, [r5, #8]
 8004922:	e7d0      	b.n	80048c6 <__swbuf_r+0x1a>
 8004924:	4b09      	ldr	r3, [pc, #36]	; (800494c <__swbuf_r+0xa0>)
 8004926:	429c      	cmp	r4, r3
 8004928:	bf08      	it	eq
 800492a:	68ec      	ldreq	r4, [r5, #12]
 800492c:	e7cb      	b.n	80048c6 <__swbuf_r+0x1a>
 800492e:	4621      	mov	r1, r4
 8004930:	4628      	mov	r0, r5
 8004932:	f000 f80d 	bl	8004950 <__swsetup_r>
 8004936:	2800      	cmp	r0, #0
 8004938:	d0cc      	beq.n	80048d4 <__swbuf_r+0x28>
 800493a:	f04f 37ff 	mov.w	r7, #4294967295
 800493e:	4638      	mov	r0, r7
 8004940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004942:	bf00      	nop
 8004944:	08009570 	.word	0x08009570
 8004948:	08009590 	.word	0x08009590
 800494c:	08009550 	.word	0x08009550

08004950 <__swsetup_r>:
 8004950:	4b32      	ldr	r3, [pc, #200]	; (8004a1c <__swsetup_r+0xcc>)
 8004952:	b570      	push	{r4, r5, r6, lr}
 8004954:	681d      	ldr	r5, [r3, #0]
 8004956:	4606      	mov	r6, r0
 8004958:	460c      	mov	r4, r1
 800495a:	b125      	cbz	r5, 8004966 <__swsetup_r+0x16>
 800495c:	69ab      	ldr	r3, [r5, #24]
 800495e:	b913      	cbnz	r3, 8004966 <__swsetup_r+0x16>
 8004960:	4628      	mov	r0, r5
 8004962:	f000 f953 	bl	8004c0c <__sinit>
 8004966:	4b2e      	ldr	r3, [pc, #184]	; (8004a20 <__swsetup_r+0xd0>)
 8004968:	429c      	cmp	r4, r3
 800496a:	d10f      	bne.n	800498c <__swsetup_r+0x3c>
 800496c:	686c      	ldr	r4, [r5, #4]
 800496e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004972:	b29a      	uxth	r2, r3
 8004974:	0715      	lsls	r5, r2, #28
 8004976:	d42c      	bmi.n	80049d2 <__swsetup_r+0x82>
 8004978:	06d0      	lsls	r0, r2, #27
 800497a:	d411      	bmi.n	80049a0 <__swsetup_r+0x50>
 800497c:	2209      	movs	r2, #9
 800497e:	6032      	str	r2, [r6, #0]
 8004980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004984:	81a3      	strh	r3, [r4, #12]
 8004986:	f04f 30ff 	mov.w	r0, #4294967295
 800498a:	e03e      	b.n	8004a0a <__swsetup_r+0xba>
 800498c:	4b25      	ldr	r3, [pc, #148]	; (8004a24 <__swsetup_r+0xd4>)
 800498e:	429c      	cmp	r4, r3
 8004990:	d101      	bne.n	8004996 <__swsetup_r+0x46>
 8004992:	68ac      	ldr	r4, [r5, #8]
 8004994:	e7eb      	b.n	800496e <__swsetup_r+0x1e>
 8004996:	4b24      	ldr	r3, [pc, #144]	; (8004a28 <__swsetup_r+0xd8>)
 8004998:	429c      	cmp	r4, r3
 800499a:	bf08      	it	eq
 800499c:	68ec      	ldreq	r4, [r5, #12]
 800499e:	e7e6      	b.n	800496e <__swsetup_r+0x1e>
 80049a0:	0751      	lsls	r1, r2, #29
 80049a2:	d512      	bpl.n	80049ca <__swsetup_r+0x7a>
 80049a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80049a6:	b141      	cbz	r1, 80049ba <__swsetup_r+0x6a>
 80049a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80049ac:	4299      	cmp	r1, r3
 80049ae:	d002      	beq.n	80049b6 <__swsetup_r+0x66>
 80049b0:	4630      	mov	r0, r6
 80049b2:	f000 fa19 	bl	8004de8 <_free_r>
 80049b6:	2300      	movs	r3, #0
 80049b8:	6363      	str	r3, [r4, #52]	; 0x34
 80049ba:	89a3      	ldrh	r3, [r4, #12]
 80049bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80049c0:	81a3      	strh	r3, [r4, #12]
 80049c2:	2300      	movs	r3, #0
 80049c4:	6063      	str	r3, [r4, #4]
 80049c6:	6923      	ldr	r3, [r4, #16]
 80049c8:	6023      	str	r3, [r4, #0]
 80049ca:	89a3      	ldrh	r3, [r4, #12]
 80049cc:	f043 0308 	orr.w	r3, r3, #8
 80049d0:	81a3      	strh	r3, [r4, #12]
 80049d2:	6923      	ldr	r3, [r4, #16]
 80049d4:	b94b      	cbnz	r3, 80049ea <__swsetup_r+0x9a>
 80049d6:	89a3      	ldrh	r3, [r4, #12]
 80049d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80049dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049e0:	d003      	beq.n	80049ea <__swsetup_r+0x9a>
 80049e2:	4621      	mov	r1, r4
 80049e4:	4630      	mov	r0, r6
 80049e6:	f000 f9bf 	bl	8004d68 <__smakebuf_r>
 80049ea:	89a2      	ldrh	r2, [r4, #12]
 80049ec:	f012 0301 	ands.w	r3, r2, #1
 80049f0:	d00c      	beq.n	8004a0c <__swsetup_r+0xbc>
 80049f2:	2300      	movs	r3, #0
 80049f4:	60a3      	str	r3, [r4, #8]
 80049f6:	6963      	ldr	r3, [r4, #20]
 80049f8:	425b      	negs	r3, r3
 80049fa:	61a3      	str	r3, [r4, #24]
 80049fc:	6923      	ldr	r3, [r4, #16]
 80049fe:	b953      	cbnz	r3, 8004a16 <__swsetup_r+0xc6>
 8004a00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a04:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004a08:	d1ba      	bne.n	8004980 <__swsetup_r+0x30>
 8004a0a:	bd70      	pop	{r4, r5, r6, pc}
 8004a0c:	0792      	lsls	r2, r2, #30
 8004a0e:	bf58      	it	pl
 8004a10:	6963      	ldrpl	r3, [r4, #20]
 8004a12:	60a3      	str	r3, [r4, #8]
 8004a14:	e7f2      	b.n	80049fc <__swsetup_r+0xac>
 8004a16:	2000      	movs	r0, #0
 8004a18:	e7f7      	b.n	8004a0a <__swsetup_r+0xba>
 8004a1a:	bf00      	nop
 8004a1c:	200000a0 	.word	0x200000a0
 8004a20:	08009570 	.word	0x08009570
 8004a24:	08009590 	.word	0x08009590
 8004a28:	08009550 	.word	0x08009550

08004a2c <__sflush_r>:
 8004a2c:	898a      	ldrh	r2, [r1, #12]
 8004a2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a32:	4605      	mov	r5, r0
 8004a34:	0710      	lsls	r0, r2, #28
 8004a36:	460c      	mov	r4, r1
 8004a38:	d458      	bmi.n	8004aec <__sflush_r+0xc0>
 8004a3a:	684b      	ldr	r3, [r1, #4]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	dc05      	bgt.n	8004a4c <__sflush_r+0x20>
 8004a40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	dc02      	bgt.n	8004a4c <__sflush_r+0x20>
 8004a46:	2000      	movs	r0, #0
 8004a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a4e:	2e00      	cmp	r6, #0
 8004a50:	d0f9      	beq.n	8004a46 <__sflush_r+0x1a>
 8004a52:	2300      	movs	r3, #0
 8004a54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004a58:	682f      	ldr	r7, [r5, #0]
 8004a5a:	6a21      	ldr	r1, [r4, #32]
 8004a5c:	602b      	str	r3, [r5, #0]
 8004a5e:	d032      	beq.n	8004ac6 <__sflush_r+0x9a>
 8004a60:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004a62:	89a3      	ldrh	r3, [r4, #12]
 8004a64:	075a      	lsls	r2, r3, #29
 8004a66:	d505      	bpl.n	8004a74 <__sflush_r+0x48>
 8004a68:	6863      	ldr	r3, [r4, #4]
 8004a6a:	1ac0      	subs	r0, r0, r3
 8004a6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004a6e:	b10b      	cbz	r3, 8004a74 <__sflush_r+0x48>
 8004a70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a72:	1ac0      	subs	r0, r0, r3
 8004a74:	2300      	movs	r3, #0
 8004a76:	4602      	mov	r2, r0
 8004a78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a7a:	6a21      	ldr	r1, [r4, #32]
 8004a7c:	4628      	mov	r0, r5
 8004a7e:	47b0      	blx	r6
 8004a80:	1c43      	adds	r3, r0, #1
 8004a82:	89a3      	ldrh	r3, [r4, #12]
 8004a84:	d106      	bne.n	8004a94 <__sflush_r+0x68>
 8004a86:	6829      	ldr	r1, [r5, #0]
 8004a88:	291d      	cmp	r1, #29
 8004a8a:	d848      	bhi.n	8004b1e <__sflush_r+0xf2>
 8004a8c:	4a29      	ldr	r2, [pc, #164]	; (8004b34 <__sflush_r+0x108>)
 8004a8e:	40ca      	lsrs	r2, r1
 8004a90:	07d6      	lsls	r6, r2, #31
 8004a92:	d544      	bpl.n	8004b1e <__sflush_r+0xf2>
 8004a94:	2200      	movs	r2, #0
 8004a96:	6062      	str	r2, [r4, #4]
 8004a98:	6922      	ldr	r2, [r4, #16]
 8004a9a:	04d9      	lsls	r1, r3, #19
 8004a9c:	6022      	str	r2, [r4, #0]
 8004a9e:	d504      	bpl.n	8004aaa <__sflush_r+0x7e>
 8004aa0:	1c42      	adds	r2, r0, #1
 8004aa2:	d101      	bne.n	8004aa8 <__sflush_r+0x7c>
 8004aa4:	682b      	ldr	r3, [r5, #0]
 8004aa6:	b903      	cbnz	r3, 8004aaa <__sflush_r+0x7e>
 8004aa8:	6560      	str	r0, [r4, #84]	; 0x54
 8004aaa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004aac:	602f      	str	r7, [r5, #0]
 8004aae:	2900      	cmp	r1, #0
 8004ab0:	d0c9      	beq.n	8004a46 <__sflush_r+0x1a>
 8004ab2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ab6:	4299      	cmp	r1, r3
 8004ab8:	d002      	beq.n	8004ac0 <__sflush_r+0x94>
 8004aba:	4628      	mov	r0, r5
 8004abc:	f000 f994 	bl	8004de8 <_free_r>
 8004ac0:	2000      	movs	r0, #0
 8004ac2:	6360      	str	r0, [r4, #52]	; 0x34
 8004ac4:	e7c0      	b.n	8004a48 <__sflush_r+0x1c>
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	4628      	mov	r0, r5
 8004aca:	47b0      	blx	r6
 8004acc:	1c41      	adds	r1, r0, #1
 8004ace:	d1c8      	bne.n	8004a62 <__sflush_r+0x36>
 8004ad0:	682b      	ldr	r3, [r5, #0]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d0c5      	beq.n	8004a62 <__sflush_r+0x36>
 8004ad6:	2b1d      	cmp	r3, #29
 8004ad8:	d001      	beq.n	8004ade <__sflush_r+0xb2>
 8004ada:	2b16      	cmp	r3, #22
 8004adc:	d101      	bne.n	8004ae2 <__sflush_r+0xb6>
 8004ade:	602f      	str	r7, [r5, #0]
 8004ae0:	e7b1      	b.n	8004a46 <__sflush_r+0x1a>
 8004ae2:	89a3      	ldrh	r3, [r4, #12]
 8004ae4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ae8:	81a3      	strh	r3, [r4, #12]
 8004aea:	e7ad      	b.n	8004a48 <__sflush_r+0x1c>
 8004aec:	690f      	ldr	r7, [r1, #16]
 8004aee:	2f00      	cmp	r7, #0
 8004af0:	d0a9      	beq.n	8004a46 <__sflush_r+0x1a>
 8004af2:	0793      	lsls	r3, r2, #30
 8004af4:	bf18      	it	ne
 8004af6:	2300      	movne	r3, #0
 8004af8:	680e      	ldr	r6, [r1, #0]
 8004afa:	bf08      	it	eq
 8004afc:	694b      	ldreq	r3, [r1, #20]
 8004afe:	eba6 0807 	sub.w	r8, r6, r7
 8004b02:	600f      	str	r7, [r1, #0]
 8004b04:	608b      	str	r3, [r1, #8]
 8004b06:	f1b8 0f00 	cmp.w	r8, #0
 8004b0a:	dd9c      	ble.n	8004a46 <__sflush_r+0x1a>
 8004b0c:	4643      	mov	r3, r8
 8004b0e:	463a      	mov	r2, r7
 8004b10:	6a21      	ldr	r1, [r4, #32]
 8004b12:	4628      	mov	r0, r5
 8004b14:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004b16:	47b0      	blx	r6
 8004b18:	2800      	cmp	r0, #0
 8004b1a:	dc06      	bgt.n	8004b2a <__sflush_r+0xfe>
 8004b1c:	89a3      	ldrh	r3, [r4, #12]
 8004b1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b22:	81a3      	strh	r3, [r4, #12]
 8004b24:	f04f 30ff 	mov.w	r0, #4294967295
 8004b28:	e78e      	b.n	8004a48 <__sflush_r+0x1c>
 8004b2a:	4407      	add	r7, r0
 8004b2c:	eba8 0800 	sub.w	r8, r8, r0
 8004b30:	e7e9      	b.n	8004b06 <__sflush_r+0xda>
 8004b32:	bf00      	nop
 8004b34:	20400001 	.word	0x20400001

08004b38 <_fflush_r>:
 8004b38:	b538      	push	{r3, r4, r5, lr}
 8004b3a:	690b      	ldr	r3, [r1, #16]
 8004b3c:	4605      	mov	r5, r0
 8004b3e:	460c      	mov	r4, r1
 8004b40:	b1db      	cbz	r3, 8004b7a <_fflush_r+0x42>
 8004b42:	b118      	cbz	r0, 8004b4c <_fflush_r+0x14>
 8004b44:	6983      	ldr	r3, [r0, #24]
 8004b46:	b90b      	cbnz	r3, 8004b4c <_fflush_r+0x14>
 8004b48:	f000 f860 	bl	8004c0c <__sinit>
 8004b4c:	4b0c      	ldr	r3, [pc, #48]	; (8004b80 <_fflush_r+0x48>)
 8004b4e:	429c      	cmp	r4, r3
 8004b50:	d109      	bne.n	8004b66 <_fflush_r+0x2e>
 8004b52:	686c      	ldr	r4, [r5, #4]
 8004b54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b58:	b17b      	cbz	r3, 8004b7a <_fflush_r+0x42>
 8004b5a:	4621      	mov	r1, r4
 8004b5c:	4628      	mov	r0, r5
 8004b5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b62:	f7ff bf63 	b.w	8004a2c <__sflush_r>
 8004b66:	4b07      	ldr	r3, [pc, #28]	; (8004b84 <_fflush_r+0x4c>)
 8004b68:	429c      	cmp	r4, r3
 8004b6a:	d101      	bne.n	8004b70 <_fflush_r+0x38>
 8004b6c:	68ac      	ldr	r4, [r5, #8]
 8004b6e:	e7f1      	b.n	8004b54 <_fflush_r+0x1c>
 8004b70:	4b05      	ldr	r3, [pc, #20]	; (8004b88 <_fflush_r+0x50>)
 8004b72:	429c      	cmp	r4, r3
 8004b74:	bf08      	it	eq
 8004b76:	68ec      	ldreq	r4, [r5, #12]
 8004b78:	e7ec      	b.n	8004b54 <_fflush_r+0x1c>
 8004b7a:	2000      	movs	r0, #0
 8004b7c:	bd38      	pop	{r3, r4, r5, pc}
 8004b7e:	bf00      	nop
 8004b80:	08009570 	.word	0x08009570
 8004b84:	08009590 	.word	0x08009590
 8004b88:	08009550 	.word	0x08009550

08004b8c <std>:
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	b510      	push	{r4, lr}
 8004b90:	4604      	mov	r4, r0
 8004b92:	e9c0 3300 	strd	r3, r3, [r0]
 8004b96:	6083      	str	r3, [r0, #8]
 8004b98:	8181      	strh	r1, [r0, #12]
 8004b9a:	6643      	str	r3, [r0, #100]	; 0x64
 8004b9c:	81c2      	strh	r2, [r0, #14]
 8004b9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004ba2:	6183      	str	r3, [r0, #24]
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	2208      	movs	r2, #8
 8004ba8:	305c      	adds	r0, #92	; 0x5c
 8004baa:	f7ff fdfa 	bl	80047a2 <memset>
 8004bae:	4b05      	ldr	r3, [pc, #20]	; (8004bc4 <std+0x38>)
 8004bb0:	6224      	str	r4, [r4, #32]
 8004bb2:	6263      	str	r3, [r4, #36]	; 0x24
 8004bb4:	4b04      	ldr	r3, [pc, #16]	; (8004bc8 <std+0x3c>)
 8004bb6:	62a3      	str	r3, [r4, #40]	; 0x28
 8004bb8:	4b04      	ldr	r3, [pc, #16]	; (8004bcc <std+0x40>)
 8004bba:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004bbc:	4b04      	ldr	r3, [pc, #16]	; (8004bd0 <std+0x44>)
 8004bbe:	6323      	str	r3, [r4, #48]	; 0x30
 8004bc0:	bd10      	pop	{r4, pc}
 8004bc2:	bf00      	nop
 8004bc4:	080054e1 	.word	0x080054e1
 8004bc8:	08005503 	.word	0x08005503
 8004bcc:	0800553b 	.word	0x0800553b
 8004bd0:	0800555f 	.word	0x0800555f

08004bd4 <_cleanup_r>:
 8004bd4:	4901      	ldr	r1, [pc, #4]	; (8004bdc <_cleanup_r+0x8>)
 8004bd6:	f000 b885 	b.w	8004ce4 <_fwalk_reent>
 8004bda:	bf00      	nop
 8004bdc:	08004b39 	.word	0x08004b39

08004be0 <__sfmoreglue>:
 8004be0:	b570      	push	{r4, r5, r6, lr}
 8004be2:	2568      	movs	r5, #104	; 0x68
 8004be4:	1e4a      	subs	r2, r1, #1
 8004be6:	4355      	muls	r5, r2
 8004be8:	460e      	mov	r6, r1
 8004bea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004bee:	f000 f947 	bl	8004e80 <_malloc_r>
 8004bf2:	4604      	mov	r4, r0
 8004bf4:	b140      	cbz	r0, 8004c08 <__sfmoreglue+0x28>
 8004bf6:	2100      	movs	r1, #0
 8004bf8:	e9c0 1600 	strd	r1, r6, [r0]
 8004bfc:	300c      	adds	r0, #12
 8004bfe:	60a0      	str	r0, [r4, #8]
 8004c00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004c04:	f7ff fdcd 	bl	80047a2 <memset>
 8004c08:	4620      	mov	r0, r4
 8004c0a:	bd70      	pop	{r4, r5, r6, pc}

08004c0c <__sinit>:
 8004c0c:	6983      	ldr	r3, [r0, #24]
 8004c0e:	b510      	push	{r4, lr}
 8004c10:	4604      	mov	r4, r0
 8004c12:	bb33      	cbnz	r3, 8004c62 <__sinit+0x56>
 8004c14:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004c18:	6503      	str	r3, [r0, #80]	; 0x50
 8004c1a:	4b12      	ldr	r3, [pc, #72]	; (8004c64 <__sinit+0x58>)
 8004c1c:	4a12      	ldr	r2, [pc, #72]	; (8004c68 <__sinit+0x5c>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	6282      	str	r2, [r0, #40]	; 0x28
 8004c22:	4298      	cmp	r0, r3
 8004c24:	bf04      	itt	eq
 8004c26:	2301      	moveq	r3, #1
 8004c28:	6183      	streq	r3, [r0, #24]
 8004c2a:	f000 f81f 	bl	8004c6c <__sfp>
 8004c2e:	6060      	str	r0, [r4, #4]
 8004c30:	4620      	mov	r0, r4
 8004c32:	f000 f81b 	bl	8004c6c <__sfp>
 8004c36:	60a0      	str	r0, [r4, #8]
 8004c38:	4620      	mov	r0, r4
 8004c3a:	f000 f817 	bl	8004c6c <__sfp>
 8004c3e:	2200      	movs	r2, #0
 8004c40:	60e0      	str	r0, [r4, #12]
 8004c42:	2104      	movs	r1, #4
 8004c44:	6860      	ldr	r0, [r4, #4]
 8004c46:	f7ff ffa1 	bl	8004b8c <std>
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	2109      	movs	r1, #9
 8004c4e:	68a0      	ldr	r0, [r4, #8]
 8004c50:	f7ff ff9c 	bl	8004b8c <std>
 8004c54:	2202      	movs	r2, #2
 8004c56:	2112      	movs	r1, #18
 8004c58:	68e0      	ldr	r0, [r4, #12]
 8004c5a:	f7ff ff97 	bl	8004b8c <std>
 8004c5e:	2301      	movs	r3, #1
 8004c60:	61a3      	str	r3, [r4, #24]
 8004c62:	bd10      	pop	{r4, pc}
 8004c64:	0800954c 	.word	0x0800954c
 8004c68:	08004bd5 	.word	0x08004bd5

08004c6c <__sfp>:
 8004c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c6e:	4b1b      	ldr	r3, [pc, #108]	; (8004cdc <__sfp+0x70>)
 8004c70:	4607      	mov	r7, r0
 8004c72:	681e      	ldr	r6, [r3, #0]
 8004c74:	69b3      	ldr	r3, [r6, #24]
 8004c76:	b913      	cbnz	r3, 8004c7e <__sfp+0x12>
 8004c78:	4630      	mov	r0, r6
 8004c7a:	f7ff ffc7 	bl	8004c0c <__sinit>
 8004c7e:	3648      	adds	r6, #72	; 0x48
 8004c80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004c84:	3b01      	subs	r3, #1
 8004c86:	d503      	bpl.n	8004c90 <__sfp+0x24>
 8004c88:	6833      	ldr	r3, [r6, #0]
 8004c8a:	b133      	cbz	r3, 8004c9a <__sfp+0x2e>
 8004c8c:	6836      	ldr	r6, [r6, #0]
 8004c8e:	e7f7      	b.n	8004c80 <__sfp+0x14>
 8004c90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004c94:	b16d      	cbz	r5, 8004cb2 <__sfp+0x46>
 8004c96:	3468      	adds	r4, #104	; 0x68
 8004c98:	e7f4      	b.n	8004c84 <__sfp+0x18>
 8004c9a:	2104      	movs	r1, #4
 8004c9c:	4638      	mov	r0, r7
 8004c9e:	f7ff ff9f 	bl	8004be0 <__sfmoreglue>
 8004ca2:	6030      	str	r0, [r6, #0]
 8004ca4:	2800      	cmp	r0, #0
 8004ca6:	d1f1      	bne.n	8004c8c <__sfp+0x20>
 8004ca8:	230c      	movs	r3, #12
 8004caa:	4604      	mov	r4, r0
 8004cac:	603b      	str	r3, [r7, #0]
 8004cae:	4620      	mov	r0, r4
 8004cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cb2:	4b0b      	ldr	r3, [pc, #44]	; (8004ce0 <__sfp+0x74>)
 8004cb4:	6665      	str	r5, [r4, #100]	; 0x64
 8004cb6:	e9c4 5500 	strd	r5, r5, [r4]
 8004cba:	60a5      	str	r5, [r4, #8]
 8004cbc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004cc0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004cc4:	2208      	movs	r2, #8
 8004cc6:	4629      	mov	r1, r5
 8004cc8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004ccc:	f7ff fd69 	bl	80047a2 <memset>
 8004cd0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004cd4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004cd8:	e7e9      	b.n	8004cae <__sfp+0x42>
 8004cda:	bf00      	nop
 8004cdc:	0800954c 	.word	0x0800954c
 8004ce0:	ffff0001 	.word	0xffff0001

08004ce4 <_fwalk_reent>:
 8004ce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ce8:	4680      	mov	r8, r0
 8004cea:	4689      	mov	r9, r1
 8004cec:	2600      	movs	r6, #0
 8004cee:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004cf2:	b914      	cbnz	r4, 8004cfa <_fwalk_reent+0x16>
 8004cf4:	4630      	mov	r0, r6
 8004cf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cfa:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004cfe:	3f01      	subs	r7, #1
 8004d00:	d501      	bpl.n	8004d06 <_fwalk_reent+0x22>
 8004d02:	6824      	ldr	r4, [r4, #0]
 8004d04:	e7f5      	b.n	8004cf2 <_fwalk_reent+0xe>
 8004d06:	89ab      	ldrh	r3, [r5, #12]
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d907      	bls.n	8004d1c <_fwalk_reent+0x38>
 8004d0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d10:	3301      	adds	r3, #1
 8004d12:	d003      	beq.n	8004d1c <_fwalk_reent+0x38>
 8004d14:	4629      	mov	r1, r5
 8004d16:	4640      	mov	r0, r8
 8004d18:	47c8      	blx	r9
 8004d1a:	4306      	orrs	r6, r0
 8004d1c:	3568      	adds	r5, #104	; 0x68
 8004d1e:	e7ee      	b.n	8004cfe <_fwalk_reent+0x1a>

08004d20 <__swhatbuf_r>:
 8004d20:	b570      	push	{r4, r5, r6, lr}
 8004d22:	460e      	mov	r6, r1
 8004d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d28:	b096      	sub	sp, #88	; 0x58
 8004d2a:	2900      	cmp	r1, #0
 8004d2c:	4614      	mov	r4, r2
 8004d2e:	461d      	mov	r5, r3
 8004d30:	da07      	bge.n	8004d42 <__swhatbuf_r+0x22>
 8004d32:	2300      	movs	r3, #0
 8004d34:	602b      	str	r3, [r5, #0]
 8004d36:	89b3      	ldrh	r3, [r6, #12]
 8004d38:	061a      	lsls	r2, r3, #24
 8004d3a:	d410      	bmi.n	8004d5e <__swhatbuf_r+0x3e>
 8004d3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d40:	e00e      	b.n	8004d60 <__swhatbuf_r+0x40>
 8004d42:	466a      	mov	r2, sp
 8004d44:	f000 fc32 	bl	80055ac <_fstat_r>
 8004d48:	2800      	cmp	r0, #0
 8004d4a:	dbf2      	blt.n	8004d32 <__swhatbuf_r+0x12>
 8004d4c:	9a01      	ldr	r2, [sp, #4]
 8004d4e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004d52:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004d56:	425a      	negs	r2, r3
 8004d58:	415a      	adcs	r2, r3
 8004d5a:	602a      	str	r2, [r5, #0]
 8004d5c:	e7ee      	b.n	8004d3c <__swhatbuf_r+0x1c>
 8004d5e:	2340      	movs	r3, #64	; 0x40
 8004d60:	2000      	movs	r0, #0
 8004d62:	6023      	str	r3, [r4, #0]
 8004d64:	b016      	add	sp, #88	; 0x58
 8004d66:	bd70      	pop	{r4, r5, r6, pc}

08004d68 <__smakebuf_r>:
 8004d68:	898b      	ldrh	r3, [r1, #12]
 8004d6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004d6c:	079d      	lsls	r5, r3, #30
 8004d6e:	4606      	mov	r6, r0
 8004d70:	460c      	mov	r4, r1
 8004d72:	d507      	bpl.n	8004d84 <__smakebuf_r+0x1c>
 8004d74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004d78:	6023      	str	r3, [r4, #0]
 8004d7a:	6123      	str	r3, [r4, #16]
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	6163      	str	r3, [r4, #20]
 8004d80:	b002      	add	sp, #8
 8004d82:	bd70      	pop	{r4, r5, r6, pc}
 8004d84:	ab01      	add	r3, sp, #4
 8004d86:	466a      	mov	r2, sp
 8004d88:	f7ff ffca 	bl	8004d20 <__swhatbuf_r>
 8004d8c:	9900      	ldr	r1, [sp, #0]
 8004d8e:	4605      	mov	r5, r0
 8004d90:	4630      	mov	r0, r6
 8004d92:	f000 f875 	bl	8004e80 <_malloc_r>
 8004d96:	b948      	cbnz	r0, 8004dac <__smakebuf_r+0x44>
 8004d98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d9c:	059a      	lsls	r2, r3, #22
 8004d9e:	d4ef      	bmi.n	8004d80 <__smakebuf_r+0x18>
 8004da0:	f023 0303 	bic.w	r3, r3, #3
 8004da4:	f043 0302 	orr.w	r3, r3, #2
 8004da8:	81a3      	strh	r3, [r4, #12]
 8004daa:	e7e3      	b.n	8004d74 <__smakebuf_r+0xc>
 8004dac:	4b0d      	ldr	r3, [pc, #52]	; (8004de4 <__smakebuf_r+0x7c>)
 8004dae:	62b3      	str	r3, [r6, #40]	; 0x28
 8004db0:	89a3      	ldrh	r3, [r4, #12]
 8004db2:	6020      	str	r0, [r4, #0]
 8004db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004db8:	81a3      	strh	r3, [r4, #12]
 8004dba:	9b00      	ldr	r3, [sp, #0]
 8004dbc:	6120      	str	r0, [r4, #16]
 8004dbe:	6163      	str	r3, [r4, #20]
 8004dc0:	9b01      	ldr	r3, [sp, #4]
 8004dc2:	b15b      	cbz	r3, 8004ddc <__smakebuf_r+0x74>
 8004dc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004dc8:	4630      	mov	r0, r6
 8004dca:	f000 fc01 	bl	80055d0 <_isatty_r>
 8004dce:	b128      	cbz	r0, 8004ddc <__smakebuf_r+0x74>
 8004dd0:	89a3      	ldrh	r3, [r4, #12]
 8004dd2:	f023 0303 	bic.w	r3, r3, #3
 8004dd6:	f043 0301 	orr.w	r3, r3, #1
 8004dda:	81a3      	strh	r3, [r4, #12]
 8004ddc:	89a3      	ldrh	r3, [r4, #12]
 8004dde:	431d      	orrs	r5, r3
 8004de0:	81a5      	strh	r5, [r4, #12]
 8004de2:	e7cd      	b.n	8004d80 <__smakebuf_r+0x18>
 8004de4:	08004bd5 	.word	0x08004bd5

08004de8 <_free_r>:
 8004de8:	b538      	push	{r3, r4, r5, lr}
 8004dea:	4605      	mov	r5, r0
 8004dec:	2900      	cmp	r1, #0
 8004dee:	d043      	beq.n	8004e78 <_free_r+0x90>
 8004df0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004df4:	1f0c      	subs	r4, r1, #4
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	bfb8      	it	lt
 8004dfa:	18e4      	addlt	r4, r4, r3
 8004dfc:	f000 fc18 	bl	8005630 <__malloc_lock>
 8004e00:	4a1e      	ldr	r2, [pc, #120]	; (8004e7c <_free_r+0x94>)
 8004e02:	6813      	ldr	r3, [r2, #0]
 8004e04:	4610      	mov	r0, r2
 8004e06:	b933      	cbnz	r3, 8004e16 <_free_r+0x2e>
 8004e08:	6063      	str	r3, [r4, #4]
 8004e0a:	6014      	str	r4, [r2, #0]
 8004e0c:	4628      	mov	r0, r5
 8004e0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e12:	f000 bc0e 	b.w	8005632 <__malloc_unlock>
 8004e16:	42a3      	cmp	r3, r4
 8004e18:	d90b      	bls.n	8004e32 <_free_r+0x4a>
 8004e1a:	6821      	ldr	r1, [r4, #0]
 8004e1c:	1862      	adds	r2, r4, r1
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	bf01      	itttt	eq
 8004e22:	681a      	ldreq	r2, [r3, #0]
 8004e24:	685b      	ldreq	r3, [r3, #4]
 8004e26:	1852      	addeq	r2, r2, r1
 8004e28:	6022      	streq	r2, [r4, #0]
 8004e2a:	6063      	str	r3, [r4, #4]
 8004e2c:	6004      	str	r4, [r0, #0]
 8004e2e:	e7ed      	b.n	8004e0c <_free_r+0x24>
 8004e30:	4613      	mov	r3, r2
 8004e32:	685a      	ldr	r2, [r3, #4]
 8004e34:	b10a      	cbz	r2, 8004e3a <_free_r+0x52>
 8004e36:	42a2      	cmp	r2, r4
 8004e38:	d9fa      	bls.n	8004e30 <_free_r+0x48>
 8004e3a:	6819      	ldr	r1, [r3, #0]
 8004e3c:	1858      	adds	r0, r3, r1
 8004e3e:	42a0      	cmp	r0, r4
 8004e40:	d10b      	bne.n	8004e5a <_free_r+0x72>
 8004e42:	6820      	ldr	r0, [r4, #0]
 8004e44:	4401      	add	r1, r0
 8004e46:	1858      	adds	r0, r3, r1
 8004e48:	4282      	cmp	r2, r0
 8004e4a:	6019      	str	r1, [r3, #0]
 8004e4c:	d1de      	bne.n	8004e0c <_free_r+0x24>
 8004e4e:	6810      	ldr	r0, [r2, #0]
 8004e50:	6852      	ldr	r2, [r2, #4]
 8004e52:	4401      	add	r1, r0
 8004e54:	6019      	str	r1, [r3, #0]
 8004e56:	605a      	str	r2, [r3, #4]
 8004e58:	e7d8      	b.n	8004e0c <_free_r+0x24>
 8004e5a:	d902      	bls.n	8004e62 <_free_r+0x7a>
 8004e5c:	230c      	movs	r3, #12
 8004e5e:	602b      	str	r3, [r5, #0]
 8004e60:	e7d4      	b.n	8004e0c <_free_r+0x24>
 8004e62:	6820      	ldr	r0, [r4, #0]
 8004e64:	1821      	adds	r1, r4, r0
 8004e66:	428a      	cmp	r2, r1
 8004e68:	bf01      	itttt	eq
 8004e6a:	6811      	ldreq	r1, [r2, #0]
 8004e6c:	6852      	ldreq	r2, [r2, #4]
 8004e6e:	1809      	addeq	r1, r1, r0
 8004e70:	6021      	streq	r1, [r4, #0]
 8004e72:	6062      	str	r2, [r4, #4]
 8004e74:	605c      	str	r4, [r3, #4]
 8004e76:	e7c9      	b.n	8004e0c <_free_r+0x24>
 8004e78:	bd38      	pop	{r3, r4, r5, pc}
 8004e7a:	bf00      	nop
 8004e7c:	200001cc 	.word	0x200001cc

08004e80 <_malloc_r>:
 8004e80:	b570      	push	{r4, r5, r6, lr}
 8004e82:	1ccd      	adds	r5, r1, #3
 8004e84:	f025 0503 	bic.w	r5, r5, #3
 8004e88:	3508      	adds	r5, #8
 8004e8a:	2d0c      	cmp	r5, #12
 8004e8c:	bf38      	it	cc
 8004e8e:	250c      	movcc	r5, #12
 8004e90:	2d00      	cmp	r5, #0
 8004e92:	4606      	mov	r6, r0
 8004e94:	db01      	blt.n	8004e9a <_malloc_r+0x1a>
 8004e96:	42a9      	cmp	r1, r5
 8004e98:	d903      	bls.n	8004ea2 <_malloc_r+0x22>
 8004e9a:	230c      	movs	r3, #12
 8004e9c:	6033      	str	r3, [r6, #0]
 8004e9e:	2000      	movs	r0, #0
 8004ea0:	bd70      	pop	{r4, r5, r6, pc}
 8004ea2:	f000 fbc5 	bl	8005630 <__malloc_lock>
 8004ea6:	4a21      	ldr	r2, [pc, #132]	; (8004f2c <_malloc_r+0xac>)
 8004ea8:	6814      	ldr	r4, [r2, #0]
 8004eaa:	4621      	mov	r1, r4
 8004eac:	b991      	cbnz	r1, 8004ed4 <_malloc_r+0x54>
 8004eae:	4c20      	ldr	r4, [pc, #128]	; (8004f30 <_malloc_r+0xb0>)
 8004eb0:	6823      	ldr	r3, [r4, #0]
 8004eb2:	b91b      	cbnz	r3, 8004ebc <_malloc_r+0x3c>
 8004eb4:	4630      	mov	r0, r6
 8004eb6:	f000 fb03 	bl	80054c0 <_sbrk_r>
 8004eba:	6020      	str	r0, [r4, #0]
 8004ebc:	4629      	mov	r1, r5
 8004ebe:	4630      	mov	r0, r6
 8004ec0:	f000 fafe 	bl	80054c0 <_sbrk_r>
 8004ec4:	1c43      	adds	r3, r0, #1
 8004ec6:	d124      	bne.n	8004f12 <_malloc_r+0x92>
 8004ec8:	230c      	movs	r3, #12
 8004eca:	4630      	mov	r0, r6
 8004ecc:	6033      	str	r3, [r6, #0]
 8004ece:	f000 fbb0 	bl	8005632 <__malloc_unlock>
 8004ed2:	e7e4      	b.n	8004e9e <_malloc_r+0x1e>
 8004ed4:	680b      	ldr	r3, [r1, #0]
 8004ed6:	1b5b      	subs	r3, r3, r5
 8004ed8:	d418      	bmi.n	8004f0c <_malloc_r+0x8c>
 8004eda:	2b0b      	cmp	r3, #11
 8004edc:	d90f      	bls.n	8004efe <_malloc_r+0x7e>
 8004ede:	600b      	str	r3, [r1, #0]
 8004ee0:	18cc      	adds	r4, r1, r3
 8004ee2:	50cd      	str	r5, [r1, r3]
 8004ee4:	4630      	mov	r0, r6
 8004ee6:	f000 fba4 	bl	8005632 <__malloc_unlock>
 8004eea:	f104 000b 	add.w	r0, r4, #11
 8004eee:	1d23      	adds	r3, r4, #4
 8004ef0:	f020 0007 	bic.w	r0, r0, #7
 8004ef4:	1ac3      	subs	r3, r0, r3
 8004ef6:	d0d3      	beq.n	8004ea0 <_malloc_r+0x20>
 8004ef8:	425a      	negs	r2, r3
 8004efa:	50e2      	str	r2, [r4, r3]
 8004efc:	e7d0      	b.n	8004ea0 <_malloc_r+0x20>
 8004efe:	684b      	ldr	r3, [r1, #4]
 8004f00:	428c      	cmp	r4, r1
 8004f02:	bf16      	itet	ne
 8004f04:	6063      	strne	r3, [r4, #4]
 8004f06:	6013      	streq	r3, [r2, #0]
 8004f08:	460c      	movne	r4, r1
 8004f0a:	e7eb      	b.n	8004ee4 <_malloc_r+0x64>
 8004f0c:	460c      	mov	r4, r1
 8004f0e:	6849      	ldr	r1, [r1, #4]
 8004f10:	e7cc      	b.n	8004eac <_malloc_r+0x2c>
 8004f12:	1cc4      	adds	r4, r0, #3
 8004f14:	f024 0403 	bic.w	r4, r4, #3
 8004f18:	42a0      	cmp	r0, r4
 8004f1a:	d005      	beq.n	8004f28 <_malloc_r+0xa8>
 8004f1c:	1a21      	subs	r1, r4, r0
 8004f1e:	4630      	mov	r0, r6
 8004f20:	f000 face 	bl	80054c0 <_sbrk_r>
 8004f24:	3001      	adds	r0, #1
 8004f26:	d0cf      	beq.n	8004ec8 <_malloc_r+0x48>
 8004f28:	6025      	str	r5, [r4, #0]
 8004f2a:	e7db      	b.n	8004ee4 <_malloc_r+0x64>
 8004f2c:	200001cc 	.word	0x200001cc
 8004f30:	200001d0 	.word	0x200001d0

08004f34 <__sfputc_r>:
 8004f34:	6893      	ldr	r3, [r2, #8]
 8004f36:	b410      	push	{r4}
 8004f38:	3b01      	subs	r3, #1
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	6093      	str	r3, [r2, #8]
 8004f3e:	da07      	bge.n	8004f50 <__sfputc_r+0x1c>
 8004f40:	6994      	ldr	r4, [r2, #24]
 8004f42:	42a3      	cmp	r3, r4
 8004f44:	db01      	blt.n	8004f4a <__sfputc_r+0x16>
 8004f46:	290a      	cmp	r1, #10
 8004f48:	d102      	bne.n	8004f50 <__sfputc_r+0x1c>
 8004f4a:	bc10      	pop	{r4}
 8004f4c:	f7ff bcae 	b.w	80048ac <__swbuf_r>
 8004f50:	6813      	ldr	r3, [r2, #0]
 8004f52:	1c58      	adds	r0, r3, #1
 8004f54:	6010      	str	r0, [r2, #0]
 8004f56:	7019      	strb	r1, [r3, #0]
 8004f58:	4608      	mov	r0, r1
 8004f5a:	bc10      	pop	{r4}
 8004f5c:	4770      	bx	lr

08004f5e <__sfputs_r>:
 8004f5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f60:	4606      	mov	r6, r0
 8004f62:	460f      	mov	r7, r1
 8004f64:	4614      	mov	r4, r2
 8004f66:	18d5      	adds	r5, r2, r3
 8004f68:	42ac      	cmp	r4, r5
 8004f6a:	d101      	bne.n	8004f70 <__sfputs_r+0x12>
 8004f6c:	2000      	movs	r0, #0
 8004f6e:	e007      	b.n	8004f80 <__sfputs_r+0x22>
 8004f70:	463a      	mov	r2, r7
 8004f72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f76:	4630      	mov	r0, r6
 8004f78:	f7ff ffdc 	bl	8004f34 <__sfputc_r>
 8004f7c:	1c43      	adds	r3, r0, #1
 8004f7e:	d1f3      	bne.n	8004f68 <__sfputs_r+0xa>
 8004f80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004f84 <_vfiprintf_r>:
 8004f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f88:	460c      	mov	r4, r1
 8004f8a:	b09d      	sub	sp, #116	; 0x74
 8004f8c:	4617      	mov	r7, r2
 8004f8e:	461d      	mov	r5, r3
 8004f90:	4606      	mov	r6, r0
 8004f92:	b118      	cbz	r0, 8004f9c <_vfiprintf_r+0x18>
 8004f94:	6983      	ldr	r3, [r0, #24]
 8004f96:	b90b      	cbnz	r3, 8004f9c <_vfiprintf_r+0x18>
 8004f98:	f7ff fe38 	bl	8004c0c <__sinit>
 8004f9c:	4b7c      	ldr	r3, [pc, #496]	; (8005190 <_vfiprintf_r+0x20c>)
 8004f9e:	429c      	cmp	r4, r3
 8004fa0:	d158      	bne.n	8005054 <_vfiprintf_r+0xd0>
 8004fa2:	6874      	ldr	r4, [r6, #4]
 8004fa4:	89a3      	ldrh	r3, [r4, #12]
 8004fa6:	0718      	lsls	r0, r3, #28
 8004fa8:	d55e      	bpl.n	8005068 <_vfiprintf_r+0xe4>
 8004faa:	6923      	ldr	r3, [r4, #16]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d05b      	beq.n	8005068 <_vfiprintf_r+0xe4>
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	9309      	str	r3, [sp, #36]	; 0x24
 8004fb4:	2320      	movs	r3, #32
 8004fb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004fba:	2330      	movs	r3, #48	; 0x30
 8004fbc:	f04f 0b01 	mov.w	fp, #1
 8004fc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004fc4:	9503      	str	r5, [sp, #12]
 8004fc6:	46b8      	mov	r8, r7
 8004fc8:	4645      	mov	r5, r8
 8004fca:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004fce:	b10b      	cbz	r3, 8004fd4 <_vfiprintf_r+0x50>
 8004fd0:	2b25      	cmp	r3, #37	; 0x25
 8004fd2:	d154      	bne.n	800507e <_vfiprintf_r+0xfa>
 8004fd4:	ebb8 0a07 	subs.w	sl, r8, r7
 8004fd8:	d00b      	beq.n	8004ff2 <_vfiprintf_r+0x6e>
 8004fda:	4653      	mov	r3, sl
 8004fdc:	463a      	mov	r2, r7
 8004fde:	4621      	mov	r1, r4
 8004fe0:	4630      	mov	r0, r6
 8004fe2:	f7ff ffbc 	bl	8004f5e <__sfputs_r>
 8004fe6:	3001      	adds	r0, #1
 8004fe8:	f000 80c2 	beq.w	8005170 <_vfiprintf_r+0x1ec>
 8004fec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fee:	4453      	add	r3, sl
 8004ff0:	9309      	str	r3, [sp, #36]	; 0x24
 8004ff2:	f898 3000 	ldrb.w	r3, [r8]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	f000 80ba 	beq.w	8005170 <_vfiprintf_r+0x1ec>
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	f04f 32ff 	mov.w	r2, #4294967295
 8005002:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005006:	9304      	str	r3, [sp, #16]
 8005008:	9307      	str	r3, [sp, #28]
 800500a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800500e:	931a      	str	r3, [sp, #104]	; 0x68
 8005010:	46a8      	mov	r8, r5
 8005012:	2205      	movs	r2, #5
 8005014:	f818 1b01 	ldrb.w	r1, [r8], #1
 8005018:	485e      	ldr	r0, [pc, #376]	; (8005194 <_vfiprintf_r+0x210>)
 800501a:	f000 fafb 	bl	8005614 <memchr>
 800501e:	9b04      	ldr	r3, [sp, #16]
 8005020:	bb78      	cbnz	r0, 8005082 <_vfiprintf_r+0xfe>
 8005022:	06d9      	lsls	r1, r3, #27
 8005024:	bf44      	itt	mi
 8005026:	2220      	movmi	r2, #32
 8005028:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800502c:	071a      	lsls	r2, r3, #28
 800502e:	bf44      	itt	mi
 8005030:	222b      	movmi	r2, #43	; 0x2b
 8005032:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005036:	782a      	ldrb	r2, [r5, #0]
 8005038:	2a2a      	cmp	r2, #42	; 0x2a
 800503a:	d02a      	beq.n	8005092 <_vfiprintf_r+0x10e>
 800503c:	46a8      	mov	r8, r5
 800503e:	2000      	movs	r0, #0
 8005040:	250a      	movs	r5, #10
 8005042:	9a07      	ldr	r2, [sp, #28]
 8005044:	4641      	mov	r1, r8
 8005046:	f811 3b01 	ldrb.w	r3, [r1], #1
 800504a:	3b30      	subs	r3, #48	; 0x30
 800504c:	2b09      	cmp	r3, #9
 800504e:	d969      	bls.n	8005124 <_vfiprintf_r+0x1a0>
 8005050:	b360      	cbz	r0, 80050ac <_vfiprintf_r+0x128>
 8005052:	e024      	b.n	800509e <_vfiprintf_r+0x11a>
 8005054:	4b50      	ldr	r3, [pc, #320]	; (8005198 <_vfiprintf_r+0x214>)
 8005056:	429c      	cmp	r4, r3
 8005058:	d101      	bne.n	800505e <_vfiprintf_r+0xda>
 800505a:	68b4      	ldr	r4, [r6, #8]
 800505c:	e7a2      	b.n	8004fa4 <_vfiprintf_r+0x20>
 800505e:	4b4f      	ldr	r3, [pc, #316]	; (800519c <_vfiprintf_r+0x218>)
 8005060:	429c      	cmp	r4, r3
 8005062:	bf08      	it	eq
 8005064:	68f4      	ldreq	r4, [r6, #12]
 8005066:	e79d      	b.n	8004fa4 <_vfiprintf_r+0x20>
 8005068:	4621      	mov	r1, r4
 800506a:	4630      	mov	r0, r6
 800506c:	f7ff fc70 	bl	8004950 <__swsetup_r>
 8005070:	2800      	cmp	r0, #0
 8005072:	d09d      	beq.n	8004fb0 <_vfiprintf_r+0x2c>
 8005074:	f04f 30ff 	mov.w	r0, #4294967295
 8005078:	b01d      	add	sp, #116	; 0x74
 800507a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800507e:	46a8      	mov	r8, r5
 8005080:	e7a2      	b.n	8004fc8 <_vfiprintf_r+0x44>
 8005082:	4a44      	ldr	r2, [pc, #272]	; (8005194 <_vfiprintf_r+0x210>)
 8005084:	4645      	mov	r5, r8
 8005086:	1a80      	subs	r0, r0, r2
 8005088:	fa0b f000 	lsl.w	r0, fp, r0
 800508c:	4318      	orrs	r0, r3
 800508e:	9004      	str	r0, [sp, #16]
 8005090:	e7be      	b.n	8005010 <_vfiprintf_r+0x8c>
 8005092:	9a03      	ldr	r2, [sp, #12]
 8005094:	1d11      	adds	r1, r2, #4
 8005096:	6812      	ldr	r2, [r2, #0]
 8005098:	9103      	str	r1, [sp, #12]
 800509a:	2a00      	cmp	r2, #0
 800509c:	db01      	blt.n	80050a2 <_vfiprintf_r+0x11e>
 800509e:	9207      	str	r2, [sp, #28]
 80050a0:	e004      	b.n	80050ac <_vfiprintf_r+0x128>
 80050a2:	4252      	negs	r2, r2
 80050a4:	f043 0302 	orr.w	r3, r3, #2
 80050a8:	9207      	str	r2, [sp, #28]
 80050aa:	9304      	str	r3, [sp, #16]
 80050ac:	f898 3000 	ldrb.w	r3, [r8]
 80050b0:	2b2e      	cmp	r3, #46	; 0x2e
 80050b2:	d10e      	bne.n	80050d2 <_vfiprintf_r+0x14e>
 80050b4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80050b8:	2b2a      	cmp	r3, #42	; 0x2a
 80050ba:	d138      	bne.n	800512e <_vfiprintf_r+0x1aa>
 80050bc:	9b03      	ldr	r3, [sp, #12]
 80050be:	f108 0802 	add.w	r8, r8, #2
 80050c2:	1d1a      	adds	r2, r3, #4
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	9203      	str	r2, [sp, #12]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	bfb8      	it	lt
 80050cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80050d0:	9305      	str	r3, [sp, #20]
 80050d2:	4d33      	ldr	r5, [pc, #204]	; (80051a0 <_vfiprintf_r+0x21c>)
 80050d4:	2203      	movs	r2, #3
 80050d6:	f898 1000 	ldrb.w	r1, [r8]
 80050da:	4628      	mov	r0, r5
 80050dc:	f000 fa9a 	bl	8005614 <memchr>
 80050e0:	b140      	cbz	r0, 80050f4 <_vfiprintf_r+0x170>
 80050e2:	2340      	movs	r3, #64	; 0x40
 80050e4:	1b40      	subs	r0, r0, r5
 80050e6:	fa03 f000 	lsl.w	r0, r3, r0
 80050ea:	9b04      	ldr	r3, [sp, #16]
 80050ec:	f108 0801 	add.w	r8, r8, #1
 80050f0:	4303      	orrs	r3, r0
 80050f2:	9304      	str	r3, [sp, #16]
 80050f4:	f898 1000 	ldrb.w	r1, [r8]
 80050f8:	2206      	movs	r2, #6
 80050fa:	482a      	ldr	r0, [pc, #168]	; (80051a4 <_vfiprintf_r+0x220>)
 80050fc:	f108 0701 	add.w	r7, r8, #1
 8005100:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005104:	f000 fa86 	bl	8005614 <memchr>
 8005108:	2800      	cmp	r0, #0
 800510a:	d037      	beq.n	800517c <_vfiprintf_r+0x1f8>
 800510c:	4b26      	ldr	r3, [pc, #152]	; (80051a8 <_vfiprintf_r+0x224>)
 800510e:	bb1b      	cbnz	r3, 8005158 <_vfiprintf_r+0x1d4>
 8005110:	9b03      	ldr	r3, [sp, #12]
 8005112:	3307      	adds	r3, #7
 8005114:	f023 0307 	bic.w	r3, r3, #7
 8005118:	3308      	adds	r3, #8
 800511a:	9303      	str	r3, [sp, #12]
 800511c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800511e:	444b      	add	r3, r9
 8005120:	9309      	str	r3, [sp, #36]	; 0x24
 8005122:	e750      	b.n	8004fc6 <_vfiprintf_r+0x42>
 8005124:	fb05 3202 	mla	r2, r5, r2, r3
 8005128:	2001      	movs	r0, #1
 800512a:	4688      	mov	r8, r1
 800512c:	e78a      	b.n	8005044 <_vfiprintf_r+0xc0>
 800512e:	2300      	movs	r3, #0
 8005130:	250a      	movs	r5, #10
 8005132:	4619      	mov	r1, r3
 8005134:	f108 0801 	add.w	r8, r8, #1
 8005138:	9305      	str	r3, [sp, #20]
 800513a:	4640      	mov	r0, r8
 800513c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005140:	3a30      	subs	r2, #48	; 0x30
 8005142:	2a09      	cmp	r2, #9
 8005144:	d903      	bls.n	800514e <_vfiprintf_r+0x1ca>
 8005146:	2b00      	cmp	r3, #0
 8005148:	d0c3      	beq.n	80050d2 <_vfiprintf_r+0x14e>
 800514a:	9105      	str	r1, [sp, #20]
 800514c:	e7c1      	b.n	80050d2 <_vfiprintf_r+0x14e>
 800514e:	fb05 2101 	mla	r1, r5, r1, r2
 8005152:	2301      	movs	r3, #1
 8005154:	4680      	mov	r8, r0
 8005156:	e7f0      	b.n	800513a <_vfiprintf_r+0x1b6>
 8005158:	ab03      	add	r3, sp, #12
 800515a:	9300      	str	r3, [sp, #0]
 800515c:	4622      	mov	r2, r4
 800515e:	4b13      	ldr	r3, [pc, #76]	; (80051ac <_vfiprintf_r+0x228>)
 8005160:	a904      	add	r1, sp, #16
 8005162:	4630      	mov	r0, r6
 8005164:	f3af 8000 	nop.w
 8005168:	f1b0 3fff 	cmp.w	r0, #4294967295
 800516c:	4681      	mov	r9, r0
 800516e:	d1d5      	bne.n	800511c <_vfiprintf_r+0x198>
 8005170:	89a3      	ldrh	r3, [r4, #12]
 8005172:	065b      	lsls	r3, r3, #25
 8005174:	f53f af7e 	bmi.w	8005074 <_vfiprintf_r+0xf0>
 8005178:	9809      	ldr	r0, [sp, #36]	; 0x24
 800517a:	e77d      	b.n	8005078 <_vfiprintf_r+0xf4>
 800517c:	ab03      	add	r3, sp, #12
 800517e:	9300      	str	r3, [sp, #0]
 8005180:	4622      	mov	r2, r4
 8005182:	4b0a      	ldr	r3, [pc, #40]	; (80051ac <_vfiprintf_r+0x228>)
 8005184:	a904      	add	r1, sp, #16
 8005186:	4630      	mov	r0, r6
 8005188:	f000 f888 	bl	800529c <_printf_i>
 800518c:	e7ec      	b.n	8005168 <_vfiprintf_r+0x1e4>
 800518e:	bf00      	nop
 8005190:	08009570 	.word	0x08009570
 8005194:	080095b0 	.word	0x080095b0
 8005198:	08009590 	.word	0x08009590
 800519c:	08009550 	.word	0x08009550
 80051a0:	080095b6 	.word	0x080095b6
 80051a4:	080095ba 	.word	0x080095ba
 80051a8:	00000000 	.word	0x00000000
 80051ac:	08004f5f 	.word	0x08004f5f

080051b0 <_printf_common>:
 80051b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051b4:	4691      	mov	r9, r2
 80051b6:	461f      	mov	r7, r3
 80051b8:	688a      	ldr	r2, [r1, #8]
 80051ba:	690b      	ldr	r3, [r1, #16]
 80051bc:	4606      	mov	r6, r0
 80051be:	4293      	cmp	r3, r2
 80051c0:	bfb8      	it	lt
 80051c2:	4613      	movlt	r3, r2
 80051c4:	f8c9 3000 	str.w	r3, [r9]
 80051c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80051cc:	460c      	mov	r4, r1
 80051ce:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80051d2:	b112      	cbz	r2, 80051da <_printf_common+0x2a>
 80051d4:	3301      	adds	r3, #1
 80051d6:	f8c9 3000 	str.w	r3, [r9]
 80051da:	6823      	ldr	r3, [r4, #0]
 80051dc:	0699      	lsls	r1, r3, #26
 80051de:	bf42      	ittt	mi
 80051e0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80051e4:	3302      	addmi	r3, #2
 80051e6:	f8c9 3000 	strmi.w	r3, [r9]
 80051ea:	6825      	ldr	r5, [r4, #0]
 80051ec:	f015 0506 	ands.w	r5, r5, #6
 80051f0:	d107      	bne.n	8005202 <_printf_common+0x52>
 80051f2:	f104 0a19 	add.w	sl, r4, #25
 80051f6:	68e3      	ldr	r3, [r4, #12]
 80051f8:	f8d9 2000 	ldr.w	r2, [r9]
 80051fc:	1a9b      	subs	r3, r3, r2
 80051fe:	42ab      	cmp	r3, r5
 8005200:	dc29      	bgt.n	8005256 <_printf_common+0xa6>
 8005202:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005206:	6822      	ldr	r2, [r4, #0]
 8005208:	3300      	adds	r3, #0
 800520a:	bf18      	it	ne
 800520c:	2301      	movne	r3, #1
 800520e:	0692      	lsls	r2, r2, #26
 8005210:	d42e      	bmi.n	8005270 <_printf_common+0xc0>
 8005212:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005216:	4639      	mov	r1, r7
 8005218:	4630      	mov	r0, r6
 800521a:	47c0      	blx	r8
 800521c:	3001      	adds	r0, #1
 800521e:	d021      	beq.n	8005264 <_printf_common+0xb4>
 8005220:	6823      	ldr	r3, [r4, #0]
 8005222:	68e5      	ldr	r5, [r4, #12]
 8005224:	f003 0306 	and.w	r3, r3, #6
 8005228:	2b04      	cmp	r3, #4
 800522a:	bf18      	it	ne
 800522c:	2500      	movne	r5, #0
 800522e:	f8d9 2000 	ldr.w	r2, [r9]
 8005232:	f04f 0900 	mov.w	r9, #0
 8005236:	bf08      	it	eq
 8005238:	1aad      	subeq	r5, r5, r2
 800523a:	68a3      	ldr	r3, [r4, #8]
 800523c:	6922      	ldr	r2, [r4, #16]
 800523e:	bf08      	it	eq
 8005240:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005244:	4293      	cmp	r3, r2
 8005246:	bfc4      	itt	gt
 8005248:	1a9b      	subgt	r3, r3, r2
 800524a:	18ed      	addgt	r5, r5, r3
 800524c:	341a      	adds	r4, #26
 800524e:	454d      	cmp	r5, r9
 8005250:	d11a      	bne.n	8005288 <_printf_common+0xd8>
 8005252:	2000      	movs	r0, #0
 8005254:	e008      	b.n	8005268 <_printf_common+0xb8>
 8005256:	2301      	movs	r3, #1
 8005258:	4652      	mov	r2, sl
 800525a:	4639      	mov	r1, r7
 800525c:	4630      	mov	r0, r6
 800525e:	47c0      	blx	r8
 8005260:	3001      	adds	r0, #1
 8005262:	d103      	bne.n	800526c <_printf_common+0xbc>
 8005264:	f04f 30ff 	mov.w	r0, #4294967295
 8005268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800526c:	3501      	adds	r5, #1
 800526e:	e7c2      	b.n	80051f6 <_printf_common+0x46>
 8005270:	2030      	movs	r0, #48	; 0x30
 8005272:	18e1      	adds	r1, r4, r3
 8005274:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005278:	1c5a      	adds	r2, r3, #1
 800527a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800527e:	4422      	add	r2, r4
 8005280:	3302      	adds	r3, #2
 8005282:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005286:	e7c4      	b.n	8005212 <_printf_common+0x62>
 8005288:	2301      	movs	r3, #1
 800528a:	4622      	mov	r2, r4
 800528c:	4639      	mov	r1, r7
 800528e:	4630      	mov	r0, r6
 8005290:	47c0      	blx	r8
 8005292:	3001      	adds	r0, #1
 8005294:	d0e6      	beq.n	8005264 <_printf_common+0xb4>
 8005296:	f109 0901 	add.w	r9, r9, #1
 800529a:	e7d8      	b.n	800524e <_printf_common+0x9e>

0800529c <_printf_i>:
 800529c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80052a0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80052a4:	460c      	mov	r4, r1
 80052a6:	7e09      	ldrb	r1, [r1, #24]
 80052a8:	b085      	sub	sp, #20
 80052aa:	296e      	cmp	r1, #110	; 0x6e
 80052ac:	4617      	mov	r7, r2
 80052ae:	4606      	mov	r6, r0
 80052b0:	4698      	mov	r8, r3
 80052b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80052b4:	f000 80b3 	beq.w	800541e <_printf_i+0x182>
 80052b8:	d822      	bhi.n	8005300 <_printf_i+0x64>
 80052ba:	2963      	cmp	r1, #99	; 0x63
 80052bc:	d036      	beq.n	800532c <_printf_i+0x90>
 80052be:	d80a      	bhi.n	80052d6 <_printf_i+0x3a>
 80052c0:	2900      	cmp	r1, #0
 80052c2:	f000 80b9 	beq.w	8005438 <_printf_i+0x19c>
 80052c6:	2958      	cmp	r1, #88	; 0x58
 80052c8:	f000 8083 	beq.w	80053d2 <_printf_i+0x136>
 80052cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052d0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80052d4:	e032      	b.n	800533c <_printf_i+0xa0>
 80052d6:	2964      	cmp	r1, #100	; 0x64
 80052d8:	d001      	beq.n	80052de <_printf_i+0x42>
 80052da:	2969      	cmp	r1, #105	; 0x69
 80052dc:	d1f6      	bne.n	80052cc <_printf_i+0x30>
 80052de:	6820      	ldr	r0, [r4, #0]
 80052e0:	6813      	ldr	r3, [r2, #0]
 80052e2:	0605      	lsls	r5, r0, #24
 80052e4:	f103 0104 	add.w	r1, r3, #4
 80052e8:	d52a      	bpl.n	8005340 <_printf_i+0xa4>
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	6011      	str	r1, [r2, #0]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	da03      	bge.n	80052fa <_printf_i+0x5e>
 80052f2:	222d      	movs	r2, #45	; 0x2d
 80052f4:	425b      	negs	r3, r3
 80052f6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80052fa:	486f      	ldr	r0, [pc, #444]	; (80054b8 <_printf_i+0x21c>)
 80052fc:	220a      	movs	r2, #10
 80052fe:	e039      	b.n	8005374 <_printf_i+0xd8>
 8005300:	2973      	cmp	r1, #115	; 0x73
 8005302:	f000 809d 	beq.w	8005440 <_printf_i+0x1a4>
 8005306:	d808      	bhi.n	800531a <_printf_i+0x7e>
 8005308:	296f      	cmp	r1, #111	; 0x6f
 800530a:	d020      	beq.n	800534e <_printf_i+0xb2>
 800530c:	2970      	cmp	r1, #112	; 0x70
 800530e:	d1dd      	bne.n	80052cc <_printf_i+0x30>
 8005310:	6823      	ldr	r3, [r4, #0]
 8005312:	f043 0320 	orr.w	r3, r3, #32
 8005316:	6023      	str	r3, [r4, #0]
 8005318:	e003      	b.n	8005322 <_printf_i+0x86>
 800531a:	2975      	cmp	r1, #117	; 0x75
 800531c:	d017      	beq.n	800534e <_printf_i+0xb2>
 800531e:	2978      	cmp	r1, #120	; 0x78
 8005320:	d1d4      	bne.n	80052cc <_printf_i+0x30>
 8005322:	2378      	movs	r3, #120	; 0x78
 8005324:	4865      	ldr	r0, [pc, #404]	; (80054bc <_printf_i+0x220>)
 8005326:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800532a:	e055      	b.n	80053d8 <_printf_i+0x13c>
 800532c:	6813      	ldr	r3, [r2, #0]
 800532e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005332:	1d19      	adds	r1, r3, #4
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	6011      	str	r1, [r2, #0]
 8005338:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800533c:	2301      	movs	r3, #1
 800533e:	e08c      	b.n	800545a <_printf_i+0x1be>
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005346:	6011      	str	r1, [r2, #0]
 8005348:	bf18      	it	ne
 800534a:	b21b      	sxthne	r3, r3
 800534c:	e7cf      	b.n	80052ee <_printf_i+0x52>
 800534e:	6813      	ldr	r3, [r2, #0]
 8005350:	6825      	ldr	r5, [r4, #0]
 8005352:	1d18      	adds	r0, r3, #4
 8005354:	6010      	str	r0, [r2, #0]
 8005356:	0628      	lsls	r0, r5, #24
 8005358:	d501      	bpl.n	800535e <_printf_i+0xc2>
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	e002      	b.n	8005364 <_printf_i+0xc8>
 800535e:	0668      	lsls	r0, r5, #25
 8005360:	d5fb      	bpl.n	800535a <_printf_i+0xbe>
 8005362:	881b      	ldrh	r3, [r3, #0]
 8005364:	296f      	cmp	r1, #111	; 0x6f
 8005366:	bf14      	ite	ne
 8005368:	220a      	movne	r2, #10
 800536a:	2208      	moveq	r2, #8
 800536c:	4852      	ldr	r0, [pc, #328]	; (80054b8 <_printf_i+0x21c>)
 800536e:	2100      	movs	r1, #0
 8005370:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005374:	6865      	ldr	r5, [r4, #4]
 8005376:	2d00      	cmp	r5, #0
 8005378:	60a5      	str	r5, [r4, #8]
 800537a:	f2c0 8095 	blt.w	80054a8 <_printf_i+0x20c>
 800537e:	6821      	ldr	r1, [r4, #0]
 8005380:	f021 0104 	bic.w	r1, r1, #4
 8005384:	6021      	str	r1, [r4, #0]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d13d      	bne.n	8005406 <_printf_i+0x16a>
 800538a:	2d00      	cmp	r5, #0
 800538c:	f040 808e 	bne.w	80054ac <_printf_i+0x210>
 8005390:	4665      	mov	r5, ip
 8005392:	2a08      	cmp	r2, #8
 8005394:	d10b      	bne.n	80053ae <_printf_i+0x112>
 8005396:	6823      	ldr	r3, [r4, #0]
 8005398:	07db      	lsls	r3, r3, #31
 800539a:	d508      	bpl.n	80053ae <_printf_i+0x112>
 800539c:	6923      	ldr	r3, [r4, #16]
 800539e:	6862      	ldr	r2, [r4, #4]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	bfde      	ittt	le
 80053a4:	2330      	movle	r3, #48	; 0x30
 80053a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80053aa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80053ae:	ebac 0305 	sub.w	r3, ip, r5
 80053b2:	6123      	str	r3, [r4, #16]
 80053b4:	f8cd 8000 	str.w	r8, [sp]
 80053b8:	463b      	mov	r3, r7
 80053ba:	aa03      	add	r2, sp, #12
 80053bc:	4621      	mov	r1, r4
 80053be:	4630      	mov	r0, r6
 80053c0:	f7ff fef6 	bl	80051b0 <_printf_common>
 80053c4:	3001      	adds	r0, #1
 80053c6:	d14d      	bne.n	8005464 <_printf_i+0x1c8>
 80053c8:	f04f 30ff 	mov.w	r0, #4294967295
 80053cc:	b005      	add	sp, #20
 80053ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80053d2:	4839      	ldr	r0, [pc, #228]	; (80054b8 <_printf_i+0x21c>)
 80053d4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80053d8:	6813      	ldr	r3, [r2, #0]
 80053da:	6821      	ldr	r1, [r4, #0]
 80053dc:	1d1d      	adds	r5, r3, #4
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	6015      	str	r5, [r2, #0]
 80053e2:	060a      	lsls	r2, r1, #24
 80053e4:	d50b      	bpl.n	80053fe <_printf_i+0x162>
 80053e6:	07ca      	lsls	r2, r1, #31
 80053e8:	bf44      	itt	mi
 80053ea:	f041 0120 	orrmi.w	r1, r1, #32
 80053ee:	6021      	strmi	r1, [r4, #0]
 80053f0:	b91b      	cbnz	r3, 80053fa <_printf_i+0x15e>
 80053f2:	6822      	ldr	r2, [r4, #0]
 80053f4:	f022 0220 	bic.w	r2, r2, #32
 80053f8:	6022      	str	r2, [r4, #0]
 80053fa:	2210      	movs	r2, #16
 80053fc:	e7b7      	b.n	800536e <_printf_i+0xd2>
 80053fe:	064d      	lsls	r5, r1, #25
 8005400:	bf48      	it	mi
 8005402:	b29b      	uxthmi	r3, r3
 8005404:	e7ef      	b.n	80053e6 <_printf_i+0x14a>
 8005406:	4665      	mov	r5, ip
 8005408:	fbb3 f1f2 	udiv	r1, r3, r2
 800540c:	fb02 3311 	mls	r3, r2, r1, r3
 8005410:	5cc3      	ldrb	r3, [r0, r3]
 8005412:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005416:	460b      	mov	r3, r1
 8005418:	2900      	cmp	r1, #0
 800541a:	d1f5      	bne.n	8005408 <_printf_i+0x16c>
 800541c:	e7b9      	b.n	8005392 <_printf_i+0xf6>
 800541e:	6813      	ldr	r3, [r2, #0]
 8005420:	6825      	ldr	r5, [r4, #0]
 8005422:	1d18      	adds	r0, r3, #4
 8005424:	6961      	ldr	r1, [r4, #20]
 8005426:	6010      	str	r0, [r2, #0]
 8005428:	0628      	lsls	r0, r5, #24
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	d501      	bpl.n	8005432 <_printf_i+0x196>
 800542e:	6019      	str	r1, [r3, #0]
 8005430:	e002      	b.n	8005438 <_printf_i+0x19c>
 8005432:	066a      	lsls	r2, r5, #25
 8005434:	d5fb      	bpl.n	800542e <_printf_i+0x192>
 8005436:	8019      	strh	r1, [r3, #0]
 8005438:	2300      	movs	r3, #0
 800543a:	4665      	mov	r5, ip
 800543c:	6123      	str	r3, [r4, #16]
 800543e:	e7b9      	b.n	80053b4 <_printf_i+0x118>
 8005440:	6813      	ldr	r3, [r2, #0]
 8005442:	1d19      	adds	r1, r3, #4
 8005444:	6011      	str	r1, [r2, #0]
 8005446:	681d      	ldr	r5, [r3, #0]
 8005448:	6862      	ldr	r2, [r4, #4]
 800544a:	2100      	movs	r1, #0
 800544c:	4628      	mov	r0, r5
 800544e:	f000 f8e1 	bl	8005614 <memchr>
 8005452:	b108      	cbz	r0, 8005458 <_printf_i+0x1bc>
 8005454:	1b40      	subs	r0, r0, r5
 8005456:	6060      	str	r0, [r4, #4]
 8005458:	6863      	ldr	r3, [r4, #4]
 800545a:	6123      	str	r3, [r4, #16]
 800545c:	2300      	movs	r3, #0
 800545e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005462:	e7a7      	b.n	80053b4 <_printf_i+0x118>
 8005464:	6923      	ldr	r3, [r4, #16]
 8005466:	462a      	mov	r2, r5
 8005468:	4639      	mov	r1, r7
 800546a:	4630      	mov	r0, r6
 800546c:	47c0      	blx	r8
 800546e:	3001      	adds	r0, #1
 8005470:	d0aa      	beq.n	80053c8 <_printf_i+0x12c>
 8005472:	6823      	ldr	r3, [r4, #0]
 8005474:	079b      	lsls	r3, r3, #30
 8005476:	d413      	bmi.n	80054a0 <_printf_i+0x204>
 8005478:	68e0      	ldr	r0, [r4, #12]
 800547a:	9b03      	ldr	r3, [sp, #12]
 800547c:	4298      	cmp	r0, r3
 800547e:	bfb8      	it	lt
 8005480:	4618      	movlt	r0, r3
 8005482:	e7a3      	b.n	80053cc <_printf_i+0x130>
 8005484:	2301      	movs	r3, #1
 8005486:	464a      	mov	r2, r9
 8005488:	4639      	mov	r1, r7
 800548a:	4630      	mov	r0, r6
 800548c:	47c0      	blx	r8
 800548e:	3001      	adds	r0, #1
 8005490:	d09a      	beq.n	80053c8 <_printf_i+0x12c>
 8005492:	3501      	adds	r5, #1
 8005494:	68e3      	ldr	r3, [r4, #12]
 8005496:	9a03      	ldr	r2, [sp, #12]
 8005498:	1a9b      	subs	r3, r3, r2
 800549a:	42ab      	cmp	r3, r5
 800549c:	dcf2      	bgt.n	8005484 <_printf_i+0x1e8>
 800549e:	e7eb      	b.n	8005478 <_printf_i+0x1dc>
 80054a0:	2500      	movs	r5, #0
 80054a2:	f104 0919 	add.w	r9, r4, #25
 80054a6:	e7f5      	b.n	8005494 <_printf_i+0x1f8>
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d1ac      	bne.n	8005406 <_printf_i+0x16a>
 80054ac:	7803      	ldrb	r3, [r0, #0]
 80054ae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80054b6:	e76c      	b.n	8005392 <_printf_i+0xf6>
 80054b8:	080095c1 	.word	0x080095c1
 80054bc:	080095d2 	.word	0x080095d2

080054c0 <_sbrk_r>:
 80054c0:	b538      	push	{r3, r4, r5, lr}
 80054c2:	2300      	movs	r3, #0
 80054c4:	4c05      	ldr	r4, [pc, #20]	; (80054dc <_sbrk_r+0x1c>)
 80054c6:	4605      	mov	r5, r0
 80054c8:	4608      	mov	r0, r1
 80054ca:	6023      	str	r3, [r4, #0]
 80054cc:	f7fd fa00 	bl	80028d0 <_sbrk>
 80054d0:	1c43      	adds	r3, r0, #1
 80054d2:	d102      	bne.n	80054da <_sbrk_r+0x1a>
 80054d4:	6823      	ldr	r3, [r4, #0]
 80054d6:	b103      	cbz	r3, 80054da <_sbrk_r+0x1a>
 80054d8:	602b      	str	r3, [r5, #0]
 80054da:	bd38      	pop	{r3, r4, r5, pc}
 80054dc:	20000260 	.word	0x20000260

080054e0 <__sread>:
 80054e0:	b510      	push	{r4, lr}
 80054e2:	460c      	mov	r4, r1
 80054e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054e8:	f000 f8a4 	bl	8005634 <_read_r>
 80054ec:	2800      	cmp	r0, #0
 80054ee:	bfab      	itete	ge
 80054f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80054f2:	89a3      	ldrhlt	r3, [r4, #12]
 80054f4:	181b      	addge	r3, r3, r0
 80054f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80054fa:	bfac      	ite	ge
 80054fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80054fe:	81a3      	strhlt	r3, [r4, #12]
 8005500:	bd10      	pop	{r4, pc}

08005502 <__swrite>:
 8005502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005506:	461f      	mov	r7, r3
 8005508:	898b      	ldrh	r3, [r1, #12]
 800550a:	4605      	mov	r5, r0
 800550c:	05db      	lsls	r3, r3, #23
 800550e:	460c      	mov	r4, r1
 8005510:	4616      	mov	r6, r2
 8005512:	d505      	bpl.n	8005520 <__swrite+0x1e>
 8005514:	2302      	movs	r3, #2
 8005516:	2200      	movs	r2, #0
 8005518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800551c:	f000 f868 	bl	80055f0 <_lseek_r>
 8005520:	89a3      	ldrh	r3, [r4, #12]
 8005522:	4632      	mov	r2, r6
 8005524:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005528:	81a3      	strh	r3, [r4, #12]
 800552a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800552e:	463b      	mov	r3, r7
 8005530:	4628      	mov	r0, r5
 8005532:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005536:	f000 b817 	b.w	8005568 <_write_r>

0800553a <__sseek>:
 800553a:	b510      	push	{r4, lr}
 800553c:	460c      	mov	r4, r1
 800553e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005542:	f000 f855 	bl	80055f0 <_lseek_r>
 8005546:	1c43      	adds	r3, r0, #1
 8005548:	89a3      	ldrh	r3, [r4, #12]
 800554a:	bf15      	itete	ne
 800554c:	6560      	strne	r0, [r4, #84]	; 0x54
 800554e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005552:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005556:	81a3      	strheq	r3, [r4, #12]
 8005558:	bf18      	it	ne
 800555a:	81a3      	strhne	r3, [r4, #12]
 800555c:	bd10      	pop	{r4, pc}

0800555e <__sclose>:
 800555e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005562:	f000 b813 	b.w	800558c <_close_r>
	...

08005568 <_write_r>:
 8005568:	b538      	push	{r3, r4, r5, lr}
 800556a:	4605      	mov	r5, r0
 800556c:	4608      	mov	r0, r1
 800556e:	4611      	mov	r1, r2
 8005570:	2200      	movs	r2, #0
 8005572:	4c05      	ldr	r4, [pc, #20]	; (8005588 <_write_r+0x20>)
 8005574:	6022      	str	r2, [r4, #0]
 8005576:	461a      	mov	r2, r3
 8005578:	f7fc fc17 	bl	8001daa <_write>
 800557c:	1c43      	adds	r3, r0, #1
 800557e:	d102      	bne.n	8005586 <_write_r+0x1e>
 8005580:	6823      	ldr	r3, [r4, #0]
 8005582:	b103      	cbz	r3, 8005586 <_write_r+0x1e>
 8005584:	602b      	str	r3, [r5, #0]
 8005586:	bd38      	pop	{r3, r4, r5, pc}
 8005588:	20000260 	.word	0x20000260

0800558c <_close_r>:
 800558c:	b538      	push	{r3, r4, r5, lr}
 800558e:	2300      	movs	r3, #0
 8005590:	4c05      	ldr	r4, [pc, #20]	; (80055a8 <_close_r+0x1c>)
 8005592:	4605      	mov	r5, r0
 8005594:	4608      	mov	r0, r1
 8005596:	6023      	str	r3, [r4, #0]
 8005598:	f7fd f969 	bl	800286e <_close>
 800559c:	1c43      	adds	r3, r0, #1
 800559e:	d102      	bne.n	80055a6 <_close_r+0x1a>
 80055a0:	6823      	ldr	r3, [r4, #0]
 80055a2:	b103      	cbz	r3, 80055a6 <_close_r+0x1a>
 80055a4:	602b      	str	r3, [r5, #0]
 80055a6:	bd38      	pop	{r3, r4, r5, pc}
 80055a8:	20000260 	.word	0x20000260

080055ac <_fstat_r>:
 80055ac:	b538      	push	{r3, r4, r5, lr}
 80055ae:	2300      	movs	r3, #0
 80055b0:	4c06      	ldr	r4, [pc, #24]	; (80055cc <_fstat_r+0x20>)
 80055b2:	4605      	mov	r5, r0
 80055b4:	4608      	mov	r0, r1
 80055b6:	4611      	mov	r1, r2
 80055b8:	6023      	str	r3, [r4, #0]
 80055ba:	f7fd f963 	bl	8002884 <_fstat>
 80055be:	1c43      	adds	r3, r0, #1
 80055c0:	d102      	bne.n	80055c8 <_fstat_r+0x1c>
 80055c2:	6823      	ldr	r3, [r4, #0]
 80055c4:	b103      	cbz	r3, 80055c8 <_fstat_r+0x1c>
 80055c6:	602b      	str	r3, [r5, #0]
 80055c8:	bd38      	pop	{r3, r4, r5, pc}
 80055ca:	bf00      	nop
 80055cc:	20000260 	.word	0x20000260

080055d0 <_isatty_r>:
 80055d0:	b538      	push	{r3, r4, r5, lr}
 80055d2:	2300      	movs	r3, #0
 80055d4:	4c05      	ldr	r4, [pc, #20]	; (80055ec <_isatty_r+0x1c>)
 80055d6:	4605      	mov	r5, r0
 80055d8:	4608      	mov	r0, r1
 80055da:	6023      	str	r3, [r4, #0]
 80055dc:	f7fd f961 	bl	80028a2 <_isatty>
 80055e0:	1c43      	adds	r3, r0, #1
 80055e2:	d102      	bne.n	80055ea <_isatty_r+0x1a>
 80055e4:	6823      	ldr	r3, [r4, #0]
 80055e6:	b103      	cbz	r3, 80055ea <_isatty_r+0x1a>
 80055e8:	602b      	str	r3, [r5, #0]
 80055ea:	bd38      	pop	{r3, r4, r5, pc}
 80055ec:	20000260 	.word	0x20000260

080055f0 <_lseek_r>:
 80055f0:	b538      	push	{r3, r4, r5, lr}
 80055f2:	4605      	mov	r5, r0
 80055f4:	4608      	mov	r0, r1
 80055f6:	4611      	mov	r1, r2
 80055f8:	2200      	movs	r2, #0
 80055fa:	4c05      	ldr	r4, [pc, #20]	; (8005610 <_lseek_r+0x20>)
 80055fc:	6022      	str	r2, [r4, #0]
 80055fe:	461a      	mov	r2, r3
 8005600:	f7fd f959 	bl	80028b6 <_lseek>
 8005604:	1c43      	adds	r3, r0, #1
 8005606:	d102      	bne.n	800560e <_lseek_r+0x1e>
 8005608:	6823      	ldr	r3, [r4, #0]
 800560a:	b103      	cbz	r3, 800560e <_lseek_r+0x1e>
 800560c:	602b      	str	r3, [r5, #0]
 800560e:	bd38      	pop	{r3, r4, r5, pc}
 8005610:	20000260 	.word	0x20000260

08005614 <memchr>:
 8005614:	b510      	push	{r4, lr}
 8005616:	b2c9      	uxtb	r1, r1
 8005618:	4402      	add	r2, r0
 800561a:	4290      	cmp	r0, r2
 800561c:	4603      	mov	r3, r0
 800561e:	d101      	bne.n	8005624 <memchr+0x10>
 8005620:	2300      	movs	r3, #0
 8005622:	e003      	b.n	800562c <memchr+0x18>
 8005624:	781c      	ldrb	r4, [r3, #0]
 8005626:	3001      	adds	r0, #1
 8005628:	428c      	cmp	r4, r1
 800562a:	d1f6      	bne.n	800561a <memchr+0x6>
 800562c:	4618      	mov	r0, r3
 800562e:	bd10      	pop	{r4, pc}

08005630 <__malloc_lock>:
 8005630:	4770      	bx	lr

08005632 <__malloc_unlock>:
 8005632:	4770      	bx	lr

08005634 <_read_r>:
 8005634:	b538      	push	{r3, r4, r5, lr}
 8005636:	4605      	mov	r5, r0
 8005638:	4608      	mov	r0, r1
 800563a:	4611      	mov	r1, r2
 800563c:	2200      	movs	r2, #0
 800563e:	4c05      	ldr	r4, [pc, #20]	; (8005654 <_read_r+0x20>)
 8005640:	6022      	str	r2, [r4, #0]
 8005642:	461a      	mov	r2, r3
 8005644:	f7fd f8f6 	bl	8002834 <_read>
 8005648:	1c43      	adds	r3, r0, #1
 800564a:	d102      	bne.n	8005652 <_read_r+0x1e>
 800564c:	6823      	ldr	r3, [r4, #0]
 800564e:	b103      	cbz	r3, 8005652 <_read_r+0x1e>
 8005650:	602b      	str	r3, [r5, #0]
 8005652:	bd38      	pop	{r3, r4, r5, pc}
 8005654:	20000260 	.word	0x20000260

08005658 <pow>:
 8005658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800565c:	b08f      	sub	sp, #60	; 0x3c
 800565e:	461d      	mov	r5, r3
 8005660:	4680      	mov	r8, r0
 8005662:	4689      	mov	r9, r1
 8005664:	4614      	mov	r4, r2
 8005666:	f000 f9a7 	bl	80059b8 <__ieee754_pow>
 800566a:	4fa1      	ldr	r7, [pc, #644]	; (80058f0 <pow+0x298>)
 800566c:	e9cd 0100 	strd	r0, r1, [sp]
 8005670:	f997 3000 	ldrsb.w	r3, [r7]
 8005674:	463e      	mov	r6, r7
 8005676:	9302      	str	r3, [sp, #8]
 8005678:	3301      	adds	r3, #1
 800567a:	d05f      	beq.n	800573c <pow+0xe4>
 800567c:	4622      	mov	r2, r4
 800567e:	462b      	mov	r3, r5
 8005680:	4620      	mov	r0, r4
 8005682:	4629      	mov	r1, r5
 8005684:	f7fb f9ba 	bl	80009fc <__aeabi_dcmpun>
 8005688:	4682      	mov	sl, r0
 800568a:	2800      	cmp	r0, #0
 800568c:	d156      	bne.n	800573c <pow+0xe4>
 800568e:	4642      	mov	r2, r8
 8005690:	464b      	mov	r3, r9
 8005692:	4640      	mov	r0, r8
 8005694:	4649      	mov	r1, r9
 8005696:	f7fb f9b1 	bl	80009fc <__aeabi_dcmpun>
 800569a:	9003      	str	r0, [sp, #12]
 800569c:	b1e8      	cbz	r0, 80056da <pow+0x82>
 800569e:	2200      	movs	r2, #0
 80056a0:	2300      	movs	r3, #0
 80056a2:	4620      	mov	r0, r4
 80056a4:	4629      	mov	r1, r5
 80056a6:	f7fb f977 	bl	8000998 <__aeabi_dcmpeq>
 80056aa:	2800      	cmp	r0, #0
 80056ac:	d046      	beq.n	800573c <pow+0xe4>
 80056ae:	2301      	movs	r3, #1
 80056b0:	2200      	movs	r2, #0
 80056b2:	9304      	str	r3, [sp, #16]
 80056b4:	4b8f      	ldr	r3, [pc, #572]	; (80058f4 <pow+0x29c>)
 80056b6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80056ba:	9305      	str	r3, [sp, #20]
 80056bc:	4b8e      	ldr	r3, [pc, #568]	; (80058f8 <pow+0x2a0>)
 80056be:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80056c2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80056c6:	9b02      	ldr	r3, [sp, #8]
 80056c8:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d031      	beq.n	8005734 <pow+0xdc>
 80056d0:	a804      	add	r0, sp, #16
 80056d2:	f000 ff31 	bl	8006538 <matherr>
 80056d6:	bb38      	cbnz	r0, 8005728 <pow+0xd0>
 80056d8:	e058      	b.n	800578c <pow+0x134>
 80056da:	f04f 0a00 	mov.w	sl, #0
 80056de:	f04f 0b00 	mov.w	fp, #0
 80056e2:	4652      	mov	r2, sl
 80056e4:	465b      	mov	r3, fp
 80056e6:	4640      	mov	r0, r8
 80056e8:	4649      	mov	r1, r9
 80056ea:	f7fb f955 	bl	8000998 <__aeabi_dcmpeq>
 80056ee:	2800      	cmp	r0, #0
 80056f0:	d051      	beq.n	8005796 <pow+0x13e>
 80056f2:	4652      	mov	r2, sl
 80056f4:	465b      	mov	r3, fp
 80056f6:	4620      	mov	r0, r4
 80056f8:	4629      	mov	r1, r5
 80056fa:	f7fb f94d 	bl	8000998 <__aeabi_dcmpeq>
 80056fe:	4606      	mov	r6, r0
 8005700:	b308      	cbz	r0, 8005746 <pow+0xee>
 8005702:	2301      	movs	r3, #1
 8005704:	9304      	str	r3, [sp, #16]
 8005706:	4b7b      	ldr	r3, [pc, #492]	; (80058f4 <pow+0x29c>)
 8005708:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800570c:	9305      	str	r3, [sp, #20]
 800570e:	9b03      	ldr	r3, [sp, #12]
 8005710:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005714:	930c      	str	r3, [sp, #48]	; 0x30
 8005716:	9b02      	ldr	r3, [sp, #8]
 8005718:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800571c:	2b00      	cmp	r3, #0
 800571e:	d0d7      	beq.n	80056d0 <pow+0x78>
 8005720:	2200      	movs	r2, #0
 8005722:	4b75      	ldr	r3, [pc, #468]	; (80058f8 <pow+0x2a0>)
 8005724:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005728:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800572a:	b11b      	cbz	r3, 8005734 <pow+0xdc>
 800572c:	f7ff f804 	bl	8004738 <__errno>
 8005730:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005732:	6003      	str	r3, [r0, #0]
 8005734:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 8005738:	e9cd 3400 	strd	r3, r4, [sp]
 800573c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005740:	b00f      	add	sp, #60	; 0x3c
 8005742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005746:	4620      	mov	r0, r4
 8005748:	4629      	mov	r1, r5
 800574a:	f000 feef 	bl	800652c <finite>
 800574e:	2800      	cmp	r0, #0
 8005750:	d0f4      	beq.n	800573c <pow+0xe4>
 8005752:	4652      	mov	r2, sl
 8005754:	465b      	mov	r3, fp
 8005756:	4620      	mov	r0, r4
 8005758:	4629      	mov	r1, r5
 800575a:	f7fb f927 	bl	80009ac <__aeabi_dcmplt>
 800575e:	2800      	cmp	r0, #0
 8005760:	d0ec      	beq.n	800573c <pow+0xe4>
 8005762:	2301      	movs	r3, #1
 8005764:	9304      	str	r3, [sp, #16]
 8005766:	4b63      	ldr	r3, [pc, #396]	; (80058f4 <pow+0x29c>)
 8005768:	960c      	str	r6, [sp, #48]	; 0x30
 800576a:	9305      	str	r3, [sp, #20]
 800576c:	f997 3000 	ldrsb.w	r3, [r7]
 8005770:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005774:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005778:	b913      	cbnz	r3, 8005780 <pow+0x128>
 800577a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800577e:	e7a7      	b.n	80056d0 <pow+0x78>
 8005780:	2000      	movs	r0, #0
 8005782:	495e      	ldr	r1, [pc, #376]	; (80058fc <pow+0x2a4>)
 8005784:	2b02      	cmp	r3, #2
 8005786:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800578a:	d1a1      	bne.n	80056d0 <pow+0x78>
 800578c:	f7fe ffd4 	bl	8004738 <__errno>
 8005790:	2321      	movs	r3, #33	; 0x21
 8005792:	6003      	str	r3, [r0, #0]
 8005794:	e7c8      	b.n	8005728 <pow+0xd0>
 8005796:	e9dd 0100 	ldrd	r0, r1, [sp]
 800579a:	f000 fec7 	bl	800652c <finite>
 800579e:	9002      	str	r0, [sp, #8]
 80057a0:	2800      	cmp	r0, #0
 80057a2:	d177      	bne.n	8005894 <pow+0x23c>
 80057a4:	4640      	mov	r0, r8
 80057a6:	4649      	mov	r1, r9
 80057a8:	f000 fec0 	bl	800652c <finite>
 80057ac:	2800      	cmp	r0, #0
 80057ae:	d071      	beq.n	8005894 <pow+0x23c>
 80057b0:	4620      	mov	r0, r4
 80057b2:	4629      	mov	r1, r5
 80057b4:	f000 feba 	bl	800652c <finite>
 80057b8:	2800      	cmp	r0, #0
 80057ba:	d06b      	beq.n	8005894 <pow+0x23c>
 80057bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80057c0:	4619      	mov	r1, r3
 80057c2:	4610      	mov	r0, r2
 80057c4:	f7fb f91a 	bl	80009fc <__aeabi_dcmpun>
 80057c8:	f997 7000 	ldrsb.w	r7, [r7]
 80057cc:	4b49      	ldr	r3, [pc, #292]	; (80058f4 <pow+0x29c>)
 80057ce:	b1a0      	cbz	r0, 80057fa <pow+0x1a2>
 80057d0:	2201      	movs	r2, #1
 80057d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80057d6:	9b02      	ldr	r3, [sp, #8]
 80057d8:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80057dc:	930c      	str	r3, [sp, #48]	; 0x30
 80057de:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80057e2:	2f00      	cmp	r7, #0
 80057e4:	d0c9      	beq.n	800577a <pow+0x122>
 80057e6:	4652      	mov	r2, sl
 80057e8:	465b      	mov	r3, fp
 80057ea:	4650      	mov	r0, sl
 80057ec:	4659      	mov	r1, fp
 80057ee:	f7fa ff95 	bl	800071c <__aeabi_ddiv>
 80057f2:	2f02      	cmp	r7, #2
 80057f4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80057f8:	e7c7      	b.n	800578a <pow+0x132>
 80057fa:	2203      	movs	r2, #3
 80057fc:	900c      	str	r0, [sp, #48]	; 0x30
 80057fe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005802:	4620      	mov	r0, r4
 8005804:	4629      	mov	r1, r5
 8005806:	2200      	movs	r2, #0
 8005808:	4b3d      	ldr	r3, [pc, #244]	; (8005900 <pow+0x2a8>)
 800580a:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800580e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005812:	f7fa fe59 	bl	80004c8 <__aeabi_dmul>
 8005816:	4604      	mov	r4, r0
 8005818:	460d      	mov	r5, r1
 800581a:	bb17      	cbnz	r7, 8005862 <pow+0x20a>
 800581c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8005820:	4b38      	ldr	r3, [pc, #224]	; (8005904 <pow+0x2ac>)
 8005822:	4640      	mov	r0, r8
 8005824:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005828:	4649      	mov	r1, r9
 800582a:	4652      	mov	r2, sl
 800582c:	465b      	mov	r3, fp
 800582e:	f7fb f8bd 	bl	80009ac <__aeabi_dcmplt>
 8005832:	2800      	cmp	r0, #0
 8005834:	d054      	beq.n	80058e0 <pow+0x288>
 8005836:	4620      	mov	r0, r4
 8005838:	4629      	mov	r1, r5
 800583a:	f000 fe85 	bl	8006548 <rint>
 800583e:	4622      	mov	r2, r4
 8005840:	462b      	mov	r3, r5
 8005842:	f7fb f8a9 	bl	8000998 <__aeabi_dcmpeq>
 8005846:	b920      	cbnz	r0, 8005852 <pow+0x1fa>
 8005848:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800584c:	4b2e      	ldr	r3, [pc, #184]	; (8005908 <pow+0x2b0>)
 800584e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005852:	f996 3000 	ldrsb.w	r3, [r6]
 8005856:	2b02      	cmp	r3, #2
 8005858:	d142      	bne.n	80058e0 <pow+0x288>
 800585a:	f7fe ff6d 	bl	8004738 <__errno>
 800585e:	2322      	movs	r3, #34	; 0x22
 8005860:	e797      	b.n	8005792 <pow+0x13a>
 8005862:	2200      	movs	r2, #0
 8005864:	4b29      	ldr	r3, [pc, #164]	; (800590c <pow+0x2b4>)
 8005866:	4640      	mov	r0, r8
 8005868:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800586c:	4649      	mov	r1, r9
 800586e:	4652      	mov	r2, sl
 8005870:	465b      	mov	r3, fp
 8005872:	f7fb f89b 	bl	80009ac <__aeabi_dcmplt>
 8005876:	2800      	cmp	r0, #0
 8005878:	d0eb      	beq.n	8005852 <pow+0x1fa>
 800587a:	4620      	mov	r0, r4
 800587c:	4629      	mov	r1, r5
 800587e:	f000 fe63 	bl	8006548 <rint>
 8005882:	4622      	mov	r2, r4
 8005884:	462b      	mov	r3, r5
 8005886:	f7fb f887 	bl	8000998 <__aeabi_dcmpeq>
 800588a:	2800      	cmp	r0, #0
 800588c:	d1e1      	bne.n	8005852 <pow+0x1fa>
 800588e:	2200      	movs	r2, #0
 8005890:	4b1a      	ldr	r3, [pc, #104]	; (80058fc <pow+0x2a4>)
 8005892:	e7dc      	b.n	800584e <pow+0x1f6>
 8005894:	2200      	movs	r2, #0
 8005896:	e9dd 0100 	ldrd	r0, r1, [sp]
 800589a:	2300      	movs	r3, #0
 800589c:	f7fb f87c 	bl	8000998 <__aeabi_dcmpeq>
 80058a0:	2800      	cmp	r0, #0
 80058a2:	f43f af4b 	beq.w	800573c <pow+0xe4>
 80058a6:	4640      	mov	r0, r8
 80058a8:	4649      	mov	r1, r9
 80058aa:	f000 fe3f 	bl	800652c <finite>
 80058ae:	2800      	cmp	r0, #0
 80058b0:	f43f af44 	beq.w	800573c <pow+0xe4>
 80058b4:	4620      	mov	r0, r4
 80058b6:	4629      	mov	r1, r5
 80058b8:	f000 fe38 	bl	800652c <finite>
 80058bc:	2800      	cmp	r0, #0
 80058be:	f43f af3d 	beq.w	800573c <pow+0xe4>
 80058c2:	2304      	movs	r3, #4
 80058c4:	9304      	str	r3, [sp, #16]
 80058c6:	4b0b      	ldr	r3, [pc, #44]	; (80058f4 <pow+0x29c>)
 80058c8:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80058cc:	9305      	str	r3, [sp, #20]
 80058ce:	2300      	movs	r3, #0
 80058d0:	2400      	movs	r4, #0
 80058d2:	930c      	str	r3, [sp, #48]	; 0x30
 80058d4:	2300      	movs	r3, #0
 80058d6:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80058da:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 80058de:	e7b8      	b.n	8005852 <pow+0x1fa>
 80058e0:	a804      	add	r0, sp, #16
 80058e2:	f000 fe29 	bl	8006538 <matherr>
 80058e6:	2800      	cmp	r0, #0
 80058e8:	f47f af1e 	bne.w	8005728 <pow+0xd0>
 80058ec:	e7b5      	b.n	800585a <pow+0x202>
 80058ee:	bf00      	nop
 80058f0:	20000104 	.word	0x20000104
 80058f4:	080095e3 	.word	0x080095e3
 80058f8:	3ff00000 	.word	0x3ff00000
 80058fc:	fff00000 	.word	0xfff00000
 8005900:	3fe00000 	.word	0x3fe00000
 8005904:	47efffff 	.word	0x47efffff
 8005908:	c7efffff 	.word	0xc7efffff
 800590c:	7ff00000 	.word	0x7ff00000

08005910 <sqrt>:
 8005910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005914:	b08b      	sub	sp, #44	; 0x2c
 8005916:	4604      	mov	r4, r0
 8005918:	460d      	mov	r5, r1
 800591a:	f000 fd57 	bl	80063cc <__ieee754_sqrt>
 800591e:	4b24      	ldr	r3, [pc, #144]	; (80059b0 <sqrt+0xa0>)
 8005920:	4680      	mov	r8, r0
 8005922:	f993 a000 	ldrsb.w	sl, [r3]
 8005926:	4689      	mov	r9, r1
 8005928:	f1ba 3fff 	cmp.w	sl, #4294967295
 800592c:	d02b      	beq.n	8005986 <sqrt+0x76>
 800592e:	4622      	mov	r2, r4
 8005930:	462b      	mov	r3, r5
 8005932:	4620      	mov	r0, r4
 8005934:	4629      	mov	r1, r5
 8005936:	f7fb f861 	bl	80009fc <__aeabi_dcmpun>
 800593a:	4683      	mov	fp, r0
 800593c:	bb18      	cbnz	r0, 8005986 <sqrt+0x76>
 800593e:	2600      	movs	r6, #0
 8005940:	2700      	movs	r7, #0
 8005942:	4632      	mov	r2, r6
 8005944:	463b      	mov	r3, r7
 8005946:	4620      	mov	r0, r4
 8005948:	4629      	mov	r1, r5
 800594a:	f7fb f82f 	bl	80009ac <__aeabi_dcmplt>
 800594e:	b1d0      	cbz	r0, 8005986 <sqrt+0x76>
 8005950:	2301      	movs	r3, #1
 8005952:	9300      	str	r3, [sp, #0]
 8005954:	4b17      	ldr	r3, [pc, #92]	; (80059b4 <sqrt+0xa4>)
 8005956:	f8cd b020 	str.w	fp, [sp, #32]
 800595a:	9301      	str	r3, [sp, #4]
 800595c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8005960:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005964:	f1ba 0f00 	cmp.w	sl, #0
 8005968:	d112      	bne.n	8005990 <sqrt+0x80>
 800596a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800596e:	4668      	mov	r0, sp
 8005970:	f000 fde2 	bl	8006538 <matherr>
 8005974:	b1b8      	cbz	r0, 80059a6 <sqrt+0x96>
 8005976:	9b08      	ldr	r3, [sp, #32]
 8005978:	b11b      	cbz	r3, 8005982 <sqrt+0x72>
 800597a:	f7fe fedd 	bl	8004738 <__errno>
 800597e:	9b08      	ldr	r3, [sp, #32]
 8005980:	6003      	str	r3, [r0, #0]
 8005982:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8005986:	4640      	mov	r0, r8
 8005988:	4649      	mov	r1, r9
 800598a:	b00b      	add	sp, #44	; 0x2c
 800598c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005990:	4632      	mov	r2, r6
 8005992:	463b      	mov	r3, r7
 8005994:	4630      	mov	r0, r6
 8005996:	4639      	mov	r1, r7
 8005998:	f7fa fec0 	bl	800071c <__aeabi_ddiv>
 800599c:	f1ba 0f02 	cmp.w	sl, #2
 80059a0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80059a4:	d1e3      	bne.n	800596e <sqrt+0x5e>
 80059a6:	f7fe fec7 	bl	8004738 <__errno>
 80059aa:	2321      	movs	r3, #33	; 0x21
 80059ac:	6003      	str	r3, [r0, #0]
 80059ae:	e7e2      	b.n	8005976 <sqrt+0x66>
 80059b0:	20000104 	.word	0x20000104
 80059b4:	080095e7 	.word	0x080095e7

080059b8 <__ieee754_pow>:
 80059b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059bc:	b091      	sub	sp, #68	; 0x44
 80059be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80059c2:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 80059c6:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80059ca:	ea55 0302 	orrs.w	r3, r5, r2
 80059ce:	4607      	mov	r7, r0
 80059d0:	4688      	mov	r8, r1
 80059d2:	f000 84b7 	beq.w	8006344 <__ieee754_pow+0x98c>
 80059d6:	4b80      	ldr	r3, [pc, #512]	; (8005bd8 <__ieee754_pow+0x220>)
 80059d8:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 80059dc:	429c      	cmp	r4, r3
 80059de:	4689      	mov	r9, r1
 80059e0:	4682      	mov	sl, r0
 80059e2:	dc09      	bgt.n	80059f8 <__ieee754_pow+0x40>
 80059e4:	d103      	bne.n	80059ee <__ieee754_pow+0x36>
 80059e6:	b938      	cbnz	r0, 80059f8 <__ieee754_pow+0x40>
 80059e8:	42a5      	cmp	r5, r4
 80059ea:	dc0d      	bgt.n	8005a08 <__ieee754_pow+0x50>
 80059ec:	e001      	b.n	80059f2 <__ieee754_pow+0x3a>
 80059ee:	429d      	cmp	r5, r3
 80059f0:	dc02      	bgt.n	80059f8 <__ieee754_pow+0x40>
 80059f2:	429d      	cmp	r5, r3
 80059f4:	d10e      	bne.n	8005a14 <__ieee754_pow+0x5c>
 80059f6:	b16a      	cbz	r2, 8005a14 <__ieee754_pow+0x5c>
 80059f8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80059fc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005a00:	ea54 030a 	orrs.w	r3, r4, sl
 8005a04:	f000 849e 	beq.w	8006344 <__ieee754_pow+0x98c>
 8005a08:	4874      	ldr	r0, [pc, #464]	; (8005bdc <__ieee754_pow+0x224>)
 8005a0a:	b011      	add	sp, #68	; 0x44
 8005a0c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a10:	f000 bd94 	b.w	800653c <nan>
 8005a14:	f1b9 0f00 	cmp.w	r9, #0
 8005a18:	da53      	bge.n	8005ac2 <__ieee754_pow+0x10a>
 8005a1a:	4b71      	ldr	r3, [pc, #452]	; (8005be0 <__ieee754_pow+0x228>)
 8005a1c:	429d      	cmp	r5, r3
 8005a1e:	dc4e      	bgt.n	8005abe <__ieee754_pow+0x106>
 8005a20:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005a24:	429d      	cmp	r5, r3
 8005a26:	dd4c      	ble.n	8005ac2 <__ieee754_pow+0x10a>
 8005a28:	152b      	asrs	r3, r5, #20
 8005a2a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005a2e:	2b14      	cmp	r3, #20
 8005a30:	dd28      	ble.n	8005a84 <__ieee754_pow+0xcc>
 8005a32:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005a36:	fa22 f103 	lsr.w	r1, r2, r3
 8005a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d13f      	bne.n	8005ac2 <__ieee754_pow+0x10a>
 8005a42:	f001 0101 	and.w	r1, r1, #1
 8005a46:	f1c1 0302 	rsb	r3, r1, #2
 8005a4a:	9300      	str	r3, [sp, #0]
 8005a4c:	2a00      	cmp	r2, #0
 8005a4e:	d15c      	bne.n	8005b0a <__ieee754_pow+0x152>
 8005a50:	4b61      	ldr	r3, [pc, #388]	; (8005bd8 <__ieee754_pow+0x220>)
 8005a52:	429d      	cmp	r5, r3
 8005a54:	d126      	bne.n	8005aa4 <__ieee754_pow+0xec>
 8005a56:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005a5a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005a5e:	ea53 030a 	orrs.w	r3, r3, sl
 8005a62:	f000 846f 	beq.w	8006344 <__ieee754_pow+0x98c>
 8005a66:	4b5f      	ldr	r3, [pc, #380]	; (8005be4 <__ieee754_pow+0x22c>)
 8005a68:	429c      	cmp	r4, r3
 8005a6a:	dd2c      	ble.n	8005ac6 <__ieee754_pow+0x10e>
 8005a6c:	2e00      	cmp	r6, #0
 8005a6e:	f280 846f 	bge.w	8006350 <__ieee754_pow+0x998>
 8005a72:	f04f 0b00 	mov.w	fp, #0
 8005a76:	f04f 0c00 	mov.w	ip, #0
 8005a7a:	4658      	mov	r0, fp
 8005a7c:	4661      	mov	r1, ip
 8005a7e:	b011      	add	sp, #68	; 0x44
 8005a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a84:	2a00      	cmp	r2, #0
 8005a86:	d13e      	bne.n	8005b06 <__ieee754_pow+0x14e>
 8005a88:	f1c3 0314 	rsb	r3, r3, #20
 8005a8c:	fa45 f103 	asr.w	r1, r5, r3
 8005a90:	fa01 f303 	lsl.w	r3, r1, r3
 8005a94:	42ab      	cmp	r3, r5
 8005a96:	f040 8463 	bne.w	8006360 <__ieee754_pow+0x9a8>
 8005a9a:	f001 0101 	and.w	r1, r1, #1
 8005a9e:	f1c1 0302 	rsb	r3, r1, #2
 8005aa2:	9300      	str	r3, [sp, #0]
 8005aa4:	4b50      	ldr	r3, [pc, #320]	; (8005be8 <__ieee754_pow+0x230>)
 8005aa6:	429d      	cmp	r5, r3
 8005aa8:	d114      	bne.n	8005ad4 <__ieee754_pow+0x11c>
 8005aaa:	2e00      	cmp	r6, #0
 8005aac:	f280 8454 	bge.w	8006358 <__ieee754_pow+0x9a0>
 8005ab0:	463a      	mov	r2, r7
 8005ab2:	4643      	mov	r3, r8
 8005ab4:	2000      	movs	r0, #0
 8005ab6:	494c      	ldr	r1, [pc, #304]	; (8005be8 <__ieee754_pow+0x230>)
 8005ab8:	f7fa fe30 	bl	800071c <__aeabi_ddiv>
 8005abc:	e013      	b.n	8005ae6 <__ieee754_pow+0x12e>
 8005abe:	2302      	movs	r3, #2
 8005ac0:	e7c3      	b.n	8005a4a <__ieee754_pow+0x92>
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	e7c1      	b.n	8005a4a <__ieee754_pow+0x92>
 8005ac6:	2e00      	cmp	r6, #0
 8005ac8:	dad3      	bge.n	8005a72 <__ieee754_pow+0xba>
 8005aca:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8005ace:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8005ad2:	e7d2      	b.n	8005a7a <__ieee754_pow+0xc2>
 8005ad4:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8005ad8:	d108      	bne.n	8005aec <__ieee754_pow+0x134>
 8005ada:	463a      	mov	r2, r7
 8005adc:	4643      	mov	r3, r8
 8005ade:	4638      	mov	r0, r7
 8005ae0:	4641      	mov	r1, r8
 8005ae2:	f7fa fcf1 	bl	80004c8 <__aeabi_dmul>
 8005ae6:	4683      	mov	fp, r0
 8005ae8:	468c      	mov	ip, r1
 8005aea:	e7c6      	b.n	8005a7a <__ieee754_pow+0xc2>
 8005aec:	4b3f      	ldr	r3, [pc, #252]	; (8005bec <__ieee754_pow+0x234>)
 8005aee:	429e      	cmp	r6, r3
 8005af0:	d10b      	bne.n	8005b0a <__ieee754_pow+0x152>
 8005af2:	f1b9 0f00 	cmp.w	r9, #0
 8005af6:	db08      	blt.n	8005b0a <__ieee754_pow+0x152>
 8005af8:	4638      	mov	r0, r7
 8005afa:	4641      	mov	r1, r8
 8005afc:	b011      	add	sp, #68	; 0x44
 8005afe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b02:	f000 bc63 	b.w	80063cc <__ieee754_sqrt>
 8005b06:	2300      	movs	r3, #0
 8005b08:	9300      	str	r3, [sp, #0]
 8005b0a:	4638      	mov	r0, r7
 8005b0c:	4641      	mov	r1, r8
 8005b0e:	f000 fd09 	bl	8006524 <fabs>
 8005b12:	4683      	mov	fp, r0
 8005b14:	468c      	mov	ip, r1
 8005b16:	f1ba 0f00 	cmp.w	sl, #0
 8005b1a:	d12b      	bne.n	8005b74 <__ieee754_pow+0x1bc>
 8005b1c:	b124      	cbz	r4, 8005b28 <__ieee754_pow+0x170>
 8005b1e:	4b32      	ldr	r3, [pc, #200]	; (8005be8 <__ieee754_pow+0x230>)
 8005b20:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d125      	bne.n	8005b74 <__ieee754_pow+0x1bc>
 8005b28:	2e00      	cmp	r6, #0
 8005b2a:	da07      	bge.n	8005b3c <__ieee754_pow+0x184>
 8005b2c:	465a      	mov	r2, fp
 8005b2e:	4663      	mov	r3, ip
 8005b30:	2000      	movs	r0, #0
 8005b32:	492d      	ldr	r1, [pc, #180]	; (8005be8 <__ieee754_pow+0x230>)
 8005b34:	f7fa fdf2 	bl	800071c <__aeabi_ddiv>
 8005b38:	4683      	mov	fp, r0
 8005b3a:	468c      	mov	ip, r1
 8005b3c:	f1b9 0f00 	cmp.w	r9, #0
 8005b40:	da9b      	bge.n	8005a7a <__ieee754_pow+0xc2>
 8005b42:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005b46:	9b00      	ldr	r3, [sp, #0]
 8005b48:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005b4c:	4323      	orrs	r3, r4
 8005b4e:	d108      	bne.n	8005b62 <__ieee754_pow+0x1aa>
 8005b50:	465a      	mov	r2, fp
 8005b52:	4663      	mov	r3, ip
 8005b54:	4658      	mov	r0, fp
 8005b56:	4661      	mov	r1, ip
 8005b58:	f7fa fafe 	bl	8000158 <__aeabi_dsub>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	460b      	mov	r3, r1
 8005b60:	e7aa      	b.n	8005ab8 <__ieee754_pow+0x100>
 8005b62:	9b00      	ldr	r3, [sp, #0]
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d188      	bne.n	8005a7a <__ieee754_pow+0xc2>
 8005b68:	4658      	mov	r0, fp
 8005b6a:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8005b6e:	4683      	mov	fp, r0
 8005b70:	469c      	mov	ip, r3
 8005b72:	e782      	b.n	8005a7a <__ieee754_pow+0xc2>
 8005b74:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8005b78:	f109 33ff 	add.w	r3, r9, #4294967295
 8005b7c:	930d      	str	r3, [sp, #52]	; 0x34
 8005b7e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005b80:	9b00      	ldr	r3, [sp, #0]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	d104      	bne.n	8005b90 <__ieee754_pow+0x1d8>
 8005b86:	463a      	mov	r2, r7
 8005b88:	4643      	mov	r3, r8
 8005b8a:	4638      	mov	r0, r7
 8005b8c:	4641      	mov	r1, r8
 8005b8e:	e7e3      	b.n	8005b58 <__ieee754_pow+0x1a0>
 8005b90:	4b17      	ldr	r3, [pc, #92]	; (8005bf0 <__ieee754_pow+0x238>)
 8005b92:	429d      	cmp	r5, r3
 8005b94:	f340 80fe 	ble.w	8005d94 <__ieee754_pow+0x3dc>
 8005b98:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005b9c:	429d      	cmp	r5, r3
 8005b9e:	dd0b      	ble.n	8005bb8 <__ieee754_pow+0x200>
 8005ba0:	4b10      	ldr	r3, [pc, #64]	; (8005be4 <__ieee754_pow+0x22c>)
 8005ba2:	429c      	cmp	r4, r3
 8005ba4:	dc0e      	bgt.n	8005bc4 <__ieee754_pow+0x20c>
 8005ba6:	2e00      	cmp	r6, #0
 8005ba8:	f6bf af63 	bge.w	8005a72 <__ieee754_pow+0xba>
 8005bac:	a308      	add	r3, pc, #32	; (adr r3, 8005bd0 <__ieee754_pow+0x218>)
 8005bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb2:	4610      	mov	r0, r2
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	e794      	b.n	8005ae2 <__ieee754_pow+0x12a>
 8005bb8:	4b0e      	ldr	r3, [pc, #56]	; (8005bf4 <__ieee754_pow+0x23c>)
 8005bba:	429c      	cmp	r4, r3
 8005bbc:	ddf3      	ble.n	8005ba6 <__ieee754_pow+0x1ee>
 8005bbe:	4b0a      	ldr	r3, [pc, #40]	; (8005be8 <__ieee754_pow+0x230>)
 8005bc0:	429c      	cmp	r4, r3
 8005bc2:	dd19      	ble.n	8005bf8 <__ieee754_pow+0x240>
 8005bc4:	2e00      	cmp	r6, #0
 8005bc6:	dcf1      	bgt.n	8005bac <__ieee754_pow+0x1f4>
 8005bc8:	e753      	b.n	8005a72 <__ieee754_pow+0xba>
 8005bca:	bf00      	nop
 8005bcc:	f3af 8000 	nop.w
 8005bd0:	8800759c 	.word	0x8800759c
 8005bd4:	7e37e43c 	.word	0x7e37e43c
 8005bd8:	7ff00000 	.word	0x7ff00000
 8005bdc:	080095b5 	.word	0x080095b5
 8005be0:	433fffff 	.word	0x433fffff
 8005be4:	3fefffff 	.word	0x3fefffff
 8005be8:	3ff00000 	.word	0x3ff00000
 8005bec:	3fe00000 	.word	0x3fe00000
 8005bf0:	41e00000 	.word	0x41e00000
 8005bf4:	3feffffe 	.word	0x3feffffe
 8005bf8:	4661      	mov	r1, ip
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	4b60      	ldr	r3, [pc, #384]	; (8005d80 <__ieee754_pow+0x3c8>)
 8005bfe:	4658      	mov	r0, fp
 8005c00:	f7fa faaa 	bl	8000158 <__aeabi_dsub>
 8005c04:	a354      	add	r3, pc, #336	; (adr r3, 8005d58 <__ieee754_pow+0x3a0>)
 8005c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c0a:	4604      	mov	r4, r0
 8005c0c:	460d      	mov	r5, r1
 8005c0e:	f7fa fc5b 	bl	80004c8 <__aeabi_dmul>
 8005c12:	a353      	add	r3, pc, #332	; (adr r3, 8005d60 <__ieee754_pow+0x3a8>)
 8005c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c18:	4606      	mov	r6, r0
 8005c1a:	460f      	mov	r7, r1
 8005c1c:	4620      	mov	r0, r4
 8005c1e:	4629      	mov	r1, r5
 8005c20:	f7fa fc52 	bl	80004c8 <__aeabi_dmul>
 8005c24:	2200      	movs	r2, #0
 8005c26:	4682      	mov	sl, r0
 8005c28:	468b      	mov	fp, r1
 8005c2a:	4b56      	ldr	r3, [pc, #344]	; (8005d84 <__ieee754_pow+0x3cc>)
 8005c2c:	4620      	mov	r0, r4
 8005c2e:	4629      	mov	r1, r5
 8005c30:	f7fa fc4a 	bl	80004c8 <__aeabi_dmul>
 8005c34:	4602      	mov	r2, r0
 8005c36:	460b      	mov	r3, r1
 8005c38:	a14b      	add	r1, pc, #300	; (adr r1, 8005d68 <__ieee754_pow+0x3b0>)
 8005c3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c3e:	f7fa fa8b 	bl	8000158 <__aeabi_dsub>
 8005c42:	4622      	mov	r2, r4
 8005c44:	462b      	mov	r3, r5
 8005c46:	f7fa fc3f 	bl	80004c8 <__aeabi_dmul>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	2000      	movs	r0, #0
 8005c50:	494d      	ldr	r1, [pc, #308]	; (8005d88 <__ieee754_pow+0x3d0>)
 8005c52:	f7fa fa81 	bl	8000158 <__aeabi_dsub>
 8005c56:	4622      	mov	r2, r4
 8005c58:	462b      	mov	r3, r5
 8005c5a:	4680      	mov	r8, r0
 8005c5c:	4689      	mov	r9, r1
 8005c5e:	4620      	mov	r0, r4
 8005c60:	4629      	mov	r1, r5
 8005c62:	f7fa fc31 	bl	80004c8 <__aeabi_dmul>
 8005c66:	4602      	mov	r2, r0
 8005c68:	460b      	mov	r3, r1
 8005c6a:	4640      	mov	r0, r8
 8005c6c:	4649      	mov	r1, r9
 8005c6e:	f7fa fc2b 	bl	80004c8 <__aeabi_dmul>
 8005c72:	a33f      	add	r3, pc, #252	; (adr r3, 8005d70 <__ieee754_pow+0x3b8>)
 8005c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c78:	f7fa fc26 	bl	80004c8 <__aeabi_dmul>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	460b      	mov	r3, r1
 8005c80:	4650      	mov	r0, sl
 8005c82:	4659      	mov	r1, fp
 8005c84:	f7fa fa68 	bl	8000158 <__aeabi_dsub>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	460b      	mov	r3, r1
 8005c8c:	4604      	mov	r4, r0
 8005c8e:	460d      	mov	r5, r1
 8005c90:	4630      	mov	r0, r6
 8005c92:	4639      	mov	r1, r7
 8005c94:	f7fa fa62 	bl	800015c <__adddf3>
 8005c98:	2000      	movs	r0, #0
 8005c9a:	468b      	mov	fp, r1
 8005c9c:	4682      	mov	sl, r0
 8005c9e:	4632      	mov	r2, r6
 8005ca0:	463b      	mov	r3, r7
 8005ca2:	f7fa fa59 	bl	8000158 <__aeabi_dsub>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	460b      	mov	r3, r1
 8005caa:	4620      	mov	r0, r4
 8005cac:	4629      	mov	r1, r5
 8005cae:	f7fa fa53 	bl	8000158 <__aeabi_dsub>
 8005cb2:	9b00      	ldr	r3, [sp, #0]
 8005cb4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	f04f 0300 	mov.w	r3, #0
 8005cbe:	bf0c      	ite	eq
 8005cc0:	4c32      	ldreq	r4, [pc, #200]	; (8005d8c <__ieee754_pow+0x3d4>)
 8005cc2:	4c2f      	ldrne	r4, [pc, #188]	; (8005d80 <__ieee754_pow+0x3c8>)
 8005cc4:	4606      	mov	r6, r0
 8005cc6:	e9cd 3400 	strd	r3, r4, [sp]
 8005cca:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005cce:	2400      	movs	r4, #0
 8005cd0:	460f      	mov	r7, r1
 8005cd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cd6:	4622      	mov	r2, r4
 8005cd8:	462b      	mov	r3, r5
 8005cda:	f7fa fa3d 	bl	8000158 <__aeabi_dsub>
 8005cde:	4652      	mov	r2, sl
 8005ce0:	465b      	mov	r3, fp
 8005ce2:	f7fa fbf1 	bl	80004c8 <__aeabi_dmul>
 8005ce6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005cea:	4680      	mov	r8, r0
 8005cec:	4689      	mov	r9, r1
 8005cee:	4630      	mov	r0, r6
 8005cf0:	4639      	mov	r1, r7
 8005cf2:	f7fa fbe9 	bl	80004c8 <__aeabi_dmul>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	4640      	mov	r0, r8
 8005cfc:	4649      	mov	r1, r9
 8005cfe:	f7fa fa2d 	bl	800015c <__adddf3>
 8005d02:	4622      	mov	r2, r4
 8005d04:	462b      	mov	r3, r5
 8005d06:	4680      	mov	r8, r0
 8005d08:	4689      	mov	r9, r1
 8005d0a:	4650      	mov	r0, sl
 8005d0c:	4659      	mov	r1, fp
 8005d0e:	f7fa fbdb 	bl	80004c8 <__aeabi_dmul>
 8005d12:	4604      	mov	r4, r0
 8005d14:	460d      	mov	r5, r1
 8005d16:	460b      	mov	r3, r1
 8005d18:	4602      	mov	r2, r0
 8005d1a:	4649      	mov	r1, r9
 8005d1c:	4640      	mov	r0, r8
 8005d1e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005d22:	f7fa fa1b 	bl	800015c <__adddf3>
 8005d26:	4b1a      	ldr	r3, [pc, #104]	; (8005d90 <__ieee754_pow+0x3d8>)
 8005d28:	4682      	mov	sl, r0
 8005d2a:	4299      	cmp	r1, r3
 8005d2c:	460f      	mov	r7, r1
 8005d2e:	460e      	mov	r6, r1
 8005d30:	f340 82e1 	ble.w	80062f6 <__ieee754_pow+0x93e>
 8005d34:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005d38:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8005d3c:	4303      	orrs	r3, r0
 8005d3e:	f000 81db 	beq.w	80060f8 <__ieee754_pow+0x740>
 8005d42:	a30d      	add	r3, pc, #52	; (adr r3, 8005d78 <__ieee754_pow+0x3c0>)
 8005d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d4c:	f7fa fbbc 	bl	80004c8 <__aeabi_dmul>
 8005d50:	a309      	add	r3, pc, #36	; (adr r3, 8005d78 <__ieee754_pow+0x3c0>)
 8005d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d56:	e6c4      	b.n	8005ae2 <__ieee754_pow+0x12a>
 8005d58:	60000000 	.word	0x60000000
 8005d5c:	3ff71547 	.word	0x3ff71547
 8005d60:	f85ddf44 	.word	0xf85ddf44
 8005d64:	3e54ae0b 	.word	0x3e54ae0b
 8005d68:	55555555 	.word	0x55555555
 8005d6c:	3fd55555 	.word	0x3fd55555
 8005d70:	652b82fe 	.word	0x652b82fe
 8005d74:	3ff71547 	.word	0x3ff71547
 8005d78:	8800759c 	.word	0x8800759c
 8005d7c:	7e37e43c 	.word	0x7e37e43c
 8005d80:	3ff00000 	.word	0x3ff00000
 8005d84:	3fd00000 	.word	0x3fd00000
 8005d88:	3fe00000 	.word	0x3fe00000
 8005d8c:	bff00000 	.word	0xbff00000
 8005d90:	408fffff 	.word	0x408fffff
 8005d94:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8005d98:	f04f 0200 	mov.w	r2, #0
 8005d9c:	da08      	bge.n	8005db0 <__ieee754_pow+0x3f8>
 8005d9e:	4658      	mov	r0, fp
 8005da0:	4bcd      	ldr	r3, [pc, #820]	; (80060d8 <__ieee754_pow+0x720>)
 8005da2:	4661      	mov	r1, ip
 8005da4:	f7fa fb90 	bl	80004c8 <__aeabi_dmul>
 8005da8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8005dac:	4683      	mov	fp, r0
 8005dae:	460c      	mov	r4, r1
 8005db0:	1523      	asrs	r3, r4, #20
 8005db2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005db6:	4413      	add	r3, r2
 8005db8:	930c      	str	r3, [sp, #48]	; 0x30
 8005dba:	4bc8      	ldr	r3, [pc, #800]	; (80060dc <__ieee754_pow+0x724>)
 8005dbc:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005dc0:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005dc4:	429c      	cmp	r4, r3
 8005dc6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005dca:	dd08      	ble.n	8005dde <__ieee754_pow+0x426>
 8005dcc:	4bc4      	ldr	r3, [pc, #784]	; (80060e0 <__ieee754_pow+0x728>)
 8005dce:	429c      	cmp	r4, r3
 8005dd0:	f340 815b 	ble.w	800608a <__ieee754_pow+0x6d2>
 8005dd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005dd6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005dda:	3301      	adds	r3, #1
 8005ddc:	930c      	str	r3, [sp, #48]	; 0x30
 8005dde:	f04f 0800 	mov.w	r8, #0
 8005de2:	4658      	mov	r0, fp
 8005de4:	4629      	mov	r1, r5
 8005de6:	4bbf      	ldr	r3, [pc, #764]	; (80060e4 <__ieee754_pow+0x72c>)
 8005de8:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8005dec:	444b      	add	r3, r9
 8005dee:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005df2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8005df6:	461a      	mov	r2, r3
 8005df8:	4623      	mov	r3, r4
 8005dfa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005dfe:	f7fa f9ab 	bl	8000158 <__aeabi_dsub>
 8005e02:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005e06:	4606      	mov	r6, r0
 8005e08:	460f      	mov	r7, r1
 8005e0a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005e0e:	f7fa f9a5 	bl	800015c <__adddf3>
 8005e12:	4602      	mov	r2, r0
 8005e14:	460b      	mov	r3, r1
 8005e16:	2000      	movs	r0, #0
 8005e18:	49b3      	ldr	r1, [pc, #716]	; (80060e8 <__ieee754_pow+0x730>)
 8005e1a:	f7fa fc7f 	bl	800071c <__aeabi_ddiv>
 8005e1e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8005e22:	4602      	mov	r2, r0
 8005e24:	460b      	mov	r3, r1
 8005e26:	4630      	mov	r0, r6
 8005e28:	4639      	mov	r1, r7
 8005e2a:	f7fa fb4d 	bl	80004c8 <__aeabi_dmul>
 8005e2e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005e32:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8005e36:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	106d      	asrs	r5, r5, #1
 8005e40:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005e44:	9304      	str	r3, [sp, #16]
 8005e46:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005e4a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8005e4e:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 8005e52:	4650      	mov	r0, sl
 8005e54:	4659      	mov	r1, fp
 8005e56:	4614      	mov	r4, r2
 8005e58:	461d      	mov	r5, r3
 8005e5a:	f7fa fb35 	bl	80004c8 <__aeabi_dmul>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	460b      	mov	r3, r1
 8005e62:	4630      	mov	r0, r6
 8005e64:	4639      	mov	r1, r7
 8005e66:	f7fa f977 	bl	8000158 <__aeabi_dsub>
 8005e6a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005e6e:	4606      	mov	r6, r0
 8005e70:	460f      	mov	r7, r1
 8005e72:	4620      	mov	r0, r4
 8005e74:	4629      	mov	r1, r5
 8005e76:	f7fa f96f 	bl	8000158 <__aeabi_dsub>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005e82:	f7fa f969 	bl	8000158 <__aeabi_dsub>
 8005e86:	4652      	mov	r2, sl
 8005e88:	465b      	mov	r3, fp
 8005e8a:	f7fa fb1d 	bl	80004c8 <__aeabi_dmul>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	460b      	mov	r3, r1
 8005e92:	4630      	mov	r0, r6
 8005e94:	4639      	mov	r1, r7
 8005e96:	f7fa f95f 	bl	8000158 <__aeabi_dsub>
 8005e9a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005e9e:	f7fa fb13 	bl	80004c8 <__aeabi_dmul>
 8005ea2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005ea6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005eaa:	4610      	mov	r0, r2
 8005eac:	4619      	mov	r1, r3
 8005eae:	f7fa fb0b 	bl	80004c8 <__aeabi_dmul>
 8005eb2:	a377      	add	r3, pc, #476	; (adr r3, 8006090 <__ieee754_pow+0x6d8>)
 8005eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb8:	4604      	mov	r4, r0
 8005eba:	460d      	mov	r5, r1
 8005ebc:	f7fa fb04 	bl	80004c8 <__aeabi_dmul>
 8005ec0:	a375      	add	r3, pc, #468	; (adr r3, 8006098 <__ieee754_pow+0x6e0>)
 8005ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec6:	f7fa f949 	bl	800015c <__adddf3>
 8005eca:	4622      	mov	r2, r4
 8005ecc:	462b      	mov	r3, r5
 8005ece:	f7fa fafb 	bl	80004c8 <__aeabi_dmul>
 8005ed2:	a373      	add	r3, pc, #460	; (adr r3, 80060a0 <__ieee754_pow+0x6e8>)
 8005ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed8:	f7fa f940 	bl	800015c <__adddf3>
 8005edc:	4622      	mov	r2, r4
 8005ede:	462b      	mov	r3, r5
 8005ee0:	f7fa faf2 	bl	80004c8 <__aeabi_dmul>
 8005ee4:	a370      	add	r3, pc, #448	; (adr r3, 80060a8 <__ieee754_pow+0x6f0>)
 8005ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eea:	f7fa f937 	bl	800015c <__adddf3>
 8005eee:	4622      	mov	r2, r4
 8005ef0:	462b      	mov	r3, r5
 8005ef2:	f7fa fae9 	bl	80004c8 <__aeabi_dmul>
 8005ef6:	a36e      	add	r3, pc, #440	; (adr r3, 80060b0 <__ieee754_pow+0x6f8>)
 8005ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005efc:	f7fa f92e 	bl	800015c <__adddf3>
 8005f00:	4622      	mov	r2, r4
 8005f02:	462b      	mov	r3, r5
 8005f04:	f7fa fae0 	bl	80004c8 <__aeabi_dmul>
 8005f08:	a36b      	add	r3, pc, #428	; (adr r3, 80060b8 <__ieee754_pow+0x700>)
 8005f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f0e:	f7fa f925 	bl	800015c <__adddf3>
 8005f12:	4622      	mov	r2, r4
 8005f14:	4606      	mov	r6, r0
 8005f16:	460f      	mov	r7, r1
 8005f18:	462b      	mov	r3, r5
 8005f1a:	4620      	mov	r0, r4
 8005f1c:	4629      	mov	r1, r5
 8005f1e:	f7fa fad3 	bl	80004c8 <__aeabi_dmul>
 8005f22:	4602      	mov	r2, r0
 8005f24:	460b      	mov	r3, r1
 8005f26:	4630      	mov	r0, r6
 8005f28:	4639      	mov	r1, r7
 8005f2a:	f7fa facd 	bl	80004c8 <__aeabi_dmul>
 8005f2e:	4604      	mov	r4, r0
 8005f30:	460d      	mov	r5, r1
 8005f32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f36:	4652      	mov	r2, sl
 8005f38:	465b      	mov	r3, fp
 8005f3a:	f7fa f90f 	bl	800015c <__adddf3>
 8005f3e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005f42:	f7fa fac1 	bl	80004c8 <__aeabi_dmul>
 8005f46:	4622      	mov	r2, r4
 8005f48:	462b      	mov	r3, r5
 8005f4a:	f7fa f907 	bl	800015c <__adddf3>
 8005f4e:	4652      	mov	r2, sl
 8005f50:	4606      	mov	r6, r0
 8005f52:	460f      	mov	r7, r1
 8005f54:	465b      	mov	r3, fp
 8005f56:	4650      	mov	r0, sl
 8005f58:	4659      	mov	r1, fp
 8005f5a:	f7fa fab5 	bl	80004c8 <__aeabi_dmul>
 8005f5e:	2200      	movs	r2, #0
 8005f60:	4b62      	ldr	r3, [pc, #392]	; (80060ec <__ieee754_pow+0x734>)
 8005f62:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005f66:	f7fa f8f9 	bl	800015c <__adddf3>
 8005f6a:	4632      	mov	r2, r6
 8005f6c:	463b      	mov	r3, r7
 8005f6e:	f7fa f8f5 	bl	800015c <__adddf3>
 8005f72:	9804      	ldr	r0, [sp, #16]
 8005f74:	460d      	mov	r5, r1
 8005f76:	4604      	mov	r4, r0
 8005f78:	4602      	mov	r2, r0
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	4650      	mov	r0, sl
 8005f7e:	4659      	mov	r1, fp
 8005f80:	f7fa faa2 	bl	80004c8 <__aeabi_dmul>
 8005f84:	2200      	movs	r2, #0
 8005f86:	4682      	mov	sl, r0
 8005f88:	468b      	mov	fp, r1
 8005f8a:	4b58      	ldr	r3, [pc, #352]	; (80060ec <__ieee754_pow+0x734>)
 8005f8c:	4620      	mov	r0, r4
 8005f8e:	4629      	mov	r1, r5
 8005f90:	f7fa f8e2 	bl	8000158 <__aeabi_dsub>
 8005f94:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005f98:	f7fa f8de 	bl	8000158 <__aeabi_dsub>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	4630      	mov	r0, r6
 8005fa2:	4639      	mov	r1, r7
 8005fa4:	f7fa f8d8 	bl	8000158 <__aeabi_dsub>
 8005fa8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005fac:	f7fa fa8c 	bl	80004c8 <__aeabi_dmul>
 8005fb0:	4622      	mov	r2, r4
 8005fb2:	4606      	mov	r6, r0
 8005fb4:	460f      	mov	r7, r1
 8005fb6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005fba:	462b      	mov	r3, r5
 8005fbc:	f7fa fa84 	bl	80004c8 <__aeabi_dmul>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	460b      	mov	r3, r1
 8005fc4:	4630      	mov	r0, r6
 8005fc6:	4639      	mov	r1, r7
 8005fc8:	f7fa f8c8 	bl	800015c <__adddf3>
 8005fcc:	4606      	mov	r6, r0
 8005fce:	460f      	mov	r7, r1
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	4650      	mov	r0, sl
 8005fd6:	4659      	mov	r1, fp
 8005fd8:	f7fa f8c0 	bl	800015c <__adddf3>
 8005fdc:	a338      	add	r3, pc, #224	; (adr r3, 80060c0 <__ieee754_pow+0x708>)
 8005fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe2:	9804      	ldr	r0, [sp, #16]
 8005fe4:	460d      	mov	r5, r1
 8005fe6:	4604      	mov	r4, r0
 8005fe8:	f7fa fa6e 	bl	80004c8 <__aeabi_dmul>
 8005fec:	4652      	mov	r2, sl
 8005fee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005ff2:	465b      	mov	r3, fp
 8005ff4:	4620      	mov	r0, r4
 8005ff6:	4629      	mov	r1, r5
 8005ff8:	f7fa f8ae 	bl	8000158 <__aeabi_dsub>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	460b      	mov	r3, r1
 8006000:	4630      	mov	r0, r6
 8006002:	4639      	mov	r1, r7
 8006004:	f7fa f8a8 	bl	8000158 <__aeabi_dsub>
 8006008:	a32f      	add	r3, pc, #188	; (adr r3, 80060c8 <__ieee754_pow+0x710>)
 800600a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800600e:	f7fa fa5b 	bl	80004c8 <__aeabi_dmul>
 8006012:	a32f      	add	r3, pc, #188	; (adr r3, 80060d0 <__ieee754_pow+0x718>)
 8006014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006018:	4606      	mov	r6, r0
 800601a:	460f      	mov	r7, r1
 800601c:	4620      	mov	r0, r4
 800601e:	4629      	mov	r1, r5
 8006020:	f7fa fa52 	bl	80004c8 <__aeabi_dmul>
 8006024:	4602      	mov	r2, r0
 8006026:	460b      	mov	r3, r1
 8006028:	4630      	mov	r0, r6
 800602a:	4639      	mov	r1, r7
 800602c:	f7fa f896 	bl	800015c <__adddf3>
 8006030:	4b2f      	ldr	r3, [pc, #188]	; (80060f0 <__ieee754_pow+0x738>)
 8006032:	444b      	add	r3, r9
 8006034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006038:	f7fa f890 	bl	800015c <__adddf3>
 800603c:	4604      	mov	r4, r0
 800603e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006040:	460d      	mov	r5, r1
 8006042:	f7fa f9d7 	bl	80003f4 <__aeabi_i2d>
 8006046:	4606      	mov	r6, r0
 8006048:	460f      	mov	r7, r1
 800604a:	4b2a      	ldr	r3, [pc, #168]	; (80060f4 <__ieee754_pow+0x73c>)
 800604c:	4622      	mov	r2, r4
 800604e:	444b      	add	r3, r9
 8006050:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006054:	462b      	mov	r3, r5
 8006056:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800605a:	f7fa f87f 	bl	800015c <__adddf3>
 800605e:	4642      	mov	r2, r8
 8006060:	464b      	mov	r3, r9
 8006062:	f7fa f87b 	bl	800015c <__adddf3>
 8006066:	4632      	mov	r2, r6
 8006068:	463b      	mov	r3, r7
 800606a:	f7fa f877 	bl	800015c <__adddf3>
 800606e:	9804      	ldr	r0, [sp, #16]
 8006070:	4632      	mov	r2, r6
 8006072:	463b      	mov	r3, r7
 8006074:	4682      	mov	sl, r0
 8006076:	468b      	mov	fp, r1
 8006078:	f7fa f86e 	bl	8000158 <__aeabi_dsub>
 800607c:	4642      	mov	r2, r8
 800607e:	464b      	mov	r3, r9
 8006080:	f7fa f86a 	bl	8000158 <__aeabi_dsub>
 8006084:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006088:	e60b      	b.n	8005ca2 <__ieee754_pow+0x2ea>
 800608a:	f04f 0801 	mov.w	r8, #1
 800608e:	e6a8      	b.n	8005de2 <__ieee754_pow+0x42a>
 8006090:	4a454eef 	.word	0x4a454eef
 8006094:	3fca7e28 	.word	0x3fca7e28
 8006098:	93c9db65 	.word	0x93c9db65
 800609c:	3fcd864a 	.word	0x3fcd864a
 80060a0:	a91d4101 	.word	0xa91d4101
 80060a4:	3fd17460 	.word	0x3fd17460
 80060a8:	518f264d 	.word	0x518f264d
 80060ac:	3fd55555 	.word	0x3fd55555
 80060b0:	db6fabff 	.word	0xdb6fabff
 80060b4:	3fdb6db6 	.word	0x3fdb6db6
 80060b8:	33333303 	.word	0x33333303
 80060bc:	3fe33333 	.word	0x3fe33333
 80060c0:	e0000000 	.word	0xe0000000
 80060c4:	3feec709 	.word	0x3feec709
 80060c8:	dc3a03fd 	.word	0xdc3a03fd
 80060cc:	3feec709 	.word	0x3feec709
 80060d0:	145b01f5 	.word	0x145b01f5
 80060d4:	be3e2fe0 	.word	0xbe3e2fe0
 80060d8:	43400000 	.word	0x43400000
 80060dc:	0003988e 	.word	0x0003988e
 80060e0:	000bb679 	.word	0x000bb679
 80060e4:	080095f0 	.word	0x080095f0
 80060e8:	3ff00000 	.word	0x3ff00000
 80060ec:	40080000 	.word	0x40080000
 80060f0:	08009610 	.word	0x08009610
 80060f4:	08009600 	.word	0x08009600
 80060f8:	a39b      	add	r3, pc, #620	; (adr r3, 8006368 <__ieee754_pow+0x9b0>)
 80060fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060fe:	4640      	mov	r0, r8
 8006100:	4649      	mov	r1, r9
 8006102:	f7fa f82b 	bl	800015c <__adddf3>
 8006106:	4622      	mov	r2, r4
 8006108:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800610c:	462b      	mov	r3, r5
 800610e:	4650      	mov	r0, sl
 8006110:	4639      	mov	r1, r7
 8006112:	f7fa f821 	bl	8000158 <__aeabi_dsub>
 8006116:	4602      	mov	r2, r0
 8006118:	460b      	mov	r3, r1
 800611a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800611e:	f7fa fc63 	bl	80009e8 <__aeabi_dcmpgt>
 8006122:	2800      	cmp	r0, #0
 8006124:	f47f ae0d 	bne.w	8005d42 <__ieee754_pow+0x38a>
 8006128:	4aa3      	ldr	r2, [pc, #652]	; (80063b8 <__ieee754_pow+0xa00>)
 800612a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800612e:	4293      	cmp	r3, r2
 8006130:	f340 8103 	ble.w	800633a <__ieee754_pow+0x982>
 8006134:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006138:	2000      	movs	r0, #0
 800613a:	151b      	asrs	r3, r3, #20
 800613c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006140:	fa4a f303 	asr.w	r3, sl, r3
 8006144:	4433      	add	r3, r6
 8006146:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800614a:	4f9c      	ldr	r7, [pc, #624]	; (80063bc <__ieee754_pow+0xa04>)
 800614c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006150:	4117      	asrs	r7, r2
 8006152:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006156:	ea23 0107 	bic.w	r1, r3, r7
 800615a:	f1c2 0214 	rsb	r2, r2, #20
 800615e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006162:	fa4a fa02 	asr.w	sl, sl, r2
 8006166:	2e00      	cmp	r6, #0
 8006168:	4602      	mov	r2, r0
 800616a:	460b      	mov	r3, r1
 800616c:	4620      	mov	r0, r4
 800616e:	4629      	mov	r1, r5
 8006170:	bfb8      	it	lt
 8006172:	f1ca 0a00 	rsblt	sl, sl, #0
 8006176:	f7f9 ffef 	bl	8000158 <__aeabi_dsub>
 800617a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800617e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006182:	4642      	mov	r2, r8
 8006184:	464b      	mov	r3, r9
 8006186:	f7f9 ffe9 	bl	800015c <__adddf3>
 800618a:	a379      	add	r3, pc, #484	; (adr r3, 8006370 <__ieee754_pow+0x9b8>)
 800618c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006190:	2000      	movs	r0, #0
 8006192:	460d      	mov	r5, r1
 8006194:	4604      	mov	r4, r0
 8006196:	f7fa f997 	bl	80004c8 <__aeabi_dmul>
 800619a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800619e:	4606      	mov	r6, r0
 80061a0:	460f      	mov	r7, r1
 80061a2:	4620      	mov	r0, r4
 80061a4:	4629      	mov	r1, r5
 80061a6:	f7f9 ffd7 	bl	8000158 <__aeabi_dsub>
 80061aa:	4602      	mov	r2, r0
 80061ac:	460b      	mov	r3, r1
 80061ae:	4640      	mov	r0, r8
 80061b0:	4649      	mov	r1, r9
 80061b2:	f7f9 ffd1 	bl	8000158 <__aeabi_dsub>
 80061b6:	a370      	add	r3, pc, #448	; (adr r3, 8006378 <__ieee754_pow+0x9c0>)
 80061b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061bc:	f7fa f984 	bl	80004c8 <__aeabi_dmul>
 80061c0:	a36f      	add	r3, pc, #444	; (adr r3, 8006380 <__ieee754_pow+0x9c8>)
 80061c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c6:	4680      	mov	r8, r0
 80061c8:	4689      	mov	r9, r1
 80061ca:	4620      	mov	r0, r4
 80061cc:	4629      	mov	r1, r5
 80061ce:	f7fa f97b 	bl	80004c8 <__aeabi_dmul>
 80061d2:	4602      	mov	r2, r0
 80061d4:	460b      	mov	r3, r1
 80061d6:	4640      	mov	r0, r8
 80061d8:	4649      	mov	r1, r9
 80061da:	f7f9 ffbf 	bl	800015c <__adddf3>
 80061de:	4604      	mov	r4, r0
 80061e0:	460d      	mov	r5, r1
 80061e2:	4602      	mov	r2, r0
 80061e4:	460b      	mov	r3, r1
 80061e6:	4630      	mov	r0, r6
 80061e8:	4639      	mov	r1, r7
 80061ea:	f7f9 ffb7 	bl	800015c <__adddf3>
 80061ee:	4632      	mov	r2, r6
 80061f0:	463b      	mov	r3, r7
 80061f2:	4680      	mov	r8, r0
 80061f4:	4689      	mov	r9, r1
 80061f6:	f7f9 ffaf 	bl	8000158 <__aeabi_dsub>
 80061fa:	4602      	mov	r2, r0
 80061fc:	460b      	mov	r3, r1
 80061fe:	4620      	mov	r0, r4
 8006200:	4629      	mov	r1, r5
 8006202:	f7f9 ffa9 	bl	8000158 <__aeabi_dsub>
 8006206:	4642      	mov	r2, r8
 8006208:	4606      	mov	r6, r0
 800620a:	460f      	mov	r7, r1
 800620c:	464b      	mov	r3, r9
 800620e:	4640      	mov	r0, r8
 8006210:	4649      	mov	r1, r9
 8006212:	f7fa f959 	bl	80004c8 <__aeabi_dmul>
 8006216:	a35c      	add	r3, pc, #368	; (adr r3, 8006388 <__ieee754_pow+0x9d0>)
 8006218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800621c:	4604      	mov	r4, r0
 800621e:	460d      	mov	r5, r1
 8006220:	f7fa f952 	bl	80004c8 <__aeabi_dmul>
 8006224:	a35a      	add	r3, pc, #360	; (adr r3, 8006390 <__ieee754_pow+0x9d8>)
 8006226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622a:	f7f9 ff95 	bl	8000158 <__aeabi_dsub>
 800622e:	4622      	mov	r2, r4
 8006230:	462b      	mov	r3, r5
 8006232:	f7fa f949 	bl	80004c8 <__aeabi_dmul>
 8006236:	a358      	add	r3, pc, #352	; (adr r3, 8006398 <__ieee754_pow+0x9e0>)
 8006238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800623c:	f7f9 ff8e 	bl	800015c <__adddf3>
 8006240:	4622      	mov	r2, r4
 8006242:	462b      	mov	r3, r5
 8006244:	f7fa f940 	bl	80004c8 <__aeabi_dmul>
 8006248:	a355      	add	r3, pc, #340	; (adr r3, 80063a0 <__ieee754_pow+0x9e8>)
 800624a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800624e:	f7f9 ff83 	bl	8000158 <__aeabi_dsub>
 8006252:	4622      	mov	r2, r4
 8006254:	462b      	mov	r3, r5
 8006256:	f7fa f937 	bl	80004c8 <__aeabi_dmul>
 800625a:	a353      	add	r3, pc, #332	; (adr r3, 80063a8 <__ieee754_pow+0x9f0>)
 800625c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006260:	f7f9 ff7c 	bl	800015c <__adddf3>
 8006264:	4622      	mov	r2, r4
 8006266:	462b      	mov	r3, r5
 8006268:	f7fa f92e 	bl	80004c8 <__aeabi_dmul>
 800626c:	4602      	mov	r2, r0
 800626e:	460b      	mov	r3, r1
 8006270:	4640      	mov	r0, r8
 8006272:	4649      	mov	r1, r9
 8006274:	f7f9 ff70 	bl	8000158 <__aeabi_dsub>
 8006278:	4604      	mov	r4, r0
 800627a:	460d      	mov	r5, r1
 800627c:	4602      	mov	r2, r0
 800627e:	460b      	mov	r3, r1
 8006280:	4640      	mov	r0, r8
 8006282:	4649      	mov	r1, r9
 8006284:	f7fa f920 	bl	80004c8 <__aeabi_dmul>
 8006288:	2200      	movs	r2, #0
 800628a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800628e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006292:	4620      	mov	r0, r4
 8006294:	4629      	mov	r1, r5
 8006296:	f7f9 ff5f 	bl	8000158 <__aeabi_dsub>
 800629a:	4602      	mov	r2, r0
 800629c:	460b      	mov	r3, r1
 800629e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062a2:	f7fa fa3b 	bl	800071c <__aeabi_ddiv>
 80062a6:	4632      	mov	r2, r6
 80062a8:	4604      	mov	r4, r0
 80062aa:	460d      	mov	r5, r1
 80062ac:	463b      	mov	r3, r7
 80062ae:	4640      	mov	r0, r8
 80062b0:	4649      	mov	r1, r9
 80062b2:	f7fa f909 	bl	80004c8 <__aeabi_dmul>
 80062b6:	4632      	mov	r2, r6
 80062b8:	463b      	mov	r3, r7
 80062ba:	f7f9 ff4f 	bl	800015c <__adddf3>
 80062be:	4602      	mov	r2, r0
 80062c0:	460b      	mov	r3, r1
 80062c2:	4620      	mov	r0, r4
 80062c4:	4629      	mov	r1, r5
 80062c6:	f7f9 ff47 	bl	8000158 <__aeabi_dsub>
 80062ca:	4642      	mov	r2, r8
 80062cc:	464b      	mov	r3, r9
 80062ce:	f7f9 ff43 	bl	8000158 <__aeabi_dsub>
 80062d2:	4602      	mov	r2, r0
 80062d4:	460b      	mov	r3, r1
 80062d6:	2000      	movs	r0, #0
 80062d8:	4939      	ldr	r1, [pc, #228]	; (80063c0 <__ieee754_pow+0xa08>)
 80062da:	f7f9 ff3d 	bl	8000158 <__aeabi_dsub>
 80062de:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80062e2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80062e6:	da2b      	bge.n	8006340 <__ieee754_pow+0x988>
 80062e8:	4652      	mov	r2, sl
 80062ea:	f000 f9b9 	bl	8006660 <scalbn>
 80062ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062f2:	f7ff bbf6 	b.w	8005ae2 <__ieee754_pow+0x12a>
 80062f6:	4b33      	ldr	r3, [pc, #204]	; (80063c4 <__ieee754_pow+0xa0c>)
 80062f8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80062fc:	429f      	cmp	r7, r3
 80062fe:	f77f af13 	ble.w	8006128 <__ieee754_pow+0x770>
 8006302:	4b31      	ldr	r3, [pc, #196]	; (80063c8 <__ieee754_pow+0xa10>)
 8006304:	440b      	add	r3, r1
 8006306:	4303      	orrs	r3, r0
 8006308:	d00b      	beq.n	8006322 <__ieee754_pow+0x96a>
 800630a:	a329      	add	r3, pc, #164	; (adr r3, 80063b0 <__ieee754_pow+0x9f8>)
 800630c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006310:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006314:	f7fa f8d8 	bl	80004c8 <__aeabi_dmul>
 8006318:	a325      	add	r3, pc, #148	; (adr r3, 80063b0 <__ieee754_pow+0x9f8>)
 800631a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800631e:	f7ff bbe0 	b.w	8005ae2 <__ieee754_pow+0x12a>
 8006322:	4622      	mov	r2, r4
 8006324:	462b      	mov	r3, r5
 8006326:	f7f9 ff17 	bl	8000158 <__aeabi_dsub>
 800632a:	4642      	mov	r2, r8
 800632c:	464b      	mov	r3, r9
 800632e:	f7fa fb51 	bl	80009d4 <__aeabi_dcmpge>
 8006332:	2800      	cmp	r0, #0
 8006334:	f43f aef8 	beq.w	8006128 <__ieee754_pow+0x770>
 8006338:	e7e7      	b.n	800630a <__ieee754_pow+0x952>
 800633a:	f04f 0a00 	mov.w	sl, #0
 800633e:	e71e      	b.n	800617e <__ieee754_pow+0x7c6>
 8006340:	4621      	mov	r1, r4
 8006342:	e7d4      	b.n	80062ee <__ieee754_pow+0x936>
 8006344:	f04f 0b00 	mov.w	fp, #0
 8006348:	f8df c074 	ldr.w	ip, [pc, #116]	; 80063c0 <__ieee754_pow+0xa08>
 800634c:	f7ff bb95 	b.w	8005a7a <__ieee754_pow+0xc2>
 8006350:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8006354:	f7ff bb91 	b.w	8005a7a <__ieee754_pow+0xc2>
 8006358:	4638      	mov	r0, r7
 800635a:	4641      	mov	r1, r8
 800635c:	f7ff bbc3 	b.w	8005ae6 <__ieee754_pow+0x12e>
 8006360:	9200      	str	r2, [sp, #0]
 8006362:	f7ff bb9f 	b.w	8005aa4 <__ieee754_pow+0xec>
 8006366:	bf00      	nop
 8006368:	652b82fe 	.word	0x652b82fe
 800636c:	3c971547 	.word	0x3c971547
 8006370:	00000000 	.word	0x00000000
 8006374:	3fe62e43 	.word	0x3fe62e43
 8006378:	fefa39ef 	.word	0xfefa39ef
 800637c:	3fe62e42 	.word	0x3fe62e42
 8006380:	0ca86c39 	.word	0x0ca86c39
 8006384:	be205c61 	.word	0xbe205c61
 8006388:	72bea4d0 	.word	0x72bea4d0
 800638c:	3e663769 	.word	0x3e663769
 8006390:	c5d26bf1 	.word	0xc5d26bf1
 8006394:	3ebbbd41 	.word	0x3ebbbd41
 8006398:	af25de2c 	.word	0xaf25de2c
 800639c:	3f11566a 	.word	0x3f11566a
 80063a0:	16bebd93 	.word	0x16bebd93
 80063a4:	3f66c16c 	.word	0x3f66c16c
 80063a8:	5555553e 	.word	0x5555553e
 80063ac:	3fc55555 	.word	0x3fc55555
 80063b0:	c2f8f359 	.word	0xc2f8f359
 80063b4:	01a56e1f 	.word	0x01a56e1f
 80063b8:	3fe00000 	.word	0x3fe00000
 80063bc:	000fffff 	.word	0x000fffff
 80063c0:	3ff00000 	.word	0x3ff00000
 80063c4:	4090cbff 	.word	0x4090cbff
 80063c8:	3f6f3400 	.word	0x3f6f3400

080063cc <__ieee754_sqrt>:
 80063cc:	4b54      	ldr	r3, [pc, #336]	; (8006520 <__ieee754_sqrt+0x154>)
 80063ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063d2:	438b      	bics	r3, r1
 80063d4:	4606      	mov	r6, r0
 80063d6:	460d      	mov	r5, r1
 80063d8:	460a      	mov	r2, r1
 80063da:	460c      	mov	r4, r1
 80063dc:	d10f      	bne.n	80063fe <__ieee754_sqrt+0x32>
 80063de:	4602      	mov	r2, r0
 80063e0:	460b      	mov	r3, r1
 80063e2:	f7fa f871 	bl	80004c8 <__aeabi_dmul>
 80063e6:	4602      	mov	r2, r0
 80063e8:	460b      	mov	r3, r1
 80063ea:	4630      	mov	r0, r6
 80063ec:	4629      	mov	r1, r5
 80063ee:	f7f9 feb5 	bl	800015c <__adddf3>
 80063f2:	4606      	mov	r6, r0
 80063f4:	460d      	mov	r5, r1
 80063f6:	4630      	mov	r0, r6
 80063f8:	4629      	mov	r1, r5
 80063fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063fe:	2900      	cmp	r1, #0
 8006400:	4607      	mov	r7, r0
 8006402:	4603      	mov	r3, r0
 8006404:	dc0e      	bgt.n	8006424 <__ieee754_sqrt+0x58>
 8006406:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800640a:	ea5c 0707 	orrs.w	r7, ip, r7
 800640e:	d0f2      	beq.n	80063f6 <__ieee754_sqrt+0x2a>
 8006410:	b141      	cbz	r1, 8006424 <__ieee754_sqrt+0x58>
 8006412:	4602      	mov	r2, r0
 8006414:	460b      	mov	r3, r1
 8006416:	f7f9 fe9f 	bl	8000158 <__aeabi_dsub>
 800641a:	4602      	mov	r2, r0
 800641c:	460b      	mov	r3, r1
 800641e:	f7fa f97d 	bl	800071c <__aeabi_ddiv>
 8006422:	e7e6      	b.n	80063f2 <__ieee754_sqrt+0x26>
 8006424:	1512      	asrs	r2, r2, #20
 8006426:	d074      	beq.n	8006512 <__ieee754_sqrt+0x146>
 8006428:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800642c:	07d5      	lsls	r5, r2, #31
 800642e:	f04f 0500 	mov.w	r5, #0
 8006432:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006436:	bf48      	it	mi
 8006438:	0fd9      	lsrmi	r1, r3, #31
 800643a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800643e:	bf44      	itt	mi
 8006440:	005b      	lslmi	r3, r3, #1
 8006442:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 8006446:	1051      	asrs	r1, r2, #1
 8006448:	0fda      	lsrs	r2, r3, #31
 800644a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800644e:	4628      	mov	r0, r5
 8006450:	2216      	movs	r2, #22
 8006452:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8006456:	005b      	lsls	r3, r3, #1
 8006458:	1987      	adds	r7, r0, r6
 800645a:	42a7      	cmp	r7, r4
 800645c:	bfde      	ittt	le
 800645e:	19b8      	addle	r0, r7, r6
 8006460:	1be4      	suble	r4, r4, r7
 8006462:	19ad      	addle	r5, r5, r6
 8006464:	0fdf      	lsrs	r7, r3, #31
 8006466:	3a01      	subs	r2, #1
 8006468:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800646c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006470:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006474:	d1f0      	bne.n	8006458 <__ieee754_sqrt+0x8c>
 8006476:	f04f 0c20 	mov.w	ip, #32
 800647a:	4696      	mov	lr, r2
 800647c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006480:	4284      	cmp	r4, r0
 8006482:	eb06 070e 	add.w	r7, r6, lr
 8006486:	dc02      	bgt.n	800648e <__ieee754_sqrt+0xc2>
 8006488:	d112      	bne.n	80064b0 <__ieee754_sqrt+0xe4>
 800648a:	429f      	cmp	r7, r3
 800648c:	d810      	bhi.n	80064b0 <__ieee754_sqrt+0xe4>
 800648e:	2f00      	cmp	r7, #0
 8006490:	eb07 0e06 	add.w	lr, r7, r6
 8006494:	da42      	bge.n	800651c <__ieee754_sqrt+0x150>
 8006496:	f1be 0f00 	cmp.w	lr, #0
 800649a:	db3f      	blt.n	800651c <__ieee754_sqrt+0x150>
 800649c:	f100 0801 	add.w	r8, r0, #1
 80064a0:	1a24      	subs	r4, r4, r0
 80064a2:	4640      	mov	r0, r8
 80064a4:	429f      	cmp	r7, r3
 80064a6:	bf88      	it	hi
 80064a8:	f104 34ff 	addhi.w	r4, r4, #4294967295
 80064ac:	1bdb      	subs	r3, r3, r7
 80064ae:	4432      	add	r2, r6
 80064b0:	0064      	lsls	r4, r4, #1
 80064b2:	f1bc 0c01 	subs.w	ip, ip, #1
 80064b6:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 80064ba:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80064be:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80064c2:	d1dd      	bne.n	8006480 <__ieee754_sqrt+0xb4>
 80064c4:	4323      	orrs	r3, r4
 80064c6:	d006      	beq.n	80064d6 <__ieee754_sqrt+0x10a>
 80064c8:	1c54      	adds	r4, r2, #1
 80064ca:	bf0b      	itete	eq
 80064cc:	4662      	moveq	r2, ip
 80064ce:	3201      	addne	r2, #1
 80064d0:	3501      	addeq	r5, #1
 80064d2:	f022 0201 	bicne.w	r2, r2, #1
 80064d6:	106b      	asrs	r3, r5, #1
 80064d8:	0852      	lsrs	r2, r2, #1
 80064da:	07e8      	lsls	r0, r5, #31
 80064dc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80064e0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80064e4:	bf48      	it	mi
 80064e6:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80064ea:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 80064ee:	4616      	mov	r6, r2
 80064f0:	e781      	b.n	80063f6 <__ieee754_sqrt+0x2a>
 80064f2:	0adc      	lsrs	r4, r3, #11
 80064f4:	3915      	subs	r1, #21
 80064f6:	055b      	lsls	r3, r3, #21
 80064f8:	2c00      	cmp	r4, #0
 80064fa:	d0fa      	beq.n	80064f2 <__ieee754_sqrt+0x126>
 80064fc:	02e6      	lsls	r6, r4, #11
 80064fe:	d50a      	bpl.n	8006516 <__ieee754_sqrt+0x14a>
 8006500:	f1c2 0020 	rsb	r0, r2, #32
 8006504:	fa23 f000 	lsr.w	r0, r3, r0
 8006508:	1e55      	subs	r5, r2, #1
 800650a:	4093      	lsls	r3, r2
 800650c:	4304      	orrs	r4, r0
 800650e:	1b4a      	subs	r2, r1, r5
 8006510:	e78a      	b.n	8006428 <__ieee754_sqrt+0x5c>
 8006512:	4611      	mov	r1, r2
 8006514:	e7f0      	b.n	80064f8 <__ieee754_sqrt+0x12c>
 8006516:	0064      	lsls	r4, r4, #1
 8006518:	3201      	adds	r2, #1
 800651a:	e7ef      	b.n	80064fc <__ieee754_sqrt+0x130>
 800651c:	4680      	mov	r8, r0
 800651e:	e7bf      	b.n	80064a0 <__ieee754_sqrt+0xd4>
 8006520:	7ff00000 	.word	0x7ff00000

08006524 <fabs>:
 8006524:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006528:	4619      	mov	r1, r3
 800652a:	4770      	bx	lr

0800652c <finite>:
 800652c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8006530:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 8006534:	0fc0      	lsrs	r0, r0, #31
 8006536:	4770      	bx	lr

08006538 <matherr>:
 8006538:	2000      	movs	r0, #0
 800653a:	4770      	bx	lr

0800653c <nan>:
 800653c:	2000      	movs	r0, #0
 800653e:	4901      	ldr	r1, [pc, #4]	; (8006544 <nan+0x8>)
 8006540:	4770      	bx	lr
 8006542:	bf00      	nop
 8006544:	7ff80000 	.word	0x7ff80000

08006548 <rint>:
 8006548:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800654a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800654e:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 8006552:	f1bc 0f13 	cmp.w	ip, #19
 8006556:	4604      	mov	r4, r0
 8006558:	460d      	mov	r5, r1
 800655a:	460b      	mov	r3, r1
 800655c:	4606      	mov	r6, r0
 800655e:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 8006562:	dc5a      	bgt.n	800661a <rint+0xd2>
 8006564:	f1bc 0f00 	cmp.w	ip, #0
 8006568:	da2b      	bge.n	80065c2 <rint+0x7a>
 800656a:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800656e:	4302      	orrs	r2, r0
 8006570:	d023      	beq.n	80065ba <rint+0x72>
 8006572:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8006576:	4302      	orrs	r2, r0
 8006578:	4256      	negs	r6, r2
 800657a:	4316      	orrs	r6, r2
 800657c:	0c4b      	lsrs	r3, r1, #17
 800657e:	0b36      	lsrs	r6, r6, #12
 8006580:	4934      	ldr	r1, [pc, #208]	; (8006654 <rint+0x10c>)
 8006582:	045b      	lsls	r3, r3, #17
 8006584:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 8006588:	ea46 0503 	orr.w	r5, r6, r3
 800658c:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8006590:	4602      	mov	r2, r0
 8006592:	462b      	mov	r3, r5
 8006594:	e9d1 4500 	ldrd	r4, r5, [r1]
 8006598:	4620      	mov	r0, r4
 800659a:	4629      	mov	r1, r5
 800659c:	f7f9 fdde 	bl	800015c <__adddf3>
 80065a0:	e9cd 0100 	strd	r0, r1, [sp]
 80065a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80065a8:	462b      	mov	r3, r5
 80065aa:	4622      	mov	r2, r4
 80065ac:	f7f9 fdd4 	bl	8000158 <__aeabi_dsub>
 80065b0:	4604      	mov	r4, r0
 80065b2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80065b6:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 80065ba:	4620      	mov	r0, r4
 80065bc:	4629      	mov	r1, r5
 80065be:	b003      	add	sp, #12
 80065c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065c2:	4a25      	ldr	r2, [pc, #148]	; (8006658 <rint+0x110>)
 80065c4:	fa42 f20c 	asr.w	r2, r2, ip
 80065c8:	4011      	ands	r1, r2
 80065ca:	4301      	orrs	r1, r0
 80065cc:	d0f5      	beq.n	80065ba <rint+0x72>
 80065ce:	0852      	lsrs	r2, r2, #1
 80065d0:	ea05 0102 	and.w	r1, r5, r2
 80065d4:	ea50 0601 	orrs.w	r6, r0, r1
 80065d8:	d00c      	beq.n	80065f4 <rint+0xac>
 80065da:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80065de:	f1bc 0f13 	cmp.w	ip, #19
 80065e2:	bf0c      	ite	eq
 80065e4:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 80065e8:	2600      	movne	r6, #0
 80065ea:	ea25 0202 	bic.w	r2, r5, r2
 80065ee:	fa43 f30c 	asr.w	r3, r3, ip
 80065f2:	4313      	orrs	r3, r2
 80065f4:	4917      	ldr	r1, [pc, #92]	; (8006654 <rint+0x10c>)
 80065f6:	4632      	mov	r2, r6
 80065f8:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 80065fc:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006600:	4620      	mov	r0, r4
 8006602:	4629      	mov	r1, r5
 8006604:	f7f9 fdaa 	bl	800015c <__adddf3>
 8006608:	e9cd 0100 	strd	r0, r1, [sp]
 800660c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006610:	4622      	mov	r2, r4
 8006612:	462b      	mov	r3, r5
 8006614:	f7f9 fda0 	bl	8000158 <__aeabi_dsub>
 8006618:	e008      	b.n	800662c <rint+0xe4>
 800661a:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 800661e:	dd08      	ble.n	8006632 <rint+0xea>
 8006620:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 8006624:	d1c9      	bne.n	80065ba <rint+0x72>
 8006626:	4602      	mov	r2, r0
 8006628:	f7f9 fd98 	bl	800015c <__adddf3>
 800662c:	4604      	mov	r4, r0
 800662e:	460d      	mov	r5, r1
 8006630:	e7c3      	b.n	80065ba <rint+0x72>
 8006632:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 8006636:	f04f 32ff 	mov.w	r2, #4294967295
 800663a:	40ca      	lsrs	r2, r1
 800663c:	4210      	tst	r0, r2
 800663e:	d0bc      	beq.n	80065ba <rint+0x72>
 8006640:	0852      	lsrs	r2, r2, #1
 8006642:	4210      	tst	r0, r2
 8006644:	bf1f      	itttt	ne
 8006646:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 800664a:	ea20 0202 	bicne.w	r2, r0, r2
 800664e:	410e      	asrne	r6, r1
 8006650:	4316      	orrne	r6, r2
 8006652:	e7cf      	b.n	80065f4 <rint+0xac>
 8006654:	08009620 	.word	0x08009620
 8006658:	000fffff 	.word	0x000fffff
 800665c:	00000000 	.word	0x00000000

08006660 <scalbn>:
 8006660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006662:	4616      	mov	r6, r2
 8006664:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006668:	4604      	mov	r4, r0
 800666a:	460d      	mov	r5, r1
 800666c:	460b      	mov	r3, r1
 800666e:	b982      	cbnz	r2, 8006692 <scalbn+0x32>
 8006670:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006674:	4303      	orrs	r3, r0
 8006676:	d034      	beq.n	80066e2 <scalbn+0x82>
 8006678:	4b2d      	ldr	r3, [pc, #180]	; (8006730 <scalbn+0xd0>)
 800667a:	2200      	movs	r2, #0
 800667c:	f7f9 ff24 	bl	80004c8 <__aeabi_dmul>
 8006680:	4b2c      	ldr	r3, [pc, #176]	; (8006734 <scalbn+0xd4>)
 8006682:	4604      	mov	r4, r0
 8006684:	429e      	cmp	r6, r3
 8006686:	460d      	mov	r5, r1
 8006688:	da0d      	bge.n	80066a6 <scalbn+0x46>
 800668a:	a325      	add	r3, pc, #148	; (adr r3, 8006720 <scalbn+0xc0>)
 800668c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006690:	e01c      	b.n	80066cc <scalbn+0x6c>
 8006692:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8006696:	42ba      	cmp	r2, r7
 8006698:	d109      	bne.n	80066ae <scalbn+0x4e>
 800669a:	4602      	mov	r2, r0
 800669c:	f7f9 fd5e 	bl	800015c <__adddf3>
 80066a0:	4604      	mov	r4, r0
 80066a2:	460d      	mov	r5, r1
 80066a4:	e01d      	b.n	80066e2 <scalbn+0x82>
 80066a6:	460b      	mov	r3, r1
 80066a8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80066ac:	3a36      	subs	r2, #54	; 0x36
 80066ae:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80066b2:	4432      	add	r2, r6
 80066b4:	428a      	cmp	r2, r1
 80066b6:	dd0c      	ble.n	80066d2 <scalbn+0x72>
 80066b8:	4622      	mov	r2, r4
 80066ba:	462b      	mov	r3, r5
 80066bc:	a11a      	add	r1, pc, #104	; (adr r1, 8006728 <scalbn+0xc8>)
 80066be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066c2:	f000 f83b 	bl	800673c <copysign>
 80066c6:	a318      	add	r3, pc, #96	; (adr r3, 8006728 <scalbn+0xc8>)
 80066c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066cc:	f7f9 fefc 	bl	80004c8 <__aeabi_dmul>
 80066d0:	e7e6      	b.n	80066a0 <scalbn+0x40>
 80066d2:	2a00      	cmp	r2, #0
 80066d4:	dd08      	ble.n	80066e8 <scalbn+0x88>
 80066d6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80066da:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80066de:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80066e2:	4620      	mov	r0, r4
 80066e4:	4629      	mov	r1, r5
 80066e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066e8:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80066ec:	da0b      	bge.n	8006706 <scalbn+0xa6>
 80066ee:	f24c 3350 	movw	r3, #50000	; 0xc350
 80066f2:	429e      	cmp	r6, r3
 80066f4:	4622      	mov	r2, r4
 80066f6:	462b      	mov	r3, r5
 80066f8:	dce0      	bgt.n	80066bc <scalbn+0x5c>
 80066fa:	a109      	add	r1, pc, #36	; (adr r1, 8006720 <scalbn+0xc0>)
 80066fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006700:	f000 f81c 	bl	800673c <copysign>
 8006704:	e7c1      	b.n	800668a <scalbn+0x2a>
 8006706:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800670a:	3236      	adds	r2, #54	; 0x36
 800670c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006710:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006714:	4620      	mov	r0, r4
 8006716:	4629      	mov	r1, r5
 8006718:	2200      	movs	r2, #0
 800671a:	4b07      	ldr	r3, [pc, #28]	; (8006738 <scalbn+0xd8>)
 800671c:	e7d6      	b.n	80066cc <scalbn+0x6c>
 800671e:	bf00      	nop
 8006720:	c2f8f359 	.word	0xc2f8f359
 8006724:	01a56e1f 	.word	0x01a56e1f
 8006728:	8800759c 	.word	0x8800759c
 800672c:	7e37e43c 	.word	0x7e37e43c
 8006730:	43500000 	.word	0x43500000
 8006734:	ffff3cb0 	.word	0xffff3cb0
 8006738:	3c900000 	.word	0x3c900000

0800673c <copysign>:
 800673c:	b530      	push	{r4, r5, lr}
 800673e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8006742:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006746:	ea42 0503 	orr.w	r5, r2, r3
 800674a:	4629      	mov	r1, r5
 800674c:	bd30      	pop	{r4, r5, pc}
	...

08006750 <_init>:
 8006750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006752:	bf00      	nop
 8006754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006756:	bc08      	pop	{r3}
 8006758:	469e      	mov	lr, r3
 800675a:	4770      	bx	lr

0800675c <_fini>:
 800675c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800675e:	bf00      	nop
 8006760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006762:	bc08      	pop	{r3}
 8006764:	469e      	mov	lr, r3
 8006766:	4770      	bx	lr
